{"id": "28418775-f475-4d0e-89a3-fae23ff3f7bf", "name": "Coffee Table", "instruction": "Create a coffee table.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Scale along X-axis\ntable_top.scale[1] = 1  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = 0.6\nleg_radius = 0.05\nleg_positions = [(-1.8, -0.9, leg_height / 2), (1.8, -0.9, leg_height / 2), (-1.8, 0.9, leg_height / 2), (1.8, 0.9, leg_height / 2)]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.147338521055633, "unit_n": 2, "param_ratio": 4.5}
{"id": "e94f2276-8906-426b-956e-37a7c667c664", "name": "Dining Table", "instruction": "Design a dining table with a rectangular top and four legs. The table should be large enough to seat six people comfortably.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Scale along X-axis\ntable_top.scale[1] = 1  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = 0.6\nleg_radius = 0.05\nleg_positions = [(-1.9, -0.9, leg_height / 2), (1.9, -0.9, leg_height / 2), (-1.9, 0.9, leg_height / 2), (1.9, 0.9, leg_height / 2)]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.21523550043143, "unit_n": 2, "param_ratio": 4.5}
{"id": "38bf09e3-800c-48be-b00b-be824526659c", "name": "Coffee Table", "instruction": "Can you describe the features of a coffee table that has a rectangular top and four legs, each with a simple design?", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"WoodColor\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Scale along the X-axis\ntable_top.scale[1] = 1  # Scale along the Y-axis\ntable_top.scale[2] = 0.1  # Scale along the Z-axis\ntable_top.name = \"TableTop\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-1.8, -0.9, 0.35), (1.8, -0.9, 0.35), (-1.8, 0.9, 0.35), (1.8, 0.9, 0.35)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 1.5  # Scale along the Z-axis to make it a leg\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1343617096659804, "unit_n": 2, "param_ratio": 5.0}
{"id": "584430ee-8710-4cb8-8fe8-badf1713af5d", "name": "Coffee Grinder", "instruction": "Develop a 3D model of a coffee grinder. The grinder should have a cylindrical body with a removable lid at the top. Inside, there should be grinding blades or burrs. Include a crank handle on the side for manual grinding. The ground coffee should collect in a small chamber at the bottom, which can be accessed by a sliding door. The grinder should be shown in both open and closed states.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.4, 0.25, 0.1, 1)  # Brown wood color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal)\n\n# Step 4: Create the Grinding Blades\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0, depth=0.5, location=(0, 0, 1.75))\nblades = bpy.context.object\nblades.name = \"Blades\"\nblades.data.materials.append(metal)\n\n# Step 5: Create the Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.1, 0, 2.1), rotation=(0, math.pi/2, 0))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.6, 0, 2.1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)\n\n# Step 6: Create the Ground Coffee Chamber\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, -0.25))\nchamber = bpy.context.object\nchamber.name = \"Chamber\"\nchamber.data.materials.append(metal)\n\n# Step 7: Create the Sliding Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, -0.25))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.data.materials.append(metal)\n\n# Step 8: Duplicate the Grinder for Open State\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.duplicate_move(TRANSFORM_OT_translate={\"value\":(3, 0, 0)})\n\n# Move the lid and door to show open state\nbpy.data.objects[\"Lid.001\"].location.z += 0.5\nbpy.data.objects[\"Door.001\"].location.y += 0.5", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.461936719503401, "unit_n": 7, "param_ratio": 6.571428571428571}
{"id": "95fda6ee-abc3-47f4-80ae-38e4165546fc", "name": "Passport Holder", "instruction": "Please generate a simple passport holder with a pocket for sliding in the passport and an additional slot for cards or boarding passes.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nholder_color = bpy.data.materials.new(name=\"HolderColor\")\nholder_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Main Holder\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_holder = bpy.context.object\nmain_holder.name = \"Main Holder\"\nmain_holder.scale = (1, 0.1, 1.5)\nmain_holder.data.materials.append(holder_color)\n\n# Step 3: Create the Passport Pocket\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.15, 0.5))\npassport_pocket = bpy.context.object\npassport_pocket.name = \"Passport Pocket\"\npassport_pocket.scale = (0.95, 0.05, 0.7)\npassport_pocket.data.materials.append(holder_color)\n\n# Step 4: Create the Card Slot\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.15, -0.75))\ncard_slot = bpy.context.object\ncard_slot.name = \"Card Slot\"\ncard_slot.scale = (0.95, 0.05, 0.3)\ncard_slot.data.materials.append(holder_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.0625293002546226, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "b6cb5a76-2638-4c9d-902a-8195093dceeb", "name": "Orange", "instruction": "Design an orange that is spherical with a diameter of about 7 centimeters. The surface should have a slightly textured appearance. Add a small, round stem at the top.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\norange_color = bpy.data.materials.new(name=\"Orange\")\norange_color.diffuse_color = (1.0, 0.55, 0.0, 1)  # Orange color\n\ngreen_color = bpy.data.materials.new(name=\"Green\")\ngreen_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color\n\n# Step 2: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=3.5, location=(0, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)\n\n# Add texture to the orange\nbpy.ops.object.shade_smooth()\nbpy.ops.object.modifier_add(type='DISPLACE')\ntexture = bpy.data.textures.new(\"OrangeTexture\", type='CLOUDS')\norange.modifiers[\"Displace\"].texture = texture\norange.modifiers[\"Displace\"].strength = 0.1\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 3.5))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(green_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.243346510748552, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "27fef177-eaba-49ae-9954-a4fc48370c61", "name": "Toiletry Bag", "instruction": "Design a toiletry bag.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbag_color = bpy.data.materials.new(name=\"BagColor\")\nbag_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Body of the Bag\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1, 0.5, 0.5)\nmain_body.data.materials.append(bag_color)\n\n# Step 3: Create the Zipper\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0.55, 1.5), rotation=(0, math.pi/2, 0))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.data.materials.append(bag_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, -0.75, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(bag_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.874430705125502, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "4f21f745-d1d6-41b9-8882-e1377807e3d6", "name": "Chessboard", "instruction": "Create a chessboard with an 8x8 grid. Each square should alternate between two contrasting colors.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (1, 1, 1, 1)  # White color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nfor i in range(8):\n    for j in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i, j, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(color1)\n        else:\n            square.data.materials.append(color2)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.21875}
{"id": "2f034a01-5f23-4d87-b95b-d46a09f374e2", "name": "Pet Bed", "instruction": "Could you create a simple pet bed for a small dog or cat?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Sides of the Bed\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.15))\nsides = bpy.context.object\nsides.name = \"Sides\"\nsides.data.materials.append(bed_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.437814559571418, "unit_n": 2, "param_ratio": 7.5}
{"id": "d5231c01-8835-4e3c-b6c9-6356896b5b0d", "name": "Umbrella", "instruction": "Can you create an umbrella? It should have a collapsible frame and a fabric canopy.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nfabric = bpy.data.materials.new(name=\"Fabric\")\nfabric.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red fabric color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 3: Create the Collapsible Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.5, location=(0, 0, 0.25))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(metal)\n\n# Step 4: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(radius1=1, radius2=0, depth=0.5, location=(0, 0, 0.5))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(fabric)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3704364469499515, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "bcfe6f0b-8a90-48c7-9692-225f0cc30f0f", "name": "Travel Wallet", "instruction": "Can you create a travel wallet?", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Wallet\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.name = \"WalletBody\"\nwallet_body.scale[0] = 1.5  # Length\nwallet_body.scale[1] = 0.1  # Thickness\nwallet_body.scale[2] = 1  # Height\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create the Inner Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.05, 0.5))\ninner_pocket = bpy.context.object\ninner_pocket.name = \"InnerPocket\"\ninner_pocket.scale[0] = 1.4  # Length\ninner_pocket.scale[1] = 0.05  # Thickness\ninner_pocket.scale[2] = 0.4  # Height\ninner_pocket.data.materials.append(wallet_color)\n\n# Step 4: Create the Card Slots\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.1, -0.5 + i * 0.5))\n    card_slot = bpy.context.object\n    card_slot.name = f\"CardSlot {i + 1}\"\n    card_slot.scale[0] = 1.4  # Length\n    card_slot.scale[1] = 0.05  # Thickness\n    card_slot.scale[2] = 0.1  # Height\n    card_slot.data.materials.append(wallet_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.550250018001948, "unit_n": 5, "param_ratio": 3.4}
{"id": "7532fbc1-648e-4f7c-b768-a208cd68927f", "name": "Power Strip", "instruction": "Design a 3D model of a power strip. It should have a rectangular body with six outlets arranged in a single row. Include a power switch at one end and a power cord extending from the other end.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\noutlet_color = bpy.data.materials.new(name=\"Outlet Color\")\noutlet_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\ncord_color = bpy.data.materials.new(name=\"Cord Color\")\ncord_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (2, 0.5, 0.2)\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    x = -1.5 + i * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(x, 0, 0.25))\n    outlet = bpy.context.object\n    outlet.scale = (0.2, 0.1, 0.05)\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(1.8, 0, 0.25))\nswitch = bpy.context.object\nswitch.scale = (0.2, 0.1, 0.05)\nswitch.name = \"Power Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Power Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-2.2, 0, 0))\ncord = bpy.context.object\ncord.rotation_euler = (0, 1.5708, 0)  # Rotate to make it horizontal\ncord.name = \"Power Cord\"\ncord.data.materials.append(cord_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.901576619316399, "unit_n": 9, "param_ratio": 4.111111111111111}
{"id": "bb46e315-b962-4471-a704-61373911bd46", "name": "Jump Rope", "instruction": "Visualize a long, thin rope. Attach a handle on each end of the rope for gripping.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrope_color = bpy.data.materials.new(name=\"RopeColor\")\nrope_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the rope\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the handles\n\n# Step 2: Create the Rope\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=5, location=(0, 0, 0))\nrope = bpy.context.object\nrope.name = \"Rope\"\nrope.data.materials.append(rope_color)\n\n# Step 3: Create the Handles\n# Handle 1\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 2.6))\nhandle1 = bpy.context.object\nhandle1.name = \"Handle1\"\nhandle1.data.materials.append(handle_color)\n\n# Handle 2\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -2.6))\nhandle2 = bpy.context.object\nhandle2.name = \"Handle2\"\nhandle2.data.materials.append(handle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.3474573843474715, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "0b1d4759-350c-4144-9a97-1f6d1bc7acd1", "name": "Sushi Roll", "instruction": "Can you create a 3D model of a sushi roll? It should have a nori seaweed wrap on the outside, with visible layers of rice, fish, and vegetables inside. Show a cross-section to highlight the ingredients. The roll should look fresh and appetizing, ready to be enjoyed.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nnori_color = bpy.data.materials.new(name=\"Nori\")\nnori_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark seaweed color\nrice_color = bpy.data.materials.new(name=\"Rice\")\nrice_color.diffuse_color = (1, 1, 1, 1)  # White rice color\nfish_color = bpy.data.materials.new(name=\"Fish\")\nfish_color.diffuse_color = (1, 0.5, 0.5, 1)  # Light pink fish color\nvegetable_color = bpy.data.materials.new(name=\"Vegetable\")\nvegetable_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green vegetable color\n\n# Step 2: Create the Nori Wrap\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nnori_wrap = bpy.context.object\nnori_wrap.name = \"Nori Wrap\"\nnori_wrap.data.materials.append(nori_color)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice_color)\n\n# Step 4: Create the Fish Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=2, location=(0, 0, 0))\nfish_layer = bpy.context.object\nfish_layer.name = \"Fish Layer\"\nfish_layer.data.materials.append(fish_color)\n\n# Step 5: Create the Vegetable Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2, location=(0, 0, 0))\nvegetable_layer = bpy.context.object\nvegetable_layer.name = \"Vegetable Layer\"\nvegetable_layer.data.materials.append(vegetable_color)\n\n# Step 6: Slice the Sushi Roll to Show Cross-Section\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = nori_wrap\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bisect(plane_co=(0, 0, 0), plane_no=(1, 0, 0))\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.835678759426974, "unit_n": 4, "param_ratio": 10.0}
{"id": "91028c6c-216c-418b-ac21-0c5eedbaeb96", "name": "Floor Lamp", "instruction": "Construct a 3D model of a floor lamp. The lamp should have a tall, slender pole with a circular base and a simple lampshade at the top. The total height should be 5 feet.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the pole and base\nshade_color = bpy.data.materials.new(name=\"Shade\")\nshade_color.diffuse_color = (1, 1, 1, 1)  # White color for the lampshade\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.775))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(metal_color)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.2, radius2=0.1, depth=0.3, location=(0, 0, 1.55))\nshade = bpy.context.object\nshade.name = \"Lampshade\"\nshade.data.materials.append(shade_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.061162440028866, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "e2429541-1349-4c26-8acd-2051e98fb257", "name": "Laptop", "instruction": "Generate a 3D model of a laptop with a flat screen and a keyboard. The screen should be open at a 90-degree angle.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nkeyboard_color = bpy.data.materials.new(name=\"Keyboard Color\")\nkeyboard_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray for the keyboard\n\n# Step 2: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 1, 1))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.rotation_euler = (math.radians(90), 0, 0)\nscreen.data.materials.append(screen_color)\n\n# Step 3: Create the Keyboard\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(keyboard_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.7328679513998633, "unit_n": 2, "param_ratio": 9.0}
{"id": "0c3e1226-3fa2-4ba9-bc50-ee922e2fabbf", "name": "Winter Jacket", "instruction": "Design a winter jacket with a hood and multiple pockets. Compare it to a raincoat in terms of length and pocket placement.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\njacket_color = bpy.data.materials.new(name=\"JacketColor\")\njacket_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Jacket Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\njacket_body = bpy.context.object\njacket_body.name = \"JacketBody\"\njacket_body.scale = (1, 0.5, 1.5)  # Adjusting the scale to make it jacket-like\njacket_body.data.materials.append(jacket_color)\n\n# Step 3: Create the Hood\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 2.5))\nhood = bpy.context.object\nhood.name = \"Hood\"\nhood.scale = (1, 0.5, 1)  # Adjusting the scale to make it hood-like\nhood.data.materials.append(jacket_color)\n\n# Step 4: Create the Pockets\npocket_positions = [(-0.5, 0.55, 0.5), (0.5, 0.55, 0.5), (-0.5, 0.55, -0.5), (0.5, 0.55, -0.5)]\nfor i, pos in enumerate(pocket_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=pos)\n    pocket = bpy.context.object\n    pocket.name = f\"Pocket {i + 1}\"\n    pocket.scale = (1, 0.1, 1)  # Adjusting the scale to make it pocket-like\n    pocket.data.materials.append(jacket_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.055626731429724, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "33d03a80-1f43-472b-b276-a68c4fe9e456", "name": "Frisbee", "instruction": "Create a frisbee. It should be circular and have a slight curve to its shape for aerodynamics. The frisbee should be a single solid color.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nfrisbee_color = bpy.data.materials.new(name=\"Frisbee Color\")\nfrisbee_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Solid color (e.g., red)\n\n# Step 2: Create the Frisbee\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nfrisbee = bpy.context.object\nfrisbee.name = \"Frisbee\"\nfrisbee.data.materials.append(frisbee_color)\n\n# Step 3: Add a slight curve to the shape\nbpy.ops.object.modifier_add(type='SIMPLE_DEFORM')\nfrisbee.modifiers[\"SimpleDeform\"].deform_method = 'BEND'\nfrisbee.modifiers[\"SimpleDeform\"].angle = 0.2  # Slight curve for aerodynamics\n\n# Apply the modifier\nbpy.ops.object.modifier_apply(modifier=\"SimpleDeform\")", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 2, "param_ratio": 5.5}
{"id": "85d95f43-f234-404f-8ea8-d95d07fbe218", "name": "Pizza", "instruction": "Can you create a 3D model of a pizza?", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.737634986607823, "unit_n": 3, "param_ratio": 10.0}
{"id": "ad36f27f-c888-4826-bf29-ec32bd009bb4", "name": "Top Hat", "instruction": "Design a top hat suitable for a magician's performance. It should have a tall, flat crown and a wide brim. The hat must convey a sense of mystery and showmanship without any specific embellishments.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2.5, location=(0, 0, 1.25))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(black)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499659, "unit_n": 2, "param_ratio": 7.5}
{"id": "947953a8-4666-4c91-88b3-bc6c34a8c66b", "name": "Screwdriver", "instruction": "Generate a 3D model of a screwdriver. It should have a flat head and an ergonomic handle.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.5, 1)  # Dark blue color for handle\n\n# Step 2: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 3: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 1.5))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[1] = 0.02  # Flatten the head\nhead.data.materials.append(metal_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.164625962890904, "unit_n": 3, "param_ratio": 8.0}
{"id": "6697d3cd-9604-489a-8131-d661bea7dced", "name": "Suitcase", "instruction": "Please create a 3D model of a suitcase. It should have a handle on top, wheels on the bottom, and a zipper running along the edge. The suitcase should be upright, with the handle extended.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsuitcase = bpy.context.object\nsuitcase.name = \"Suitcase\"\nsuitcase.scale = (0.5, 0.2, 1)\nsuitcase.data.materials.append(suitcase_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 2.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (0, 1.57, 0)  # Rotate to be horizontal\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.4 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.25, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler = (1.57, 0, 0)  # Rotate to be horizontal\n    wheel.data.materials.append(wheel_color)\n\n# Step 5: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.25, 1))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.5, 0.02, 1)\nzipper.data.materials.append(zipper_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.4236621005394148, "unit_n": 5, "param_ratio": 7.6}
{"id": "94e57317-8f28-4a16-8584-55d6e1c7a870", "name": "Trash Bin", "instruction": "Show me a trash bin with a foot pedal for opening the lid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbin_color = bpy.data.materials.new(name=\"Bin Color\")\nbin_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\npedal_color = bpy.data.materials.new(name=\"Pedal Color\")\npedal_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Trash Bin Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbin_body = bpy.context.object\nbin_body.name = \"Trash Bin Body\"\nbin_body.data.materials.append(bin_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(bin_color)\n\n# Step 4: Create the Foot Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.5, 0, 0.1))\npedal = bpy.context.object\npedal.name = \"Foot Pedal\"\npedal.scale = (1, 0.5, 0.2)\npedal.data.materials.append(pedal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.9536837224103416, "unit_n": 3, "param_ratio": 8.0}
{"id": "05c48948-f212-45d6-9c35-e90a0d760a03", "name": "Centrifuge Machine", "instruction": "Could you generate a 3D model of a centrifuge machine used in laboratories? The machine should have a cylindrical body with a lid on top. Include a digital display and control buttons on the front. The interior should have a rotor with slots for holding sample tubes.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\ndisplay_color = bpy.data.materials.new(name=\"DisplayColor\")\ndisplay_color.diffuse_color = (0, 0, 1, 1)  # Blue color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.8, 0, 0, 1)  # Red color\nrotor_color = bpy.data.materials.new(name=\"RotorColor\")\nrotor_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 1.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Display\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 1.05, 0.9))\ndisplay = bpy.context.object\ndisplay.scale[1] = 0.05\ndisplay.name = \"Display\"\ndisplay.data.materials.append(display_color)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.2 + i * 0.2, 1.05, 0.7))\n    button = bpy.context.object\n    button.scale[1] = 0.05\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 6: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.75))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 7: Create the Slots for Sample Tubes\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.35 * math.cos(angle)\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 0.75))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7044552463427687, "unit_n": 15, "param_ratio": 3.533333333333333}
{"id": "31eb9f37-4796-4b0a-b49b-81eb83b0014f", "name": "Wallpaper Pattern", "instruction": "Design a 3D wallpaper pattern featuring interlocking hexagons. The pattern should be repetitive and visually appealing.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhex_color = bpy.data.materials.new(name=\"HexColor\")\nhex_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create a single hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hex_color)\n    return hexagon\n\n# Step 3: Create the pattern\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5\n        y = row * math.sqrt(3)\n        if col % 2 == 1:\n            y += math.sqrt(3) / 2\n        create_hexagon((x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.450002547309176, "unit_n": 1, "param_ratio": 8.0}
{"id": "284a7802-8ec9-4b25-9796-ffc01e631d46", "name": "Sandwich", "instruction": "Design a sandwich with three layers. Ensure there's a slice of cheese in the middle.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.96, 0.76, 0.53, 1)  # Light brown color for bread\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.2, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Cheese Slice\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.2))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a slice\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "54dd4244-6bd6-402b-af3b-13e53be2a231", "name": "Fedora Hat", "instruction": "Design a 3D model of a classic fedora hat. The hat should have a wide brim and a creased crown. Include a hatband around the base of the crown.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nhatband_color = bpy.data.materials.new(name=\"HatbandColor\")\nhatband_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1.2, location=(0, 0, 0.65))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Add Crease to the Crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\ncrown.data.vertices[0].co.z += 0.2\ncrown.data.vertices[1].co.z += 0.2\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.subdivide(number_cuts=10)\nbpy.ops.object.mode_set(mode='OBJECT')\nfor i in range(5, 16):\n    crown.data.vertices[i].co.z += 0.2\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Hatband\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.55))\nhatband = bpy.context.object\nhatband.name = \"Hatband\"\nhatband.data.materials.append(hatband_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.164426091052066, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "c336f88f-1a6d-4d96-ae05-5f8eb736950f", "name": "Laptop", "instruction": "Let's create a laptop. Start with a thin, rectangular base that houses the keyboard. The keyboard should have evenly spaced keys arranged in a standard QWERTY layout. Above the keyboard, place a touchpad centered in the middle. Now, add a screen attached to the base by a hinge. The screen should be a thin rectangle that can be opened and closed. On the sides of the base, add various ports for connectivity, such as USB and HDMI. Finally, ensure the laptop can be closed with the screen lying flat against the keyboard.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nkey_color = bpy.data.materials.new(name=\"Key Color\")\nkey_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium dark gray color\ntouchpad_color = bpy.data.materials.new(name=\"Touchpad Color\")\ntouchpad_color.diffuse_color = (0.25, 0.25, 0.25, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale = (1.5, 1, 0.05)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Keyboard\nfor i in range(5):\n    for j in range(10):\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.65 + j * 0.15, -0.35 + i * 0.15, 0.15))\n        key = bpy.context.object\n        key.name = f\"Key {i * 10 + j + 1}\"\n        key.data.materials.append(key_color)\n\n# Step 4: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.4, 0.15))\ntouchpad = bpy.context.object\ntouchpad.scale = (0.5, 0.3, 0.02)\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(touchpad_color)\n\n# Step 5: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.1))\nscreen = bpy.context.object\nscreen.scale = (1.5, 0.05, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 6: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, -0.55, 0.1))\nhinge = bpy.context.object\nhinge.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees in radians\nhinge.name = \"Hinge\"\nhinge.data.materials.append(base_color)\n\n# Step 7: Create the Ports\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.75, 0.5 - i * 0.2, 0.1))\n    port = bpy.context.object\n    port.scale = (0.05, 0.05, 0.02)\n    port.name = f\"Port {i + 1}\"\n    port.data.materials.append(base_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.4243105455135843, "unit_n": 57, "param_ratio": 0.7894736842105263}
{"id": "5c5cb92f-c5f2-4f74-9c57-29701dd23491", "name": "Desk", "instruction": "Can you create a desk? It should have a flat top and four legs.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the desk\ndesk_color = bpy.data.materials.new(name=\"DeskColor\")\ndesk_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Desk Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ndesk_top = bpy.context.object\ndesk_top.name = \"Desk Top\"\ndesk_top.scale[2] = 0.1  # Make it flat\ndesk_top.data.materials.append(desk_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-0.9, -0.9, 0.5), (0.9, -0.9, 0.5), (-0.9, 0.9, 0.5), (0.9, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 2.5  # Make it long\n    leg.data.materials.append(desk_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6888794541139363, "unit_n": 2, "param_ratio": 5.0}
{"id": "90907a53-943e-4ce6-9f9e-66c28aa830c7", "name": "Interior Wall Mural", "instruction": "Design a wall mural that depicts a serene nature scene with trees, a river, and some mountains in the background.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for trees\nriver_blue = bpy.data.materials.new(name=\"River Blue\")\nriver_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for river\nmountain_gray = bpy.data.materials.new(name=\"Mountain Gray\")\nmountain_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for mountains\n\n# Step 2: Create the Trees\nfor i in range(5):\n    x = i * 2 - 4\n    bpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=2, location=(x, -2, 1))\n    tree = bpy.context.object\n    tree.name = f\"Tree {i + 1}\"\n    tree.data.materials.append(tree_green)\n\n# Step 3: Create the River\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nriver = bpy.context.object\nriver.name = \"River\"\nriver.scale = (1, 0.2, 1)\nriver.data.materials.append(river_blue)\n\n# Step 4: Create the Mountains\nfor i in range(3):\n    x = i * 4 - 4\n    bpy.ops.mesh.primitive_cone_add(radius1=2, depth=4, location=(x, 4, 2))\n    mountain = bpy.context.object\n    mountain.name = f\"Mountain {i + 1}\"\n    mountain.data.materials.append(mountain_gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.670698171055292, "unit_n": 9, "param_ratio": 3.2222222222222223}
{"id": "0b912307-e4ba-4365-bf7b-66ab32db6942", "name": "Syringe", "instruction": "Design a syringe. It has a cylindrical barrel with a plunger and a needle at the end. The barrel has measurement markings along its length.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2.0, location=(0, 0, 1.0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel_mat = bpy.data.materials.new(name=\"BarrelMaterial\")\nbarrel_mat.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbarrel.data.materials.append(barrel_mat)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=2.1, location=(0, 0, 1.05))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger_mat = bpy.data.materials.new(name=\"PlungerMaterial\")\nplunger_mat.diffuse_color = (0.6, 0.6, 0.6, 1)  # Medium gray color\nplunger.data.materials.append(plunger_mat)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, -0.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle_mat = bpy.data.materials.new(name=\"NeedleMaterial\")\nneedle_mat.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nneedle.data.materials.append(needle_mat)\n\n# Step 5: Create Measurement Markings\nmarkings_mat = bpy.data.materials.new(name=\"MarkingsMaterial\")\nmarkings_mat.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.11, 0, 0.2 * i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(markings_mat)\n\n    # Rotate and position the marking correctly\n    marking.rotation_euler = (math.pi / 2, 0, 0)\n    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\n    marking.location = (0.11, 0, 0.2 * i)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.319073669252981, "unit_n": 12, "param_ratio": 3.25}
{"id": "2f32e02d-4c84-4be7-90e9-82ce97b0f520", "name": "Light Bulb", "instruction": "Design a light bulb that has a standard screw base and a clear glass envelope.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_glass = bpy.data.materials.new(name=\"Clear Glass\")\nclear_glass.diffuse_color = (1, 1, 1, 0.1)  # Clear glass color with transparency\n\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\n\n# Step 2: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(clear_glass)\n\n# Step 3: Create the Screw Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0))\nscrew_base = bpy.context.object\nscrew_base.name = \"Screw Base\"\nscrew_base.data.materials.append(metal)\n\n# Step 4: Create the Screw Threads\nfor i in range(5):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.55, minor_radius=0.05, location=(0, 0, -0.4 + i * 0.2))\n    thread = bpy.context.object\n    thread.name = f\"Thread {i + 1}\"\n    thread.data.materials.append(metal)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.927239930522559, "unit_n": 7, "param_ratio": 3.4285714285714284}
{"id": "d2dad314-04f2-435d-aa26-8446e13b6474", "name": "Drum", "instruction": "Design a drum suitable for a beginner. It should have a simple, easy-to-use design.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ndrum_head_color = bpy.data.materials.new(name=\"Drum Head Color\")\ndrum_head_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drum Head (Top)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.75))\ndrum_head_top = bpy.context.object\ndrum_head_top.name = \"Drum Head Top\"\ndrum_head_top.data.materials.append(drum_head_color)\n\n# Step 4: Create the Drum Head (Bottom)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, -0.75))\ndrum_head_bottom = bpy.context.object\ndrum_head_bottom.name = \"Drum Head Bottom\"\ndrum_head_bottom.data.materials.append(drum_head_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.144724830293388, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "34c08562-1651-4e18-b671-b845033fdf7b", "name": "Sandwich", "instruction": "Generate a 3D model of a sandwich. The sandwich should have two slices of bread with visible layers of ingredients such as lettuce, tomato, cheese, and meat. The sandwich should look fresh and ready to eat.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.2, 1)  # Yellow color for cheese\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.7, 0.3, 0.2, 1)  # Brown color for meat\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "d5b55e65-36ff-474d-95dd-06b74f02adbc", "name": "Coffee Grinder", "instruction": "Create a coffee grinder. The grinder should have a cylindrical body with a hand crank on top. Include a compartment at the bottom to collect the ground coffee. Ensure the crank is functional and the grinder has a simple, minimalist design.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Grinder Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Compartment\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, -0.25))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.data.materials.append(wood)\n\n# Step 4: Create the Crank Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 2.1))\ncrank_base = bpy.context.object\ncrank_base.name = \"Crank Base\"\ncrank_base.data.materials.append(metal)\n\n# Step 5: Create the Crank Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.5, 0, 2.2), rotation=(0, math.pi/2, 0))\ncrank_arm = bpy.context.object\ncrank_arm.name = \"Crank Arm\"\ncrank_arm.data.materials.append(metal)\n\n# Step 6: Create the Crank Handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1, 0, 2.2))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(wood)\n", "color_brightness": "Bright", "verify": "human", "entropy": 2.3160185847365162, "unit_n": 5, "param_ratio": 7.4}
{"id": "a0fe9c89-b6e9-45be-82bf-52bed09caacc", "name": "Travel Umbrella", "instruction": "Create a compact travel umbrella. The umbrella should have a collapsible frame and a handle. The canopy should be circular when opened and have eight segments. The handle should have a strap for easy carrying. Include a small button on the handle for opening and closing the umbrella.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\numbrella_color = bpy.data.materials.new(name=\"Umbrella Color\")\numbrella_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 1))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(umbrella_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.15, 0.75))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(handle_color)\n\n# Step 5: Create the Strap\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(0, 0, 0))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(handle_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.3792295596784263, "unit_n": 4, "param_ratio": 7.25}
{"id": "1c13527a-4a61-4ad7-abbc-f8321336901d", "name": "Trash Can", "instruction": "Design a trash can with a lid.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ntrash_can_body = bpy.context.object\ntrash_can_body.name = \"Trash Can Body\"\ntrash_can_body.data.materials.append(gray)\n\n# Step 3: Create the Trash Can Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 2.05))\ntrash_can_lid = bpy.context.object\ntrash_can_lid.name = \"Trash Can Lid\"\ntrash_can_lid.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 7.5}
{"id": "190b5cc6-ca05-4618-b4c8-28c96fbddd1d", "name": "Pizza", "instruction": "Create a 3D model of a pizza with a round base. Add toppings like pepperoni, mushrooms, and olives.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.95, 0.64, 0.37, 1)  # Pizza base color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom Color\")\nmushroom_color.diffuse_color = (0.9, 0.9, 0.8, 1)  # Mushroom color\nolive_color = bpy.data.materials.new(name=\"Olive Color\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Olive color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Add Pepperoni\npepperoni_positions = [(2, 2), (-2, 2), (2, -2), (-2, -2), (0, 3), (3, 0), (-3, 0), (0, -3)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(pos[0], pos[1], 0.15))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 4: Add Mushrooms\nmushroom_positions = [(3, 3), (-3, 3), (3, -3), (-3, -3), (0, 4), (4, 0), (-4, 0), (0, -4)]\nfor pos in mushroom_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(pos[0], pos[1], 0.15))\n    mushroom = bpy.context.object\n    mushroom.name = \"Mushroom\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 5: Add Olives\nolive_positions = [(1, 1), (-1, 1), (1, -1), (-1, -1), (2, 3), (3, 2), (-2, -3), (-3, -2)]\nfor pos in olive_positions:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(pos[0], pos[1], 0.2))\n    olive = bpy.context.object\n    olive.name = \"Olive\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.668232948634811, "unit_n": 4, "param_ratio": 9.75}
{"id": "d1aa73db-6e19-4646-932c-cd3721dfbb35", "name": "Blender", "instruction": "Design a 3D model of a blender. The blender should have a base with buttons for different speed settings. Include a clear container with measurement markings and a removable lid. Add a blade assembly at the bottom of the container.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Clear color\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, (i - 1) * 0.3, 0.1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.1, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 6: Create the Blade Assembly\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.2, location=(0, 0, 0.5))\nblade_base = bpy.context.object\nblade_base.name = \"Blade Base\"\nblade_base.data.materials.append(blade_color)\n\nfor i in range(4):\n    bpy.ops.mesh.primitive_plane_add(size=0.4, location=(0, 0, 0.6), rotation=(0, 0, i * math.pi / 2))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.data.materials.append(blade_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.757636058180076, "unit_n": 11, "param_ratio": 4.7272727272727275}
{"id": "5ef639d6-391e-45f9-87b9-493b302fc5ec", "name": "Bookshelf", "instruction": "Let's design a bookshelf for storing books. Start with a rectangular frame standing vertically. \n\nAdd five evenly spaced horizontal shelves within the frame. \n\nEnsure the shelves are flat and parallel to each other. \n\nFinally, add a solid back panel to support the structure.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nframe_width = 1.0\nframe_depth = 0.3\nframe_height = 2.0\nshelf_thickness = 0.05\nnum_shelves = 5\n\n# Step 2: Create the Frame\n# Left vertical frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-frame_width/2, 0, frame_height/2))\nleft_frame = bpy.context.object\nleft_frame.scale = (shelf_thickness, frame_depth, frame_height)\n\n# Right vertical frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(frame_width/2, 0, frame_height/2))\nright_frame = bpy.context.object\nright_frame.scale = (shelf_thickness, frame_depth, frame_height)\n\n# Top horizontal frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, frame_height - shelf_thickness/2))\ntop_frame = bpy.context.object\ntop_frame.scale = (frame_width, frame_depth, shelf_thickness)\n\n# Bottom horizontal frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, shelf_thickness/2))\nbottom_frame = bpy.context.object\nbottom_frame.scale = (frame_width, frame_depth, shelf_thickness)\n\n# Step 3: Create the Shelves\nshelf_spacing = frame_height / (num_shelves + 1)\nfor i in range(num_shelves):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, shelf_spacing * (i + 1)))\n    shelf = bpy.context.object\n    shelf.scale = (frame_width - 2 * shelf_thickness, frame_depth, shelf_thickness)\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -frame_depth/2, frame_height/2))\nback_panel = bpy.context.object\nback_panel.scale = (frame_width, shelf_thickness, frame_height)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5502500180019467, "unit_n": 6, "param_ratio": 4.0}
{"id": "09949af0-7b5f-4a31-872b-cfcd25b42a2e", "name": "Apple", "instruction": "Generate a simple apple. It should be round with a small stem at the top.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Define the color for the apple\napple_material = bpy.data.materials.new(name=\"Apple Red\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the color for the stem\nstem_material = bpy.data.materials.new(name=\"Stem Brown\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "18a33d24-982e-43e7-80b7-f0df75a8ac07", "name": "Pizza Slice", "instruction": "Design a pizza slice. ", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Yellow color for cheese\n\n# Step 2: Create the Pizza Slice Base (Crust)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.9, radius2=0, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 12.0}
{"id": "c7549d9e-b4e4-4639-8f03-200cc6fdd4b2", "name": "Hat", "instruction": "Please design a hat with a wide brim.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.6, location=(0, 0, 0.35))\ntop = bpy.context.object\ntop.name = \"Top\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.266763860529089, "unit_n": 2, "param_ratio": 5.0}
{"id": "9358965c-0571-42ae-bd32-2bc7515e595d", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should have a rectangular shape with a large screen covering most of the front surface. Add a small front-facing camera at the top center of the screen.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.3, 0.6, 0.02)\nbody.data.materials.append(dark_gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.29, 0.59, 1)\nscreen.data.materials.append(black)\n\n# Step 4: Create the Front-facing Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.01, location=(0, 0.55, 0.03))\ncamera = bpy.context.object\ncamera.name = \"Front Camera\"\ncamera.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.140860579068294, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "3675d43b-fc68-42fd-9d17-437a25f42b20", "name": "Pet Bowl", "instruction": "Design a 3D pet bowl. It should be a simple, shallow dish with a diameter of 6 inches.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.05, location=(0, 0, 0))  # Diameter 6 inches (0.1524 meters), depth 0.05 meters\nbowl = bpy.context.object\nbowl.name = \"Pet Bowl\"\n\n# Step 3: Hollow out the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.045, location=(0, 0, 0.0025))  # Slightly smaller radius and depth\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Modifier to Hollow Out\nmodifier = bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmodifier.operation = 'DIFFERENCE'\nmodifier.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner bowl object\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 5.0}
{"id": "0e063386-cbb6-443e-b46f-720b499926ff", "name": "Layer Cake", "instruction": "Could you design a three-tiered layer cake? Each tier should be smaller than the one below it, and there should be a visible distinction between the layers. On top of the cake, please add a simple, yet recognizable decoration that could suit any celebration.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors for the cake and decoration\ncake_color = bpy.data.materials.new(name=\"Cake\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for cake\ndecoration_color = bpy.data.materials.new(name=\"Decoration\")\ndecoration_color.diffuse_color = (1, 0, 0, 1)  # Red color for decoration\n\n# Create the Bottom Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(cake_color)\n\n# Create the Middle Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.5, location=(0, 0, 0.75))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(cake_color)\n\n# Create the Top Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.5, location=(0, 0, 1.25))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(cake_color)\n\n# Create the Decoration (a simple sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.65))\ndecoration = bpy.context.object\ndecoration.name = \"Decoration\"\ndecoration.data.materials.append(decoration_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6584210453594226, "unit_n": 4, "param_ratio": 7.25}
{"id": "8d47eb47-64bb-4cb8-89ea-6cb8cc878ccb", "name": "Power Strip", "instruction": "Let's work on a power strip. I need it to have six outlets arranged in a single row. Each outlet should have a small switch next to it for individual control. The power strip should also have a main switch at one end. Add a long cord extending from the other end. Make sure the outlets are spaced evenly.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Power Strip Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.scale = (3, 0.5, 0.2)\nbase.name = \"Power Strip Base\"\nbase.data.materials.append(white)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(-2.5 + i, 0, 0.25))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(black)\n\n# Step 4: Create the Switches for Outlets\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-2.5 + i, 0.3, 0.25))\n    switch = bpy.context.object\n    switch.name = f\"Switch {i + 1}\"\n    switch.data.materials.append(black)\n\n# Step 5: Create the Main Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(3, 0, 0.25))\nmain_switch = bpy.context.object\nmain_switch.name = \"Main Switch\"\nmain_switch.data.materials.append(black)\n\n# Step 6: Create the Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=5, location=(-3.5, 0, -0.1), rotation=(0, 1.57, 0))\ncord = bpy.context.object\ncord.name = \"Cord\"\ncord.data.materials.append(black)", "color_brightness": "Bright", "verify": "human", "entropy": 4.16070880594039, "unit_n": 15, "param_ratio": 2.2666666666666666}
{"id": "4e8eff16-2f32-4615-91fc-154196abebd2", "name": "Transformer Coil", "instruction": "Could you design a 3D model of a transformer coil? It should be cylindrical with multiple copper windings.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncopper = bpy.data.materials.new(name=\"Copper\")\ncopper.diffuse_color = (0.72, 0.45, 0.20, 1)  # Copper color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(copper)\n\n# Step 3: Create the Windings\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, -0.9 + i * 0.2))\n    winding = bpy.context.object\n    winding.name = f\"Winding {i + 1}\"\n    winding.data.materials.append(copper)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.307808897434109, "unit_n": 11, "param_ratio": 1.3636363636363635}
{"id": "4686f93e-2a99-4448-8b6a-6457cce433bb", "name": "Action Figure vs. Doll", "instruction": "Compare a basic action figure with a doll. The action figure should have articulated joints and a superhero outfit. The doll should have a simple dress and hair.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nskin_color = bpy.data.materials.new(name=\"Skin Color\")\nskin_color.diffuse_color = (1, 0.8, 0.6, 1)  # Light skin color\nsuperhero_outfit = bpy.data.materials.new(name=\"Superhero Outfit\")\nsuperhero_outfit.diffuse_color = (0, 0, 1, 1)  # Blue color\ndress_color = bpy.data.materials.new(name=\"Dress Color\")\ndress_color.diffuse_color = (1, 0.5, 0.5, 1)  # Pink color\nhair_color = bpy.data.materials.new(name=\"Hair Color\")\nhair_color.diffuse_color = (0.5, 0.25, 0, 1)  # Brown color\n\n# Step 2: Create the Action Figure\n# Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(-1, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Action Figure Body\"\nbody.data.materials.append(skin_color)\n\n# Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(-1, 0, 1))\nhead = bpy.context.object\nhead.name = \"Action Figure Head\"\nhead.data.materials.append(skin_color)\n\n# Arms\nfor i in range(2):\n    x = -1 + 0.4 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(x, 0, 0.5), rotation=(0, 1.57, 0))\n    arm = bpy.context.object\n    arm.name = f\"Action Figure Arm {i + 1}\"\n    arm.data.materials.append(skin_color)\n\n# Legs\nfor i in range(2):\n    x = -1 + 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.8, location=(x, 0, -0.2))\n    leg = bpy.context.object\n    leg.name = f\"Action Figure Leg {i + 1}\"\n    leg.data.materials.append(skin_color)\n\n# Superhero Outfit\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(-1, 0, 0.5))\noutfit = bpy.context.object\noutfit.name = \"Superhero Outfit\"\noutfit.data.materials.append(superhero_outfit)\n\n# Step 3: Create the Doll\n# Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(1, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Doll Body\"\nbody.data.materials.append(skin_color)\n\n# Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(1, 0, 1))\nhead = bpy.context.object\nhead.name = \"Doll Head\"\nhead.data.materials.append(skin_color)\n\n# Arms\nfor i in range(2):\n    x = 1 + 0.4 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(x, 0, 0.5), rotation=(0, 1.57, 0))\n    arm = bpy.context.object\n    arm.name = f\"Doll Arm {i + 1}\"\n    arm.data.materials.append(skin_color)\n\n# Legs\nfor i in range(2):\n    x = 1 + 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.8, location=(x, 0, -0.2))\n    leg = bpy.context.object\n    leg.name = f\"Doll Leg {i + 1}\"\n    leg.data.materials.append(skin_color)\n\n# Dress\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, depth=0.6, location=(1, 0, 0.2))\ndress = bpy.context.object\ndress.name = \"Doll Dress\"\ndress.data.materials.append(dress_color)\n\n# Hair\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(1, 0, 1.2))\nhair = bpy.context.object\nhair.name = \"Doll Hair\"\nhair.data.materials.append(hair_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.074980564052261, "unit_n": 15, "param_ratio": 5.0}
{"id": "c870d70d-cabc-41e7-9953-ed65a4b10cd1", "name": "Pencil Holder", "instruction": "Could you make a pencil holder?", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npencil_holder_color = bpy.data.materials.new(name=\"Pencil Holder Color\")\npencil_holder_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Pencil Holder Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pencil_holder_color)\n\n# Step 3: Create the Pencil Holder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1.2))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(pencil_holder_color)\n\n# Step 4: Hollow out the Pencil Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2, location=(0, 0, 1.2))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Inner Cylinder\"\n\n# Boolean modifier to hollow out the pencil holder\nmod_bool = body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cylinder\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.080448065104349, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "6af84d64-572d-444d-8ced-8836ff9b6d3d", "name": "Cat Bed", "instruction": "Design a cat bed. It should be round and spacious enough for an average-sized cat.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cat bed\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base of the Cat Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Walls of the Cat Bed\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.2, location=(0, 0, 0.2))\nwalls = bpy.context.object\nwalls.name = \"Walls\"\nwalls.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.603359764576327, "unit_n": 2, "param_ratio": 7.5}
{"id": "e19d1c9a-1d3f-44b3-97dc-d80cf3b27e45", "name": "Microphone", "instruction": "Design a 3D model of a microphone. It should include a cylindrical handle and a spherical mesh head.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Mesh Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 1.1))\nhead = bpy.context.object\nhead.name = \"Mesh Head\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.170205345096427, "unit_n": 2, "param_ratio": 4.5}
{"id": "c08979df-12d9-4612-88b9-eb0c6c3bcc5a", "name": "Dog Bed", "instruction": "How does a dog bed compare to a cat bed in terms of size and shape?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndog_bed_color = bpy.data.materials.new(name=\"Dog Bed Color\")\ndog_bed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\ncat_bed_color = bpy.data.materials.new(name=\"Cat Bed Color\")\ncat_bed_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Dog Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.2, location=(-1.5, 0, 0))\ndog_bed = bpy.context.object\ndog_bed.name = \"Dog Bed\"\ndog_bed.data.materials.append(dog_bed_color)\n\n# Step 3: Create the Cat Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(1.5, 0, 0))\ncat_bed = bpy.context.object\ncat_bed.name = \"Cat Bed\"\ncat_bed.data.materials.append(cat_bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.212823471944382, "unit_n": 2, "param_ratio": 10.0}
{"id": "acd7f846-365e-424a-bf42-90e056903a80", "name": "Sandwich", "instruction": "Create a simple sandwich.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.19, 0.64, 0.28, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.00, 0.83, 0.00, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "2cdac75b-9dc5-4b6f-9060-ab8383f43648", "name": "Dog Collar", "instruction": "Create a 3D model of a dog collar. The collar should be adjustable, with a buckle for fastening. Include a small ring near the buckle for attaching a leash or tags. The collar should be displayed in a circular shape, as if ready to be worn by a dog.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\nbuckle_color = bpy.data.materials.new(name=\"Buckle Color\")\nbuckle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\nring_color = bpy.data.materials.new(name=\"Ring Color\")\nring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.scale[0] = 0.1\nbuckle.scale[1] = 0.2\nbuckle.scale[2] = 0.05\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(1.1, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(ring_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.536640840043744, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "f8b48c33-23cc-4aa4-9f68-00d62fd5710b", "name": "Smartphone", "instruction": "Craft a smartphone with a rectangular shape and rounded edges.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nsmartphone_color = bpy.data.materials.new(name=\"Smartphone Color\")\nsmartphone_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the main body of the smartphone\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nsmartphone_body = bpy.context.object\nsmartphone_body.name = \"Smartphone Body\"\nsmartphone_body.scale = (0.5, 1, 0.05)  # Scale to rectangular shape\nsmartphone_body.data.materials.append(smartphone_color)\n\n# Step 3: Add rounded edges using a bevel modifier\nbevel_modifier = smartphone_body.modifiers.new(name=\"Bevel\", type='BEVEL')\nbevel_modifier.width = 0.1\nbevel_modifier.segments = 10\nbevel_modifier.profile = 0.5\n\n# Apply the modifier\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "338a8900-9022-4954-b9f3-5e88b3ad9f64", "name": "Sofa", "instruction": "Create a 3D model of a sofa.\n\n1. The sofa should be three-seater.\n2. Include two armrests on either side.\n3. Add three back cushions and three seat cushions.\n4. Ensure the legs are short and square.\n5. The sofa should have a simple, modern design.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (1.5, 0.5, 0.2)\nbase.name = \"Sofa Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.55, 1))\nbackrest = bpy.context.object\nbackrest.scale = (1.5, 0.1, 0.5)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i * 1.6, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 0.5, 0.3)\n    armrest.name = f\"Armrest {i}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Seat Cushions\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=((i - 1) * 1.0, 0, 0.75))\n    seat_cushion = bpy.context.object\n    seat_cushion.scale = (0.45, 0.45, 0.1)\n    seat_cushion.name = f\"Seat Cushion {i + 1}\"\n    seat_cushion.data.materials.append(sofa_color)\n\n# Step 6: Create the Back Cushions\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=((i - 1) * 1.0, -0.55, 1.25))\n    back_cushion = bpy.context.object\n    back_cushion.scale = (0.45, 0.1, 0.3)\n    back_cushion.name = f\"Back Cushion {i + 1}\"\n    back_cushion.data.materials.append(sofa_color)\n\n# Step 7: Create the Legs\nfor i in [-1, 1]:\n    for j in [-1, 1]:\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 1.4, j * 0.4, 0.1))\n        leg = bpy.context.object\n        leg.scale = (0.1, 0.1, 0.1)\n        leg.name = f\"Leg {i}_{j}\"\n        leg.data.materials.append(sofa_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.8303435505179397, "unit_n": 10, "param_ratio": 2.9}
{"id": "c3f7027d-2ffe-4259-91a0-7af0fab20182", "name": "Basketball", "instruction": "Design a basketball. Ensure the surface has the characteristic lines and texture.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basketball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbasketball = bpy.context.object\nbasketball.name = \"Basketball\"\n\n# Define the basketball material\nbasketball_material = bpy.data.materials.new(name=\"BasketballMaterial\")\nbasketball_material.diffuse_color = (1, 0.55, 0, 1)  # Orange color\nbasketball.data.materials.append(basketball_material)\n\n# Step 3: Add characteristic lines\n# Horizontal line\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.02, location=(0, 0, 0), rotation=(1.5708, 0, 0))\nhorizontal_line = bpy.context.object\nhorizontal_line.name = \"Horizontal Line\"\nhorizontal_line.data.materials.append(basketball_material)\n\n# Vertical line\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.02, location=(0, 0, 0), rotation=(0, 1.5708, 0))\nvertical_line = bpy.context.object\nvertical_line.name = \"Vertical Line\"\nvertical_line.data.materials.append(basketball_material)\n\n# Diagonal lines\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.02, location=(0, 0, 0), rotation=(0.7854, 1.5708, 0))\ndiagonal_line_1 = bpy.context.object\ndiagonal_line_1.name = \"Diagonal Line 1\"\ndiagonal_line_1.data.materials.append(basketball_material)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.02, location=(0, 0, 0), rotation=(-0.7854, 1.5708, 0))\ndiagonal_line_2 = bpy.context.object\ndiagonal_line_2.name = \"Diagonal Line 2\"\ndiagonal_line_2.data.materials.append(basketball_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.3601739825263115, "unit_n": 5, "param_ratio": 8.2}
{"id": "61062b2b-a679-40c5-a782-003013edae51", "name": "Dog Bed", "instruction": "Describe the feeling of a dog bed designed for ultimate comfort and relaxation, including features like a soft cushion and raised edges for support.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsoft_cushion_color = bpy.data.materials.new(name=\"Soft Cushion Color\")\nsoft_cushion_color.diffuse_color = (0.8, 0.7, 0.6, 1)  # Light beige color\nraised_edges_color = bpy.data.materials.new(name=\"Raised Edges Color\")\nraised_edges_color.diffuse_color = (0.5, 0.4, 0.3, 1)  # Brown color\n\n# Step 2: Create the Soft Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.2, location=(0, 0, 0))\ncushion = bpy.context.object\ncushion.name = \"Soft Cushion\"\ncushion.data.materials.append(soft_cushion_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.2))\nedges = bpy.context.object\nedges.name = \"Raised Edges\"\nedges.data.materials.append(raised_edges_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.544624303372426, "unit_n": 2, "param_ratio": 10.0}
{"id": "5d5e1b17-3eed-47a2-a7fb-0e03de3430fd", "name": "Apple", "instruction": "Create a 3D model of an apple. Start with a round shape and add a small stem at the top. Include a few small, natural imperfections on the surface. Then, place the apple on a plain table.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\ntable_color = bpy.data.materials.new(name=\"Table Color\")\ntable_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color for the table\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Add imperfections\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.vertex_random(offset=0.05)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 2.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)\n\n# Step 4: Create the Table\nbpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, 0))\ntable = bpy.context.object\ntable.name = \"Table\"\ntable.data.materials.append(table_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.366458385670704, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "6e48f79e-a2ca-47de-8f1f-6483fe2a9ceb", "name": "Apple", "instruction": "Create an apple. Compare its size to a tennis ball.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for apple\ntennis_ball_green = bpy.data.materials.new(name=\"Tennis Ball Green\")\ntennis_ball_green.diffuse_color = (0.6, 0.8, 0.2, 1)  # Green color for tennis ball\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Tennis Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.065, location=(0.3, 0, 0))\ntennis_ball = bpy.context.object\ntennis_ball.name = \"Tennis Ball\"\ntennis_ball.data.materials.append(tennis_ball_green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.393885194427773, "unit_n": 2, "param_ratio": 9.0}
{"id": "58942edd-151d-4b80-9fa8-407fe6d73ac7", "name": "Screwdriver", "instruction": "Design a screwdriver with a comfortable grip handle and a flat-head tip. The handle should be ergonomically shaped to fit the hand easily.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Grey color for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0))\nhandle_top = bpy.context.object\nhandle_top.name = \"Handle Top\"\nhandle_top.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, -0.65))\nhandle_middle = bpy.context.object\nhandle_middle.name = \"Handle Middle\"\nhandle_middle.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(0, 0, -1.3))\nhandle_bottom = bpy.context.object\nhandle_bottom.name = \"Handle Bottom\"\nhandle_bottom.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.0, location=(0, 0, -2.3))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat-Head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -3.3))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.scale[0] = 0.02  # Make it flat\ntip.scale[1] = 0.2   # Make it wide\ntip.data.materials.append(metal_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.528751649916399, "unit_n": 5, "param_ratio": 6.4}
{"id": "5adb78b7-1d2d-42e3-aec7-e8fb3aab2600", "name": "Notebook", "instruction": "Create a 3D model of a notebook. The notebook is rectangular with a spiral binding along the left side. It has lined pages inside.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0, 0, 0, 1)  # Black color for the spiral binding\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.scale = (1, 0.7, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, -0.02))\npages = bpy.context.object\npages.scale = (0.95, 0.65, 0.04)\npages.name = \"Pages\"\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    x = -1.05\n    y = 0.7 - i * 0.14\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(x, y, 0))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3824883462614763, "unit_n": 12, "param_ratio": 2.3333333333333335}
{"id": "83568abb-fd75-41a0-895c-1e35f8effb41", "name": "Logo of a Tree", "instruction": "Compare the logo of a tree with that of a mountain. The tree logo should have a trunk and branches with leaves, while the mountain logo should have a triangular shape with peaks.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the trunk\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the leaves\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the mountain\n\n# Step 2: Create the Tree Trunk\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(-1, 0, 0.5))\ntrunk = bpy.context.object\ntrunk.name = \"Trunk\"\ntrunk.data.materials.append(brown)\n\n# Step 3: Create the Tree Leaves\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 1.5))\nleaves = bpy.context.object\nleaves.name = \"Leaves\"\nleaves.data.materials.append(green)\n\n# Step 4: Create the Mountain\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(1, 0, 1))\nmountain = bpy.context.object\nmountain.name = \"Mountain\"\nmountain.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.004780170881539, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "7f318b94-1c6a-4bed-b4ad-299b7dca6059", "name": "Pet Feeding Station", "instruction": "Could you create a basic pet feeding station with two bowls?", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the bowls\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Brown color for the base\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5\nbase.scale[1] = 0.75\nbase.scale[2] = 0.1\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Bowls\nfor i in range(2):\n    x = -0.75 + i * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.2, location=(x, 0, 0.1))\n    bowl_outer = bpy.context.object\n    bowl_outer.name = f\"Bowl Outer {i + 1}\"\n    bowl_outer.data.materials.append(bowl_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(x, 0, 0.1))\n    bowl_inner = bpy.context.object\n    bowl_inner.name = f\"Bowl Inner {i + 1}\"\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.mesh.select_all(action='SELECT')\n    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.15)})\n    bpy.ops.object.mode_set(mode='OBJECT')\n    bowl_inner.data.materials.append(bowl_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.51058315334366, "unit_n": 5, "param_ratio": 4.8}
{"id": "3bcb0d21-851a-4e2c-8880-24c6c7238bec", "name": "Garden Layout", "instruction": "Create a garden layout. Include a variety of plants and flowers arranged in neat rows. Add a small fountain in the center and a pathway leading to it. Surround the garden with a low fence.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for plants\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for pathway\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color for fountain\ngrey = bpy.data.materials.new(name=\"Grey\")\ngrey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color for fence\n\n# Step 2: Create the Plants and Flowers\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(i * 0.5 - 1, j * 0.5 - 1, 0))\n        plant = bpy.context.object\n        plant.name = f\"Plant_{i}_{j}\"\n        plant.data.materials.append(green)\n\n# Step 3: Create the Fountain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, 0))\nfountain_base = bpy.context.object\nfountain_base.name = \"Fountain_Base\"\nfountain_base.data.materials.append(blue)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0.2))\nfountain_top = bpy.context.object\nfountain_top.name = \"Fountain_Top\"\nfountain_top.data.materials.append(blue)\n\n# Step 4: Create the Pathway\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, -1, 0))\npathway = bpy.context.object\npathway.name = \"Pathway\"\npathway.scale[1] = 3\npathway.data.materials.append(brown)\n\n# Step 5: Create the Fence\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(i * 1.5 - 2.25, -2.25, 0.05))\n    fence = bpy.context.object\n    fence.name = f\"Fence_{i}_1\"\n    fence.data.materials.append(grey)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(i * 1.5 - 2.25, 2.25, 0.05))\n    fence = bpy.context.object\n    fence.name = f\"Fence_{i}_2\"\n    fence.data.materials.append(grey)\nfor j in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-2.25, j * 1.5 - 2.25, 0.05))\n    fence = bpy.context.object\n    fence.name = f\"Fence_{j}_3\"\n    fence.data.materials.append(grey)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(2.25, j * 1.5 - 2.25, 0.05))\n    fence = bpy.context.object\n    fence.name = f\"Fence_{j}_4\"\n    fence.data.materials.append(grey)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.242286378777433, "unit_n": 44, "param_ratio": 1.2045454545454546}
{"id": "1a82926e-ac7b-4594-926a-2ddd04b435a0", "name": "Plate", "instruction": "Create a round plate.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nplate = bpy.context.object\nplate.name = \"Plate\"\n\n# Optional: Add a simple white material to the plate\nmaterial = bpy.data.materials.new(name=\"PlateMaterial\")\nmaterial.diffuse_color = (1, 1, 1, 1)  # White color\nplate.data.materials.append(material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "71fa4e56-6efb-4a8b-a516-bcd7aa313c9d", "name": "Coffee Table", "instruction": "Create a 3D model of a coffee table. The table should have a rectangular top and four straight legs.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 2  # Scale along x-axis to make it rectangular\ntable_top.scale[1] = 1  # Scale along y-axis to make it rectangular\ntable_top.scale[2] = 0.1  # Make the top thinner\n\n# Step 3: Create the Legs\nleg_height = 0.75\nleg_radius = 0.1\nleg_positions = [(-1.9, -0.9, leg_height/2), (1.9, -0.9, leg_height/2), (-1.9, 0.9, leg_height/2), (1.9, 0.9, leg_height/2)]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.350082335296633, "unit_n": 2, "param_ratio": 2.0}
{"id": "6140c4b5-edf3-493e-a249-84740672adfd", "name": "Transformer", "instruction": "Please create a 3D model of an electrical transformer with a cylindrical core and visible coil windings.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncoil_color = bpy.data.materials.new(name=\"Coil Color\")\ncoil_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Copper color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Coil Windings\nfor i in range(5):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.05, location=(0, 0, -0.8 + i * 0.4))\n    coil = bpy.context.object\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(coil_color)", "color_brightness": "Dark", "verify": "human", "entropy": 6.054376403578374, "unit_n": 6, "param_ratio": 3.3333333333333335}
{"id": "ee184d8a-f778-4452-880e-7f978d029aa5", "name": "Notebook", "instruction": "Compare a spiral notebook with a composition notebook. The spiral notebook should have a metal coil binding and lined pages. The composition notebook should have a sewn binding and a marbled cover.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\nlined_paper = bpy.data.materials.new(name=\"Lined Paper\")\nlined_paper.diffuse_color = (1, 1, 1, 1)  # White color for paper\nmarbled_cover = bpy.data.materials.new(name=\"Marbled Cover\")\nmarbled_cover.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for marbled cover\n\n# Step 2: Create the Spiral Notebook\n# Create the pages\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-3, 0, 0))\npages = bpy.context.object\npages.scale = (0.1, 1, 1.5)\npages.name = \"Spiral Notebook Pages\"\npages.data.materials.append(lined_paper)\n\n# Create the metal coil binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(location=(-3.1, -0.9 + i * 0.2, 0))\n    coil = bpy.context.object\n    coil.scale = (0.05, 0.05, 0.05)\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(metal)\n\n# Step 3: Create the Composition Notebook\n# Create the cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(3, 0, 0))\ncover = bpy.context.object\ncover.scale = (0.1, 1, 1.5)\ncover.name = \"Composition Notebook Cover\"\ncover.data.materials.append(marbled_cover)\n\n# Create the sewn binding\nbpy.ops.mesh.primitive_cube_add(size=2, location=(3.1, 0, 0))\nbinding = bpy.context.object\nbinding.scale = (0.05, 1, 1.5)\nbinding.name = \"Sewn Binding\"\nbinding.data.materials.append(metal)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.007574610936439, "unit_n": 13, "param_ratio": 2.3076923076923075}
{"id": "a92d6352-d6ad-4eee-91da-d485dfe3768a", "name": "Dog Bowl", "instruction": "Can you create a dog bowl? It should be round with a shallow depth for easy access.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Dog Bowl\n# Outer bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nouter_bowl = bpy.context.object\nouter_bowl.name = \"Outer Bowl\"\n\n# Inner bowl (to create the shallow depth)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.4, location=(0, 0, 0.3))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Boolean difference to create the hollow part of the bowl\nmod_bool = outer_bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\n\nbpy.context.view_layer.objects.active = outer_bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner bowl as it's no longer needed\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "90fddbf3-3f43-452d-8558-7e4fb11188ee", "name": "Blender", "instruction": "Create a 3D model of a blender with a cylindrical base and a detachable jar.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 1.75))\njar = bpy.context.object\njar.name = \"Jar\"\n\n# Step 4: Make the Jar Detachable\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\njar.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.67874346877963, "unit_n": 2, "param_ratio": 5.0}
{"id": "c98cd85c-41f2-4391-b996-3b23d75dde3f", "name": "Laptop", "instruction": "Compare a laptop with a tablet.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Laptop Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nlaptop_base = bpy.context.object\nlaptop_base.scale[2] = 0.05\nlaptop_base.name = \"Laptop Base\"\nlaptop_base.data.materials.append(gray)\n\n# Step 3: Create the Laptop Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.1))\nlaptop_screen = bpy.context.object\nlaptop_screen.scale[2] = 0.05\nlaptop_screen.rotation_euler[0] = 1.5  # Rotate the screen to be vertical\nlaptop_screen.name = \"Laptop Screen\"\nlaptop_screen.data.materials.append(black)\n\n# Step 4: Create the Tablet\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(3, 0, 0.75))\ntablet = bpy.context.object\ntablet.scale[2] = 0.05\ntablet.name = \"Tablet\"\ntablet.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.6004311798813244, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "f491e38d-5715-425b-834d-0850f2321ab8", "name": "Cat Toy", "instruction": "Compare a ball-shaped cat toy and a mouse-shaped cat toy.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nball_color = bpy.data.materials.new(name=\"Ball Color\")\nball_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nmouse_color = bpy.data.materials.new(name=\"Mouse Color\")\nmouse_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color\n\n# Step 2: Create the Ball-shaped Cat Toy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0))\nball = bpy.context.object\nball.name = \"Ball Toy\"\nball.data.materials.append(ball_color)\n\n# Step 3: Create the Mouse-shaped Cat Toy\n# Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(1, 0, 0))\nmouse_body = bpy.context.object\nmouse_body.name = \"Mouse Body\"\nmouse_body.data.materials.append(mouse_color)\n\n# Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(1.4, 0, 0))\nmouse_head = bpy.context.object\nmouse_head.name = \"Mouse Head\"\nmouse_head.data.materials.append(mouse_color)\n\n# Ears\nfor i in range(2):\n    x = 1.4\n    y = 0.15 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.15))\n    ear = bpy.context.object\n    ear.name = f\"Mouse Ear {i + 1}\"\n    ear.data.materials.append(mouse_color)\n\n# Tail\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0.7, 0, 0), rotation=(0, 1.57, 0))\ntail = bpy.context.object\ntail.name = \"Mouse Tail\"\ntail.data.materials.append(mouse_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9616361137075966, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "02e2de17-8aac-440f-9a23-97cbe9e96bf5", "name": "Bird Feeder", "instruction": "Let's create a bird feeder that has a charming, rustic look. The feeder should be suspended from a hook and have multiple perches for birds to stand on. Add a small roof to protect the seeds from rain. The feeder should be easy to refill and clean.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Rustic wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.6, location=(0, 0, 0.35))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(wood_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.2, location=(0, 0, 0.65))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)\n\n# Step 5: Create the Perches\nfor i in range(4):\n    angle = i * (3.14159 / 2)\n    x = 0.45 * math.cos(angle)\n    y = 0.45 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(x, y, 0.1), rotation=(0, 1.5708, angle))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n    perch.data.materials.append(wood_color)\n\n# Step 6: Create the Hook\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, 0.85))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(wood_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.224474817770336, "unit_n": 8, "param_ratio": 4.125}
{"id": "5bd827ef-8d5c-44fa-8b50-56228efa30bd", "name": "Logo", "instruction": "Design a logo that incorporates a stylized tree with roots.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the tree\nroot_brown = bpy.data.materials.new(name=\"Root Brown\")\nroot_brown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the roots\n\n# Step 2: Create the Tree Trunk\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\ntrunk = bpy.context.object\ntrunk.name = \"Trunk\"\ntrunk.data.materials.append(root_brown)\n\n# Step 3: Create the Tree Canopy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 1.25))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(tree_green)\n\n# Step 4: Create the Roots\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 0.2 * math.cos(angle)\n    y = 0.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, -0.25), rotation=(0, angle, math.pi / 4))\n    root = bpy.context.object\n    root.name = f\"Root {i + 1}\"\n    root.data.materials.append(root_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.2919052552955606, "unit_n": 6, "param_ratio": 4.5}
{"id": "1df78070-abe9-4596-9ec5-d8ce33d36dfa", "name": "Coffee Maker", "instruction": "Create a coffee maker that can brew a single cup of coffee. Compare its efficiency to a traditional drip coffee maker.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Water Reservoir\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.5, location=(0, 0, 1.0))\nreservoir = bpy.context.object\nreservoir.name = \"Reservoir\"\nreservoir.data.materials.append(silver)\n\n# Step 4: Create the Coffee Dispenser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 1.75))\ndispenser = bpy.context.object\ndispenser.name = \"Dispenser\"\ndispenser.data.materials.append(black)\n\n# Step 5: Create the Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(0, 0, 0.3))\ncup = bpy.context.object\ncup.name = \"Cup\"\ncup.data.materials.append(silver)\n\n# Step 6: Create the Handle for the Cup\nbpy.ops.mesh.primitive_torus_add(major_radius=0.35, minor_radius=0.05, location=(0.45, 0, 0.3), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.092231546534134, "unit_n": 5, "param_ratio": 7.6}
{"id": "cc9c448d-b8a9-4566-9230-e0bbd3815703", "name": "Syringe", "instruction": "Describe a medical syringe used for injections. The syringe should include a cylindrical barrel, a plunger, and a needle. The barrel should have measurement markings, and the plunger should fit snugly inside the barrel.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.location.z = 0.1\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 2.75))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\n\n# Step 5: Add Measurement Markings to the Barrel\n# Create a new material for the markings\nmarking_material = bpy.data.materials.new(name=\"MarkingMaterial\")\nmarking_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Add markings as small cubes\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.1, 0, 1.8 - i * 0.2))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(marking_material)\n    marking.scale.x = 0.1\n\n# Set the barrel material to a transparent one\nbarrel_material = bpy.data.materials.new(name=\"BarrelMaterial\")\nbarrel_material.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Light gray with transparency\nbarrel.data.materials.append(barrel_material)\n\n# Set the plunger material to a different color\nplunger_material = bpy.data.materials.new(name=\"PlungerMaterial\")\nplunger_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nplunger.data.materials.append(plunger_material)\n\n# Set the needle material to a metallic color\nneedle_material = bpy.data.materials.new(name=\"NeedleMaterial\")\nneedle_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metallic color\nneedle.data.materials.append(needle_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.375904388624702, "unit_n": 12, "param_ratio": 3.25}
{"id": "73151fc4-f8a4-4058-a37d-2d5a32185968", "name": "Bird Feeder", "instruction": "Design a 3D model of a bird feeder. The feeder should have a cylindrical body with multiple feeding ports around it. Include a perch below each port. The top should have a hook for hanging.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Feeding Ports and Perches\nnum_ports = 4\nfor i in range(num_ports):\n    angle = i * (2 * math.pi / num_ports)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    \n    # Create feeding port\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 1))\n    port = bpy.context.object\n    port.name = f\"Feeding Port {i + 1}\"\n    port.rotation_euler = (0, math.pi/2, angle)\n    \n    # Create perch\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(x, y, 0.9))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n    perch.rotation_euler = (0, math.pi/2, angle)\n\n# Step 4: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 2.1))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.rotation_euler = (math.pi/2, 0, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.166689101541997, "unit_n": 4, "param_ratio": 5.0}
{"id": "e815487c-412c-414d-b92e-8cadc14e20d4", "name": "Coffee Grinder", "instruction": "Can you create a basic coffee grinder with a simple hand crank and a container for ground coffee?", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.2, location=(0, 0, 2.1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(metal_color)\n\n# Step 4: Create the Hand Crank\n# Crank Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0.7, 0, 2.6), rotation=(0, math.pi/2, 0))\ncrank_shaft = bpy.context.object\ncrank_shaft.name = \"Crank Shaft\"\ncrank_shaft.data.materials.append(metal_color)\n\n# Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(1.2, 0, 2.6), rotation=(math.pi/2, 0, 0))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(wood_color)\n\n# Step 5: Create the Ground Coffee Container\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nground_container = bpy.context.object\nground_container.name = \"Ground Container\"\nground_container.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2841546915640203, "unit_n": 5, "param_ratio": 7.8}
{"id": "abda2665-adeb-4aea-aca5-c81e9bf34ad7", "name": "Geometric Pattern", "instruction": "Design a 3D model of a geometric pattern composed of interlocking hexagons. Each hexagon should be uniform in size and arranged in a tessellating pattern. The pattern should be flat and extend in a plane, with no additional textures or colors.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a single hexagon\ndef create_hexagon(radius, location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=radius, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    return hexagon\n\n# Step 3: Create the tessellating pattern\nhex_radius = 1\nhex_height = math.sqrt(3) * hex_radius\n\nfor row in range(5):  # Adjust the range for more rows\n    for col in range(5):  # Adjust the range for more columns\n        x = col * 1.5 * hex_radius\n        y = row * hex_height + (col % 2) * (hex_height / 2)\n        create_hexagon(hex_radius, (x, y, 0))\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.450002547309176, "unit_n": 1, "param_ratio": 2.0}
{"id": "d0c6d60e-bff3-45b7-91e8-4242238630ec", "name": "Battery", "instruction": "Model a battery. The battery should be a cylindrical shape with two terminals on top.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbattery_body_color = bpy.data.materials.new(name=\"Battery Body Color\")\nbattery_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nterminal_color = bpy.data.materials.new(name=\"Terminal Color\")\nterminal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Battery Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\nbattery_body = bpy.context.object\nbattery_body.name = \"Battery Body\"\nbattery_body.data.materials.append(battery_body_color)\n\n# Step 3: Create the Terminals\n# Positive Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0.3, 1.1))\npositive_terminal = bpy.context.object\npositive_terminal.name = \"Positive Terminal\"\npositive_terminal.data.materials.append(terminal_color)\n\n# Negative Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, -0.3, 1.1))\nnegative_terminal = bpy.context.object\nnegative_terminal.name = \"Negative Terminal\"\nnegative_terminal.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.510844573592819, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "9aec4b67-dae6-47c2-ae80-5e5055fabc44", "name": "Fedora", "instruction": "Can you create a fedora hat? It should have a wide brim and an indented crown.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.8, location=(0, 0, 0.45))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Indent the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.4, location=(0, 0, 0.85))\nindent = bpy.context.object\nindent.name = \"Indent\"\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = crown\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(indent)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.472753664654359, "unit_n": 4, "param_ratio": 5.25}
{"id": "314d43da-88c5-4718-bed2-5ee0d2a9505c", "name": "Screwdriver", "instruction": "Compare two screwdrivers: one with a flat head and the other with a Phillips head. Both should have a simple, cylindrical handle and a metal shaft.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the metal shaft\n\n# Step 2: Create the Flat Head Screwdriver\n\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(-0.5, 0, 0))\nhandle_flat = bpy.context.object\nhandle_flat.name = \"Flat Head Handle\"\nhandle_flat.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(-0.5, 0, 0.55))\nshaft_flat = bpy.context.object\nshaft_flat.name = \"Flat Head Shaft\"\nshaft_flat.data.materials.append(metal_color)\n\n# Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.06, location=(-0.5, 0, 0.85))\nflat_head = bpy.context.object\nflat_head.name = \"Flat Head\"\nflat_head.scale[0] = 0.1\nflat_head.data.materials.append(metal_color)\n\n# Step 3: Create the Phillips Head Screwdriver\n\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0.5, 0, 0))\nhandle_phillips = bpy.context.object\nhandle_phillips.name = \"Phillips Head Handle\"\nhandle_phillips.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(0.5, 0, 0.55))\nshaft_phillips = bpy.context.object\nshaft_phillips.name = \"Phillips Head Shaft\"\nshaft_phillips.data.materials.append(metal_color)\n\n# Phillips Head\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.1, location=(0.5, 0, 0.85))\nphillips_head = bpy.context.object\nphillips_head.name = \"Phillips Head\"\nphillips_head.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.146178170755265, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "f2e06e6a-9d71-44c6-8fb0-7c2d5da3e722", "name": "Star Emblem", "instruction": "Create a star emblem with five points, each point being of equal length and angle.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Star Emblem\n# Define the star parameters\nnum_points = 5\nouter_radius = 1\ninner_radius = 0.5\nangle_offset = math.pi / 2  # To make one point face upwards\n\n# Create the vertices for the star\nvertices = []\nfor i in range(num_points * 2):\n    angle = i * math.pi / num_points + angle_offset\n    radius = outer_radius if i % 2 == 0 else inner_radius\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    vertices.append((x, y, 0))\n\n# Create the star mesh\nmesh = bpy.data.meshes.new(name=\"Star\")\nmesh.from_pydata(vertices, [], [(i, (i + 1) % (num_points * 2), (i + 2) % (num_points * 2)) for i in range(0, num_points * 2, 2)])\nmesh.update()\n\n# Create the star object\nstar = bpy.data.objects.new(\"Star\", mesh)\nbpy.context.collection.objects.link(star)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.3025850929940455, "unit_n": 1, "param_ratio": 3.0}
{"id": "3dec6878-d819-498e-98c4-ddbb696759b5", "name": "Desktop Computer Tower", "instruction": "Construct a rectangular desktop computer tower with a power button on the front, a USB port, and ventilation slots on the sides. The front panel should have a small rectangular LED indicator.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Bright green color\n\n# Step 2: Create the Tower\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntower = bpy.context.object\ntower.scale = (0.5, 1, 2)\ntower.name = \"Tower\"\ntower.data.materials.append(black)\n\n# Step 3: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, 1.01, 1.5))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\npower_button.data.materials.append(gray)\n\n# Step 4: Create the USB Port\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.2, 1.01, 1.3))\nusb_port = bpy.context.object\nusb_port.scale = (1, 0.2, 0.5)\nusb_port.name = \"USB Port\"\nusb_port.data.materials.append(gray)\n\n# Step 5: Create the LED Indicator\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(-0.2, 1.01, 1.7))\nled_indicator = bpy.context.object\nled_indicator.scale = (1, 0.2, 0.5)\nled_indicator.name = \"LED Indicator\"\nled_indicator.data.materials.append(green)\n\n# Step 6: Create the Ventilation Slots\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, 0, 0.5 + i * 0.4))\n    vent_slot = bpy.context.object\n    vent_slot.scale = (0.1, 2, 0.05)\n    vent_slot.name = f\"Vent Slot {i + 1}\"\n    vent_slot.data.materials.append(gray)\n\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.5, 0, 0.5 + i * 0.4))\n    vent_slot = bpy.context.object\n    vent_slot.scale = (0.1, 2, 0.05)\n    vent_slot.name = f\"Vent Slot {i + 6}\"\n    vent_slot.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.9595919909879407, "unit_n": 14, "param_ratio": 2.857142857142857}
{"id": "c395a524-3b44-4039-b032-0fcd90cb286d", "name": "Lounge Area", "instruction": "Can you create a 3D arrangement for a lounge area that evokes a sense of relaxation and social interaction? Include seating for six people and a central low table.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseat_color = bpy.data.materials.new(name=\"Seat Color\")\nseat_color.diffuse_color = (0.8, 0.4, 0.2, 1)  # Light brown color\ntable_color = bpy.data.materials.new(name=\"Table Color\")\ntable_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Darker brown color\n\n# Step 2: Create the Seats\nfor i in range(6):\n    angle = i * (360 / 6)\n    x = 2 * math.cos(math.radians(angle))\n    y = 2 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.5))\n    seat = bpy.context.object\n    seat.name = f\"Seat {i + 1}\"\n    seat.data.materials.append(seat_color)\n\n# Step 3: Create the Central Low Table\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 0.25))\ntable = bpy.context.object\ntable.name = \"Central Table\"\ntable.scale[2] = 0.2  # Make it low\ntable.data.materials.append(table_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.02535169073515, "unit_n": 7, "param_ratio": 2.5714285714285716}
{"id": "7ac429f6-fb6e-4913-a3ae-ec3eff94704e", "name": "Modular Sofa", "instruction": "Create a modular sofa composed of three square sections that fit together. Each section has a backrest and armrests on two sides. The sections can be arranged in various configurations.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Function to create a sofa section\ndef create_sofa_section(location):\n    # Create the base\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    base = bpy.context.object\n    base.name = \"Sofa Base\"\n    base.scale[2] = 0.2  # Make it flatter\n    base.data.materials.append(sofa_color)\n    \n    # Create the backrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(location[0], location[1] - 0.45, location[2] + 0.35))\n    backrest = bpy.context.object\n    backrest.name = \"Backrest\"\n    backrest.scale[0] = 1  # Full width\n    backrest.scale[1] = 0.1  # Thin backrest\n    backrest.scale[2] = 0.5  # Taller backrest\n    backrest.data.materials.append(sofa_color)\n    \n    # Create the left armrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(location[0] - 0.45, location[1], location[2] + 0.15))\n    left_armrest = bpy.context.object\n    left_armrest.name = \"Left Armrest\"\n    left_armrest.scale[0] = 0.1  # Thin armrest\n    left_armrest.scale[1] = 1  # Full depth\n    left_armrest.scale[2] = 0.3  # Shorter armrest\n    left_armrest.data.materials.append(sofa_color)\n    \n    # Create the right armrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(location[0] + 0.45, location[1], location[2] + 0.15))\n    right_armrest = bpy.context.object\n    right_armrest.name = \"Right Armrest\"\n    right_armrest.scale[0] = 0.1  # Thin armrest\n    right_armrest.scale[1] = 1  # Full depth\n    right_armrest.scale[2] = 0.3  # Shorter armrest\n    right_armrest.data.materials.append(sofa_color)\n\n# Create three sections\ncreate_sofa_section((0, 0, 0))\ncreate_sofa_section((1.1, 0, 0))\ncreate_sofa_section((2.2, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.188893468664533, "unit_n": 4, "param_ratio": 4.5}
{"id": "08b9f102-866e-4e84-8ed4-3c4aededff84", "name": "Apple", "instruction": "Can you create a 3D model of an apple? Focus on its round shape and the small stem at the top.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple_material = bpy.data.materials.new(name=\"AppleMaterial\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, 0, 1.2))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem_material = bpy.data.materials.new(name=\"StemMaterial\")\nstem_material.diffuse_color = (0.3, 0.2, 0.1, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Bright", "verify": "human", "entropy": 5.29505123131665, "unit_n": 2, "param_ratio": 9.5}
{"id": "2e95aef7-20ff-4b64-b40d-f63eebe22509", "name": "Microscope Slide", "instruction": "How would you use a microscope slide? It should be a small, rectangular piece of glass used to hold specimens for examination.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nglass_color = bpy.data.materials.new(name=\"Glass\")\nglass_color.diffuse_color = (0.8, 0.9, 1, 0.1)  # Light blue, semi-transparent\n\n# Step 2: Create the Microscope Slide\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nslide = bpy.context.object\nslide.scale = (2.5, 1, 0.05)  # Scale to make it rectangular and thin\nslide.name = \"Microscope Slide\"\nslide.data.materials.append(glass_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "8adea66c-e078-44d2-9b78-e668212dd3d9", "name": "Hat", "instruction": "Could you show me a basic hat?", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "31f31eea-ad01-4f9a-863d-21b820276030", "name": "Travel Umbrella", "instruction": "Create a 3D model of a travel umbrella. It should be compact and foldable. Include a wrist strap and a small cover for when it's closed. The canopy should be wide enough to provide ample coverage. Add a simple push-button mechanism for opening and closing the umbrella. Ensure the handle is ergonomic for easy gripping. The overall design should be practical and convenient for travelers.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=8, radius1=1.5, radius2=0, depth=0.1, location=(0, 0, 1.5))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(black)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(gray)\n\n# Step 4: Create the Push-Button Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 1))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(gray)\n\n# Step 5: Create the Wrist Strap\nbpy.ops.curve.primitive_bezier_circle_add(radius=0.2, location=(0, 0, 0.1))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(gray)\n\n# Step 6: Create the Cover\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.2, location=(0, 0, -0.6))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.data.materials.append(black)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.871824407813224, "unit_n": 5, "param_ratio": 7.2}
{"id": "1f00aaf0-64c4-4947-9785-778c547ede5d", "name": "Transformer", "instruction": "Create a basic transformer with a cylindrical core and surrounding coils.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncoil_color = bpy.data.materials.new(name=\"Coil Color\")\ncoil_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Copper color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Coils\nfor i in range(3):\n    z = -0.3 + i * 0.3\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, z), major_radius=0.35, minor_radius=0.05, rotation=(0, 0, 0))\n    coil = bpy.context.object\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(coil_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.8032774978327275, "unit_n": 4, "param_ratio": 6.0}
{"id": "d3467d29-5c42-4b5a-a114-9a32460a4d19", "name": "Pencil Sharpener", "instruction": "Create a 3D model of a pencil sharpener. It should be small and rectangular with a hole on top for inserting pencils.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body of the Sharpener\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nsharpener_body = bpy.context.object\nsharpener_body.name = \"Sharpener Body\"\n\n# Step 3: Create the Hole for the Pencil\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.2, location=(0, 0, 1.1))\npencil_hole = bpy.context.object\npencil_hole.name = \"Pencil Hole\"\n\n# Step 4: Boolean Modifier to Subtract the Hole from the Body\nmod_bool = sharpener_body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = pencil_hole\n\n# Apply the Boolean Modifier\nbpy.context.view_layer.objects.active = sharpener_body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the Pencil Hole Object\nbpy.data.objects.remove(pencil_hole, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.763180447528589, "unit_n": 2, "param_ratio": 4.5}
{"id": "1d5a9283-24c1-4bea-bf2b-d59e72989d56", "name": "Travel Wallet", "instruction": "Please create a 3D model of a travel wallet. The wallet should have multiple compartments for holding passports, boarding passes, credit cards, and cash.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Wallet\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.name = \"Wallet Body\"\nwallet_body.scale[0] = 1.5  # Length\nwallet_body.scale[1] = 0.1  # Thickness\nwallet_body.scale[2] = 1  # Height\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create Compartments\n# Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.11, 0.5))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.scale[0] = 1.4  # Length\npassport_compartment.scale[1] = 0.02  # Thickness\npassport_compartment.scale[2] = 0.4  # Height\npassport_compartment.data.materials.append(wallet_color)\n\n# Boarding Pass Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.11, -0.1))\nboarding_pass_compartment = bpy.context.object\nboarding_pass_compartment.name = \"Boarding Pass Compartment\"\nboarding_pass_compartment.scale[0] = 1.4  # Length\nboarding_pass_compartment.scale[1] = 0.02  # Thickness\nboarding_pass_compartment.scale[2] = 0.3  # Height\nboarding_pass_compartment.data.materials.append(wallet_color)\n\n# Credit Card Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.11, -0.5 - i * 0.15))\n    credit_card_compartment = bpy.context.object\n    credit_card_compartment.name = f\"Credit Card Compartment {i + 1}\"\n    credit_card_compartment.scale[0] = 1.4  # Length\n    credit_card_compartment.scale[1] = 0.02  # Thickness\n    credit_card_compartment.scale[2] = 0.1  # Height\n    credit_card_compartment.data.materials.append(wallet_color)\n\n# Cash Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.11, -1))\ncash_compartment = bpy.context.object\ncash_compartment.name = \"Cash Compartment\"\ncash_compartment.scale[0] = 1.4  # Length\ncash_compartment.scale[1] = 0.02  # Thickness\ncash_compartment.scale[2] = 0.2  # Height\ncash_compartment.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.604512331109468, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "fea5edae-c1aa-4cb0-aa3a-d763e1fc00f7", "name": "Luggage", "instruction": "Create a piece of luggage with four wheels and a retractable handle. It should have multiple compartments, including a secure pocket for valuables and an expandable section for extra storage.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.5, 0.3, 1)\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Wheels\nfor i in range(4):\n    x = 0.4 * (i % 2 * 2 - 1)\n    y = 0.25 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 0.05))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(gray)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.35, 2.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale = (0.05, 0.05, 0.6)\nhandle.data.materials.append(gray)\n\n# Step 5: Create Compartments\n# Secure Pocket\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.35, 1.5))\nsecure_pocket = bpy.context.object\nsecure_pocket.name = \"Secure Pocket\"\nsecure_pocket.scale = (0.4, 0.05, 0.2)\nsecure_pocket.data.materials.append(gray)\n\n# Expandable Section\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.35, 0.5))\nexpandable_section = bpy.context.object\nexpandable_section.name = \"Expandable Section\"\nexpandable_section.scale = (0.4, 0.05, 0.4)\nexpandable_section.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.0190291717368973, "unit_n": 8, "param_ratio": 3.875}
{"id": "89582782-aa07-4638-9f22-67ae3d8eda06", "name": "Burger", "instruction": "Let's create a burger. It should have a bun on the top and bottom, with a patty, lettuce, and tomato in between.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, -0.6))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, -0.3))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 5: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.15))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.4))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.456404764541796, "unit_n": 5, "param_ratio": 9.0}
{"id": "1d45a04e-a0d9-4bab-be2e-79fc966059e7", "name": "Pizza", "instruction": "Model a 3D pizza. It should be round with a slightly raised crust. Add a layer of sauce and cheese on top.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Yellowish color for cheese\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.737634986607823, "unit_n": 3, "param_ratio": 10.0}
{"id": "64ca0929-e3a6-4826-88de-b3d5d09b40e8", "name": "Ball", "instruction": "Model a simple, spherical ball.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nball = bpy.context.object\nball.name = \"Ball\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 4.0}
{"id": "14c027fe-3b4b-41be-a361-02dea4bcecc5", "name": "Geometric Pattern", "instruction": "Design a 3D geometric pattern. It should consist of interlocking hexagons forming a continuous, repeating design. Each hexagon should be the same size and evenly spaced. The pattern should be flat and uniform.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nradius = 1\nheight = 0.1\nrows = 5\ncols = 5\nhex_height = math.sqrt(3) * radius\n\n# Function to create a hexagon\ndef create_hexagon(x, y, z):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=height, location=(x, y, z))\n    hexagon = bpy.context.object\n    hexagon.name = f\"Hexagon_{x}_{y}\"\n    return hexagon\n\n# Step 2: Create the hexagon pattern\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = col * 1.5 * radius\n        y_offset = row * hex_height\n        if col % 2 == 1:\n            y_offset += hex_height / 2\n        create_hexagon(x_offset, y_offset, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 4.0}
{"id": "b869878e-0a65-4418-a5a7-9caf7ffe3a29", "name": "Stapler", "instruction": "Design a 3D model of a stapler. The stapler should have a top arm that can be pressed down to staple papers together and a base where the papers are placed.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstapler_color = bpy.data.materials.new(name=\"StaplerColor\")\nstapler_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5  # Length\nbase.scale[1] = 0.5  # Width\nbase.scale[2] = 0.1  # Height\nbase.data.materials.append(stapler_color)\n\n# Step 3: Create the Top Arm\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntop_arm = bpy.context.object\ntop_arm.name = \"Top Arm\"\ntop_arm.scale[0] = 1.5  # Length\ntop_arm.scale[1] = 0.5  # Width\ntop_arm.scale[2] = 0.1  # Height\ntop_arm.data.materials.append(stapler_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, -0.25, 0.6), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(stapler_color)\n\n# Step 5: Position the Top Arm to simulate a hinge\ntop_arm.location[2] = 1.1  # Slightly above the base\ntop_arm.rotation_euler[1] = math.radians(-10)  # Slightly tilted\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.3558346940614046, "unit_n": 3, "param_ratio": 7.0}
{"id": "438b54c1-fd60-4a72-b6b1-5081662804f7", "name": "Laptop", "instruction": "Create a 3D model of a laptop. The laptop should be closed, with a flat top surface and a slightly thicker base. The screen should be around 15 inches.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nscreen_width = 0.38  # 15 inches in meters (approx)\nscreen_height = 0.25  # arbitrary height to maintain proportions\nbase_thickness = 0.02\ntop_thickness = 0.01\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, base_thickness / 2))\nbase = bpy.context.object\nbase.scale = (screen_width / 2, screen_height / 2, base_thickness / 2)\nbase.name = \"Base\"\n\n# Step 3: Create the Top (Screen)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, base_thickness + top_thickness / 2))\ntop = bpy.context.object\ntop.scale = (screen_width / 2, screen_height / 2, top_thickness / 2)\ntop.name = \"Top\"", "color_brightness": "Dark", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 4.0}
{"id": "fe726a3f-5b43-4d38-8675-c3df35c8e503", "name": "Geometric Pattern", "instruction": "Create a 3D model of a geometric pattern. Think of interlocking hexagons forming a continuous, tessellated design.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhex_color = bpy.data.materials.new(name=\"HexColor\")\nhex_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create a single hexagon\ndef create_hexagon(radius, location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=radius, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hex_color)\n    return hexagon\n\n# Step 3: Create the tessellated pattern\nhex_radius = 1\nfor i in range(-3, 4):\n    for j in range(-3, 4):\n        x = i * 1.5 * hex_radius\n        y = j * math.sqrt(3) * hex_radius + (i % 2) * math.sqrt(3) * hex_radius / 2\n        create_hexagon(hex_radius, (x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.537333740052942, "unit_n": 1, "param_ratio": 7.0}
{"id": "d8a5ae1e-ae74-4ca7-92cd-53c8b23588c8", "name": "Cat Collar", "instruction": "Please design a basic cat collar. It should be a simple band that can fit around a cat's neck with a small buckle for fastening. Add a small bell attached to the collar.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nbuckle_color = bpy.data.materials.new(name=\"Buckle Color\")\nbuckle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbell_color = bpy.data.materials.new(name=\"Bell Color\")\nbell_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Collar Band\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Bell\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -1, -0.1))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.data.materials.append(bell_color)\n\n# Step 5: Create the Bell Attachment\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, -1, 0))\nattachment = bpy.context.object\nattachment.name = \"Bell Attachment\"\nattachment.data.materials.append(collar_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.353252856645095, "unit_n": 4, "param_ratio": 8.25}
{"id": "683a2b8e-8434-4a89-aa31-b590827ce933", "name": "Yo-Yo", "instruction": "Can you create a yo-yo?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyo_yo_color = bpy.data.materials.new(name=\"YoYoColor\")\nyo_yo_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the two halves of the Yo-Yo\nfor i in range(2):\n    location = 0.15 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, location))\n    half = bpy.context.object\n    half.name = f\"YoYoHalf {i + 1}\"\n    half.data.materials.append(yo_yo_color)\n\n# Step 3: Create the string\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, 0, 0))\nstring = bpy.context.object\nstring.name = \"String\"\nstring.data.materials.append(yo_yo_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.447518165827264, "unit_n": 3, "param_ratio": 5.0}
{"id": "931b3668-12d1-4ed8-972a-d46e56d500e0", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone with a rectangular shape and a large touch screen on the front. Include a single button at the bottom center.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Touch Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Touch Screen\"\nscreen.scale = (0.45, 0.95, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, -0.9, 0.051))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 1.9213131142934732, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "d4fdeef7-8b91-42e2-a5a8-b2da704a3c0f", "name": "Drum Set", "instruction": "I need a 3D model of a drum set. Include a bass drum, snare drum, two tom-toms, a hi-hat, and a crash cymbal. Arrange them in a standard configuration. Compare it to a typical drum set in terms of size and layout.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for metal parts\ndrum_body = bpy.data.materials.new(name=\"Drum Body\")\ndrum_body.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for drum bodies\ncymbal = bpy.data.materials.new(name=\"Cymbal\")\ncymbal.diffuse_color = (0.9, 0.7, 0.1, 1)  # Yellowish color for cymbals\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_body)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.15, location=(0, -0.7, 0.3))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_body)\n\n# Step 4: Create the Tom-Toms\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.15, location=(0.4, -0.3, 0.45))\ntom1 = bpy.context.object\ntom1.name = \"Tom1\"\ntom1.data.materials.append(drum_body)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.15, location=(-0.4, -0.3, 0.45))\ntom2 = bpy.context.object\ntom2.name = \"Tom2\"\ntom2.data.materials.append(drum_body)\n\n# Step 5: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(-0.6, -0.7, 0.9))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(cymbal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(-0.6, -0.7, 0.85))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(cymbal)\n\n# Step 6: Create the Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(0.6, -0.3, 1.0))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(cymbal)\n\n# Step 7: Create the Stands\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(-0.6, -0.7, 0.5))\nhi_hat_stand = bpy.context.object\nhi_hat_stand.name = \"Hi-Hat Stand\"\nhi_hat_stand.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(0.6, -0.3, 0.5))\ncrash_stand = bpy.context.object\ncrash_stand.name = \"Crash Stand\"\ncrash_stand.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.550550548757727, "unit_n": 9, "param_ratio": 6.666666666666667}
{"id": "98b8f9c5-ef8b-4cf8-bff9-53008f00d8da", "name": "Router", "instruction": "Design a router with antennas and indicator lights on the front.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = (i - 1) * 1.0\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(x, -0.5, 1.25))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the Indicator Lights\nfor i in range(3):\n    x = (i - 1) * 0.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.6))\n    light = bpy.context.object\n    light.name = f\"Light {i + 1}\"\n    if i == 0:\n        light.data.materials.append(red)\n    else:\n        light.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.2455132150525867, "unit_n": 7, "param_ratio": 4.0}
{"id": "48e88833-e21f-4732-9ccc-9e1a24aba307", "name": "Notebook", "instruction": "Create a basic notebook.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale = (1, 1.5, 0.05)\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, 0.05))\npages = bpy.context.object\npages.name = \"Pages\"\npages.scale = (0.95, 1.45, 0.02)\npages.data.materials.append(page_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "2cbc47d4-9ff1-4fb0-80f2-f0b7af65c620", "name": "Floral Ornament", "instruction": "Create a 3D model of a floral ornament. The design should feature a central flower with petals radiating outward.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the flower\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\n\n# Step 2: Create the Central Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\ncenter_flower = bpy.context.object\ncenter_flower.name = \"Center Flower\"\ncenter_flower.data.materials.append(flower_color)\n\n# Step 3: Create the Petals\nnum_petals = 8\npetal_length = 0.5\npetal_width = 0.1\n\nfor i in range(num_petals):\n    angle = 2 * math.pi * i / num_petals\n    x = petal_length * math.cos(angle)\n    y = petal_length * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=petal_width, depth=petal_length, location=(x/2, y/2, 0), rotation=(0, 0, angle))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(flower_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.401910722571381, "unit_n": 2, "param_ratio": 7.5}
{"id": "99d8fbbc-d986-4e4a-9f50-cec2ae2c0e5a", "name": "Picture Frame", "instruction": "Design a rectangular picture frame that is 12 inches by 16 inches. The frame itself should be about 1 inch wide and 0.5 inches thick. Keep the design minimalistic.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nframe_width = 12\nframe_height = 16\nframe_thickness = 0.5\nframe_border = 1\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (frame_width / 2 + frame_border, frame_height / 2 + frame_border, frame_thickness / 2)\nouter_frame.name = \"Outer Frame\"\n\n# Step 3: Create the Inner Cutout\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_cutout = bpy.context.object\ninner_cutout.scale = (frame_width / 2, frame_height / 2, frame_thickness / 2 + 0.1)\ninner_cutout.name = \"Inner Cutout\"\n\n# Step 4: Boolean Modifier to Cut Out the Inner Part\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_cutout\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner cutout object\nbpy.data.objects.remove(inner_cutout, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 4.0}
{"id": "741f2a35-c9de-42cf-96c8-19e10589085e", "name": "Wall Art", "instruction": "Can you generate a 3D model of a piece of wall art? It should be a simple rectangular frame with an abstract geometric design inside. ", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color\ndesign_color = bpy.data.materials.new(name=\"Design Color\")\ndesign_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (1, 0.1, 1.5)\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Geometric Design\n# Create a few cubes and spheres inside the frame\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.2, 0.5))\ncube1 = bpy.context.object\ncube1.name = \"Cube1\"\ncube1.data.materials.append(design_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.5, 0.2, -0.5))\ncube2 = bpy.context.object\ncube2.name = \"Cube2\"\ncube2.data.materials.append(design_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(-0.5, 0.2, 0))\nsphere1 = bpy.context.object\nsphere1.name = \"Sphere1\"\nsphere1.data.materials.append(design_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0.2, -1))\nsphere2 = bpy.context.object\nsphere2.name = \"Sphere2\"\nsphere2.data.materials.append(design_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.1949298163432776, "unit_n": 5, "param_ratio": 6.0}
{"id": "d2a55434-f350-411a-9923-6c2752caaec8", "name": "Maracas", "instruction": "Let's design a pair of maracas. Each maraca should have a round, hollow body attached to a handle. The body should be about 10 cm in diameter, and the handle should be 15 cm long. The handles should be straight and easy to grip. Add some simple decorative patterns on the bodies.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color\npattern_color = bpy.data.materials.new(name=\"PatternColor\")\npattern_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Function to create a maraca\ndef create_maraca(location):\n    # Step 2: Create the Body\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=location)\n    body = bpy.context.object\n    body.name = \"Maraca Body\"\n    body.data.materials.append(body_color)\n    \n    # Step 3: Create the Handle\n    handle_location = (location[0], location[1], location[2] - 0.1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=0.15, location=handle_location)\n    handle = bpy.context.object\n    handle.name = \"Maraca Handle\"\n    handle.data.materials.append(handle_color)\n    \n    # Step 4: Add Decorative Patterns\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.005, location=location)\n    pattern = bpy.context.object\n    pattern.name = \"Maraca Pattern\"\n    pattern.data.materials.append(pattern_color)\n    pattern.scale[2] = 0.2\n\n# Create two maracas\ncreate_maraca(location=(0, 0, 0.1))\ncreate_maraca(location=(0.2, 0, 0.1))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.1203604728859755, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "32289a60-7a06-47d7-a090-431b4f1aa1d1", "name": "Sunglasses Case", "instruction": "Hey there, can you create a 3D model of a sunglasses case? It should be a hard shell case with a hinged lid. The case should be slightly curved to fit the shape of sunglasses inside.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Bottom Part of the Case\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbottom_case = bpy.context.object\nbottom_case.name = \"Bottom Case\"\nbottom_case.scale[0] = 1.5\nbottom_case.scale[1] = 0.6\nbottom_case.scale[2] = 0.3\nbottom_case.data.materials.append(case_color)\n\n# Step 3: Create the Top Part of the Case\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.6))\ntop_case = bpy.context.object\ntop_case.name = \"Top Case\"\ntop_case.scale[0] = 1.5\ntop_case.scale[1] = 0.6\ntop_case.scale[2] = 0.3\ntop_case.data.materials.append(case_color)\n\n# Step 4: Adjust the Top Part to Act as a Lid\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.mesh.select_face_by_sides(number=4, type='GREATER')\nbpy.ops.mesh.delete(type='FACE')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Position the Lid\ntop_case.location.z = 0.3\n\n# Step 6: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, -0.6, 0.3), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(case_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.872691424147641, "unit_n": 3, "param_ratio": 7.0}
{"id": "2d2f2d33-0ba4-4210-a56b-366d5d39e3a3", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker.\n\n1. It should have a rectangular body.\n2. Include a switch on the front.\n3. Ensure there are input and output terminals on the top and bottom.\n4. Add a label area on the front.\n5. The internal components should be visible when opened.\n6. The model should be suitable for an industrial setting.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\nterminal_color = bpy.data.materials.new(name=\"TerminalColor\")\nterminal_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\nlabel_color = bpy.data.materials.new(name=\"LabelColor\")\nlabel_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.55, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.6, 0.1, 0.3)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create the Input Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0.55, 1.4))\ninput_terminal = bpy.context.object\ninput_terminal.name = \"InputTerminal\"\ninput_terminal.data.materials.append(terminal_color)\n\n# Step 5: Create the Output Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0.55, -1.4))\noutput_terminal = bpy.context.object\noutput_terminal.name = \"OutputTerminal\"\noutput_terminal.data.materials.append(terminal_color)\n\n# Step 6: Create the Label Area\nbpy.ops.mesh.primitive_plane_add(size=0.8, location=(0, 0.56, 0))\nlabel_area = bpy.context.object\nlabel_area.name = \"LabelArea\"\nlabel_area.scale = (1, 0.01, 0.5)\nlabel_area.data.materials.append(label_color)\n\n# Note: Internal components visibility when opened is a complex task and requires animation or additional modeling which is beyond the scope of this simple script.", "color_brightness": "Dark", "verify": "human", "entropy": 2.507317720118709, "unit_n": 5, "param_ratio": 8.4}
{"id": "f2e551f0-7614-4ed0-914a-8d0e1a115e0d", "name": "Screwdriver Set", "instruction": "Create a set of screwdrivers. Include a flathead, a Phillips head, and a Torx head screwdriver. Each should have a distinct handle shape for easy identification.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for handles\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for metal parts\n\n# Step 2: Create the Flathead Screwdriver\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(-1, 0, 0.2))\nhandle_flathead = bpy.context.object\nhandle_flathead.name = \"Handle_Flathead\"\nhandle_flathead.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(-1, 0, -0.3))\nshaft_flathead = bpy.context.object\nshaft_flathead.name = \"Shaft_Flathead\"\nshaft_flathead.data.materials.append(metal_color)\n\n# Blade\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1, 0, -0.65))\nblade_flathead = bpy.context.object\nblade_flathead.scale = (0.03, 0.1, 0.1)\nblade_flathead.data.materials.append(metal_color)\n\n# Step 3: Create the Phillips Head Screwdriver\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0, 0, 0.2))\nhandle_phillips = bpy.context.object\nhandle_phillips.name = \"Handle_Phillips\"\nhandle_phillips.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(0, 0, -0.3))\nshaft_phillips = bpy.context.object\nshaft_phillips.name = \"Shaft_Phillips\"\nshaft_phillips.data.materials.append(metal_color)\n\n# Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.03, radius2=0, depth=0.1, location=(0, 0, -0.65))\ntip_phillips = bpy.context.object\ntip_phillips.name = \"Tip_Phillips\"\ntip_phillips.data.materials.append(metal_color)\n\n# Step 4: Create the Torx Head Screwdriver\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(1, 0, 0.2))\nhandle_torx = bpy.context.object\nhandle_torx.name = \"Handle_Torx\"\nhandle_torx.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(1, 0, -0.3))\nshaft_torx = bpy.context.object\nshaft_torx.name = \"Shaft_Torx\"\nshaft_torx.data.materials.append(metal_color)\n\n# Tip\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.03, depth=0.1, location=(1, 0, -0.65))\ntip_torx = bpy.context.object\ntip_torx.name = \"Tip_Torx\"\ntip_torx.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.266369679718177, "unit_n": 9, "param_ratio": 6.222222222222222}
{"id": "90a52673-7141-41e3-a804-17c852114052", "name": "Smart Home Hub", "instruction": "Let's design a smart home hub. It should be a sleek, square device with rounded corners and a central screen displaying connectivity status.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndevice_color = bpy.data.materials.new(name=\"Device Color\")\ndevice_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body of the Hub\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1, 1, 0.2)  # Make it a sleek, flat square\nmain_body.data.materials.append(device_color)\n\n# Step 3: Add Rounded Corners\nbpy.ops.object.modifier_add(type='BEVEL')\nmain_body.modifiers[\"Bevel\"].segments = 10\nmain_body.modifiers[\"Bevel\"].width = 0.2\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")\n\n# Step 4: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.21))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.6, 0.6, 1)  # Make it a bit smaller than the main body\nscreen.data.materials.append(screen_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.00908781914107, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "29956871-105e-4065-8ae9-2b97d2023cea", "name": "Electric Transformer", "instruction": "Generate a model of an electric transformer. It should have a cylindrical core with coils around it.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the core\ncoil_color = bpy.data.materials.new(name=\"Coil Color\")\ncoil_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Copper color for the coils\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Coils\nfor i in range(3):\n    z = -0.6 + i * 0.6\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, z))\n    coil = bpy.context.object\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(coil_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.775273832942563, "unit_n": 4, "param_ratio": 5.0}
{"id": "72ef9bc9-0cb6-436d-8e5b-abeaa6394c93", "name": "Sushi Platter", "instruction": "Create a sushi platter with an assortment of sushi pieces. Include nigiri, maki rolls, and sashimi. Arrange the sushi pieces neatly on a rectangular plate.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrice_color = bpy.data.materials.new(name=\"Rice\")\nrice_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color for rice\nfish_color = bpy.data.materials.new(name=\"Fish\")\nfish_color.diffuse_color = (1, 0.5, 0.5, 1)  # Light red color for fish\nseaweed_color = bpy.data.materials.new(name=\"Seaweed\")\nseaweed_color.diffuse_color = (0, 0.3, 0, 1)  # Dark green color for seaweed\n\n# Step 2: Create the Plate\nbpy.ops.mesh.primitive_cube_add(size=3, location=(0, 0, -0.1))\nplate = bpy.context.object\nplate.name = \"Plate\"\nplate.scale = (2, 1, 0.05)\nplate.data.materials.append(rice_color)\n\n# Step 3: Create Nigiri\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1 + i, 0.5, 0.25))\n    rice = bpy.context.object\n    rice.name = f\"Nigiri Rice {i + 1}\"\n    rice.scale = (0.5, 0.25, 0.1)\n    rice.data.materials.append(rice_color)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1 + i, 0.5, 0.35))\n    fish = bpy.context.object\n    fish.name = f\"Nigiri Fish {i + 1}\"\n    fish.scale = (0.5, 0.25, 0.05)\n    fish.data.materials.append(fish_color)\n\n# Step 4: Create Maki Rolls\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(-1 + i, -0.5, 0.2))\n    seaweed = bpy.context.object\n    seaweed.name = f\"Maki Seaweed {i + 1}\"\n    seaweed.data.materials.append(seaweed_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.4, location=(-1 + i, -0.5, 0.2))\n    rice = bpy.context.object\n    rice.name = f\"Maki Rice {i + 1}\"\n    rice.data.materials.append(rice_color)\n\n# Step 5: Create Sashimi\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1 + i, -1.5, 0.25))\n    fish = bpy.context.object\n    fish.name = f\"Sashimi Fish {i + 1}\"\n    fish.scale = (0.5, 0.25, 0.1)\n    fish.data.materials.append(fish_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.368066223517342, "unit_n": 16, "param_ratio": 2.5625}
{"id": "3936ac51-d904-4b1a-9966-0c194749b8c9", "name": "Blender", "instruction": "Create a blender with a base, a transparent container, and a lid. How does it feel to use this blender in a kitchen setting?", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.871139646229382, "unit_n": 3, "param_ratio": 10.0}
{"id": "76b9ce3e-991d-4bfc-935a-abdc42e36b30", "name": "Washing Machine", "instruction": "Let's design a washing machine. It should be a large, rectangular appliance with a front-loading door. The door should be circular and located in the center of the front panel. Include a control panel with buttons and a display at the top of the front panel. The washing machine should be about 3 feet tall and 2 feet wide.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Washing Machine\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.5))\nbody = bpy.context.object\nbody.name = \"Washing Machine Body\"\nbody.scale = (1, 0.75, 1.5)\nbody.data.materials.append(white)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0.76, 1.5))\ndoor = bpy.context.object\ndoor.name = \"Washing Machine Door\"\ndoor.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees around X-axis\ndoor.data.materials.append(black)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.76, 2.8))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (1, 0.1, 0.2)\ncontrol_panel.data.materials.append(gray)\n\n# Step 5: Create Buttons on the Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=(-0.3 + i * 0.3, 0.81, 2.8))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees around X-axis\n    button.data.materials.append(black)\n\n# Step 6: Create the Display on the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.6, 0.81, 2.8))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale = (0.5, 0.01, 0.2)\ndisplay.data.materials.append(black)", "color_brightness": "Bright", "verify": "human", "entropy": 2.896757876204382, "unit_n": 7, "param_ratio": 5.285714285714286}
{"id": "88a6d8b0-9a81-4199-9255-2a0dd3912c9f", "name": "Screwdriver", "instruction": "Can you create a screwdriver with a flat head? Compare it to a Phillips head screwdriver, showing both side by side.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metal color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue handle color\n\n# Step 2: Create the Flat Head Screwdriver\n\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(-1.5, 0, 0))\nhandle_flat = bpy.context.object\nhandle_flat.name = \"Flat Handle\"\nhandle_flat.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(-1.5, 0, 0.75))\nshaft_flat = bpy.context.object\nshaft_flat.name = \"Flat Shaft\"\nshaft_flat.data.materials.append(metal)\n\n# Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.5, 0, 1.5))\nhead_flat = bpy.context.object\nhead_flat.name = \"Flat Head\"\nhead_flat.scale[2] = 0.05\nhead_flat.data.materials.append(metal)\n\n# Step 3: Create the Phillips Head Screwdriver\n\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(1.5, 0, 0))\nhandle_phillips = bpy.context.object\nhandle_phillips.name = \"Phillips Handle\"\nhandle_phillips.data.materials.append(handle_color)\n\n# Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(1.5, 0, 0.75))\nshaft_phillips = bpy.context.object\nshaft_phillips.name = \"Phillips Shaft\"\nshaft_phillips.data.materials.append(metal)\n\n# Phillips Head\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(1.5, 0, 1.5))\nhead_phillips = bpy.context.object\nhead_phillips.name = \"Phillips Head\"\nhead_phillips.data.materials.append(metal)\n\n# Create the cross on the Phillips head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.5, 0, 1.6))\ncross1 = bpy.context.object\ncross1.scale[0] = 0.02\ncross1.scale[2] = 0.1\ncross1.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.5, 0, 1.6))\ncross2 = bpy.context.object\ncross2.scale[1] = 0.02\ncross2.scale[2] = 0.1\ncross2.data.materials.append(metal)", "color_brightness": "Bright", "verify": "human", "entropy": 4.021467771837873, "unit_n": 8, "param_ratio": 6.0}
{"id": "63239979-0037-4364-bfa1-b03250298789", "name": "Table Lamp", "instruction": "Design a table lamp.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlamp_base_color = bpy.data.materials.new(name=\"Lamp Base Color\")\nlamp_base_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray for the lamp base\nlamp_shade_color = bpy.data.materials.new(name=\"Lamp Shade Color\")\nlamp_shade_color.diffuse_color = (1.0, 0.9, 0.8, 1)  # Light beige for the lamp shade\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Lamp Base\"\nbase.data.materials.append(lamp_base_color)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.7, location=(0, 0, 0.45))\npole = bpy.context.object\npole.name = \"Lamp Pole\"\npole.data.materials.append(lamp_base_color)\n\n# Step 4: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.05, depth=0.4, location=(0, 0, 1.0))\nshade = bpy.context.object\nshade.name = \"Lamp Shade\"\nshade.data.materials.append(lamp_shade_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.760797364026837, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "ebbdfa8a-40d9-44de-aa86-16de0a1d0281", "name": "Sofa", "instruction": "Create a 3D model of a sofa that seats three people. Ensure it has armrests on both sides.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.scale[0] = 3  # Make it longer\nseat.scale[1] = 1  # Make it wider\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.5))\nbackrest = bpy.context.object\nbackrest.scale[0] = 3  # Make it longer\nbackrest.scale[1] = 0.2  # Make it thinner\nbackrest.scale[2] = 1  # Make it taller\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 3 * (i * 2 - 1)  # Position on either side of the seat\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.2  # Make it thinner\n    armrest.scale[1] = 1  # Match the width of the seat\n    armrest.scale[2] = 1  # Match the height of the seat\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 4.25}
{"id": "ed7fe385-2269-4689-8a3e-9caf3e9e6ef1", "name": "Exit Sign", "instruction": "Design an exit sign with the word \"EXIT\" in bold, capital letters.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Text Object\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"EXIT\"\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.data.extrude = 0.1  # Make the text bold\ntext_obj.data.size = 1  # Set the size of the text\n\n# Step 3: Set the Material for the Text\nmaterial = bpy.data.materials.new(name=\"TextMaterial\")\nmaterial.diffuse_color = (1, 0, 0, 1)  # Red color\ntext_obj.data.materials.append(material)\n\n# Step 4: Convert Text to Mesh\nbpy.context.view_layer.objects.active = text_obj\nbpy.ops.object.convert(target='MESH')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.915557858075956, "unit_n": 1, "param_ratio": 8.0}
{"id": "c27eabf0-841a-43b3-85a9-4ea45b340210", "name": "Pen Holder", "instruction": "Create a pen holder with three compartments. The compartments should be of varying heights to accommodate different pen sizes. The design should be simple and functional, perfect for organizing a desk.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Compartments\nheights = [1.0, 1.5, 2.0]  # Different heights for the compartments\nfor i, height in enumerate(heights):\n    x = i * 1.2  # Position compartments side by side\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=height, location=(x, 0, height / 2))\n    compartment = bpy.context.object\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.733813110145869, "unit_n": 1, "param_ratio": 9.0}
{"id": "e697d77a-771b-4f72-8b19-aded8afaa10c", "name": "Washing Machine", "instruction": "Design a front-loading washing machine. The machine should be rectangular with a circular door in the center of the front panel. Add control buttons and a digital display above the door. Include a detergent drawer on the top left side.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body of the Washing Machine\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.75, 1.25)\nbody.data.materials.append(white)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0.76, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees around the X-axis\ndoor.data.materials.append(gray)\n\n# Step 4: Create the Control Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.3 + i * 0.3, 0.76, 1.5))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(black)\n\n# Step 5: Create the Digital Display\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0.5, 0.76, 1.5))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale = (1, 0.1, 0.5)\ndisplay.data.materials.append(black)\n\n# Step 6: Create the Detergent Drawer\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(-0.85, 0.76, 2))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.scale = (1, 0.5, 0.2)\ndrawer.data.materials.append(white)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.946331946878832, "unit_n": 7, "param_ratio": 5.142857142857143}
{"id": "3ebcc9b2-5365-48d2-8ece-4c367c3b4f73", "name": "Coaster", "instruction": "Create a simple 3D model of a coaster. It should be a flat, circular disc with a diameter of 10 cm.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.005, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 5.0}
{"id": "ead659cb-ff28-4dc1-9ea0-023455cb5157", "name": "Pet Bowl", "instruction": "Design a pet bowl. It should be round with a shallow depth. The edges should be slightly raised.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 3: Create the Inner Part (to make it shallow with raised edges)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.15, location=(0, 0, 0.025))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Difference to create the hollow part\nmod_bool = bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Step 5: Remove the inner part\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "2d4fb49d-6c5b-4e8f-80e1-5a8bb56c061d", "name": "Cat Collar", "instruction": "Create a simple cat collar with a buckle.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"CollarColor\")\ncollar_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the collar\nbuckle_color = bpy.data.materials.new(name=\"BuckleColor\")\nbuckle_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the buckle\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Create the buckle hole\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1, 0, 0))\nbuckle_hole = bpy.context.object\nbuckle_hole.name = \"BuckleHole\"\n\n# Boolean modifier to create the hole in the buckle\nmod_bool = buckle.modifiers.new(type=\"BOOLEAN\", name=\"BuckleHole\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = buckle_hole\n\n# Apply the boolean modifier\nbpy.context.view_layer.objects.active = buckle\nbpy.ops.object.modifier_apply(modifier=\"BuckleHole\")\n\n# Delete the buckle hole object\nbpy.data.objects.remove(buckle_hole, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.115342943924631, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "271b1ff8-7e4b-4907-b562-a07a0e0c8517", "name": "Chess Set", "instruction": "Design a chess set with a square board and 32 pieces. The board should have 64 alternating dark and light squares. The pieces should include kings, queens, bishops, knights, rooks, and pawns for both sides. Each piece should have a distinct shape to represent its role in the game. The set should be visually appealing and suitable for display.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\ndark_square_color = bpy.data.materials.new(name=\"DarkSquare\")\ndark_square_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray\nlight_square_color = bpy.data.materials.new(name=\"LightSquare\")\nlight_square_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray\n\n# Step 2: Create the Board\nboard_size = 8\nsquare_size = 1\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square_color)\n        else:\n            square.data.materials.append(dark_square_color)\n\n# Define piece colors\nblack_piece_color = bpy.data.materials.new(name=\"BlackPiece\")\nblack_piece_color.diffuse_color = (0, 0, 0, 1)  # Black\nwhite_piece_color = bpy.data.materials.new(name=\"WhitePiece\")\nwhite_piece_color.diffuse_color = (1, 1, 1, 1)  # White\n\n# Step 3: Create the Pieces\ndef create_piece(shape_func, location, color):\n    shape_func(location=location)\n    piece = bpy.context.object\n    piece.data.materials.append(color)\n\n# Define simple shapes for pieces\ndef create_pawn(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n\ndef create_rook(location):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=location)\n\ndef create_knight(location):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.5, location=location)\n\ndef create_bishop(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=location)\n\ndef create_queen(location):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.1, location=location)\n\ndef create_king(location):\n    bpy.ops.mesh.primitive_ico_sphere_add(radius=0.3, location=location)\n\n# Place pieces on the board\npiece_placement = [\n    (create_rook, 0, 0), (create_knight, 1, 0), (create_bishop, 2, 0), (create_queen, 3, 0),\n    (create_king, 4, 0), (create_bishop, 5, 0), (create_knight, 6, 0), (create_rook, 7, 0),\n    (create_pawn, 0, 1), (create_pawn, 1, 1), (create_pawn, 2, 1), (create_pawn, 3, 1),\n    (create_pawn, 4, 1), (create_pawn, 5, 1), (create_pawn, 6, 1), (create_pawn, 7, 1),\n    (create_rook, 0, 7), (create_knight, 1, 7), (create_bishop, 2, 7), (create_queen, 3, 7),\n    (create_king, 4, 7), (create_bishop, 5, 7), (create_knight, 6, 7), (create_rook, 7, 7),\n    (create_pawn, 0, 6), (create_pawn, 1, 6), (create_pawn, 2, 6), (create_pawn, 3, 6),\n    (create_pawn, 4, 6), (create_pawn, 5, 6), (create_pawn, 6, 6), (create_pawn, 7, 6)\n]\n\nfor piece_func, col, row in piece_placement:\n    color = black_piece_color if row < 2 else white_piece_color\n    create_piece(piece_func, (col * square_size, row * square_size, 0.5), color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.2908046625685365, "unit_n": 7, "param_ratio": 4.571428571428571}
{"id": "94dd309c-4c62-47f0-a06a-de2d571a3978", "name": "Office Layout", "instruction": "Create an office layout including desks arranged in clusters, swivel chairs, and filing cabinets placed against the walls. Include a reception area with a desk and a waiting area with four chairs and a coffee table.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal color\nfabric_color = bpy.data.materials.new(name=\"Fabric\")\nfabric_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark fabric color\n\n# Step 2: Create Desks\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.5))\n    desk = bpy.context.object\n    desk.scale = (1, 0.6, 0.1)\n    desk.name = f\"Desk {i + 1}\"\n    desk.data.materials.append(wood_color)\n\n# Step 3: Create Swivel Chairs\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(x, y, 0.1))\n    seat = bpy.context.object\n    seat.name = f\"Swivel Chair Seat {i + 1}\"\n    seat.data.materials.append(fabric_color)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 0.35))\n    base = bpy.context.object\n    base.name = f\"Swivel Chair Base {i + 1}\"\n    base.data.materials.append(metal_color)\n\n# Step 4: Create Filing Cabinets\nfor i in range(2):\n    x = 2.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    cabinet = bpy.context.object\n    cabinet.scale = (0.5, 1, 1)\n    cabinet.name = f\"Filing Cabinet {i + 1}\"\n    cabinet.data.materials.append(metal_color)\n\n# Step 5: Create Reception Desk\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, -3, 0.5))\nreception_desk = bpy.context.object\nreception_desk.scale = (1.5, 0.6, 0.1)\nreception_desk.name = \"Reception Desk\"\nreception_desk.data.materials.append(wood_color)\n\n# Step 6: Create Waiting Area Chairs\nfor i in range(4):\n    x = -2.5 + (i % 2) * 1.5\n    y = -4 + (i // 2) * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(x, y, 0.1))\n    chair_seat = bpy.context.object\n    chair_seat.name = f\"Waiting Chair Seat {i + 1}\"\n    chair_seat.data.materials.append(fabric_color)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 0.35))\n    chair_base = bpy.context.object\n    chair_base.name = f\"Waiting Chair Base {i + 1}\"\n    chair_base.data.materials.append(metal_color)\n\n# Step 7: Create Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, -4, 0.25))\ncoffee_table = bpy.context.object\ncoffee_table.scale = (0.8, 0.8, 0.1)\ncoffee_table.name = \"Coffee Table\"\ncoffee_table.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.048435683477105, "unit_n": 24, "param_ratio": 2.125}
{"id": "9b501961-0633-4fdc-a2f7-35226efdc02b", "name": "Wireless Router", "instruction": "Can you please create a 3D model of a wireless router? It should have four antennas, LED indicators for power, internet connection, and data activity. Include Ethernet ports at the back for wired connections.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(4):\n    x = 1.4 * (i % 2) - 0.7\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 1.1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the LED Indicators\nled_positions = [(-0.5, 1.1, 0.6), (0, 1.1, 0.6), (0.5, 1.1, 0.6)]\nled_colors = [green, red, blue]\nled_names = [\"Power LED\", \"Internet LED\", \"Data LED\"]\n\nfor i in range(3):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=led_positions[i])\n    led = bpy.context.object\n    led.name = led_names[i]\n    led.data.materials.append(led_colors[i])\n\n# Step 5: Create the Ethernet Ports\nfor i in range(4):\n    x = 0.9 * (i - 1.5)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, -1.1, 0.4))\n    port = bpy.context.object\n    port.name = f\"Ethernet Port {i + 1}\"\n    port.scale = (0.5, 0.1, 0.3)\n    port.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.478250942510677, "unit_n": 12, "param_ratio": 2.9166666666666665}
{"id": "02da8c31-a2a4-40ab-91d5-ab5274549521", "name": "Microscope Slide", "instruction": "Can you create a 3D model of a microscope slide? Make sure it is rectangular and flat.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Microscope Slide\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nslide = bpy.context.object\nslide.name = \"Microscope Slide\"\nslide.scale = (2.5, 1, 0.05)  # Rectangular and flat\n\n# Optionally, you can set a material for the slide\nslide_material = bpy.data.materials.new(name=\"Slide Material\")\nslide_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nslide.data.materials.append(slide_material)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "01e4505f-19a2-48be-8ebc-7c3bbe3d0776", "name": "Blender", "instruction": "Design a 3D model of a blender. Include a base, a jar, and a lid.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.659885851703786, "unit_n": 3, "param_ratio": 5.0}
{"id": "0acc76b1-9456-45a4-a638-3c90cc9932d2", "name": "Spice Containers", "instruction": "Design a set of spice containers that can be easily differentiated by someone cooking. Each container should have a unique feature that helps identify the spice inside without opening it.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Containers\nfor i, color in enumerate([red, green, blue, yellow]):\n    # Create the container body\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(i * 1.5, 0, 0))\n    container = bpy.context.object\n    container.name = f\"Container {i + 1}\"\n    container.data.materials.append(color)\n    \n    # Create a unique feature on the top of each container\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(i * 1.5, 0, 0.55))\n    feature = bpy.context.object\n    feature.name = f\"Feature {i + 1}\"\n    feature.data.materials.append(color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8481058614647967, "unit_n": 2, "param_ratio": 14.5}
{"id": "28e59779-088b-42a5-be21-c1c4290defa8", "name": "Modem", "instruction": "Create a modem. It has a rectangular shape with indicator lights on the front and ports on the back for connecting cables.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Modem Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmodem_body = bpy.context.object\nmodem_body.name = \"Modem Body\"\nmodem_body.scale = (2, 1, 0.5)\nmodem_body.data.materials.append(black)\n\n# Step 3: Create Indicator Lights\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(-1.8 + i * 0.4, 1.01, 0.2))\n    light = bpy.context.object\n    light.name = f\"Indicator Light {i + 1}\"\n    light.rotation_euler = (1.5708, 0, 0)\n    light.data.materials.append(green)\n\n# Step 4: Create Ports on the Back\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.8 + i * 0.4, -1.01, 0))\n    port = bpy.context.object\n    port.name = f\"Port {i + 1}\"\n    port.scale = (0.5, 0.1, 0.2)\n    port.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.2924837393352857, "unit_n": 7, "param_ratio": 3.2857142857142856}
{"id": "b67cd90a-3ab0-4e4b-931d-49ae3ac3a7b5", "name": "Blender", "instruction": "Create a blender with a cylindrical base and a detachable container on top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071984, "unit_n": 2, "param_ratio": 10.0}
{"id": "4aa63157-6f84-456b-961f-6ceb2a66b0db", "name": "Drum", "instruction": "Imagine a drum with a cylindrical body and a taut membrane on top. How does playing it make you feel?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color for the drum body\ndrum_membrane_color = bpy.data.materials.new(name=\"Drum Membrane Color\")\ndrum_membrane_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light color for the drum membrane\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drum Membrane\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1))\ndrum_membrane = bpy.context.object\ndrum_membrane.name = \"Drum Membrane\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrum_membrane.data.materials.append(drum_membrane_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "0b29f12e-e43e-4508-b608-73cda0378fc3", "name": "Drum Kit", "instruction": "Let's create a 3D model of a drum kit for a rock band. The kit should include a bass drum, two tom-toms, a floor tom, a snare drum, a hi-hat, a crash cymbal, and a ride cymbal. \n\nThe bass drum should be the largest drum, positioned at the center with a pedal in front. The two tom-toms should be mounted above the bass drum, one slightly higher than the other. The floor tom should be to the right of the bass drum, standing on its legs. The snare drum should be placed between the drummer's legs, slightly to the left. The hi-hat should be to the left of the snare drum, with a pedal for opening and closing the cymbals. The crash cymbal should be above the tom-toms, and the ride cymbal should be to the right of the floor tom. \n\nEnsure the drums and cymbals are positioned in a way that is ergonomic for the drummer.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_color = bpy.data.materials.new(name=\"DrumColor\")\ndrum_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brownish color\ncymbal_color = bpy.data.materials.new(name=\"CymbalColor\")\ncymbal_color.diffuse_color = (1, 0.84, 0, 1)  # Gold color\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.4, location=(0, 0, 0.2))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Tom-Toms\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(-0.4, 0, 0.6))\ntom_tom1 = bpy.context.object\ntom_tom1.name = \"Tom-Tom 1\"\ntom_tom1.data.materials.append(drum_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(-0.2, 0, 0.8))\ntom_tom2 = bpy.context.object\ntom_tom2.name = \"Tom-Tom 2\"\ntom_tom2.data.materials.append(drum_color)\n\n# Step 4: Create the Floor Tom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0.8, 0, 0.2))\nfloor_tom = bpy.context.object\nfloor_tom.name = \"Floor Tom\"\nfloor_tom.data.materials.append(drum_color)\n\n# Step 5: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(-0.6, 0, 0.2))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 6: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.05, location=(-0.8, 0, 0.8))\nhi_hat = bpy.context.object\nhi_hat.name = \"Hi-Hat\"\nhi_hat.data.materials.append(cymbal_color)\n\n# Step 7: Create the Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(-0.3, 0, 1.2))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(cymbal_color)\n\n# Step 8: Create the Ride Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0.8, 0, 1.0))\nride_cymbal = bpy.context.object\nride_cymbal.name = \"Ride Cymbal\"\nride_cymbal.data.materials.append(cymbal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.287231661053672, "unit_n": 8, "param_ratio": 6.25}
{"id": "a288b9b9-5b04-498e-bf79-dc16bb6d0162", "name": "Sunglasses Case", "instruction": "Design a simple rectangular sunglasses case with a hinged opening.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Bottom Part of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbottom_case = bpy.context.object\nbottom_case.name = \"Bottom Case\"\nbottom_case.scale[0] = 1.5  # Length\nbottom_case.scale[1] = 0.5  # Width\nbottom_case.scale[2] = 0.2  # Height\nbottom_case.data.materials.append(case_color)\n\n# Step 3: Create the Top Part of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\ntop_case = bpy.context.object\ntop_case.name = \"Top Case\"\ntop_case.scale[0] = 1.5  # Length\ntop_case.scale[1] = 0.5  # Width\ntop_case.scale[2] = 0.2  # Height\ntop_case.data.materials.append(case_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, -0.55, 0.9))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lie horizontally\nhinge.data.materials.append(case_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.162392138036661, "unit_n": 3, "param_ratio": 6.0}
{"id": "38fe74fe-d686-4069-829a-20437e980ed2", "name": "Floral Ornament", "instruction": "Generate a 3D model of a floral ornament. It should feature an intricate arrangement of flowers and leaves, forming a circular pattern. The design should be detailed and decorative, suitable for use in various decorative applications.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the Flowers\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0))\n    flower = bpy.context.object\n    flower.name = f\"Flower {i + 1}\"\n    flower.data.materials.append(flower_color)\n\n# Step 3: Create the Leaves\nfor i in range(8):\n    angle = i * (math.pi / 4) + (math.pi / 8)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=(x, y, 0))\n    leaf = bpy.context.object\n    leaf.name = f\"Leaf {i + 1}\"\n    leaf.rotation_euler = (0, 0, angle)\n    leaf.data.materials.append(leaf_color)\n\n# Step 4: Create the Centerpiece\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0))\ncenterpiece = bpy.context.object\ncenterpiece.name = \"Centerpiece\"\ncenterpiece.data.materials.append(flower_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.476039561162833, "unit_n": 17, "param_ratio": 1.2941176470588236}
{"id": "9efc781e-8b56-4100-94e2-df0541c90d7d", "name": "Pizza Slice", "instruction": "Create a 3D model of a pizza slice with pepperoni toppings. The slice should be triangular with a crust on one side. Include cheese and pepperoni slices on the top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Crust color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.3, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Slice\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, -0.5, 0.05), rotation=(math.pi/2, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.scale[0] = 1.1\ncrust.scale[1] = 0.2\ncrust.scale[2] = 0.1\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create the Pepperoni Slices\npepperoni_positions = [(0.2, 0.2, 0.1), (-0.2, 0.1, 0.1), (0, -0.2, 0.1)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7721813801168245, "unit_n": 3, "param_ratio": 10.666666666666666}
{"id": "a1506af8-30f7-43e2-b033-b781aab071dc", "name": "Dog Bed", "instruction": "Design a 3D model of a dog bed. It should be oval-shaped with a soft cushion inside.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed (Oval Shape)\nbpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=1, location=(0, 0, 0))\nbed = bpy.context.object\nbed.name = \"Bed\"\nbed.scale[0] = 1.5  # Scale to make it oval\nbed.scale[1] = 1\nbed.scale[2] = 0.3  # Flatten it to make it a bed\nbed.data.materials.append(bed_color)\n\n# Step 3: Create the Cushion (Soft Cushion Inside)\nbpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=0.9, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale[0] = 1.3  # Scale to fit inside the bed\ncushion.scale[1] = 0.8\ncushion.scale[2] = 0.2  # Flatten it to make it a cushion\ncushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.691517342237532, "unit_n": 2, "param_ratio": 11.0}
{"id": "91c5c5e7-e26e-4a44-8377-086a13db67ff", "name": "Desk Lamp", "instruction": "Let's design a desk lamp. Start with a circular base, then a straight, vertical stand. The lamp head should be adjustable and cylindrical, with a bulb inside. Add a switch on the base.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nstand = bpy.context.object\nstand.name = \"Stand\"\n\n# Step 4: Create the Lamp Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(0, 0.3, 1.1), rotation=(math.pi / 2, 0, 0))\nlamp_head = bpy.context.object\nlamp_head.name = \"Lamp Head\"\n\n# Step 5: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.5, 1.1))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\n\n# Step 6: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.3, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.399911250296631, "unit_n": 5, "param_ratio": 5.2}
{"id": "59dfa464-4dce-4131-9188-29f212d0ea79", "name": "Geometric Pattern", "instruction": "Design a geometric pattern featuring interlocking hexagons in varying sizes.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhexagon_color = bpy.data.materials.new(name=\"HexagonColor\")\nhexagon_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Function to create a hexagon\ndef create_hexagon(radius, location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=radius, location=location, fill_type='NGON')\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hexagon_color)\n    return hexagon\n\n# Step 2: Create interlocking hexagons\nhexagon1 = create_hexagon(1, (0, 0, 0))\nhexagon2 = create_hexagon(0.8, (1.5, 0, 0))\nhexagon3 = create_hexagon(0.6, (0.75, 1.3, 0))\nhexagon4 = create_hexagon(0.4, (-0.75, 1.3, 0))\nhexagon5 = create_hexagon(0.5, (-1.5, 0, 0))\nhexagon6 = create_hexagon(0.7, (-0.75, -1.3, 0))\nhexagon7 = create_hexagon(0.9, (0.75, -1.3, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.461155260361376, "unit_n": 1, "param_ratio": 7.0}
{"id": "2668fb4a-cd1c-45ec-b36f-48fc31d121ab", "name": "Chess Board", "instruction": "Create a chess board with a standard 8x8 grid. Each square should be 2 inches by 2 inches. Alternate the colors between black and white. Add a thin border around the entire board.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chess Board\nsquare_size = 0.05  # 2 inches in Blender units\nboard_size = 8 * square_size\n\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Create the Border\nborder_thickness = 0.01  # Thin border\nbpy.ops.mesh.primitive_cube_add(size=board_size + 2 * border_thickness, location=(board_size / 2 - square_size / 2, board_size / 2 - square_size / 2, -border_thickness / 2))\nborder = bpy.context.object\nborder.scale.z = border_thickness / (board_size + 2 * border_thickness)\nborder.name = \"Border\"\nborder.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.399699342196104, "unit_n": 65, "param_ratio": 0.26153846153846155}
{"id": "f595adbc-5b1a-47e7-8e75-afc1a7fc94a9", "name": "Notebook", "instruction": "Design a 3D model of a notebook. It should be rectangular, with a spiral binding on the left side. The pages should be lined, and the cover should have a simple design with the word \"Notebook\" written on it. The notebook should be open, showing a few pages with some writing on them.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the spiral\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nfor i in range(5):\n    bpy.ops.mesh.primitive_plane_add(size=1.9, location=(0, 0, 0.05 * (i + 1)))\n    page = bpy.context.object\n    page.scale = (1, 1.5, 1)\n    page.name = f\"Page {i + 1}\"\n    page.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.1, -1.5 + 0.3 * i, 0.25))\n    spiral = bpy.context.object\n    spiral.rotation_euler = (math.pi / 2, 0, 0)\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)\n\n# Step 5: Add text to the cover\nbpy.ops.object.text_add(location=(0, 0, 0.1))\ntext = bpy.context.object\ntext.data.body = \"Notebook\"\ntext.data.size = 0.3\ntext.data.extrude = 0.05\ntext.location = (-0.7, -0.7, 0.1)\ntext.rotation_euler = (math.pi / 2, 0, 0)\ntext.data.materials.append(cover_color)\n\n# Step 6: Add some lines to the pages\nfor i in range(5):\n    for j in range(10):\n        bpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.05 * (i + 1) + 0.005 * j))\n        line = bpy.context.object\n        line.scale = (1, 0.02, 1)\n        line.name = f\"Line {i + 1}_{j + 1}\"\n        line.data.materials.append(spiral_color)\n\n# Step 7: Add some writing to the pages\nfor i in range(3):\n    bpy.ops.object.text_add(location=(0, 0, 0.15 + 0.05 * i))\n    writing = bpy.context.object\n    writing.data.body = \"Sample Text\"\n    writing.data.size = 0.1\n    writing.data.extrude = 0.01\n    writing.location = (-0.9, -1.3 + 0.5 * i, 0.15 + 0.05 * i)\n    writing.rotation_euler = (math.pi / 2, 0, 0)\n    writing.data.materials.append(spiral_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.3525944196587405, "unit_n": 70, "param_ratio": 0.5428571428571428}
{"id": "116d1153-5ab4-480f-a3e6-7702423e0828", "name": "Lamp", "instruction": "Design a 3D model of a lamp. The lamp should have a base, a straight pole, and a lampshade at the top. The lampshade should be slightly wider than the base.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1.1))\npole = bpy.context.object\npole.name = \"Pole\"\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, radius2=0, depth=1, location=(0, 0, 2.6))\nlampshade = bpy.context.object\nlampshade.name = \"Lampshade\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8743741432338026, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "47a1f3df-3495-423b-84e2-58ec5e24dba6", "name": "Cookie", "instruction": "Create a cookie. It should be round with a slightly bumpy surface. Add a few chocolate chips scattered on top.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"CookieColor\")\ncookie_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Cookie color\nchocolate_chip_color = bpy.data.materials.new(name=\"ChocolateChipColor\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\n\n# Step 2: Create the Cookie Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncookie = bpy.context.object\ncookie.name = \"Cookie\"\ncookie.scale[2] = 0.2  # Flatten the sphere to make it a cookie shape\ncookie.data.materials.append(cookie_color)\n\n# Step 3: Add Bumps to the Cookie Surface\nbpy.ops.object.modifier_add(type='DISPLACE')\ndisplace = cookie.modifiers['Displace']\ndisplace.strength = 0.1\nbpy.ops.texture.new()\ntexture = bpy.data.textures[-1]\ntexture.type = 'CLOUDS'\ndisplace.texture = texture\n\n# Step 4: Create Chocolate Chips\nfor i in range(10):\n    x = random.uniform(-0.8, 0.8)\n    y = random.uniform(-0.8, 0.8)\n    z = 0.2  # Place chips on top of the cookie\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, z))\n    chip = bpy.context.object\n    chip.name = f\"ChocolateChip {i + 1}\"\n    chip.data.materials.append(chocolate_chip_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.637922337694021, "unit_n": 12, "param_ratio": 1.5833333333333333}
{"id": "11f1dec7-e064-4c5a-884f-3edb1ccda959", "name": "Screwdriver", "instruction": "Start with the handle, which is cylindrical and 5 inches long. \n\nNext, add the shaft, which is 4 inches long and extends from the handle.\n\nInclude a flat or Phillips head at the end of the shaft.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=5, location=(0, 0, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=4, location=(0, 0, 7))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.5, location=(0, 0, 9.25))\nhead = bpy.context.object\nhead.name = \"Head\"", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.38800468069697, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "0ff6590a-ae2a-4762-a0d1-9f89c5498fad", "name": "Coffee Table", "instruction": "Please create a 3D model of a coffee table. It should have a rectangular top and four legs. Ensure the design is simple and functional.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.scale[0] = 1.5  # Scale along X-axis\ntable_top.scale[1] = 0.75  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [\n    (1.4, 0.7, 0.25),\n    (-1.4, 0.7, 0.25),\n    (1.4, -0.7, 0.25),\n    (-1.4, -0.7, 0.25)\n]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 2.5  # Scale along Z-axis to make it longer\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.392193056391203, "unit_n": 2, "param_ratio": 5.0}
{"id": "c261f4ca-8678-4a07-8fde-6d9cf0da44c7", "name": "Fruit Basket", "instruction": "Can you make a 3D model of a fruit basket? Include a mix of apples, bananas, oranges, and grapes. Arrange the fruits naturally within the basket.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for apples\nbanana_yellow = bpy.data.materials.new(name=\"Banana Yellow\")\nbanana_yellow.diffuse_color = (1.0, 1.0, 0.0, 1)  # Yellow color for bananas\norange_orange = bpy.data.materials.new(name=\"Orange Orange\")\norange_orange.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color for oranges\ngrape_purple = bpy.data.materials.new(name=\"Grape Purple\")\ngrape_purple.diffuse_color = (0.5, 0.0, 0.5, 1)  # Purple color for grapes\nbasket_brown = bpy.data.materials.new(name=\"Basket Brown\")\nbasket_brown.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color for basket\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_brown)\n\n# Step 3: Create Apples\nfor i in range(3):\n    x = 0.5 * math.cos(math.radians(i * 120))\n    y = 0.5 * math.sin(math.radians(i * 120))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, 0.5))\n    apple = bpy.context.object\n    apple.name = f\"Apple {i + 1}\"\n    apple.data.materials.append(apple_red)\n\n# Step 4: Create Bananas\nfor i in range(2):\n    x = 0.7 * math.cos(math.radians(i * 180 + 45))\n    y = 0.7 * math.sin(math.radians(i * 180 + 45))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.8, location=(x, y, 0.5), rotation=(0, math.radians(90), math.radians(i * 180 + 45)))\n    banana = bpy.context.object\n    banana.name = f\"Banana {i + 1}\"\n    banana.data.materials.append(banana_yellow)\n\n# Step 5: Create Oranges\nfor i in range(2):\n    x = 0.5 * math.cos(math.radians(i * 180 + 90))\n    y = 0.5 * math.sin(math.radians(i * 180 + 90))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, 0.5))\n    orange = bpy.context.object\n    orange.name = f\"Orange {i + 1}\"\n    orange.data.materials.append(orange_orange)\n\n# Step 6: Create Grapes\nfor i in range(5):\n    x = 0.3 * math.cos(math.radians(i * 72))\n    y = 0.3 * math.sin(math.radians(i * 72))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.7))\n    grape = bpy.context.object\n    grape.name = f\"Grape {i + 1}\"\n    grape.data.materials.append(grape_purple)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6428617103734826, "unit_n": 13, "param_ratio": 3.8461538461538463}
{"id": "ccb9f56b-9b8d-4c79-b37e-8ba343da3233", "name": "Hat", "instruction": "Design a 3D model of a hat with a wide brim and a rounded crown. Add a ribbon around the base of the crown for a decorative touch. Could you also show the hat from different angles to highlight its shape and design?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brownish color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.3))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)\n\n# Step 5: Set the Camera Views\nbpy.ops.object.camera_add(location=(5, -5, 5), rotation=(1.1, 0, 0.9))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\n\n# Set the camera as the active camera\nbpy.context.scene.camera = camera\n\n# Add a second camera for a different angle\nbpy.ops.object.camera_add(location=(-5, 5, 5), rotation=(1.1, 0, -2.2))\ncamera2 = bpy.context.object\ncamera2.name = \"Camera2\"\n\n# Render the first view\nbpy.context.scene.camera = bpy.data.objects[\"Camera\"]\nbpy.ops.render.render(write_still=True)\n\n# Render the second view\nbpy.context.scene.camera = bpy.data.objects[\"Camera2\"]\nbpy.ops.render.render(write_still=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.989932376263767, "unit_n": 5, "param_ratio": 7.2}
{"id": "8b19b2c1-0be5-4ae0-ad69-9804299a7d83", "name": "Syringe", "instruction": "Design a syringe. The syringe should have a transparent barrel with clear markings, a plunger, and a needle.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(transparent)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, -0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n\n# Step 5: Add Markings on the Barrel\nbpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.1, 0, 0.5))\nmarking = bpy.context.object\nmarking.name = \"Marking\"\nmarking.data.materials.append(plunger_color)\n\nfor i in range(10):\n    new_marking = marking.copy()\n    new_marking.data = marking.data.copy()\n    new_marking.location.z = 0.5 - i * 0.2\n    bpy.context.collection.objects.link(new_marking)\n    \nbpy.data.objects.remove(marking)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.120416151880566, "unit_n": 4, "param_ratio": 8.5}
{"id": "22aa3d18-e8aa-48d1-8492-b2dd827cd188", "name": "Hammer", "instruction": "Create a hammer with a cylindrical handle and a flat, rectangular head. The handle should be 12 inches long and the head 4 inches across.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=12, location=(0, 0, 6))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=4, location=(0, 0, 12))\nhead = bpy.context.object\nhead.name = \"Head\"\nbpy.ops.transform.resize(value=(1, 0.5, 0.5))\nbpy.ops.object.transform_apply(scale=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.595727042525728, "unit_n": 2, "param_ratio": 4.5}
{"id": "d474bd11-ac61-462e-af4d-f4d5d829cb54", "name": "Coffee Maker", "instruction": "Generate a 3D model of a coffee maker. Consider how it would look on a kitchen counter.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(silver)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(black)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0.9, 0, 1.2), rotation=(0, 1.57, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(silver)\n\n# Step 6: Create the Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(-0.9, 0, 1.2), major_radius=0.3, minor_radius=0.05, rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.113099605077798, "unit_n": 5, "param_ratio": 8.4}
{"id": "652e47b9-3e5d-4644-a894-19141fa36c82", "name": "Pet Bowl", "instruction": "Generate a 3D model of a pet bowl. The bowl should have a circular shape with a slightly raised edge. Include a non-slip base to prevent it from moving around.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.25, location=(0, 0, 0.025))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Boolean difference to create the bowl shape\nbpy.context.view_layer.objects.active = bowl\nmod_bool = bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(inner_bowl)\n\n# Step 4: Create the Non-Slip Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.05, location=(0, 0, -0.175))\nbase = bpy.context.object\nbase.name = \"Non-Slip Base\"\n\n# Assign a material to the bowl and base\nmaterial_bowl = bpy.data.materials.new(name=\"BowlMaterial\")\nmaterial_bowl.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbowl.data.materials.append(material_bowl)\n\nmaterial_base = bpy.data.materials.new(name=\"BaseMaterial\")\nmaterial_base.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbase.data.materials.append(material_base)", "color_brightness": "Dark", "verify": "human", "entropy": 4.766516119131153, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "da88565f-a364-493c-bf91-0d824ec00dad", "name": "Floral Motif", "instruction": "Design a floral motif that can be used as a decorative pattern. It should be simple and suitable for various surfaces.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npetal_color = bpy.data.materials.new(name=\"Petal Color\")\npetal_color.diffuse_color = (1, 0, 0, 1)  # Red color\ncenter_color = bpy.data.materials.new(name=\"Center Color\")\ncenter_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Center of the Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Center\"\ncenter.data.materials.append(center_color)\n\n# Step 3: Create the Petals\nfor i in range(5):\n    angle = i * (2 * math.pi / 5)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(x, y, 0))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(petal_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.548164868489762, "unit_n": 6, "param_ratio": 3.0}
{"id": "d78769c5-1dbc-42f6-ac3f-412a71413c7a", "name": "Drumstick", "instruction": "Create a basic drumstick for playing drums.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Drumstick Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0))\ndrumstick_body = bpy.context.object\ndrumstick_body.name = \"Drumstick Body\"\ndrumstick_body.data.materials.append(wood_color)\n\n# Step 3: Create the Drumstick Tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.07, location=(0, 0, 0.5))\ndrumstick_tip = bpy.context.object\ndrumstick_tip.name = \"Drumstick Tip\"\ndrumstick_tip.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.995576284252259, "unit_n": 2, "param_ratio": 7.0}
{"id": "9b95e4cf-46e9-4d8b-a51e-625ab0d3dfc2", "name": "Geometric Wallpaper", "instruction": "Create a geometric pattern for wallpaper.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the Pattern\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i, j, 0))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(color1)\n        else:\n            square.data.materials.append(color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4961346970921783, "unit_n": 25, "param_ratio": 0.56}
{"id": "fe33188e-3e1d-4ba4-ab11-5abcb62a3acd", "name": "Smartphone", "instruction": "Design a 3D model of a smartphone. It should have a rectangular body with rounded corners and a large screen.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.7, 0.02)  # Rectangular shape with rounded corners\nbody.data.materials.append(body_color)\n\n# Step 3: Add Bevel for Rounded Corners\nbpy.ops.object.modifier_add(type='BEVEL')\nbody.modifiers[\"Bevel\"].width = 0.05\nbody.modifiers[\"Bevel\"].segments = 10\n\n# Step 4: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.38, 0.68, 1)  # Slightly smaller than the body\nscreen.data.materials.append(screen_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "8ce5447c-5cb2-44bc-94c8-83e0b923485d", "name": "Drum", "instruction": "Can you model a drum with a cylindrical body and two heads, one on each end?", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color for the drum body\nhead_color = bpy.data.materials.new(name=\"Head Color\")\nhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light color for the drum heads\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Drum Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Drum Heads\nfor z in [-1, 1]:\n    bpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, z))\n    head = bpy.context.object\n    head.name = f\"Drum Head {z}\"\n    head.data.materials.append(head_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 2, "param_ratio": 9.5}
{"id": "d29e6f2e-5a3c-4597-a741-5c02336b81a7", "name": "Drumstick", "instruction": "Design a drumstick. It should be cylindrical with a tapered end. Ensure it looks balanced and ready for drumming.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Cylinder (Body of the Drumstick)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Drumstick Body\"\n\n# Step 3: Create the Tapered End (Tip of the Drumstick)\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(0, 0, 1.6))\ntip = bpy.context.object\ntip.name = \"Drumstick Tip\"\n\n# Step 4: Join the Body and Tip\nbpy.ops.object.select_all(action='DESELECT')\nbody.select_set(True)\ntip.select_set(True)\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.85465207020426, "unit_n": 2, "param_ratio": 5.5}
{"id": "d66e97bb-0620-441d-9aab-ef4580460a4a", "name": "Dog Bed", "instruction": "Create a simple 3D model of a dog bed. It should be rectangular with raised edges for comfort.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1, 1.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.6, 0.5))\nfront_edge = bpy.context.object\nfront_edge.scale = (1, 0.1, 0.3)\nfront_edge.name = \"Front Edge\"\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.6, 0.5))\nback_edge = bpy.context.object\nback_edge.scale = (1, 0.1, 0.3)\nback_edge.name = \"Back Edge\"\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.1, 0, 0.5))\nleft_edge = bpy.context.object\nleft_edge.scale = (0.1, 1.5, 0.3)\nleft_edge.name = \"Left Edge\"\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.1, 0, 0.5))\nright_edge = bpy.context.object\nright_edge.scale = (0.1, 1.5, 0.3)\nright_edge.name = \"Right Edge\"\nright_edge.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7751545424252226, "unit_n": 5, "param_ratio": 5.0}
{"id": "d0dd5954-d407-42aa-ad9b-b669bd0bbf5c", "name": "Pizza", "instruction": "Imagine a pizza with a diameter of 12 inches. The crust should be slightly raised around the edges. Now, add a layer of tomato sauce spread evenly over the base. Next, cover the sauce with a generous amount of shredded cheese. Finally, place pepperoni slices evenly across the surface.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Yellowish color for the cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Dark red color for the pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(crust_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_torus_add(major_radius=6, minor_radius=0.3, location=(0, 0, 0.1))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.8, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.7, depth=0.05, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Pepperoni Slices\npepperoni_positions = [(2, 2), (-2, 2), (2, -2), (-2, -2), (0, 3), (3, 0), (-3, 0), (0, -3)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(x, y, 0.2))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.559599870169128, "unit_n": 5, "param_ratio": 9.0}
{"id": "ae196ac0-bd4e-4b47-a0a7-e226bf9b2308", "name": "Umbrella", "instruction": "What features would you like in an umbrella? Create a 3D model of a standard umbrella with a canopy, a central pole, and a handle at the bottom.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Dark blue color\npole_color = bpy.data.materials.new(name=\"Pole Color\")\npole_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=0.5, location=(0, 0, 1))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)\n\n# Step 3: Create the Central Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\npole = bpy.context.object\npole.name = \"Central Pole\"\npole.data.materials.append(pole_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, -1.15))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(pole_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.0948996795223964, "unit_n": 3, "param_ratio": 9.0}
{"id": "f5b5802e-0f42-4068-8d30-efe3f3f37b12", "name": "Smartphone", "instruction": "Show me a 3D model of a smartphone. It should have a rectangular shape with a touchscreen display.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.7, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Touchscreen Display\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\ndisplay = bpy.context.object\ndisplay.name = \"Touchscreen Display\"\ndisplay.scale = (0.38, 0.68, 1)\ndisplay.data.materials.append(dark_gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "a65642d8-f421-497e-9433-501ef1345c29", "name": "Apple", "instruction": "Create a simple 3D model of an apple.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (0.8, 0.0, 0.0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.4, 0.2, 0.0, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 9.5}
{"id": "c3716fde-f4b5-4ab7-8372-52fac64d578d", "name": "Carry-on Suitcase", "instruction": "Can you generate a 3D model of a carry-on suitcase designed for quick access to a laptop and travel documents?", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Suitcase\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.5, 0.3, 0.7)\nmain_body.data.materials.append(suitcase_color)\n\n# Step 3: Create the Laptop Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 1.2))\nlaptop_compartment = bpy.context.object\nlaptop_compartment.name = \"Laptop Compartment\"\nlaptop_compartment.scale = (0.45, 0.05, 0.3)\nlaptop_compartment.data.materials.append(suitcase_color)\n\n# Step 4: Create the Document Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.6))\ndocument_compartment = bpy.context.object\ndocument_compartment.name = \"Document Compartment\"\ndocument_compartment.scale = (0.45, 0.05, 0.2)\ndocument_compartment.data.materials.append(suitcase_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, -0.35, 1.8), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(suitcase_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.8012999337340942, "unit_n": 4, "param_ratio": 6.25}
{"id": "81bf4f0a-87a3-4a33-84c9-af52cac4c0c7", "name": "Trash Can", "instruction": "Create a trash can.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Trash Can\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Trash Can Body\"\nbody.data.materials.append(gray)\n\n# Step 3: Create the Lid of the Trash Can\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Trash Can Lid\"\nlid.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 7.5}
{"id": "2f5cf9bb-947d-4aad-9299-f30c3e65cea5", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone with a rectangular shape and a screen that covers the entire front.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.05)  # Rectangular shape\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.39, 0.79, 1)  # Slightly smaller than the body to cover the front\nscreen.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 6.5}
{"id": "611e9cd9-b1c6-4913-85c9-5e6e232744a3", "name": "Chessboard", "instruction": "Design a 3D chessboard with all 32 pieces. The board should have an 8x8 grid of alternating light and dark squares. Include all the standard chess pieces: kings, queens, bishops, knights, rooks, and pawns. The pieces should be easily distinguishable from one another.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nfor i in range(8):\n    for j in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i, j, 0))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Define a function to create a chess piece\ndef create_piece(name, location, scale=(1, 1, 1), color=(1, 1, 1, 1)):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    piece.scale = scale\n    mat = bpy.data.materials.new(name=name + \" Material\")\n    mat.diffuse_color = color\n    piece.data.materials.append(mat)\n    return piece\n\n# Define the piece colors\nwhite_piece_color = (1, 1, 1, 1)  # White\nblack_piece_color = (0, 0, 0, 1)  # Black\n\n# Step 3: Create the Pieces\n# Pawns\nfor i in range(8):\n    create_piece(\"White Pawn\", (i, 1, 0.2), color=white_piece_color)\n    create_piece(\"Black Pawn\", (i, 6, 0.2), color=black_piece_color)\n\n# Rooks\ncreate_piece(\"White Rook\", (0, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"White Rook\", (7, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"Black Rook\", (0, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\ncreate_piece(\"Black Rook\", (7, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\n\n# Knights\ncreate_piece(\"White Knight\", (1, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"White Knight\", (6, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"Black Knight\", (1, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\ncreate_piece(\"Black Knight\", (6, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\n\n# Bishops\ncreate_piece(\"White Bishop\", (2, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"White Bishop\", (5, 0, 0.2), scale=(1, 1, 2), color=white_piece_color)\ncreate_piece(\"Black Bishop\", (2, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\ncreate_piece(\"Black Bishop\", (5, 7, 0.2), scale=(1, 1, 2), color=black_piece_color)\n\n# Queens\ncreate_piece(\"White Queen\", (3, 0, 0.2), scale=(1, 1, 3), color=white_piece_color)\ncreate_piece(\"Black Queen\", (3, 7, 0.2), scale=(1, 1, 3), color=black_piece_color)\n\n# Kings\ncreate_piece(\"White King\", (4, 0, 0.2), scale=(1, 1, 3), color=white_piece_color)\ncreate_piece(\"Black King\", (4, 7, 0.2), scale=(1, 1, 3), color=black_piece_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.5862119875719225, "unit_n": 65, "param_ratio": 0.24615384615384617}
{"id": "723ce2b1-a516-4b26-8811-a141374fe6e5", "name": "Blender", "instruction": "What do you envision for the future of blenders? Create a basic blender with a cylindrical base, a transparent jar on top, and a lid. Include a simple control panel on the base.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent light gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[0] = 1.2\ncontrol_panel.scale[1] = 0.1\ncontrol_panel.scale[2] = 0.3\ncontrol_panel.data.materials.append(control_panel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.696886339814602, "unit_n": 4, "param_ratio": 9.75}
{"id": "3b9728da-f5bf-44e6-a62c-3567b9bfb5e5", "name": "Wall Pattern", "instruction": "Design a wall pattern with repeating floral motifs. The pattern should have a central flower surrounded by leaves and smaller flowers. The motifs should be evenly spaced.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0, 0, 1)  # Red color\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Function to create a flower\ndef create_flower(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    flower = bpy.context.object\n    flower.data.materials.append(flower_color)\n\n# Function to create a leaf\ndef create_leaf(location, rotation):\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=location)\n    leaf = bpy.context.object\n    leaf.rotation_euler = rotation\n    leaf.scale[1] = 0.5\n    leaf.data.materials.append(leaf_color)\n\n# Function to create a floral motif\ndef create_floral_motif(location):\n    # Central flower\n    create_flower(location)\n    \n    # Surrounding leaves\n    leaf_positions = [\n        (0.2, 0, 0),\n        (-0.2, 0, 0),\n        (0, 0.2, 0),\n        (0, -0.2, 0)\n    ]\n    leaf_rotations = [\n        (0, 0, 0),\n        (0, 0, math.pi),\n        (0, 0, math.pi/2),\n        (0, 0, -math.pi/2)\n    ]\n    \n    for pos, rot in zip(leaf_positions, leaf_rotations):\n        create_leaf((location[0] + pos[0], location[1] + pos[1], location[2] + pos[2]), rot)\n    \n    # Surrounding smaller flowers\n    small_flower_positions = [\n        (0.3, 0.3, 0),\n        (-0.3, 0.3, 0),\n        (0.3, -0.3, 0),\n        (-0.3, -0.3, 0)\n    ]\n    \n    for pos in small_flower_positions:\n        create_flower((location[0] + pos[0], location[1] + pos[1], location[2] + pos[2]))\n\n# Create a grid of floral motifs\nspacing = 1.0\nfor i in range(-2, 3):\n    for j in range(-2, 3):\n        create_floral_motif((i * spacing, j * spacing, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.756583727595707, "unit_n": 2, "param_ratio": 6.0}
{"id": "bd1b9e4d-653a-48b5-920e-98509aad90ad", "name": "Apple", "instruction": "Create a 3D model of an apple. The apple should have a round shape with a small stem at the top. The surface should be smooth and evenly colored. The overall appearance should be simple and natural.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "b7b3f4cd-61eb-49b1-ac8e-409d90fdf86b", "name": "Wireless Router", "instruction": "Create a 3D model of a wireless router. Compare two designs: one with a flat, rectangular body and three antennas, and another with a cylindrical body and internal antennas. Both should have LED indicators on the front.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color for LED\n\n# Design 1: Flat, Rectangular Body with Three Antennas\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-3, 0, 0.5))\nbody_rect = bpy.context.object\nbody_rect.name = \"Rectangular Body\"\nbody_rect.scale = (1.5, 1, 0.2)\nbody_rect.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = -3 + (i - 1) * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(x, 0, 1.25))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the LED Indicators\nfor i in range(3):\n    x = -3 + (i - 1) * 0.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.6))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(green)\n\n# Design 2: Cylindrical Body with Internal Antennas\n# Step 5: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(3, 0, 0.75))\nbody_cyl = bpy.context.object\nbody_cyl.name = \"Cylindrical Body\"\nbody_cyl.data.materials.append(black)\n\n# Step 6: Create the LED Indicators\nfor i in range(3):\n    x = 3 + (i - 1) * 0.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.75))\n    led = bpy.context.object\n    led.name = f\"LED {i + 4}\"\n    led.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.0741365621570385, "unit_n": 11, "param_ratio": 2.909090909090909}
{"id": "7d1b888b-64a2-46be-83ca-7b713f1c0819", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a cylindrical container with a perch for birds to stand on.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.5, 0, 0.1), rotation=(0, 1.5708, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3645061641438576, "unit_n": 2, "param_ratio": 6.5}
{"id": "2ef50664-53df-43ec-8965-5502728d84ac", "name": "Cat Bed", "instruction": "Design a small, cozy cat bed with a circular shape and raised edges.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsoft_grey = bpy.data.materials.new(name=\"Soft Grey\")\nsoft_grey.diffuse_color = (0.75, 0.75, 0.75, 1)  # Soft grey color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(soft_grey)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.2, location=(0, 0, 0.15))\nbed_edges = bpy.context.object\nbed_edges.name = \"Bed Edges\"\nbed_edges.data.materials.append(soft_grey)", "color_brightness": "Bright", "verify": "human", "entropy": 5.492526358172097, "unit_n": 2, "param_ratio": 7.5}
{"id": "4320aa93-68f3-4d62-b50b-be7c4ffdc361", "name": "Pet Bed", "instruction": "Could you design a pet bed that is comfortable for a medium-sized dog, with a removable and washable cover?", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.35, 0.2, 1)  # Brown color for the bed\n\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Bed Sides\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.2, location=(0, 0, 0.2))\nbed_sides = bpy.context.object\nbed_sides.name = \"Bed Sides\"\nbed_sides.data.materials.append(bed_color)\n\n# Step 4: Create the Removable Cover\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.05, location=(0, 0, 0.25))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 5.6817664261190455, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "5898a0f6-5a57-4f8d-a594-7667c2cd05d0", "name": "Sofa", "instruction": "Design a 3D model of a sofa with three seats. The sofa should have armrests on both sides and a backrest that extends the full length. Include cushions on each seat and the backrest. The legs should be short and sturdy.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brownish color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.7, 0.6, 1)  # Light beige color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (3, 1, 0.5)\nbase.name = \"Sofa Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (3, 0.2, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.2, 1, 0.75)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 2\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1.1))\n    cushion_seat = bpy.context.object\n    cushion_seat.scale = (0.9, 0.9, 0.2)\n    cushion_seat.name = f\"Cushion Seat {i + 1}\"\n    cushion_seat.data.materials.append(cushion_color)\n\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, -0.9, 1.7))\n    cushion_back = bpy.context.object\n    cushion_back.scale = (0.9, 0.2, 0.5)\n    cushion_back.name = f\"Cushion Back {i + 1}\"\n    cushion_back.data.materials.append(cushion_color)\n\n# Step 6: Create the Legs\nfor i in range(4):\n    x = 2.8 * (i % 2) - 1.4\n    y = 0.8 * (i // 2) - 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(x, y, 0.2))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4647509473416296, "unit_n": 14, "param_ratio": 2.5}
{"id": "6d25fdfc-a7d2-4b32-8d0b-24547a7d2efd", "name": "Sandwich", "instruction": "Design a 3D model of a sandwich. The sandwich should have two slices of bread with visible layers of ingredients in between. Include lettuce, tomato slices, cheese, and deli meat. Make sure the ingredients are neatly stacked and visible from the side.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\n\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.8, 0, 1)  # Yellow color\n\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.8, 0.4, 0.4, 1)  # Pink color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Make it flat\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Make it flat\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Make it flat\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1  # Make it flat\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "8d8c4d1e-2eda-4975-b96f-89515e33b5a1", "name": "Sofa", "instruction": "Design a 3D model of a sofa. It should have a rectangular seat, a backrest, and armrests on both sides. The sofa should be large enough to seat three people comfortably. Add cushions on the seat and backrest for added comfort.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color for the sofa\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cushions\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.scale = (3, 1, 0.5)\nseat.name = \"Seat\"\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.5, 1.5))\nbackrest = bpy.context.object\nbackrest.scale = (3, 0.5, 1)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.scale = (0.5, 1, 1)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Seat Cushions\nfor i in range(3):\n    x = (i - 1) * 2\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1.1))\n    cushion = bpy.context.object\n    cushion.scale = (0.9, 0.9, 0.2)\n    cushion.name = f\"Seat Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_color)\n\n# Step 6: Create the Backrest Cushions\nfor i in range(3):\n    x = (i - 1) * 2\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, -1.5, 2.1))\n    cushion = bpy.context.object\n    cushion.scale = (0.9, 0.4, 0.6)\n    cushion.name = f\"Backrest Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.087439082935903, "unit_n": 10, "param_ratio": 3.0}
{"id": "5a3bdcd6-83aa-404f-b640-c1fdf377e8d6", "name": "Bookshelf", "instruction": "Design a bookshelf. It should be a rectangular structure with five shelves, each evenly spaced. Ensure the shelves are sturdy and the overall height is about 6 feet.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nshelf_width = 1.0\nshelf_depth = 0.3\nshelf_height = 0.05\nbookshelf_height = 1.8  # Approximately 6 feet\nnum_shelves = 5\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Shelves\nfor i in range(num_shelves):\n    z = (i / (num_shelves - 1)) * bookshelf_height - bookshelf_height / 2\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\nside_panel_thickness = 0.05\nfor x in [-shelf_width / 2, shelf_width / 2]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0))\n    side_panel = bpy.context.object\n    side_panel.scale = (side_panel_thickness / 2, shelf_depth / 2, bookshelf_height / 2)\n    side_panel.name = f\"Side Panel {int((x + shelf_width / 2) / shelf_width)}\"\n    side_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nback_panel_thickness = 0.02\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -shelf_depth / 2, 0))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, back_panel_thickness / 2, bookshelf_height / 2)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.29244910765974, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "a9462e30-814d-413d-9349-cf1e3ca768a7", "name": "Pizza Slice", "instruction": "Generate a 3D model of a pizza slice. The slice should be triangular with a slightly curved crust. Add toppings such as pepperoni, mushrooms, and green peppers.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for dough\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.2, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.8, 0.8, 0.7, 1)  # Light gray color for mushrooms\npepper_color = bpy.data.materials.new(name=\"Pepper\")\npepper_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color for peppers\n\n# Step 2: Create the Pizza Slice\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=1.1, depth=0.1, location=(0, 0, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.scale[0] = 1.1\ncrust.scale[1] = 0.2\ncrust.scale[2] = 0.1\ncrust.data.materials.append(dough_color)\n\n# Step 4: Add Pepperoni\nfor i in range(5):\n    angle = i * (2 * math.pi / 5)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.06))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Add Mushrooms\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.06))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 6: Add Green Peppers\nfor i in range(4):\n    angle = i * (2 * math.pi / 4)\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(x, y, 0.06))\n    pepper = bpy.context.object\n    pepper.name = f\"Pepper {i + 1}\"\n    pepper.data.materials.append(pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.000159072800273, "unit_n": 14, "param_ratio": 3.7857142857142856}
{"id": "492fc9c0-d97e-4689-bc50-42b8e2cc8c7f", "name": "Puzzle Cube", "instruction": "Create a 3D puzzle cube consisting of multiple smaller cubes that can be twisted and turned. Each face of the larger cube should be divided into a 3x3 grid, and each smaller cube should be a different color. Ensure the pieces can move smoothly.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 1, 1)   # White\n]\n\n# Step 2: Create the smaller cubes\ncube_size = 1\ngap = 0.02\noffset = (cube_size + gap) * 1.5\n\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(x * (cube_size + gap) - offset, y * (cube_size + gap) - offset, z * (cube_size + gap) - offset))\n            cube = bpy.context.object\n            cube.name = f\"Cube_{x}_{y}_{z}\"\n            mat = bpy.data.materials.new(name=f\"Material_{x}_{y}_{z}\")\n            mat.diffuse_color = random.choice(colors)\n            cube.data.materials.append(mat)\n\n# Step 3: Group the cubes for easy manipulation\nbpy.ops.object.select_all(action='DESELECT')\nfor obj in bpy.data.objects:\n    if \"Cube_\" in obj.name:\n        obj.select_set(True)\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)\n\n# Step 4: Add rotation constraints to simulate smooth movements\n# Note: This part is conceptual as actual rotation constraints would require more complex rigging and scripting\n# Here we just set up the basic structure\n\n# Create an empty object to act as a pivot for rotations\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\npivot = bpy.context.object\npivot.name = \"Pivot\"\n\n# Parent all cubes to the pivot\nbpy.ops.object.select_all(action='DESELECT')\nfor obj in bpy.data.objects:\n    if \"Cube_\" in obj.name:\n        obj.select_set(True)\npivot.select_set(True)\nbpy.context.view_layer.objects.active = pivot\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)\n\n# Now the pivot can be used to rotate the entire cube structure\n# Example: Rotate the pivot to see the effect\npivot.rotation_euler = (0.5, 0.5, 0.5)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 28, "param_ratio": 0.2857142857142857}
{"id": "f88a3237-e655-4623-8d5f-629dd027ab72", "name": "Screwdriver", "instruction": "I'd like you to design a screwdriver. The handle should be ergonomic, about 4 inches long with a textured grip. The shaft should be about 6 inches long and cylindrical, ending in a flat-head tip. The screwdriver should be easy to hold and use.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nbpy.ops.object.modifier_add(type='SUBSURF')\nhandle.modifiers[\"Subdivision\"].levels = 2\nbpy.ops.object.shade_smooth()\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=6, location=(0, 0, -3))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\n\n# Step 4: Create the Flat-Head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, -6.1))\ntip = bpy.context.object\ntip.name = \"Tip\"\nbpy.ops.transform.resize(value=(1, 0.2, 0.05))\n\n# Step 5: Join the Shaft and Tip\nbpy.ops.object.select_all(action='DESELECT')\nshaft.select_set(True)\ntip.select_set(True)\nbpy.context.view_layer.objects.active = shaft\nbpy.ops.object.join()\n\n# Step 6: Position the Handle and Shaft\nbpy.ops.object.select_all(action='DESELECT')\nhandle.select_set(True)\nshaft.select_set(True)\nbpy.context.view_layer.objects.active = handle\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.904610720094139, "unit_n": 4, "param_ratio": 3.5}
{"id": "001c9996-1818-4dc9-81bf-8f3c0ed37ecc", "name": "Chessboard", "instruction": "Create a 3D model of a chessboard. Compare a traditional wooden chessboard with a modern glass one. Include a grid of 64 squares. For the traditional model, use simple square patterns. For the modern model, use transparent squares.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\nglass_material = bpy.data.materials.new(name=\"Glass\")\nglass_material.diffuse_color = (1, 1, 1, 0.2)  # Transparent color\n\n# Step 2: Create the Traditional Wooden Chessboard\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(col, row, 0))\n        square = bpy.context.object\n        square.name = f\"Wooden Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(wood_material)\n\n# Step 3: Create the Modern Glass Chessboard\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(col + 10, row, 0))\n        square = bpy.context.object\n        square.name = f\"Glass Square {row * 8 + col + 1}\"\n        square.data.materials.append(glass_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.386110267084368, "unit_n": 128, "param_ratio": 0.140625}
{"id": "1b5dfa62-48c0-4aa4-a3c4-2587ab42a1a7", "name": "Hat", "instruction": "Create a 3D model of a hat suitable for outdoor activities. The hat should have a wide brim and a chin strap.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.6, location=(0, 0, 0.35))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)\n\n# Step 4: Create the Chin Strap\nbpy.ops.curve.primitive_bezier_circle_add(radius=0.02, location=(0, 0, -0.5))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(hat_color)\n\n# Adjust the strap to form a chin strap\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(4, 1, 1))\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Dark", "verify": "human", "entropy": 4.472753664654359, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "d41ae73a-94be-4d4b-9723-95fc4836d7fb", "name": "Blender", "instruction": "Design a blender with a tall, cylindrical container and a base with buttons for controlling the speed.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2.0, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Buttons\nbutton_positions = [(-0.5, 0.8, 0.5), (0, 0.8, 0.5), (0.5, 0.8, 0.5)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.646325132580245, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "17384dcf-e9fb-4b7b-9447-bdff800cc354", "name": "Wallet", "instruction": "Create a 3D model of a wallet. It should have a main compartment for bills and several slots for cards.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Brown color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (1, 0.1, 0.5)\nmain_compartment.data.materials.append(wallet_color)\n\n# Step 3: Create the Card Slots\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.15, 0.4 - i * 0.2))\n    card_slot = bpy.context.object\n    card_slot.name = f\"Card Slot {i + 1}\"\n    card_slot.scale = (0.9, 0.02, 0.1)\n    card_slot.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6401519507212425, "unit_n": 6, "param_ratio": 2.1666666666666665}
{"id": "50409791-0da2-42ac-960c-eaa102da952d", "name": "Sofa", "instruction": "Create a cozy sofa that can comfortably seat three people. ", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (2, 1, 0.5)\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (2, 0.25, 1)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.25, 1, 0.75)\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "dd45c5b3-a2f4-4e8d-9b2e-bb5465f348c4", "name": "Coffee Maker", "instruction": "Show a coffee maker with a single on/off switch.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark color\n\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(black)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(black)\n\n# Step 5: Create the On/Off Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, 0, 0.2))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.746895035810327, "unit_n": 4, "param_ratio": 7.25}
{"id": "1a887784-bbf1-44d3-8fcd-f2df354fcbc8", "name": "Power Transformer", "instruction": "Design a power transformer with a cylindrical core and four protruding terminals at the top. The core should have evenly spaced windings.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwinding_color = bpy.data.materials.new(name=\"Winding Color\")\nwinding_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Copper color\nterminal_color = bpy.data.materials.new(name=\"Terminal Color\")\nterminal_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Windings\nfor i in range(5):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.55, minor_radius=0.05, location=(0, 0, -0.8 + i * 0.4))\n    winding = bpy.context.object\n    winding.name = f\"Winding {i + 1}\"\n    winding.data.materials.append(winding_color)\n\n# Step 4: Create the Terminals\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 1.1))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.642303138245582, "unit_n": 10, "param_ratio": 3.0}
{"id": "ed25121d-0dbe-4bed-b106-22c28fe41c19", "name": "Hamburger", "instruction": "Design a hamburger with a sesame seed bun, a beef patty, lettuce, tomato, and a slice of cheese.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the bun\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color for the patty\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for the lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.8, 0, 1)  # Yellow color for the cheese\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Beef Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(0, 0, 0.25))\npatty = bpy.context.object\npatty.name = \"Beef Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.45))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 5: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(0, 0, 0.55))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.65))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Make it flat\ncheese.data.materials.append(cheese_color)\n\n# Step 7: Create the Top Bun\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.scale[2] = 0.5  # Flatten the sphere to make it look like a bun\ntop_bun.data.materials.append(bun_color)\n\n# Step 8: Add Sesame Seeds\nimport random\nfor i in range(30):\n    x = random.uniform(-0.8, 0.8)\n    y = random.uniform(-0.8, 0.8)\n    z = 1.2\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n    seed = bpy.context.object\n    seed.name = f\"Sesame Seed {i + 1}\"\n    seed.scale[2] = 0.3  # Flatten the seeds\n    seed.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7332410834555243, "unit_n": 36, "param_ratio": 1.5833333333333333}
{"id": "3778858e-5497-4a48-bfe7-24ab7c86d207", "name": "Sushi Roll", "instruction": "Can you design a simple sushi roll model?", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.0, 0.2, 0.0, 1)  # Dark green color for seaweed\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color for rice\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color for filling\n\n# Step 2: Create the Seaweed Outer Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=2.0, location=(0, 0, 0))\nseaweed_outer = bpy.context.object\nseaweed_outer.name = \"Seaweed Outer\"\nseaweed_outer.data.materials.append(seaweed)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2.1, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice)\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2.2, location=(0, 0, 0))\nfilling_center = bpy.context.object\nfilling_center.name = \"Filling Center\"\nfilling_center.data.materials.append(filling)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.600308450524309, "unit_n": 3, "param_ratio": 10.0}
{"id": "8435186b-9d93-4519-a4a7-8e45a4d33848", "name": "IV Stand", "instruction": "Can you generate a 3D model of an IV stand? It should have a pole with adjustable height and a minimum of four hooks at the top for holding bags.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, 1.05))\npole = bpy.context.object\npole.name = \"Pole\"\n\n# Step 4: Create the Adjustable Part of the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=1.5, location=(0, 0, 2.8))\nadjustable_pole = bpy.context.object\nadjustable_pole.name = \"Adjustable Pole\"\n\n# Step 5: Create the Hooks\nfor i in range(4):\n    angle = i * (3.14159 / 2)\n    x = 0.1 * math.cos(angle)\n    y = 0.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.2, location=(x, y, 3.55), rotation=(0, 1.5708, angle))\n    hook = bpy.context.object\n    hook.name = f\"Hook {i + 1}\"\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.321956725112407, "unit_n": 7, "param_ratio": 3.2857142857142856}
{"id": "efff3fe8-b6cc-44a0-8875-6a7731d16093", "name": "Espresso Grinder", "instruction": "Design an espresso grinder with a single button operation.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red button color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 0.95))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 4: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=0.7, radius2=0.3, depth=0.7, location=(0, 0, 1.75))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(metal)\n\n# Step 5: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0.8, 0.3))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.431319251555392, "unit_n": 4, "param_ratio": 7.75}
{"id": "5f903881-0913-4b69-87af-4acf4a9b7f29", "name": "Hand Saw", "instruction": "I need a 3D model of a hand saw. It should have a long, serrated blade and a handle on one end.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the blade\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color for the handle\n\n# Step 2: Create the Blade\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nblade = bpy.context.object\nblade.name = \"Blade\"\nblade.scale[0] = 4  # Length of the blade\nblade.scale[1] = 0.1  # Thickness of the blade\nblade.scale[2] = 0.5  # Height of the blade\nblade.data.materials.append(blade_color)\n\n# Step 3: Create the Serration\nfor i in range(8):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.1, depth=0.2, location=(-3.5 + i, 0, -0.25))\n    tooth = bpy.context.object\n    tooth.name = f\"Tooth {i + 1}\"\n    tooth.rotation_euler[1] = math.pi / 2\n    tooth.data.materials.append(blade_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(4.5, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale[0] = 0.5  # Length of the handle\nhandle.scale[1] = 0.3  # Thickness of the handle\nhandle.scale[2] = 1  # Height of the handle\nhandle.data.materials.append(handle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8712010109078907, "unit_n": 10, "param_ratio": 2.4}
{"id": "5c07b21d-26b5-48fc-80d7-60ab3890a578", "name": "Hat", "instruction": "Construct a hat. It has a brim that goes all the way around and a crown that fits on the head.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "74092212-216d-4329-8a48-cac3b0a28338", "name": "Hammer", "instruction": "Create a hammer with a simple design.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_grey = bpy.data.materials.new(name=\"Metal Grey\")\nmetal_grey.diffuse_color = (0.6, 0.6, 0.6, 1)  # Grey color for the hammerhead\nwood_brown = bpy.data.materials.new(name=\"Wood Brown\")\nwood_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the handle\n\n# Step 2: Create the Hammerhead\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 1))\nhammerhead = bpy.context.object\nhammerhead.name = \"Hammerhead\"\nhammerhead.data.materials.append(metal_grey)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood_brown)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2943311956289563, "unit_n": 2, "param_ratio": 9.5}
{"id": "ba9abbf6-aee0-4817-a4b7-eca8c491121a", "name": "Apple", "instruction": "Create a simple apple.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_body.data.materials.append(apple_red)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(apple_red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 7.0}
{"id": "e28bf8a3-ceee-4ec7-a69f-2635e90f0277", "name": "Cargo Truck", "instruction": "Create a 3D model of a cargo truck. The truck should have a rectangular cargo area, a driver's cabin at the front, and four wheels. Include side mirrors, headlights, and a front grille. The cargo area should be plain and enclosed.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntruck_color = bpy.data.materials.new(name=\"TruckColor\")\ntruck_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Cargo Area\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncargo_area = bpy.context.object\ncargo_area.name = \"Cargo Area\"\ncargo_area.scale[0] = 2  # Length\ncargo_area.scale[1] = 1  # Width\ncargo_area.scale[2] = 1  # Height\ncargo_area.data.materials.append(truck_color)\n\n# Step 3: Create the Driver's Cabin\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0.5))\ncabin = bpy.context.object\ncabin.name = \"Cabin\"\ncabin.scale[0] = 0.5  # Length\ncabin.scale[1] = 1  # Width\ncabin.scale[2] = 0.5  # Height\ncabin.data.materials.append(truck_color)\n\n# Step 4: Create the Wheels\nwheel_positions = [(-1, 0.75, -0.5), (-1, -0.75, -0.5), (1, 0.75, -0.5), (1, -0.75, -0.5)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.2, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(truck_color)\n\n# Step 5: Create the Side Mirrors\nmirror_positions = [(-1.75, 0.6, 0.5), (-1.75, -0.6, 0.5)]\nfor i, pos in enumerate(mirror_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    mirror = bpy.context.object\n    mirror.name = f\"Mirror {i + 1}\"\n    mirror.data.materials.append(truck_color)\n\n# Step 6: Create the Headlights\nheadlight_positions = [(-2, 0.3, 0.2), (-2, -0.3, 0.2)]\nfor i, pos in enumerate(headlight_positions):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=pos)\n    headlight = bpy.context.object\n    headlight.name = f\"Headlight {i + 1}\"\n    headlight.data.materials.append(truck_color)\n\n# Step 7: Create the Front Grille\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-2, 0, 0.3))\ngrille = bpy.context.object\ngrille.name = \"Grille\"\ngrille.scale[0] = 0.1  # Depth\ngrille.scale[1] = 0.5  # Width\ngrille.scale[2] = 0.2  # Height\ngrille.data.materials.append(truck_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.9671494312821165, "unit_n": 6, "param_ratio": 4.0}
{"id": "6083fc41-c3e2-4200-a576-af92c393dedd", "name": "Cat Bed", "instruction": "Hello, can you create a 3D model of a cat bed? It should be round and about 18 inches in diameter. Include a low rim around the edge.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2286, depth=0.05, location=(0, 0, 0))  # 18 inches in diameter (0.2286 meters)\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Rim of the Bed\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2286, minor_radius=0.03, location=(0, 0, 0.04))\nrim = bpy.context.object\nrim.name = \"Rim\"\nrim.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.636005292302714, "unit_n": 2, "param_ratio": 7.5}
{"id": "bf236a18-c271-46d9-918e-01bd531aa3cb", "name": "Travel Pillow", "instruction": "Create a 3D model of a travel pillow. The pillow should be U-shaped to fit around the neck. The color should be a neutral tone.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nneutral_tone = bpy.data.materials.new(name=\"Neutral Tone\")\nneutral_tone.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the U-shaped Pillow\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0), rotation=(0, 0, math.pi/2))\npillow = bpy.context.object\npillow.name = \"Travel Pillow\"\npillow.scale[0] = 1.5  # Scale to make it U-shaped\npillow.data.materials.append(neutral_tone)\n\n# Step 3: Remove the inner part to make it U-shaped\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bisect(plane_co=(0, 0, 0), plane_no=(1, 0, 0), clear_inner=True)\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Bright", "verify": "human", "entropy": 5.239759513358643, "unit_n": 1, "param_ratio": 13.0}
{"id": "d30d6067-ea2f-4b6d-ae9b-613be093f258", "name": "Pizza Slice", "instruction": "Model a pizza slice with a triangular shape and visible toppings like pepperoni and olives.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Crust color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.2, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Olive color\n\n# Step 2: Create the Pizza Slice (Base)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=1, depth=0.1, location=(0, 0, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create Pepperoni\npepperoni_positions = [(0.3, 0.2, 0.1), (-0.3, 0.2, 0.1), (0, -0.3, 0.1)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create Olives\nolive_positions = [(0.2, -0.1, 0.1), (-0.2, -0.1, 0.1), (0, 0.3, 0.1)]\nfor pos in olive_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=pos)\n    olive = bpy.context.object\n    olive.name = \"Olive\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.782497070283316, "unit_n": 4, "param_ratio": 9.25}
{"id": "a8b4a2a1-b7c7-4e1b-ad23-d00c85d4d743", "name": "Centrifuge Machine", "instruction": "Create a 3D model of a laboratory centrifuge. Begin with a cylindrical base for the main body. Add a lid on top with a circular handle. Inside, place a rotor with multiple tube slots arranged in a circular pattern. Include a control panel on the front.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nrotor_color = bpy.data.materials.new(name=\"Rotor Color\")\nrotor_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 1.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0, 1.75))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 5: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(0, 0, 1.4))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 6: Create Tube Slots\nnum_slots = 8\nfor i in range(num_slots):\n    angle = i * (2 * math.pi / num_slots)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 1.4))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)\n\n# Step 7: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 1.1, 0.4))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.data.materials.append(panel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.429277561034631, "unit_n": 6, "param_ratio": 9.0}
{"id": "e4bcf3f9-9f78-4643-9159-24e19d81d1b2", "name": "Sandwich", "instruction": "Let's create a 3D model of a sandwich. Start with two slices of bread. Add layers of ingredients like lettuce, tomato, cheese, and ham between the slices. Ensure the layers are evenly stacked.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.85, 0.1, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.9, 0.44, 0.37, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer of lettuce\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make it a layer of tomato\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a layer of cheese\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05  # Flatten the cube to make it a layer of ham\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "cfb47a62-ef6e-4818-86c1-fe49ae43873d", "name": "Sandwich", "instruction": "Design a sandwich. It should have two slices of bread with layers of filling in between. Include visible layers of meat, cheese, and vegetables.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color\n\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.75, 0.22, 0.17, 1)  # Red color\n\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.25, 1)  # Yellow color\n\nveggie_color = bpy.data.materials.new(name=\"Veggie\")\nveggie_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.2))\nmeat_layer = bpy.context.object\nmeat_layer.name = \"Meat Layer\"\nmeat_layer.scale[2] = 0.05  # Make it flat\nmeat_layer.data.materials.append(meat_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.3))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.scale[2] = 0.05  # Make it flat\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Veggie Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.4))\nveggie_layer = bpy.context.object\nveggie_layer.name = \"Veggie Layer\"\nveggie_layer.scale[2] = 0.05  # Make it flat\nveggie_layer.data.materials.append(veggie_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "10509faf-9421-4497-aec3-945ad564da6a", "name": "Screwdriver", "instruction": "Please design a 3D model of a screwdriver. It should have a long, thin shaft with a flat head and a handle that fits comfortably in a hand.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color for the metal shaft\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\n\n# Step 2: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 3: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 2.05))\nflat_head = bpy.context.object\nflat_head.name = \"Flat Head\"\nflat_head.scale[0] = 0.02  # Make it flat\nflat_head.data.materials.append(metal_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.164625962890905, "unit_n": 3, "param_ratio": 8.0}
{"id": "800157e7-8142-49ba-aaf6-ff82d541c0b0", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. Start with a round base, add a layer of tomato sauce, then some cheese on top. Include pepperoni slices evenly distributed across the pizza.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for the dough\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for the cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for the pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.1\npepperoni_distance = 0.7\n\nfor i in range(num_pepperoni):\n    angle = (2 * math.pi / num_pepperoni) * i\n    x = pepperoni_distance * math.cos(angle)\n    y = pepperoni_distance * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.428414735711405, "unit_n": 4, "param_ratio": 9.75}
{"id": "ee046afc-807a-44d1-80c8-9eafc239e695", "name": "Apple", "instruction": "Create a 3D model of an apple. How would you describe the appearance of the apple?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(apple_red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 7.0}
{"id": "04b4e14b-786f-42d3-806c-b3627de956e4", "name": "Logo", "instruction": "Create a simple logo. It should be a geometric shape with clean lines and no text.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nlogo_color = bpy.data.materials.new(name=\"LogoColor\")\nlogo_color.diffuse_color = (0.1, 0.5, 0.8, 1)  # Medium bright blue color\n\n# Step 2: Create the Geometric Shape (Triangle)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(0, 0, 0))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(logo_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 11.0}
{"id": "78457631-04ae-4729-b193-08b41cdc368d", "name": "Hand Saw", "instruction": "Can you create a 3D model of a hand saw? It should have a handle and a straight blade with serrated teeth.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Brownish color for the handle\nblade_color = bpy.data.materials.new(name=\"BladeColor\")\nblade_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the blade\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, -0.5, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Blade\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nblade = bpy.context.object\nblade.name = \"Blade\"\nblade.scale[0] = 0.05  # Make it thin\nblade.scale[1] = 2  # Make it long\nblade.scale[2] = 0.1  # Make it flat\nblade.data.materials.append(blade_color)\n\n# Step 4: Create the Serrated Teeth\nfor i in range(20):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.05, depth=0.1, location=(0, 0.1 * i - 1, -0.05))\n    tooth = bpy.context.object\n    tooth.name = f\"Tooth {i + 1}\"\n    tooth.rotation_euler[1] = 1.5708  # Rotate to align with the blade\n    tooth.data.materials.append(blade_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.004705670529451, "unit_n": 22, "param_ratio": 1.0909090909090908}
{"id": "d282af5e-7114-4d3d-86be-5b5abf4d74ba", "name": "Pet Bowl", "instruction": "Can you generate a pet bowl? It should be round and shallow, suitable for food or water.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 3: Hollow out the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.45, location=(0, 0, 0.025))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Modifier to create the hollow\nmod_bool = bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner bowl\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "894ff9e6-4f4c-44be-9911-0a2e2ead4119", "name": "Sandwich", "instruction": "Create a sandwich with two slices of bread. Inside, add layers of lettuce, tomato slices, and cheese. Ensure the ingredients are visible between the bread slices.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.85, 0.1, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.02\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.05, location=(0, 0, 0.2))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=1.6, location=(0, 0, 0.25))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.02\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9190518983012614, "unit_n": 5, "param_ratio": 8.2}
{"id": "d5c62568-d8de-44cb-8842-c09cad8e53c2", "name": "Geometric Pattern", "instruction": "Design a geometric pattern consisting of interlocking hexagons. Use two alternating colors for the hexagons to create a visually appealing pattern.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Function to create a hexagon\ndef create_hexagon(location, material):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(material)\n    return hexagon\n\n# Step 2: Create the pattern\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5\n        y = row * math.sqrt(3)\n        if col % 2 == 1:\n            y += math.sqrt(3) / 2\n        material = color1 if (row + col) % 2 == 0 else color2\n        create_hexagon((x, y, 0), material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.450002547309176, "unit_n": 1, "param_ratio": 13.0}
{"id": "3c06f5d9-8e2f-42b0-ae05-65da48527b03", "name": "Dog Bowl", "instruction": "Design a dog bowl.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Outer Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0))\nouter_bowl = bpy.context.object\nouter_bowl.name = \"Outer Bowl\"\nouter_bowl.data.materials.append(bowl_color)\n\n# Step 3: Create the Inner Bowl (subtract from the outer bowl)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.4, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Modifier to create the hollow part\nmod_bool = outer_bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\n\n# Apply the modifier\nbpy.context.view_layer.objects.active = outer_bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner bowl mesh\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071983, "unit_n": 2, "param_ratio": 7.5}
{"id": "40a0c02a-e0bb-41d4-8dd5-469454af51a2", "name": "Drum", "instruction": "Design a 3D model of a drum. It should have a cylindrical body with a drumhead stretched across the top. Include a pair of drumsticks.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (1, 1, 1, 1)  # White color\ndrumstick_color = bpy.data.materials.new(name=\"Drumstick Color\")\ndrumstick_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Drumsticks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 1))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.rotation_euler = (0, 0.5, 0)\n    drumstick.data.materials.append(drumstick_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.615961179475769, "unit_n": 4, "param_ratio": 7.25}
{"id": "89e4819b-5ef6-4923-b20e-99a8ef0336df", "name": "Espresso Machine", "instruction": "How do you feel about modeling an espresso machine that features an integrated coffee grinder and a milk frother on the side?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Main Body of the Espresso Machine\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.7, 0.5, 1)\nmain_body.data.materials.append(metallic)\n\n# Step 3: Create the Coffee Grinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.7, location=(0, 0.6, 1.85))\ngrinder = bpy.context.object\ngrinder.name = \"Coffee Grinder\"\ngrinder.data.materials.append(black)\n\n# Step 4: Create the Milk Frother\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0.8, 0, 1.2))\nfrother = bpy.context.object\nfrother.name = \"Milk Frother\"\nfrother.data.materials.append(metallic)\n\n# Step 5: Create the Coffee Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.5, 1.2))\nspout = bpy.context.object\nspout.name = \"Coffee Spout\"\nspout.data.materials.append(black)\n\n# Step 6: Create the Drip Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.8, 0.3))\ndrip_tray = bpy.context.object\ndrip_tray.name = \"Drip Tray\"\ndrip_tray.scale = (0.6, 0.3, 0.1)\ndrip_tray.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2407064763267046, "unit_n": 5, "param_ratio": 6.6}
{"id": "afe1f0b3-6633-4046-a093-0e2f0270f18e", "name": "Wall Mural", "instruction": "Design a wall mural that incorporates geometric shapes and patterns. The mural should have a mix of triangles, circles, and squares in various sizes, arranged in a visually appealing manner. Use a color scheme that includes shades of blue, green, and gray.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Function to create a triangle\ndef create_triangle(location, size, material):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=size, depth=0.1, location=location)\n    triangle = bpy.context.object\n    triangle.data.materials.append(material)\n\n# Function to create a circle\ndef create_circle(location, size, material):\n    bpy.ops.mesh.primitive_circle_add(radius=size, location=location)\n    circle = bpy.context.object\n    circle.data.materials.append(material)\n\n# Function to create a square\ndef create_square(location, size, material):\n    bpy.ops.mesh.primitive_plane_add(size=size, location=location)\n    square = bpy.context.object\n    square.data.materials.append(material)\n\n# Step 2: Create geometric shapes\nshapes = [\n    (create_triangle, (0, 0, 0), 1, blue),\n    (create_circle, (2, 0, 0), 1, green),\n    (create_square, (4, 0, 0), 1, gray),\n    (create_triangle, (0, 2, 0), 0.5, green),\n    (create_circle, (2, 2, 0), 0.5, gray),\n    (create_square, (4, 2, 0), 0.5, blue),\n    (create_triangle, (0, 4, 0), 0.75, gray),\n    (create_circle, (2, 4, 0), 0.75, blue),\n    (create_square, (4, 4, 0), 0.75, green)\n]\n\nfor shape in shapes:\n    shape[0](shape[1], shape[2], shape[3])", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7678750942406403, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "bf4bbf3d-0985-451b-83c4-f9d4414d80d3", "name": "Interior Design Layout", "instruction": "Create an interior design layout for a living room. \n\nInclude a sofa, a coffee table, and a TV stand. \n\nPlace a rug under the coffee table.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Brownish color\ntable_color = bpy.data.materials.new(name=\"TableColor\")\ntable_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\ntv_stand_color = bpy.data.materials.new(name=\"TVStandColor\")\ntv_stand_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Darker gray color\nrug_color = bpy.data.materials.new(name=\"RugColor\")\nrug_color.diffuse_color = (0.8, 0.8, 0.6, 1)  # Light beige color\n\n# Step 2: Create the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.5))\nsofa_base = bpy.context.object\nsofa_base.scale = (2, 1, 0.5)\nsofa_base.name = \"SofaBase\"\nsofa_base.data.materials.append(sofa_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2.75, 1.25))\nsofa_back = bpy.context.object\nsofa_back.scale = (2, 0.25, 0.75)\nsofa_back.name = \"SofaBack\"\nsofa_back.data.materials.append(sofa_color)\n\n# Step 3: Create the Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\ncoffee_table = bpy.context.object\ncoffee_table.scale = (1, 1, 0.25)\ncoffee_table.name = \"CoffeeTable\"\ncoffee_table.data.materials.append(table_color)\n\n# Step 4: Create the TV Stand\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 3, 0.5))\ntv_stand = bpy.context.object\ntv_stand.scale = (1.5, 0.5, 0.5)\ntv_stand.name = \"TVStand\"\ntv_stand.data.materials.append(tv_stand_color)\n\n# Step 5: Create the Rug\nbpy.ops.mesh.primitive_plane_add(size=3, location=(0, 0, 0))\nrug = bpy.context.object\nrug.scale = (1.5, 1, 1)\nrug.name = \"Rug\"\nrug.data.materials.append(rug_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2754535248739125, "unit_n": 5, "param_ratio": 8.0}
{"id": "dd8bd34b-5468-4762-85f5-837af2be050f", "name": "Sticky Notes", "instruction": "Could you create a stack of sticky notes?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Sticky Notes\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, i * 0.1))\n    note = bpy.context.object\n    note.name = f\"Sticky Note {i + 1}\"\n    note.scale[2] = 0.01  # Make it thin like a sticky note\n    note.data.materials.append(yellow)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.108199302477753, "unit_n": 10, "param_ratio": 0.9}
{"id": "677df92d-e4b2-41c6-b7cc-7ae6a08ebb52", "name": "Pet Bed", "instruction": "Make a round pet bed with raised edges.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.1))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.461683840882474, "unit_n": 2, "param_ratio": 7.5}
{"id": "7dc2cb71-050b-4923-adb1-0f04898af994", "name": "Smartphone", "instruction": "Can you make a 3D model of a smartphone? Ensure it has a rectangular shape with a screen on the front.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nsmartphone_body = bpy.context.object\nsmartphone_body.scale = (0.4, 0.8, 0.05)\nsmartphone_body.name = \"Smartphone Body\"\nsmartphone_body.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.scale = (0.35, 0.75, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "27143246-04a7-4530-8be4-298b51e7a502", "name": "Coffee Maker", "instruction": "Picture a coffee maker. It has a main body where the water reservoir is located, a filter basket, and a carafe that sits on a warming plate. The carafe should have a handle and a spout for pouring.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Water Reservoir (simplified as part of main body)\n# No additional shape needed, it's part of the main body\n\n# Step 4: Create the Filter Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.2, location=(0, 0, 1.1))\nfilter_basket = bpy.context.object\nfilter_basket.name = \"Filter Basket\"\nfilter_basket.data.materials.append(gray)\n\n# Step 5: Create the Carafe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.6, location=(0, 0.5, 0.3))\ncarafe = bpy.context.object\ncarafe.name = \"Carafe\"\ncarafe.data.materials.append(gray)\n\n# Step 6: Create the Carafe Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.45, 0.5, 0.4), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Carafe Handle\"\nhandle.data.materials.append(black)\n\n# Step 7: Create the Carafe Spout\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.8, 0.6))\nspout = bpy.context.object\nspout.name = \"Carafe Spout\"\nspout.data.materials.append(gray)\n\n# Step 8: Create the Warming Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.1, location=(0, 0.5, 0.05))\nwarming_plate = bpy.context.object\nwarming_plate.name = \"Warming Plate\"\nwarming_plate.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 4.7242642715166845, "unit_n": 6, "param_ratio": 7.0}
{"id": "93aa744f-ed71-430a-920f-1e374568f1cc", "name": "Cat Scratching Post", "instruction": "Design a cat scratching post with a cylindrical base and a vertical pole. The base should be 16 inches in diameter, and the pole should be 24 inches tall. Add a small platform at the top of the pole, measuring 12 inches in diameter. ", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Convert measurements to meters (Blender's default unit)\ninches_to_meters = 0.0254\nbase_diameter = 16 * inches_to_meters\npole_height = 24 * inches_to_meters\nplatform_diameter = 12 * inches_to_meters\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=base_diameter / 2, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=base_diameter / 6, depth=pole_height, location=(0, 0, pole_height / 2 + 0.05))\npole = bpy.context.object\npole.name = \"Pole\"\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cylinder_add(radius=platform_diameter / 2, depth=0.05, location=(0, 0, pole_height + 0.075))\nplatform = bpy.context.object\nplatform.name = \"Platform\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.311497125290998, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "8eb5d070-2988-47ec-b991-4c8f18b8d9d5", "name": "Tennis Ball", "instruction": "Model a tennis ball.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Tennis Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nball = bpy.context.object\nball.name = \"Tennis Ball\"\n\n# Step 3: Add Material and Color\ntennis_ball_material = bpy.data.materials.new(name=\"Tennis Ball Material\")\ntennis_ball_material.diffuse_color = (0.8, 0.8, 0.2, 1)  # Yellow-green color\nball.data.materials.append(tennis_ball_material)", "color_brightness": "Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 9.0}
{"id": "2e3d135b-a904-4242-90c2-e10eccde23cd", "name": "Coaster", "instruction": "Produce a simple, round coaster.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"\n\n# Define a simple color for the coaster\ncoaster_material = bpy.data.materials.new(name=\"CoasterMaterial\")\ncoaster_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncoaster.data.materials.append(coaster_material)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "8263639e-bda6-4c75-a9bb-8a82b2a05b12", "name": "Hat", "instruction": "Envision a hat with a wide brim and a rounded crown. The brim should extend evenly around the hat, providing shade. The crown should be tall enough to sit comfortably on the head. The overall design should be simple and effective.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "90a6f1bf-d936-4e4e-b08c-9c123d3718b4", "name": "Sandwich", "instruction": "Describe a sandwich with layers of ingredients. The sandwich should include bread slices, lettuce, tomato, cheese, and a protein of choice. Highlight the arrangement of the ingredients and how they are stacked.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nprotein_color = bpy.data.materials.new(name=\"Protein\")\nprotein_color.diffuse_color = (0.72, 0.45, 0.20, 1)  # Brown color for protein (e.g., chicken)\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Protein Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nprotein = bpy.context.object\nprotein.name = \"Protein\"\nprotein.scale[2] = 0.1\nprotein.data.materials.append(protein_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "31ebe210-eb3c-4a2d-8342-79fabf18d8ff", "name": "Coffee Grinder", "instruction": "Generate a 3D model of a coffee grinder. It should have a crank handle on top and a drawer at the bottom to collect ground coffee.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for metal parts\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for wooden parts\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(wood)\n\n# Step 3: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.3))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood)\n\n# Step 4: Create the Crank Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 2.1))\ncrank_base = bpy.context.object\ncrank_base.name = \"Crank Base\"\ncrank_base.data.materials.append(metal)\n\n# Step 5: Create the Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0.5, 2.3), rotation=(math.pi/2, 0, 0))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(metal)\n\n# Step 6: Create the Crank Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 1, 2.3))\ncrank_knob = bpy.context.object\ncrank_knob.name = \"Crank Knob\"\ncrank_knob.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.5468926795611824, "unit_n": 5, "param_ratio": 7.0}
{"id": "52965d43-4a7b-45cb-af28-6fada12eb824", "name": "Cat Scratching Post", "instruction": "Create a cat scratching post with a vertical pole and a base for stability. The pole should have a textured surface suitable for scratching. Add a small platform at the top of the pole for the cat to sit on. Ensure the base is wide enough to prevent tipping.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\npole_color = bpy.data.materials.new(name=\"Pole Color\")\npole_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color\n\nplatform_color = bpy.data.materials.new(name=\"Platform Color\")\nplatform_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make the base flat\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 0.5))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(pole_color)\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, 1.5))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.scale[2] = 0.1  # Make the platform flat\nplatform.data.materials.append(platform_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.950574812279168, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "42d49204-c8b9-4204-886a-6a46a25f09ca", "name": "Cake", "instruction": "Design a 3D model of a cake. The cake should have three layers with frosting in between each layer. The top layer should have some decorative elements like flowers or patterns.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake\")\ncake_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color for the cake\nfrosting_color = bpy.data.materials.new(name=\"Frosting\")\nfrosting_color.diffuse_color = (1, 1, 1, 1)  # White color for the frosting\ndecoration_color = bpy.data.materials.new(name=\"Decoration\")\ndecoration_color.diffuse_color = (1, 0.2, 0.2, 1)  # Red color for the decorations\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, i * 0.4))\n    layer = bpy.context.object\n    layer.name = f\"Cake Layer {i + 1}\"\n    layer.data.materials.append(cake_color)\n\n# Step 3: Create the Frosting Layers\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, i * 0.4 + 0.3))\n    frosting = bpy.context.object\n    frosting.name = f\"Frosting Layer {i + 1}\"\n    frosting.data.materials.append(frosting_color)\n\n# Step 4: Create the Decorative Elements on Top Layer\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.2))\n    decoration = bpy.context.object\n    decoration.name = f\"Decoration {i + 1}\"\n    decoration.data.materials.append(decoration_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.910516373601634, "unit_n": 13, "param_ratio": 2.230769230769231}
{"id": "230856f5-0a98-4619-81b9-d218d81beb16", "name": "Dog Bowl", "instruction": "Could you make a 3D model of a dog bowl with a round shape and a slight indentation in the center?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Outer Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nouter_bowl = bpy.context.object\nouter_bowl.name = \"Outer Bowl\"\n\n# Step 3: Create the Inner Indentation\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.3, location=(0, 0, 0.4))\ninner_indentation = bpy.context.object\ninner_indentation.name = \"Inner Indentation\"\n\n# Step 4: Boolean Difference to Create the Indentation\nmod_bool = outer_bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_indentation\n\nbpy.context.view_layer.objects.active = outer_bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Step 5: Delete the Inner Indentation Mesh\nbpy.data.objects.remove(inner_indentation, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071983, "unit_n": 2, "param_ratio": 5.0}
{"id": "f617ecf5-472f-4b57-9538-6c77163687b0", "name": "Pet Collar", "instruction": "Can you design a pet collar for me? It should have an adjustable buckle and a small loop for attaching a leash.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"CollarColor\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\nbuckle_color = bpy.data.materials.new(name=\"BuckleColor\")\nbuckle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Loop for Leash\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.03, location=(0, -1.05, 0))\nloop = bpy.context.object\nloop.name = \"Loop\"\nloop.data.materials.append(buckle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.60938704909409, "unit_n": 3, "param_ratio": 8.0}
{"id": "f4bec955-71b8-4a86-9511-6794cfe67136", "name": "Water Bottle", "instruction": "Can you create a simple water bottle? It should be cylindrical with a screw-on cap.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbottle_color = bpy.data.materials.new(name=\"BottleColor\")\nbottle_color.diffuse_color = (0.2, 0.5, 0.8, 1)  # Light blue color\ncap_color = bpy.data.materials.new(name=\"CapColor\")\ncap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Bottle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2, location=(0, 0, 1))\nbottle_body = bpy.context.object\nbottle_body.name = \"Bottle Body\"\nbottle_body.data.materials.append(bottle_color)\n\n# Step 3: Create the Bottle Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.32, depth=0.2, location=(0, 0, 2.1))\nbottle_cap = bpy.context.object\nbottle_cap.name = \"Bottle Cap\"\nbottle_cap.data.materials.append(cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "592b03bb-3cac-471c-896e-4efba33830de", "name": "Blender", "instruction": "Design a 3D model of a blender. The blender should have a base with a control panel that includes buttons for different speed settings. The jar should be transparent with measurement markings on the side. Include a lid with a removable center cap.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel with Buttons\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(base_color)\n\n# Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 0, 0.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=2, location=(0, 0, 1.75))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 2.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Create the Removable Center Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 2.9))\ncenter_cap = bpy.context.object\ncenter_cap.name = \"Center Cap\"\ncenter_cap.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.663362399817078, "unit_n": 8, "param_ratio": 6.0}
{"id": "b442fdf2-2a4c-4f5e-8581-196187a1c436", "name": "Pizza", "instruction": "Create a pizza with a circular base. Add a layer of tomato sauce and cheese on top. Include several slices of pepperoni evenly distributed across the pizza.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough Color\")\ndough_color.diffuse_color = (0.93, 0.76, 0.48, 1)  # Dough color\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(dough_color)\n\n# Step 3: Add the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Add the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = i * (360 / num_pepperoni)\n    x = 0.7 * math.cos(math.radians(angle))\n    y = 0.7 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.428414735711405, "unit_n": 4, "param_ratio": 10.0}
{"id": "ac25a1de-7dbe-4f5b-907e-698af4d7a532", "name": "Chessboard", "instruction": "Design a chessboard consisting of an 8x8 grid of alternating light and dark squares. Ensure the grid is flat and evenly spaced.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_color = bpy.data.materials.new(name=\"Light Color\")\nlight_color.diffuse_color = (1, 1, 1, 1)  # White color\ndark_color = bpy.data.materials.new(name=\"Dark Color\")\ndark_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nsize = 1  # Size of each square\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=size, location=(col * size, row * size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_color)\n        else:\n            square.data.materials.append(dark_color)\n\n# Step 3: Adjust the position of the chessboard to be centered\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5 * size, -3.5 * size, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "dd746211-0ab9-4189-965f-2e05e972401f", "name": "Cutting Board", "instruction": "Create a cutting board for kitchen use.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cutting board\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.76, 0.6, 0.42, 1)  # Light brown wood color\n\n# Step 2: Create the Cutting Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncutting_board = bpy.context.object\ncutting_board.name = \"Cutting Board\"\ncutting_board.scale[0] = 2  # Adjust length\ncutting_board.scale[1] = 1  # Adjust width\ncutting_board.scale[2] = 0.1  # Adjust thickness\ncutting_board.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "c3759ac3-f4d3-40f3-88ea-3eb4c0b377c3", "name": "Elevator", "instruction": "Design an elevator with a simple control panel and doors that slide open.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nelevator_color = bpy.data.materials.new(name=\"ElevatorColor\")\nelevator_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"ControlPanelColor\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Elevator Cab\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nelevator_cab = bpy.context.object\nelevator_cab.name = \"Elevator Cab\"\nelevator_cab.data.materials.append(elevator_color)\n\n# Step 3: Create the Elevator Doors\n# Left Door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 1, 1))\nleft_door = bpy.context.object\nleft_door.scale[0] = 0.1\nleft_door.scale[1] = 0.5\nleft_door.scale[2] = 1\nleft_door.name = \"Left Door\"\nleft_door.data.materials.append(elevator_color)\n\n# Right Door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 1, 1))\nright_door = bpy.context.object\nright_door.scale[0] = 0.1\nright_door.scale[1] = 0.5\nright_door.scale[2] = 1\nright_door.name = \"Right Door\"\nright_door.data.materials.append(elevator_color)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, -0.9, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.scale[0] = 0.1\ncontrol_panel.scale[1] = 0.05\ncontrol_panel.scale[2] = 0.5\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(control_panel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.9458755173797666, "unit_n": 4, "param_ratio": 6.5}
{"id": "e6369303-8afc-4e7a-9d48-92a2df762387", "name": "Plate", "instruction": "Can you design a plate for me? It should be round with a flat surface and a slightly raised edge.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Plate Base (Flat Surface)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nplate_base = bpy.context.object\nplate_base.name = \"Plate Base\"\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0.05))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\n\n# Step 4: Boolean Modifier to Create the Hollow Edge\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0.1))\ninner_cut = bpy.context.object\ninner_cut.name = \"Inner Cut\"\n\nbool_mod = raised_edge.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_cut\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = raised_edge\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner_cut object\nbpy.data.objects.remove(inner_cut, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.679872721561161, "unit_n": 3, "param_ratio": 5.0}
{"id": "8498af71-7cb2-4516-bfcd-ab5a52dc39c1", "name": "Star Emblem", "instruction": "Create a 3D object of a star emblem. It should be a five-pointed star with clean, sharp edges. Make sure the star is centered and balanced.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Star\n# Define the vertices of a 5-pointed star\nvertices = []\nedges = []\nfaces = []\n\n# Star parameters\nouter_radius = 1.0\ninner_radius = 0.4\nnum_points = 5\n\nfor i in range(num_points * 2):\n    angle = math.pi / num_points * i\n    radius = outer_radius if i % 2 == 0 else inner_radius\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    vertices.append((x, y, 0))\n\n# Define the face of the star\nfaces.append([i for i in range(num_points * 2)])\n\n# Create the mesh and object\nmesh = bpy.data.meshes.new(name=\"Star\")\nmesh.from_pydata(vertices, edges, faces)\nmesh.update()\n\nstar = bpy.data.objects.new(\"Star\", mesh)\n\n# Add the object to the scene\nbpy.context.collection.objects.link(star)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.3025850929940455, "unit_n": 1, "param_ratio": 3.0}
{"id": "3360adb2-3d9e-487d-9318-e78abf75f3f3", "name": "Cat Scratcher", "instruction": "Create a simple cat scratcher.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\ncarpet_color = bpy.data.materials.new(name=\"Carpet\")\ncarpet_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray carpet color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Flatten the base\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Scratching Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 1.1))\npost = bpy.context.object\npost.name = \"Scratching Post\"\npost.data.materials.append(carpet_color)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.2))\ntop_platform = bpy.context.object\ntop_platform.name = \"Top Platform\"\ntop_platform.scale[2] = 0.1  # Flatten the top platform\ntop_platform.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.950574812279168, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "aefa8f73-cfc0-4c5b-b917-7482bdf36bcd", "name": "Coffee Pot", "instruction": "Create a coffee pot with a spout and a handle for easy pouring.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncoffee_pot_color = bpy.data.materials.new(name=\"CoffeePotColor\")\ncoffee_pot_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Body of the Coffee Pot\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"CoffeePotBody\"\nbody.data.materials.append(coffee_pot_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(1.1, 0, 1.5), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"CoffeePotSpout\"\nspout.data.materials.append(coffee_pot_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(-1.3, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"CoffeePotHandle\"\nhandle.data.materials.append(coffee_pot_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.114901530841697, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "527b479a-b7ad-4cdc-bc53-3c2b9b0e2127", "name": "Sandwich", "instruction": "Construct a 3D model of a sandwich. It should consist of two slices of bread with layers of filling in between. The sandwich should be 5 inches long, 3 inches wide, and 2 inches tall.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nbottom_bread = bpy.context.object\nbottom_bread.scale = (2.5, 1.5, 0.2)  # 5 inches long, 3 inches wide, 0.4 inches tall\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nfilling = bpy.context.object\nfilling.scale = (2.5, 1.5, 0.6)  # 5 inches long, 3 inches wide, 1.2 inches tall\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.scale = (2.5, 1.5, 0.2)  # 5 inches long, 3 inches wide, 0.4 inches tall\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "1277ff20-f5e1-4d63-9b09-1769fce5bddc", "name": "Chessboard", "instruction": "Can you create a 3D model of a chessboard? It should be an 8x8 grid with alternating black and white squares. The board should be flat and square, without any additional decorations or features.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Combine the Squares into a Single Object\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.join()\n\n# Step 4: Center the Chessboard\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\nbpy.context.object.location = (0, 0, 0)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "1026de05-969d-47a2-9fa0-dde26ed9b12a", "name": "Logo Design", "instruction": "Create a logo with two overlapping circles, one blue and one green.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Blue Circle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-0.5, 0, 0))\nblue_circle = bpy.context.object\nblue_circle.name = \"Blue Circle\"\nblue_circle.data.materials.append(blue)\n\n# Step 3: Create the Green Circle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0.5, 0, 0))\ngreen_circle = bpy.context.object\ngreen_circle.name = \"Green Circle\"\ngreen_circle.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.861447504773234, "unit_n": 2, "param_ratio": 9.0}
{"id": "9263af1f-a24c-4041-87ca-fb591bfe7a3d", "name": "Bookshelf", "instruction": "Design a bookshelf with four shelves.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood brown color\n\n# Step 2: Create the Shelves\nshelf_height = 0.2\nshelf_depth = 0.3\nshelf_width = 1.0\nnum_shelves = 4\nfor i in range(num_shelves):\n    z = i * 0.5\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.1\npanel_height = (num_shelves - 1) * 0.5 + shelf_height * 2\npanel_depth = shelf_depth * 2\nfor i in range(2):\n    x = (shelf_width + panel_thickness) * (i * 2 - 1) / 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, panel_height / 2 - shelf_height))\n    panel = bpy.context.object\n    panel.scale = (panel_thickness, panel_depth, panel_height)\n    panel.name = f\"Panel {i + 1}\"\n    panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nback_thickness = 0.05\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth, panel_height / 2 - shelf_height))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width, back_thickness, panel_height)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8273096391465935, "unit_n": 4, "param_ratio": 4.25}
{"id": "26d54cec-ba6d-4932-b95c-448943aa354e", "name": "Geometric Pattern", "instruction": "Create a repeating geometric pattern consisting of interlocking hexagons. Ensure the pattern is seamless and uniform.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nradius = 1\ndepth = 0.1\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=depth, location=location)\n    hexagon = bpy.context.object\n    hexagon.name = \"Hexagon\"\n    return hexagon\n\n# Step 2: Create the pattern\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * radius\n        y = row * math.sqrt(3) * radius\n        if col % 2 == 1:\n            y += math.sqrt(3) / 2 * radius\n        create_hexagon((x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 1.0}
{"id": "e9b9ff2d-c447-493f-bf0a-cdbf62f1741f", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. Compare a classic ham and cheese sandwich with a veggie sandwich. The ham and cheese sandwich should have two slices of bread, ham, cheese, and lettuce. The veggie sandwich should have two slices of bread, lettuce, tomato, cucumber, and avocado.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nham_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\ncheese_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nlettuce_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = (1.0, 0.27, 0.0, 1)  # Red color for tomato\ncucumber_color = (0.0, 0.5, 0.0, 1)  # Dark green color for cucumber\navocado_color = (0.34, 0.26, 0.15, 1)  # Brown color for avocado\n\n# Create materials\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\nbread_material = create_material(\"Bread\", bread_color)\nham_material = create_material(\"Ham\", ham_color)\ncheese_material = create_material(\"Cheese\", cheese_color)\nlettuce_material = create_material(\"Lettuce\", lettuce_color)\ntomato_material = create_material(\"Tomato\", tomato_color)\ncucumber_material = create_material(\"Cucumber\", cucumber_color)\navocado_material = create_material(\"Avocado\", avocado_color)\n\n# Function to create a slice of bread\ndef create_bread(location):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    bread = bpy.context.object\n    bread.scale[2] = 0.1\n    bread.data.materials.append(bread_material)\n    return bread\n\n# Function to create a layer\ndef create_layer(location, material, scale=(1, 1, 0.1)):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    layer = bpy.context.object\n    layer.scale = scale\n    layer.data.materials.append(material)\n    return layer\n\n# Create Ham and Cheese Sandwich\ncreate_bread(location=(0, 0, 0.1))\ncreate_layer(location=(0, 0, 0.2), material=ham_material)\ncreate_layer(location=(0, 0, 0.3), material=cheese_material)\ncreate_layer(location=(0, 0, 0.4), material=lettuce_material)\ncreate_bread(location=(0, 0, 0.5))\n\n# Create Veggie Sandwich\ncreate_bread(location=(2, 0, 0.1))\ncreate_layer(location=(2, 0, 0.2), material=lettuce_material)\ncreate_layer(location=(2, 0, 0.3), material=tomato_material)\ncreate_layer(location=(2, 0, 0.4), material=cucumber_material)\ncreate_layer(location=(2, 0, 0.5), material=avocado_material)\ncreate_bread(location=(2, 0, 0.6))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6973922473326057, "unit_n": 2, "param_ratio": 1.0}
{"id": "9253cd04-28c0-473e-a30f-206e34f8eb14", "name": "Jigsaw Puzzle", "instruction": "Craft a jigsaw puzzle, with interlocking pieces that come together to form a complete square shape when assembled.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\npiece_size = 2\ngap = 0.1\n\n# Function to create a single puzzle piece\ndef create_puzzle_piece(x, y, name):\n    bpy.ops.mesh.primitive_cube_add(size=piece_size, location=(x, y, 0))\n    piece = bpy.context.object\n    piece.name = name\n\n# Step 2: Create the Puzzle Pieces\nfor i in range(2):\n    for j in range(2):\n        x = i * (piece_size + gap)\n        y = j * (piece_size + gap)\n        create_puzzle_piece(x, y, f\"Piece_{i}_{j}\")\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 1, "param_ratio": 3.0}
{"id": "113ba78d-60c4-423f-8046-fc53123ea40c", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. Start with a circular base, about 12 inches in diameter. Add a slightly raised edge around the perimeter. Cover the top with a layer of tomato sauce, followed by an even layer of cheese. Add pepperoni slices, evenly spaced, and a few basil leaves for garnish.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for dough\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for basil\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=6, minor_radius=0.2, location=(0, 0, 0.1))\nedge = bpy.context.object\nedge.name = \"Raised Edge\"\nedge.data.materials.append(dough_color)\n\n# Step 4: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.8, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.7, depth=0.05, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Add Pepperoni Slices\npepperoni_positions = [(3, 0), (-3, 0), (0, 3), (0, -3), (2, 2), (-2, -2), (2, -2), (-2, 2)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(x, y, 0.2))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 7: Add Basil Leaves\nbasil_positions = [(4, 4), (-4, -4), (4, -4), (-4, 4)]\nfor i, (x, y) in enumerate(basil_positions):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.25))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.object.editmode_toggle()\n    bpy.ops.transform.rotate(value=1.57, orient_axis='X')\n    bpy.ops.object.editmode_toggle()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.846648646159734, "unit_n": 6, "param_ratio": 9.0}
{"id": "84a10495-23c0-4c43-b5c4-a61f986e4efe", "name": "Syringe", "instruction": "Can you design a syringe with a cylindrical body, a plunger, and a needle?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Very light gray color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Syringe Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.100944575547292, "unit_n": 3, "param_ratio": 10.0}
{"id": "ce14f856-ee1c-4d68-b19e-3bea2ccbe572", "name": "Apple", "instruction": "Show me a 3D model of an apple.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(apple_red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 7.0}
{"id": "85aedd90-b022-4f9f-907c-2fffa98e710b", "name": "Smartwatch", "instruction": "Design a 3D model of a smartwatch. It should have a circular face with a touchscreen display. Include a strap with a buckle for securing it to the wrist. Add a single button on the side of the watch face.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwatch_face_color = bpy.data.materials.new(name=\"Watch Face Color\")\nwatch_face_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nstrap_color = bpy.data.materials.new(name=\"Strap Color\")\nstrap_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Watch Face\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nwatch_face = bpy.context.object\nwatch_face.name = \"Watch Face\"\nwatch_face.data.materials.append(watch_face_color)\n\n# Step 3: Create the Touchscreen Display\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(0, 0, 0.1))\ntouchscreen = bpy.context.object\ntouchscreen.name = \"Touchscreen\"\ntouchscreen.data.materials.append(button_color)\n\n# Step 4: Create the Strap\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1.5, 0))\nstrap1 = bpy.context.object\nstrap1.scale = (0.2, 2, 0.05)\nstrap1.name = \"Strap 1\"\nstrap1.data.materials.append(strap_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.5, 0))\nstrap2 = bpy.context.object\nstrap2.scale = (0.2, 2, 0.05)\nstrap2.name = \"Strap 2\"\nstrap2.data.materials.append(strap_color)\n\n# Step 5: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, -3.5, 0))\nbuckle = bpy.context.object\nbuckle.scale = (0.2, 0.1, 0.05)\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(button_color)\n\n# Step 6: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(1.1, 0, 0))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.90227791272864, "unit_n": 6, "param_ratio": 7.0}
{"id": "cdb12df3-27c9-46ba-8973-f0cbe777de60", "name": "Geometric Logo", "instruction": "Design a logo with a combination of circles and triangles arranged symmetrically.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncircle_color = bpy.data.materials.new(name=\"Circle Color\")\ncircle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ntriangle_color = bpy.data.materials.new(name=\"Triangle Color\")\ntriangle_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Circles\nfor i in range(2):\n    x = (-1)**i * 1.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(x, 0, 0))\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(circle_color)\n\n# Step 3: Create the Triangles\nfor i in range(2):\n    x = (-1)**i * 0.75\n    y = 1.5\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(x, y, 0), rotation=(0, 0, math.pi/2 * i))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(triangle_color)\n\nfor i in range(2):\n    x = (-1)**i * 0.75\n    y = -1.5\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(x, y, 0), rotation=(0, 0, math.pi/2 * (i + 1)))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 3}\"\n    triangle.data.materials.append(triangle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.6026910954132925, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "b3123e97-f3c8-4451-b422-7228fdf47030", "name": "Puzzle Mat", "instruction": "Can you create a puzzle mat that's designed for toddlers to enjoy? It should have interlocking pieces and feature a variety of basic shapes and colors.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = {\n    \"Red\": (1, 0, 0, 1),\n    \"Green\": (0, 1, 0, 1),\n    \"Blue\": (0, 0, 1, 1),\n    \"Yellow\": (1, 1, 0, 1)\n}\n\n# Step 2: Create the Puzzle Mat Pieces\ndef create_puzzle_piece(location, color_name):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    piece = bpy.context.object\n    piece.name = f\"Puzzle Piece {color_name}\"\n    mat = bpy.data.materials.new(name=color_name)\n    mat.diffuse_color = colors[color_name]\n    piece.data.materials.append(mat)\n\n# Create a 2x2 grid of puzzle pieces\npositions = [(-1, 1, 0), (1, 1, 0), (-1, -1, 0), (1, -1, 0)]\ncolor_names = [\"Red\", \"Green\", \"Blue\", \"Yellow\"]\n\nfor pos, color in zip(positions, color_names):\n    create_puzzle_piece(pos, color)\n\n# Step 3: Add Basic Shapes on Each Piece\ndef add_shape_to_piece(location, shape_type, color_name):\n    if shape_type == \"circle\":\n        bpy.ops.mesh.primitive_circle_add(radius=0.3, location=location)\n    elif shape_type == \"square\":\n        bpy.ops.mesh.primitive_cube_add(size=0.6, location=location)\n    elif shape_type == \"triangle\":\n        bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.3, depth=0.1, location=location)\n    \n    shape = bpy.context.object\n    shape.name = f\"{shape_type.capitalize()} on {color_name}\"\n    mat = bpy.data.materials.new(name=f\"{shape_type.capitalize()} {color_name}\")\n    mat.diffuse_color = colors[color_name]\n    shape.data.materials.append(mat)\n\nshapes = [\"circle\", \"square\", \"triangle\", \"circle\"]\nshape_positions = [(-1, 1, 0.1), (1, 1, 0.1), (-1, -1, 0.1), (1, -1, 0.1)]\n\nfor pos, shape, color in zip(shape_positions, shapes, color_names):\n    add_shape_to_piece(pos, shape, color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.503796804378145, "unit_n": 4, "param_ratio": 1.75}
{"id": "d400967b-7926-4720-b1a5-54176bc51b7e", "name": "Router", "instruction": "How can I create a router that supports both 2.4 GHz and 5 GHz frequencies?", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nantenna_positions = [(-0.8, -0.8, 1.5), (0.8, -0.8, 1.5), (-0.8, 0.8, 1.5), (0.8, 0.8, 1.5)]\nfor i, pos in enumerate(antenna_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=pos)\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.5557231362890267, "unit_n": 2, "param_ratio": 8.0}
{"id": "745baed9-fa24-4eab-bcdb-e657a8ccf2fc", "name": "Apple", "instruction": "Model an apple with a basic spherical shape and a small stem on top. The apple should be a single solid color.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\napple_color = bpy.data.materials.new(name=\"Apple Color\")\napple_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Apple (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_color)\n\n# Step 3: Create the Stem (Cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.1))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(apple_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.223756121221344, "unit_n": 2, "param_ratio": 7.0}
{"id": "89575f2d-fd73-47d4-a731-db1292256b0b", "name": "Clipboard", "instruction": "Generate a 3D model of a clipboard with a metal clip at the top.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Clipboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nclipboard = bpy.context.object\nclipboard.name = \"Clipboard\"\nclipboard.scale[0] = 0.15  # Make it rectangular\nclipboard.scale[1] = 1.25\nclipboard.scale[2] = 1.75\nclipboard.data.materials.append(wood_color)\n\n# Step 3: Create the Metal Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 1.85))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale[0] = 0.15  # Make it rectangular\nclip.scale[1] = 0.75\nclip.scale[2] = 0.1\nclip.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "4a13bd4f-7294-4cd5-9661-ef89712bf6e2", "name": "Pizza", "instruction": "Create a 3D model of a pizza. Compare two versions: one with pepperoni and one with vegetables. Both should have a round base with a layer of cheese and a slightly raised edge.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Yellow color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nvegetable_color = bpy.data.materials.new(name=\"Vegetable\")\nvegetable_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\ncheese = bpy.context.object\ncheese.name = \"Cheese Layer\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0.05))\nedge = bpy.context.object\nedge.name = \"Raised Edge\"\nedge.data.materials.append(dough_color)\n\n# Step 5: Create Pepperoni Slices\nfor i in range(10):\n    angle = random.uniform(0, 2 * 3.14159)\n    radius = random.uniform(0.2, 0.8)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.07))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create Vegetable Slices\nfor i in range(10):\n    angle = random.uniform(0, 2 * 3.14159)\n    radius = random.uniform(0.2, 0.8)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.07))\n    vegetable = bpy.context.object\n    vegetable.name = f\"Vegetable {i + 1}\"\n    vegetable.data.materials.append(vegetable_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.982449688626585, "unit_n": 23, "param_ratio": 1.9130434782608696}
{"id": "a98c77e4-7cb2-4b8a-97ab-83f9ae551fab", "name": "Pizza", "instruction": "Picture a round pizza with a slightly raised crust. The pizza should be topped with tomato sauce, cheese, and pepperoni slices. ", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.05, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni slices\nnum_slices = 8\nradius = 0.15\nfor i in range(num_slices):\n    angle = i * (2 * math.pi / num_slices)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=0.03, location=(x, y, 0.18))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.913915143176324, "unit_n": 4, "param_ratio": 9.75}
{"id": "874a091f-e069-491c-84e0-0dd17df867b9", "name": "Smartphone Case", "instruction": "Decorate a smartphone case that would appeal to a teenager.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\nstar_color = bpy.data.materials.new(name=\"Star Color\")\nstar_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Smartphone Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncase = bpy.context.object\ncase.name = \"Smartphone Case\"\ncase.scale = (0.5, 0.1, 1)\ncase.data.materials.append(case_color)\n\n# Step 3: Create Decorative Stars\nstar_locations = [(0.3, 0, 0.8), (-0.3, 0, 0.8), (0.3, 0, -0.8), (-0.3, 0, -0.8)]\nfor loc in star_locations:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=loc)\n    star = bpy.context.object\n    star.name = \"Star\"\n    star.data.materials.append(star_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.024406268727709, "unit_n": 2, "param_ratio": 7.5}
{"id": "cd52ccc2-32a4-41a4-b218-97848bb0ee96", "name": "Sofa", "instruction": "Please create a 3D model of a sofa. It should have a three-seat design with armrests on both ends and a backrest.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale = (3, 1, 0.5)\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.25, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (3, 0.25, 1)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.25, 1, 1)\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "930c4e1a-929a-43a0-afef-d7f7b471ec04", "name": "Sandwich", "instruction": "Model a sandwich. It should be a rectangular shape with two slices of bread, and visible layers of filling in between.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.8, 0.3, 0.3, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nfilling = bpy.context.object\nfilling.scale[2] = 0.1  # Make it flat\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "0bb08519-39d5-4d6b-a1cc-ad7b481eb1e8", "name": "Syringe", "instruction": "Create a syringe with a cylindrical body, a plunger at one end, and a needle at the other. Ensure the plunger can be pushed and pulled within the body, and the needle is thin and pointed.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"PlungerColor\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"NeedleColor\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Almost white color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"SyringeBody\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, -1.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n\n# Step 5: Create the Needle Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.01, depth=0.2, location=(0, 0, -2))\nneedle_tip = bpy.context.object\nneedle_tip.name = \"NeedleTip\"\nneedle_tip.data.materials.append(needle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.066175008064265, "unit_n": 4, "param_ratio": 8.75}
{"id": "c6447fe9-4a68-4592-99a2-f9266d05e3c7", "name": "Clarinet", "instruction": "Imagine a clarinet. Create a long, cylindrical body with several circular holes and keys along its length. The mouthpiece should be slightly conical, and the bell at the end should flare out gently.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Clarinet Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Mouthpiece\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.03, depth=0.2, location=(0, 0, 2.1))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"\nmouthpiece.data.materials.append(black)\n\n# Step 4: Create the Bell\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.3, location=(0, 0, -0.15))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.data.materials.append(black)\n\n# Step 5: Create the Holes\nhole_positions = [0.3, 0.6, 0.9, 1.2, 1.5, 1.8]\nfor pos in hole_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.05, location=(0, 0.05, pos))\n    hole = bpy.context.object\n    hole.name = f\"Hole {pos}\"\n    hole.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the body\n    hole.data.materials.append(black)\n\n# Step 6: Create the Keys\nkey_positions = [0.4, 0.7, 1.0, 1.3, 1.6, 1.9]\nfor pos in key_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.02, location=(0, -0.05, pos))\n    key = bpy.context.object\n    key.name = f\"Key {pos}\"\n    key.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the body\n    key.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.649419951325198, "unit_n": 5, "param_ratio": 6.4}
{"id": "c6473e76-93a2-4b46-888e-f19598fcb86e", "name": "Couch", "instruction": "Can you create a 3D model of a couch? Make it look inviting.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncouch_fabric = bpy.data.materials.new(name=\"Couch Fabric\")\ncouch_fabric.diffuse_color = (0.6, 0.3, 0.2, 1)  # Warm brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (2, 1, 0.5)\nbase.name = \"Base\"\nbase.data.materials.append(couch_fabric)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.1, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(couch_fabric)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 1, 0.75)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(couch_fabric)\n\n# Step 5: Create the Cushions\nfor i in range(2):\n    x = (i * 2 - 1) * 0.5\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    cushion = bpy.context.object\n    cushion.scale = (0.9, 0.9, 0.4)\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(couch_fabric)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.48102340864754, "unit_n": 6, "param_ratio": 3.5}
{"id": "0266b307-bdd7-46ef-b348-4eb738749d7a", "name": "Sandwich", "instruction": "Could you create a simple sandwich with two slices of bread and some visible fillings like lettuce, tomato, and cheese?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale.z = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale.z = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1.6, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale.z = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale.z = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.401241241299484, "unit_n": 5, "param_ratio": 8.2}
{"id": "d2bf3c40-47d9-47e6-b100-f5db1d5392f9", "name": "Pizza", "instruction": "Let's create a pizza. Start with a circular base for the crust. Add a layer of sauce evenly spread across the crust. Next, sprinkle a generous amount of cheese over the sauce.\n\nNow, place several slices of pepperoni evenly across the pizza. Add a few pieces of bell pepper and onion for extra flavor.\n\nFinally, include a few olives and a sprinkle of herbs on top. Ensure the pizza looks ready to be baked in an oven.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 1, 0.5, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color for bell pepper\nonion_color = bpy.data.materials.new(name=\"Onion\")\nonion_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color for onion\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for olive\nherb_color = bpy.data.materials.new(name=\"Herb\")\nherb_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Dark green color for herbs\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Bell Pepper\nfor i in range(5):\n    angle = i * 2 * math.pi / 5 + math.pi / 10\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.1))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Step 7: Create the Onion\nfor i in range(5):\n    angle = i * 2 * math.pi / 5\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(x, y, 0.1))\n    onion = bpy.context.object\n    onion.name = f\"Onion {i + 1}\"\n    onion.data.materials.append(onion_color)\n\n# Step 8: Create the Olives\nfor i in range(5):\n    angle = i * 2 * math.pi / 5 + math.pi / 5\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.1))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)\n\n# Step 9: Create the Herbs\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0, 0, 0.12))\nherbs = bpy.context.object\nherbs.name = \"Herbs\"\nherbs.data.materials.append(herb_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.238314237169256, "unit_n": 27, "param_ratio": 2.8518518518518516}
{"id": "4077cfda-5f83-4c16-a465-2fe907070d49", "name": "Webcam", "instruction": "Create a small, cylindrical camera body with a lens at the front. \n\nAdd a simple stand at the bottom for easy placement on a desk or monitor.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlens_color = bpy.data.materials.new(name=\"Lens Color\")\nlens_color.diffuse_color = (0, 0, 0, 1)  # Black color\nstand_color = bpy.data.materials.new(name=\"Stand Color\")\nstand_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Darker gray color\n\n# Step 2: Create the Camera Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(0, 0, 0.3))\ncamera_body = bpy.context.object\ncamera_body.name = \"Camera Body\"\ncamera_body.data.materials.append(body_color)\n\n# Step 3: Create the Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 0.55))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.data.materials.append(lens_color)\n\n# Step 4: Create the Stand\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, -0.2))\nstand_base = bpy.context.object\nstand_base.name = \"Stand Base\"\nstand_base.scale[2] = 0.1  # Make the base thinner\nstand_base.data.materials.append(stand_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 0.1))\nstand_pillar = bpy.context.object\nstand_pillar.name = \"Stand Pillar\"\nstand_pillar.scale[2] = 0.5  # Make the pillar taller\nstand_pillar.data.materials.append(stand_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.777272416087125, "unit_n": 4, "param_ratio": 8.25}
{"id": "cfe3e290-0a89-4ad4-b700-64be204fa20e", "name": "Screwdriver", "instruction": "Design a screwdriver with a cylindrical handle and a flat-head tip. Ensure the handle is ergonomic for gripping.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue ergonomic handle color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray metallic color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Add ergonomic grip to handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.22, minor_radius=0.02, location=(0, 0, 0.8))\ngrip1 = bpy.context.object\ngrip1.name = \"Grip 1\"\ngrip1.data.materials.append(handle_color)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.22, minor_radius=0.02, location=(0, 0, 0.2))\ngrip2 = bpy.context.object\ngrip2.name = \"Grip 2\"\ngrip2.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat-Head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.1))\ntip = bpy.context.object\ntip.scale = (0.5, 0.1, 0.2)\ntip.name = \"Flat-Head Tip\"\ntip.data.materials.append(metal_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.840257692748528, "unit_n": 5, "param_ratio": 6.8}
{"id": "1b22e116-7806-40d3-9cfe-77186e84fa41", "name": "Cake", "instruction": "Generate a simple 3D model of a cake. It should be round and have a single layer.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cake\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\n\n# Step 2: Create the Cake\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ncake = bpy.context.object\ncake.name = \"Cake\"\ncake.data.materials.append(cake_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "7723e248-251f-4cfa-a006-4d132370ca1c", "name": "Blender", "instruction": "Design a blender with a base, a control panel featuring buttons, and a jug with a lid.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\njug_color = bpy.data.materials.new(name=\"Jug Color\")\njug_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray, semi-transparent\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0.8, 0))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[2] = 0.1\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.2 + i * 0.2, 0.85, 0.05))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(base_color)\n\n# Step 5: Create the Jug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 0.75))\njug = bpy.context.object\njug.name = \"Jug\"\njug.data.materials.append(jug_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 1.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.598882315609762, "unit_n": 7, "param_ratio": 6.142857142857143}
{"id": "95f0cc0b-adc3-4844-ab73-4c11d14e801a", "name": "Circuit Breaker", "instruction": "Imagine a circuit breaker in a power distribution panel. Design a 3D model with a rectangular shape, a lever for switching on and off, and indicator lights for status. The breaker should have terminals for incoming and outgoing wires. The model should convey a sense of reliability and safety.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbreaker_body_color = bpy.data.materials.new(name=\"Breaker Body\")\nbreaker_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlever_color = bpy.data.materials.new(name=\"Lever\")\nlever_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nindicator_light_color = bpy.data.materials.new(name=\"Indicator Light\")\nindicator_light_color.diffuse_color = (1, 0, 0, 1)  # Red color\nterminal_color = bpy.data.materials.new(name=\"Terminal\")\nterminal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Breaker Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbreaker_body = bpy.context.object\nbreaker_body.name = \"Breaker Body\"\nbreaker_body.scale = (0.5, 1, 1.5)\nbreaker_body.data.materials.append(breaker_body_color)\n\n# Step 3: Create the Lever\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.8, 1))\nlever = bpy.context.object\nlever.name = \"Lever\"\nlever.scale = (0.1, 0.1, 0.5)\nlever.data.materials.append(lever_color)\n\n# Step 4: Create the Indicator Lights\nfor i in range(3):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-0.3 + i * 0.3, 1, 0.5))\n    indicator_light = bpy.context.object\n    indicator_light.name = f\"Indicator Light {i + 1}\"\n    indicator_light.data.materials.append(indicator_light_color)\n\n# Step 5: Create the Terminals\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.3 * (i * 2 - 1), -1.1, -0.5))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.rotation_euler = (1.5708, 0, 0)\n    terminal.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.1521752584933216, "unit_n": 7, "param_ratio": 5.285714285714286}
{"id": "8bc64391-fb4f-49e5-8e26-e59fe0fd6fd5", "name": "Dog Collar", "instruction": "Create a simple dog collar. The collar should be adjustable and have a buckle for fastening. Include a small ring for attaching a leash.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"CollarColor\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the collar\nbuckle_color = bpy.data.materials.new(name=\"BuckleColor\")\nbuckle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the buckle\n\n# Step 2: Create the Collar (a torus to represent the adjustable collar)\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle (a small cube)\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Ring (a torus to represent the ring for attaching a leash)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(0.8, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(buckle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.881687471439155, "unit_n": 3, "param_ratio": 8.0}
{"id": "8d19c4ed-3786-49e0-ae04-7d1581b95d81", "name": "Laundry Basket", "instruction": "Design a laundry basket with handles on both sides. It should be large enough to hold a full load of laundry.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Hollow out the basket\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=1, location=(0, 0, 0.5))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Inner Cylinder\"\n\n# Boolean modifier to hollow out the basket\nmod_bool = basket.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cylinder\nbpy.context.view_layer.objects.active = basket\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(inner_cylinder)\n\n# Step 3: Create the Handles\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(x, 0, 0.8), rotation=(1.57, 0, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(basket_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.974232568887508, "unit_n": 4, "param_ratio": 5.75}
{"id": "6a3dd98a-2823-4063-a06c-0d5e9456fc5e", "name": "Picture Frame", "instruction": "Create a 3D model of a simple rectangular picture frame.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (cutout)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (0.8, 0.1, 1.2)\n\n# Step 4: Apply Boolean Modifier to create the cutout\nmod_bool = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_frame\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "023ec013-1f40-49be-970d-01378127f112", "name": "Basic Clipboard", "instruction": "Please generate a 3D model of a basic clipboard. It should have a flat board with a clip at the top to hold papers. What specific usage does this clipboard have when compared to a digital note-taking device?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.7, 0.5, 0.3, 1)  # Light brown color for the board\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the clip\n\n# Step 2: Create the Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Board\"\nboard.scale = (1, 1.5, 0.05)\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.55, 0.1))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale = (0.6, 0.1, 0.1)\nclip.data.materials.append(clip_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "9ce14cf2-7e1c-4aed-ae9d-e07e6eb681c6", "name": "Pizza", "instruction": "Create a 3D model of a pizza. Start with a circular crust, about 12 inches in diameter. The crust should have a slightly raised edge. Add a layer of tomato sauce covering the base. On top of the sauce, place evenly distributed slices of mozzarella cheese, a few pepperoni slices, some mushrooms, green bell peppers, and black olives. Finally, sprinkle a light dusting of oregano.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 1, 0.8, 1)  # Mozzarella color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0, 1, 0, 1)  # Green color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0, 0, 0, 1)  # Black color\noregano_color = bpy.data.materials.new(name=\"Oregano\")\noregano_color.diffuse_color = (0.5, 0.5, 0.2, 1)  # Light green color\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.02, location=(0, 0, 0.03))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.01, location=(0, 0, 0.04))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni\npepperoni_positions = [(0.2, 0.2), (-0.2, 0.2), (0.2, -0.2), (-0.2, -0.2)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.01, location=(pos[0], pos[1], 0.05))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Mushrooms\nmushroom_positions = [(0.3, 0), (-0.3, 0), (0, 0.3), (0, -0.3)]\nfor i, pos in enumerate(mushroom_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.01, location=(pos[0], pos[1], 0.05))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 7: Create the Bell Peppers\nbell_pepper_positions = [(0.4, 0.1), (-0.4, -0.1), (0.1, 0.4), (-0.1, -0.4)]\nfor i, pos in enumerate(bell_pepper_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.01, location=(pos[0], pos[1], 0.05))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Step 8: Create the Olives\nolive_positions = [(0.35, 0.35), (-0.35, -0.35), (0.35, -0.35), (-0.35, 0.35)]\nfor i, pos in enumerate(olive_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.01, location=(pos[0], pos[1], 0.05))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)\n\n# Step 9: Create the Oregano\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.001, location=(0, 0, 0.051))\noregano = bpy.context.object\noregano.name = \"Oregano\"\noregano.data.materials.append(oregano_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.937004175027589, "unit_n": 8, "param_ratio": 10.0}
{"id": "2d7aa5d1-d4a1-4e7f-ac00-c99050cd724e", "name": "Apple", "instruction": "Generate a 3D model of a ripe apple.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the apple\nripe_apple = bpy.data.materials.new(name=\"Ripe Apple\")\nripe_apple.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(ripe_apple)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(ripe_apple)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 7.0}
{"id": "030923eb-6655-4dc2-ad8d-9892f54e501c", "name": "Corporate Logo", "instruction": "Design a 3D model of a corporate logo. The logo should be a combination of two interlocking rings, one larger than the other, forming an infinity symbol. The larger ring should have a slight tilt, giving a dynamic look. Place the company name below the logo in a modern font. Ensure the rings have a consistent thickness throughout. Add subtle shadows to give the logo depth and dimension.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Larger Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0), rotation=(math.radians(45), 0, 0))\nlarge_ring = bpy.context.object\nlarge_ring.name = \"Large Ring\"\n\n# Step 3: Create the Smaller Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.7, minor_radius=0.1, location=(0, 0, 0))\nsmall_ring = bpy.context.object\nsmall_ring.name = \"Small Ring\"\n\n# Step 4: Position the Smaller Ring\nsmall_ring.location = (0.85, 0, 0)\n\n# Step 5: Add Text Below the Logo\nbpy.ops.object.text_add(location=(0, -1.5, 0))\ntext = bpy.context.object\ntext.name = \"Company Name\"\ntext.data.body = \"Company Name\"\ntext.data.align_x = 'CENTER'\ntext.data.extrude = 0.05\ntext.data.size = 0.5\n\n# Step 6: Add Subtle Shadows\nbpy.context.scene.render.engine = 'CYCLES'\nbpy.context.scene.cycles.samples = 100\n\n# Add a light source\nbpy.ops.object.light_add(type='SUN', location=(5, 5, 5))\nlight = bpy.context.object\nlight.data.energy = 3\n\n# Add a plane to catch shadows\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, -0.1))\nplane = bpy.context.object\nplane.name = \"Shadow Plane\"\n\n# Set the plane to receive shadows only\nplane.cycles.is_shadow_catcher = True", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.241632646557294, "unit_n": 5, "param_ratio": 4.8}
{"id": "cc84d860-4a79-48e1-8309-818c7ac21e54", "name": "Pizza", "instruction": "Design a pizza with a round base. Add a layer of tomato sauce, followed by cheese and various toppings like pepperoni, mushrooms, and olives.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.92, 0.76, 0.53, 1)  # Dough color\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.8, 0.8, 0.7, 1)  # Mushroom color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Olive color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Toppings\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Add Mushroom Toppings\nfor i in range(6):\n    angle = i * (math.pi / 3)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.02, location=(x, y, 0.1))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 7: Add Olive Toppings\nfor i in range(10):\n    angle = i * (math.pi / 5)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.1))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.498450732362713, "unit_n": 27, "param_ratio": 2.185185185185185}
{"id": "c565c30c-21b6-4016-baf7-e65fdd16ce89", "name": "Pen Holder", "instruction": "Create a cylindrical pen holder with a flat base.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npen_holder_color = bpy.data.materials.new(name=\"Pen Holder Color\")\npen_holder_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Cylindrical Pen Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\npen_holder = bpy.context.object\npen_holder.name = \"Pen Holder\"\npen_holder.data.materials.append(pen_holder_color)\n\n# Step 3: Create the Flat Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pen_holder_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9741306588338263, "unit_n": 2, "param_ratio": 7.5}
{"id": "77f7fb71-4535-4896-ad7a-451cdf66e95e", "name": "Drum Set", "instruction": "Please create a 3D model of a drum set. Include a bass drum, snare drum, and a couple of tom-toms. Add hi-hat and crash cymbals on stands. Arrange them in a typical setup for a right-handed player.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_color = bpy.data.materials.new(name=\"DrumColor\")\ndrum_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for drums\ncymbal_color = bpy.data.materials.new(name=\"CymbalColor\")\ncymbal_color.diffuse_color = (0.9, 0.8, 0.2, 1)  # Yellow color for cymbals\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.4, location=(0, -1, 0.2), rotation=(math.pi/2, 0, 0))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0.5, 0, 0.5))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 4: Create the Tom-Toms\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.2, location=(x, -0.5, 0.6))\n    tom_tom = bpy.context.object\n    tom_tom.name = f\"Tom-Tom {i + 1}\"\n    tom_tom.data.materials.append(drum_color)\n\n# Step 5: Create the Hi-Hat Cymbals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(-0.5, 0.5, 0.8))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(cymbal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(-0.5, 0.5, 0.75))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(cymbal_color)\n\n# Step 6: Create the Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.02, location=(0.7, 0.7, 1))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(cymbal_color)\n\n# Step 7: Create the Stands for Hi-Hat and Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(-0.5, 0.5, 0.5))\nhi_hat_stand = bpy.context.object\nhi_hat_stand.name = \"Hi-Hat Stand\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(0.7, 0.7, 0.6))\ncrash_cymbal_stand = bpy.context.object\ncrash_cymbal_stand.name = \"Crash Cymbal Stand\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.350575523231863, "unit_n": 9, "param_ratio": 5.888888888888889}
{"id": "3b0e67c7-8025-46d7-86aa-d86c58dd51e4", "name": "Travel Wallet", "instruction": "Create a 3D model of a travel wallet. It should be compact and have compartments for holding a passport, credit cards, and cash.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wallet Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_base = bpy.context.object\nwallet_base.name = \"Wallet Base\"\nwallet_base.scale = (1, 0.1, 0.7)  # Compact shape\nwallet_base.data.materials.append(wallet_color)\n\n# Step 3: Create the Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, 0.3))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.scale = (0.9, 0.02, 0.5)\npassport_compartment.data.materials.append(wallet_color)\n\n# Step 4: Create the Credit Card Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.5 + i * 0.5, 0.15, -0.3))\n    card_compartment = bpy.context.object\n    card_compartment.name = f\"Card Compartment {i + 1}\"\n    card_compartment.scale = (0.2, 0.02, 0.3)\n    card_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create the Cash Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, -0.6))\ncash_compartment = bpy.context.object\ncash_compartment.name = \"Cash Compartment\"\ncash_compartment.scale = (0.9, 0.02, 0.3)\ncash_compartment.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.29357836044127, "unit_n": 6, "param_ratio": 3.5}
{"id": "859cbedb-575a-4915-967d-1b3527875df9", "name": "Dog Bowl", "instruction": "Can you create a dog bowl?", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Outer Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.6, location=(0, 0, 0.3))\nouter_bowl = bpy.context.object\nouter_bowl.name = \"Outer Bowl\"\n\n# Step 3: Create the Inner Bowl (to give thickness to the bowl)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.6, location=(0, 0, 0.3))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Modifier to create the hollow part\nbool_mod = outer_bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_bowl\n\nbpy.context.view_layer.objects.active = outer_bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner bowl mesh\nbpy.data.objects.remove(inner_bowl, do_unlink=True)\n\n# Step 5: Add Material to the Bowl\nbowl_material = bpy.data.materials.new(name=\"Bowl Material\")\nbowl_material.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nouter_bowl.data.materials.append(bowl_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 7.5}
{"id": "76dd6750-e506-4ba4-8a97-b620764a027c", "name": "Drumsticks", "instruction": "Design drumsticks for a drum set.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the drumsticks\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light wood color\n\n# Step 2: Create the Drumsticks\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(x, 0, 0))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.524155887072955, "unit_n": 2, "param_ratio": 5.0}
{"id": "6de01451-abce-4200-9f7e-453225084f11", "name": "Microphone", "instruction": "Create a 3D model of a microphone. The microphone should have a cylindrical handle and a spherical mesh top.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Mesh Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 0.25))\nmesh_top = bpy.context.object\nmesh_top.name = \"Mesh Top\"", "color_brightness": "Dark", "verify": "human", "entropy": 5.080063966698556, "unit_n": 2, "param_ratio": 4.5}
{"id": "3753a6b9-1203-4dcf-be46-897bde87e21f", "name": "T-Shirt", "instruction": "Design a plain T-shirt with short sleeves and a crew neck. The T-shirt should be medium in size and have a simple, clean look.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ntshirt_color = bpy.data.materials.new(name=\"TShirtColor\")\ntshirt_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body of the T-Shirt\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1)\nbody.data.materials.append(tshirt_color)\n\n# Step 3: Create the Sleeves\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.8, location=(x, 0, 1.5), rotation=(0, 1.57, 0))\n    sleeve = bpy.context.object\n    sleeve.name = f\"Sleeve {i + 1}\"\n    sleeve.data.materials.append(tshirt_color)\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(0, 0, 2))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(tshirt_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.129994340386499, "unit_n": 4, "param_ratio": 5.75}
{"id": "c20f6e64-2b65-403a-9203-58c9877353dc", "name": "Screwdriver", "instruction": "Model a simple screwdriver. It should have a straight handle and a metal shaft ending in a flat-head tip.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Grey color for the metal shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Metal Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat-Head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.scale = (0.1, 0.02, 0.1)\ntip.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.270275129726423, "unit_n": 3, "param_ratio": 8.0}
{"id": "608f9812-97bb-4aaf-a126-737ab69c24a1", "name": "Dog Bed", "instruction": "Let's create a 3D model of a dog bed. The bed should be oval-shaped with dimensions of 24 inches in length and 18 inches in width. It should feature a low, padded border around the edge and a flat, cushioned center. The entire bed should be in a neutral color.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nneutral_color = bpy.data.materials.new(name=\"Neutral Color\")\nneutral_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Neutral gray color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_uv_sphere_add(segments=32, ring_count=16, radius=0.3, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.2  # Scale to make it oval\nbase.scale[1] = 0.9\nbase.scale[2] = 0.1  # Flatten the base\nbase.data.materials.append(neutral_color)\n\n# Step 3: Create the Border\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0.05))\nborder = bpy.context.object\nborder.name = \"Border\"\nborder.scale[0] = 1.2  # Scale to match the base\nborder.scale[1] = 0.9\nborder.data.materials.append(neutral_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.86294380981967, "unit_n": 2, "param_ratio": 8.0}
{"id": "1ebf7651-50c8-4cd6-9861-8b8fb71aaf8b", "name": "Apple", "instruction": "Construct a 3D model of an apple. The apple should be round with a small stem on top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "02c6da5f-b9a6-4030-8d99-1977dde4b0fc", "name": "Geometric Pattern", "instruction": "Can you create a geometric pattern for a wall mural? The pattern should consist of interlocking shapes like triangles, squares, and hexagons. Each shape should be filled with different colors. Ensure the pattern is symmetrical and visually appealing.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0, 1, 1),  # Magenta\n    (0, 1, 1, 1)   # Cyan\n]\n\n# Function to create a material\ndef create_material(color):\n    mat = bpy.data.materials.new(name=\"Material\")\n    mat.diffuse_color = color\n    return mat\n\n# Step 2: Create the Shapes\nshapes = []\n\n# Create Triangles\nfor i in range(3):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(i * 2, 0, 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(create_material(colors[i % len(colors)]))\n    shapes.append(triangle)\n\n# Create Squares\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1.5, location=(i * 2, 2, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(create_material(colors[(i + 3) % len(colors)]))\n    shapes.append(square)\n\n# Create Hexagons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=1, depth=0.1, location=(i * 2, 4, 0))\n    hexagon = bpy.context.object\n    hexagon.name = f\"Hexagon {i + 1}\"\n    hexagon.data.materials.append(create_material(colors[(i + 6) % len(colors)]))\n    shapes.append(hexagon)\n\n# Arrange shapes in a symmetrical pattern\nfor i, shape in enumerate(shapes):\n    shape.location.x -= 3\n    shape.location.y -= 2\n\n# Duplicate and mirror the pattern for symmetry\nbpy.ops.object.select_all(action='DESELECT')\nfor shape in shapes:\n    shape.select_set(True)\nbpy.ops.object.duplicate()\nbpy.ops.transform.mirror(constraint_axis=(True, False, False))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.084125235527181, "unit_n": 9, "param_ratio": 1.8888888888888888}
{"id": "3aaff1ce-7d88-4e87-ae64-4cdbc25cb1d1", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should have a rectangular shape with rounded corners, a front-facing camera, and a large touch screen.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbpy.ops.object.modifier_add(type='BEVEL')\nbody.modifiers[\"Bevel\"].segments = 10\nbody.modifiers[\"Bevel\"].width = 0.2\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(dark_gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.052))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.9, 1.8, 1)\nscreen.data.materials.append(black)\n\n# Step 4: Create the Front-facing Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.85, 0.06))\ncamera = bpy.context.object\ncamera.name = \"Front Camera\"\ncamera.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.588919967124003, "unit_n": 4, "param_ratio": 5.75}
{"id": "e56d1d40-877d-4791-a99b-158036ea70c3", "name": "Geometric Pattern", "instruction": "Create a 3D model of a geometric pattern. It should consist of interlocking hexagons, forming a continuous mesh.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nradius = 1\nheight = 0.1\n\n# Function to create a hexagon\ndef create_hexagon(name, location):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=height, location=location)\n    hexagon = bpy.context.object\n    hexagon.name = name\n    return hexagon\n\n# Step 2: Create the interlocking hexagons\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * radius\n        y = row * math.sqrt(3) * radius\n        if col % 2 == 1:\n            y += math.sqrt(3) * radius / 2\n        create_hexagon(f\"Hexagon_{row}_{col}\", (x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 1.0}
{"id": "a42a2e6e-33ae-4543-9b84-b607412adb1f", "name": "Cat Bed", "instruction": "Create a 3D model of a cat bed. The bed should be circular with raised edges for the cat to rest its head on. Ensure the bed is spacious enough for a cat to curl up comfortably.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.2, location=(0, 0, 0.15))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.492526358172097, "unit_n": 2, "param_ratio": 7.5}
{"id": "26f62f6b-b6c8-4f23-b7c8-50a2f5a43ba2", "name": "Hat", "instruction": "What would a wide-brimmed hat look like with a ribbon around it?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.55))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.36925939033766, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "9198a0d1-827b-4d93-8f75-0138e9764c3b", "name": "Dog Bed", "instruction": "Design a dog bed that can accommodate a medium-sized dog. The bed should have a rectangular shape with raised edges on three sides. Include a soft cushion that fits snugly within the bed. Add a removable cover for easy cleaning. The base should be slightly elevated to provide airflow.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale[2] = 0.1  # Make it flat\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nedges = [\n    ((0, -1, 0.3), (2, 0.1, 0.5)),  # Front edge\n    ((-1, 0, 0.3), (0.1, 2, 0.5)),  # Left edge\n    ((1, 0, 0.3), (0.1, 2, 0.5))    # Right edge\n]\n\nfor loc, scale in edges:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=loc)\n    edge = bpy.context.object\n    edge.scale = scale\n    edge.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.2))\ncushion = bpy.context.object\ncushion.scale[2] = 0.1  # Make it flat\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)\n\n# Step 5: Create the Removable Cover\nbpy.ops.mesh.primitive_cube_add(size=1.85, location=(0, 0, 0.25))\ncover = bpy.context.object\ncover.scale[2] = 0.05  # Make it thin\ncover.name = \"Cover\"\ncover.data.materials.append(cushion_color)\n\n# Step 6: Elevate the Base\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, 0))\nelevation = bpy.context.object\nelevation.scale[2] = 0.05  # Make it thin\nelevation.location[2] = -0.05  # Slightly lower than the base\nelevation.name = \"Elevation\"\nelevation.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7997245137920603, "unit_n": 5, "param_ratio": 5.4}
{"id": "f462facc-982b-4d4f-a7a0-ac3103efc833", "name": "Art Deco Wallpaper", "instruction": "Let's create an art deco wallpaper pattern. The design should consist of repeating geometric shapes, with a focal point of a large fan or sunburst motif.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1.0, 0.84, 0.0, 1)  # Gold color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the fan/sunburst motif\nfor i in range(12):\n    angle = i * (math.pi / 6)\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.1, radius2=0, depth=1, location=(0, 0, 0), rotation=(0, 0, angle))\n    fan_piece = bpy.context.object\n    fan_piece.name = f\"Fan Piece {i + 1}\"\n    fan_piece.data.materials.append(gold)\n\n# Step 3: Create repeating geometric shapes\nfor x in range(-5, 6):\n    for y in range(-5, 6):\n        if (x + y) % 2 == 0:\n            bpy.ops.mesh.primitive_plane_add(size=0.5, location=(x, y, 0))\n            square = bpy.context.object\n            square.name = f\"Square {x}_{y}\"\n            square.data.materials.append(black)\n        else:\n            bpy.ops.mesh.primitive_circle_add(vertices=32, radius=0.25, location=(x, y, 0))\n            circle = bpy.context.object\n            circle.name = f\"Circle {x}_{y}\"\n            circle.data.materials.append(gold)", "color_brightness": "Bright", "verify": "human", "entropy": 4.637615953648298, "unit_n": 62, "param_ratio": 0.46774193548387094}
{"id": "0e83a01c-acbb-484e-978c-5642d063a823", "name": "Microscope", "instruction": "Design a microscope with a cylindrical base and a vertical arm. The eyepiece should be at the top, with a revolving nosepiece holding three objective lenses. Include a flat stage with clips to hold slides and a focusing knob on the side.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, -0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(dark_gray)\n\n# Step 3: Create the Vertical Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=3, location=(0, 0, 1.5))\narm = bpy.context.object\narm.name = \"Arm\"\narm.data.materials.append(gray)\n\n# Step 4: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 3.15))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 5: Create the Revolving Nosepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 2.8))\nnosepiece = bpy.context.object\nnosepiece.name = \"Nosepiece\"\nnosepiece.data.materials.append(dark_gray)\n\n# Step 6: Create the Objective Lenses\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, 2.6))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(black)\n\n# Step 7: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.scale[2] = 0.05\nstage.data.materials.append(gray)\n\n# Step 8: Create the Stage Clips\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.4, 1.55))\n    clip = bpy.context.object\n    clip.name = f\"Clip {i + 1}\"\n    clip.data.materials.append(black)\n\n# Step 9: Create the Focusing Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.3, 0, 1.5), rotation=(0, math.pi/2, 0))\nknob = bpy.context.object\nknob.name = \"Focusing Knob\"\nknob.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7771644127196558, "unit_n": 11, "param_ratio": 5.090909090909091}
{"id": "12869782-8a01-41ab-b441-80c425a303a7", "name": "Blender", "instruction": "Design a 3D model of a blender. It should have a tall, cylindrical container with a lid on top and a base with control buttons.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.65, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(container_color)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.5 + i * 0.5, 0.9, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.691861322674994, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "6ff4c149-f48e-45f4-9894-7fd15913d33a", "name": "Chess Set", "instruction": "Let's design a 3D model of a chess set. The board should be a simple 8x8 grid. The pieces should be in a classic style, with kings, queens, bishops, knights, rooks, and pawns in standard positions. The pawns should be the smallest, and the kings the largest. Include all the pieces, with one set being white and the other black.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nbpy.ops.mesh.primitive_plane_add(size=8, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Chess Board\"\n\n# Create the grid pattern\nfor i in range(8):\n    for j in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i - 3.5, j - 3.5, 0.01))\n        square = bpy.context.object\n        square.name = f\"Square {i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white_material)\n        else:\n            square.data.materials.append(black_material)\n\n# Step 3: Create the Chess Pieces\ndef create_piece(name, radius, height, location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    piece.data.materials.append(material)\n    return piece\n\n# Define piece dimensions\npiece_dimensions = {\n    \"Pawn\": (0.2, 0.5),\n    \"Rook\": (0.3, 0.7),\n    \"Knight\": (0.3, 0.7),\n    \"Bishop\": (0.3, 0.8),\n    \"Queen\": (0.35, 1),\n    \"King\": (0.35, 1.2)\n}\n\n# Define piece positions\npiece_positions = {\n    \"Pawn\": [(i - 3.5, 1.5, 0.25) for i in range(8)] + [(i - 3.5, -1.5, 0.25) for i in range(8)],\n    \"Rook\": [(-3.5, 3.5, 0.35), (3.5, 3.5, 0.35), (-3.5, -3.5, 0.35), (3.5, -3.5, 0.35)],\n    \"Knight\": [(-2.5, 3.5, 0.35), (2.5, 3.5, 0.35), (-2.5, -3.5, 0.35), (2.5, -3.5, 0.35)],\n    \"Bishop\": [(-1.5, 3.5, 0.4), (1.5, 3.5, 0.4), (-1.5, -3.5, 0.4), (1.5, -3.5, 0.4)],\n    \"Queen\": [(0.5, 3.5, 0.5), (0.5, -3.5, 0.5)],\n    \"King\": [(-0.5, 3.5, 0.6), (-0.5, -3.5, 0.6)]\n}\n\n# Create white pieces\nfor piece, (radius, height) in piece_dimensions.items():\n    for position in piece_positions[piece][:len(piece_positions[piece]) // 2]:\n        create_piece(f\"White {piece}\", radius, height, position, white_material)\n\n# Create black pieces\nfor piece, (radius, height) in piece_dimensions.items():\n    for position in piece_positions[piece][len(piece_positions[piece]) // 2:]:\n        create_piece(f\"Black {piece}\", radius, height, position, black_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.909377945709847, "unit_n": 66, "param_ratio": 0.2727272727272727}
{"id": "69eb38c6-8605-4944-937f-bfb32d09f075", "name": "Sandwich", "instruction": "Can you generate a 3D model of a sandwich with layers of lettuce, tomato, cheese, and sliced turkey between two slices of bread?", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\nturkey_color = bpy.data.materials.new(name=\"Turkey\")\nturkey_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light beige color\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Turkey Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nturkey = bpy.context.object\nturkey.name = \"Turkey\"\nturkey.scale[2] = 0.1\nturkey.data.materials.append(turkey_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "49f8f03a-bdd8-45ca-8374-ced88a05b657", "name": "Geometric Pattern", "instruction": "Create a geometric pattern using a combination of triangles, squares, and circles. The pattern should be symmetrical and visually appealing.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Squares\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, 0, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(blue)\n\n# Step 3: Create the Triangles\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(x, 2, 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(red)\n\n# Step 4: Create the Circles\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, location=(x, -2, 0))\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0213397321720183, "unit_n": 6, "param_ratio": 4.833333333333333}
{"id": "583cf943-aacc-450e-91a0-b2064fdf995a", "name": "Clipboard", "instruction": "Create a 3D model of a clipboard. It should have a flat board with a clip at the top to hold papers.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Clipboard Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Clipboard Board\"\nboard.scale[2] = 0.02  # Make it flat\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.9, 0.1))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale[2] = 0.05  # Make it thinner\nclip.data.materials.append(clip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "7f746b67-4328-42c0-8a37-40ecf1a2abff", "name": "Syringe", "instruction": "Create a 3D model of a syringe. The syringe should have a cylindrical body with measurement markings, a plunger at one end, and a needle at the other. The plunger should be able to move within the cylinder, and the needle should be thin and pointed.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, 2.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\n\n# Step 5: Create the Needle Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.01, radius2=0, depth=0.2, location=(0, 0, 3))\nneedle_tip = bpy.context.object\nneedle_tip.name = \"Needle Tip\"\n\n# Step 6: Add Measurement Markings (simplified as small cubes)\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_cube_add(size=0.01, location=(0.11, 0, 0.2 * i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n\n# Optional: Group the syringe parts together\nbpy.ops.object.select_all(action='DESELECT')\nsyringe_body.select_set(True)\nplunger.select_set(True)\nneedle.select_set(True)\nneedle_tip.select_set(True)\nfor i in range(1, 10):\n    bpy.data.objects[f\"Marking {i}\"].select_set(True)\nbpy.context.view_layer.objects.active = syringe_body\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.055501049478809, "unit_n": 13, "param_ratio": 1.9230769230769231}
{"id": "8a1dc855-4508-42d4-a791-9f20903b586c", "name": "Router", "instruction": "Design a router. It should have a rectangular body with multiple antennae protruding from the top. Include a few indicator lights on the front.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nantenna_color = bpy.data.materials.new(name=\"Antenna Color\")\nantenna_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nlight_color = bpy.data.materials.new(name=\"Light Color\")\nlight_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.scale[0] = 2  # Scale X\nbody.scale[1] = 1  # Scale Y\nbody.scale[2] = 0.2  # Scale Z\nbody.name = \"Router Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Antennae\nfor i in range(3):\n    x = (i - 1) * 1.5  # Antennae positions on the X axis\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 1.2))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(antenna_color)\n\n# Step 4: Create the Indicator Lights\nfor i in range(3):\n    x = (i - 1) * 0.5  # Light positions on the X axis\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.6))\n    light = bpy.context.object\n    light.name = f\"Light {i + 1}\"\n    light.data.materials.append(light_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.363995977004877, "unit_n": 7, "param_ratio": 4.0}
{"id": "28327cd0-9ac6-4dfb-9ee2-fd42031d8fba", "name": "Sushi Roll", "instruction": "Craft a simple sushi roll.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.0, 0.2, 0.0, 1)  # Dark green color\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (1, 1, 1, 1)  # White color\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (1, 0.5, 0, 1)  # Orange color\n\n# Step 2: Create the Seaweed Outer Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nseaweed_layer = bpy.context.object\nseaweed_layer.name = \"Seaweed Layer\"\nseaweed_layer.data.materials.append(seaweed)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2.1, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice)\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2.2, location=(0, 0, 0))\nfilling_layer = bpy.context.object\nfilling_layer.name = \"Filling Layer\"\nfilling_layer.data.materials.append(filling)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.600308450524309, "unit_n": 3, "param_ratio": 10.0}
{"id": "a6c083a3-5441-4770-bbb3-505c9a697da6", "name": "Birthday Cake", "instruction": "Design a birthday cake. It should be round and have three layers, with a simple decoration on top.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for the cake\n\ndecoration_color = bpy.data.materials.new(name=\"Decoration Color\")\ndecoration_color.diffuse_color = (1, 0.2, 0.2, 1)  # Red color for the decoration\n\n# Step 2: Create the Cake Layers\n# Bottom layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(cake_color)\n\n# Middle layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, 0.75))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(cake_color)\n\n# Top layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, 1.25))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(cake_color)\n\n# Step 3: Create the Decoration\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.75))\ndecoration = bpy.context.object\ndecoration.name = \"Decoration\"\ndecoration.data.materials.append(decoration_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6413930630622415, "unit_n": 4, "param_ratio": 7.25}
{"id": "3d64ff32-5e05-4eeb-9b76-af06fc253b33", "name": "Clipboard", "instruction": "Create a clipboard with a clip at the top for holding papers.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Clipboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nclipboard = bpy.context.object\nclipboard.name = \"Clipboard\"\nclipboard.scale[2] = 0.02  # Make it flat\nclipboard.data.materials.append(wood_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.9, 0.15))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.scale[2] = 0.1  # Make it thin\nclip_base.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.9, 0.25))\nclip_top = bpy.context.object\nclip_top.name = \"Clip Top\"\nclip_top.scale[2] = 0.05  # Make it thinner\nclip_top.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "6625ac85-e356-402c-a16d-5781573c09ed", "name": "Blender", "instruction": "Let's create a 3D model of a blender. Start with a cylindrical base that has a control panel with buttons. Add a transparent container on top with measurement markings. Include the lid with a removable cap. Show the blender from a three-quarter view.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.25))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.data.materials.append(base_color)\n\n# Step 4: Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 0.85, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 7: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, 2.65))\ncap = bpy.context.object\ncap.name = \"Removable Cap\"\ncap.data.materials.append(lid_color)\n\n# Step 8: Set the View\nfor area in bpy.context.screen.areas:\n    if area.type == 'VIEW_3D':\n        space = area.spaces.active\n        region_3d = space.region_3d\n        region_3d.view_perspective = 'PERSP'\n        region_3d.view_rotation = (1.1, 0, 1.1, 0)\n        region_3d.view_location = (0, -3, 1.5)\n        break", "color_brightness": "Dark", "verify": "human", "entropy": 4.663670731956065, "unit_n": 8, "param_ratio": 6.0}
{"id": "5261e0de-1f09-452b-befa-85974da44783", "name": "Chocolate Bar", "instruction": "Design a chocolate bar. It should be rectangular with segmented squares on the top for easy breaking.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate brown color\n\n# Step 2: Create the Chocolate Bar Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nchocolate_bar = bpy.context.object\nchocolate_bar.name = \"Chocolate Bar\"\nchocolate_bar.scale = (2, 1, 0.2)\nchocolate_bar.data.materials.append(chocolate)\n\n# Step 3: Create the Segmented Squares\nrows = 4\ncols = 8\nsquare_size = 0.45\ngap = 0.05\n\nfor i in range(rows):\n    for j in range(cols):\n        x = (j - (cols - 1) / 2) * (square_size + gap)\n        y = (i - (rows - 1) / 2) * (square_size + gap)\n        bpy.ops.mesh.primitive_cube_add(size=square_size, location=(x, y, 0.7))\n        segment = bpy.context.object\n        segment.name = f\"Segment {i * cols + j + 1}\"\n        segment.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.735770702467594, "unit_n": 2, "param_ratio": 6.0}
{"id": "c57c3006-2f01-49ed-b6f2-7cd849c2cdef", "name": "Coffee Grinder", "instruction": "Create a compact coffee grinder with a cylindrical base and a removable top lid.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.3, location=(0, 0, 2.15))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 10.0}
{"id": "a9b799ad-2a2c-441c-9279-77beba86ff9b", "name": "Coffee Grinder", "instruction": "Sketch a coffee grinder. It has a cylindrical body with a crank handle on top. There is a small drawer at the bottom for the grounds.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown wood color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal_color)\n\n# Step 3: Create the Crank Handle\n# Base of the crank handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 2.1))\ncrank_base = bpy.context.object\ncrank_base.name = \"Crank Base\"\ncrank_base.data.materials.append(metal_color)\n\n# Handle of the crank\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.5, 0, 2.3), rotation=(0, math.pi/2, 0))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(metal_color)\n\n# Knob of the crank\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1, 0, 2.3))\ncrank_knob = bpy.context.object\ncrank_knob.name = \"Crank Knob\"\ncrank_knob.data.materials.append(wood_color)\n\n# Step 4: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, 0.4))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood_color)\n\n# Drawer handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.45, 0.4))\ndrawer_handle = bpy.context.object\ndrawer_handle.name = \"Drawer Handle\"\ndrawer_handle.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.8236253624856955, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "0733acb6-4605-4da1-91b6-8e2558b17cd2", "name": "Pizza", "instruction": "Could you design a pizza with various toppings arranged in a visually appealing manner?", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.94, 0.76, 0.44, 1)  # Dough color\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0, 0, 0, 1)  # Olive color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce Layer\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese Layer\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Slices\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Add Olives\nfor i in range(8):\n    angle = (i + 0.5) * math.pi / 4\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.1))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.541340890541788, "unit_n": 19, "param_ratio": 2.5789473684210527}
{"id": "c0538237-afad-47c4-8607-ace88452999e", "name": "Floor Lamp", "instruction": "Design a floor lamp. The lamp has a tall, slender stand and a circular base. The lampshade is conical and sits at the top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstand_color = bpy.data.materials.new(name=\"Stand Color\")\nstand_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nshade_color = bpy.data.materials.new(name=\"Shade Color\")\nshade_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(stand_color)\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.05))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.data.materials.append(stand_color)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0, depth=0.5, location=(0, 0, 2.3))\nshade = bpy.context.object\nshade.name = \"Lampshade\"\nshade.data.materials.append(shade_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.874374143233803, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "8cd8275e-f475-418e-9032-7d319f1c08bb", "name": "Wall Mural", "instruction": "Design a 3D model of a wall mural. The mural should cover an entire wall and depict a scenic landscape with mountains, trees, and a river flowing through the middle. Include a few birds flying in the sky and a sun setting behind the mountains. The mural should have a realistic style.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsky_blue = bpy.data.materials.new(name=\"Sky Blue\")\nsky_blue.diffuse_color = (0.53, 0.81, 0.92, 1)  # Sky blue color\nmountain_gray = bpy.data.materials.new(name=\"Mountain Gray\")\nmountain_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Mountain gray color\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Tree green color\nriver_blue = bpy.data.materials.new(name=\"River Blue\")\nriver_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # River blue color\nsun_yellow = bpy.data.materials.new(name=\"Sun Yellow\")\nsun_yellow.diffuse_color = (1.0, 0.84, 0.0, 1)  # Sun yellow color\nbird_black = bpy.data.materials.new(name=\"Bird Black\")\nbird_black.diffuse_color = (0.0, 0.0, 0.0, 1)  # Bird black color\n\n# Step 2: Create the Wall\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nwall = bpy.context.object\nwall.name = \"Wall\"\nwall.data.materials.append(sky_blue)\n\n# Step 3: Create the Mountains\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=3, depth=2, location=(-2, 0, 1))\nmountain1 = bpy.context.object\nmountain1.name = \"Mountain 1\"\nmountain1.data.materials.append(mountain_gray)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2.5, depth=1.5, location=(1, 0, 0.75))\nmountain2 = bpy.context.object\nmountain2.name = \"Mountain 2\"\nmountain2.data.materials.append(mountain_gray)\n\n# Step 4: Create the Trees\nfor i in range(5):\n    x = -4 + i * 2\n    bpy.ops.mesh.primitive_cone_add(vertices=8, radius1=0.3, depth=1, location=(x, 0, -0.5))\n    tree = bpy.context.object\n    tree.name = f\"Tree {i + 1}\"\n    tree.data.materials.append(tree_green)\n\n# Step 5: Create the River\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, -0.5))\nriver = bpy.context.object\nriver.scale = (10, 1, 1)\nriver.name = \"River\"\nriver.data.materials.append(river_blue)\n\n# Step 6: Create the Sun\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 1.5))\nsun = bpy.context.object\nsun.name = \"Sun\"\nsun.data.materials.append(sun_yellow)\n\n# Step 7: Create the Birds\nfor i in range(3):\n    x = -1 + i\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(x, 0, 1.8))\n    bird = bpy.context.object\n    bird.name = f\"Bird {i + 1}\"\n    bird.data.materials.append(bird_black)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2274242684199828, "unit_n": 13, "param_ratio": 4.923076923076923}
{"id": "f0b00d41-47e8-46c8-b875-239c425672c6", "name": "Bird Feeder", "instruction": "I need a 3D model of a bird feeder. The feeder should have a cylindrical container for seeds, a perch for birds to sit on, and a small roof to protect the seeds from rain. Make sure the container has a transparent section to see the seed level.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.3)  # Transparent color\n\nsolid_material = bpy.data.materials.new(name=\"Solid\")\nsolid_material.diffuse_color = (0.5, 0.3, 0.1, 1)  # Solid color\n\n# Step 2: Create the Seed Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Seed Container\"\ncontainer.data.materials.append(solid_material)\n\n# Create the Transparent Section\nbpy.ops.mesh.primitive_cylinder_add(radius=0.28, depth=0.8, location=(0, 0, 0.5))\ntransparent_section = bpy.context.object\ntransparent_section.name = \"Transparent Section\"\ntransparent_section.data.materials.append(transparent_material)\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.6, location=(0.3, 0, 0.2), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(solid_material)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, depth=0.2, location=(0, 0, 1.1))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(solid_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.172349973551018, "unit_n": 4, "param_ratio": 8.25}
{"id": "e5a78320-10fa-4af5-9e75-3c60f97c29c3", "name": "Dog Bowl", "instruction": "Design a dog bowl. Compare it with a cat bowl, noting that the dog bowl is usually larger and deeper.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Dog Bowl\n# Outer bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.6, location=(0, 0, 0))\nouter_bowl = bpy.context.object\nouter_bowl.name = \"Dog Bowl Outer\"\n\n# Inner bowl (to create the hollow part)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.5, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Dog Bowl Inner\"\n\n# Boolean modifier to hollow out the bowl\nmod_bool = outer_bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = outer_bowl\nbpy.ops.object.modifier_apply(modifier=mod_bool.name)\n\n# Delete the inner bowl mesh\nbpy.data.objects.remove(inner_bowl, do_unlink=True)\n\n# Step 3: Create the Cat Bowl for comparison\n# Outer bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.4, location=(3, 0, 0))\ncat_outer_bowl = bpy.context.object\ncat_outer_bowl.name = \"Cat Bowl Outer\"\n\n# Inner bowl (to create the hollow part)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.3, location=(3, 0, 0.05))\ncat_inner_bowl = bpy.context.object\ncat_inner_bowl.name = \"Cat Bowl Inner\"\n\n# Boolean modifier to hollow out the bowl\ncat_mod_bool = cat_outer_bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\ncat_mod_bool.operation = 'DIFFERENCE'\ncat_mod_bool.object = cat_inner_bowl\nbpy.context.view_layer.objects.active = cat_outer_bowl\nbpy.ops.object.modifier_apply(modifier=cat_mod_bool.name)\n\n# Delete the inner bowl mesh\nbpy.data.objects.remove(cat_inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.7213126399412, "unit_n": 4, "param_ratio": 5.0}
{"id": "e3a241fa-f7fd-4d7e-855b-36bc891552dc", "name": "Toaster", "instruction": "Let's create a 3D model of a toaster. It should have a slot for two slices of bread, a lever on the side to push the bread down, and a dial to control the toasting level. The toaster should look like it's ready to make some delicious toast. Can you do that for me?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntoaster_color = bpy.data.materials.new(name=\"ToasterColor\")\ntoaster_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nlever_color = bpy.data.materials.new(name=\"LeverColor\")\nlever_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ndial_color = bpy.data.materials.new(name=\"DialColor\")\ndial_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Toaster Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntoaster_body = bpy.context.object\ntoaster_body.name = \"ToasterBody\"\ntoaster_body.scale = (1, 0.5, 0.75)\ntoaster_body.data.materials.append(toaster_color)\n\n# Step 3: Create the Slots for Bread\nfor i in range(2):\n    x = (i * 0.8) - 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.6, location=(x, 0, 1.6))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.scale = (0.3, 0.05, 0.3)\n    bpy.ops.object.modifier_add(type='BOOLEAN')\n    bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n    bpy.context.object.modifiers[\"Boolean\"].object = toaster_body\n    bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n    bpy.data.objects.remove(slot)\n\n# Step 4: Create the Lever\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.1, 0, 0.5))\nlever = bpy.context.object\nlever.name = \"Lever\"\nlever.scale = (0.1, 0.05, 0.3)\nlever.data.materials.append(lever_color)\n\n# Step 5: Create the Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(-1.1, 0.4, 0.75))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.data.materials.append(dial_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 1.4692449574767155, "unit_n": 7, "param_ratio": 4.714285714285714}
{"id": "10366c1a-1292-4b6b-a83e-ce242e10ee2f", "name": "Smartphone", "instruction": "Generate a 3D model of a smartphone. It should have a rectangular screen, a home button, and a camera on the back.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray for the body\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the button\ncamera_color = bpy.data.materials.new(name=\"Camera Color\")\ncamera_color.diffuse_color = (0, 0, 0, 1)  # Black color for the camera\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.3, 0.6, 0.02)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.28, 0.58, 1)\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Home Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.01, location=(0, -0.55, 0.015))\nhome_button = bpy.context.object\nhome_button.name = \"Home Button\"\nhome_button.data.materials.append(button_color)\n\n# Step 5: Create the Camera\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.01, location=(0, 0.55, 0.025))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(camera_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.4049172835953376, "unit_n": 4, "param_ratio": 9.5}
{"id": "9cd274ae-10a3-431d-a056-2509c6463b70", "name": "Sandwich", "instruction": "How does this sandwich compare to a typical hamburger? The sandwich consists of two slices of rectangular bread, with layers of lettuce, tomato, cheese, and ham in between. ", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"BreadColor\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"LettuceColor\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"TomatoColor\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"CheeseColor\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.35, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"HamColor\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pinkish color\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer of lettuce\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make it a layer of tomato\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a layer of cheese\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.45))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05  # Flatten the cube to make it a layer of ham\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.55))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.018925288274242, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "5c9847ff-0edd-48f5-96c0-e7f1186dc9e4", "name": "Coffee Grinder", "instruction": "Could you model a coffee grinder that can hold up to 250 grams of coffee beans? It should have an adjustable grind setting and a side-mounted handle.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood)\n\n# Step 3: Create the Bean Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1.5, location=(0, 0, 2.75))\ncontainer = bpy.context.object\ncontainer.name = \"Bean Container\"\ncontainer.data.materials.append(metal)\n\n# Step 4: Create the Grind Setting Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 3.55))\nknob = bpy.context.object\nknob.name = \"Grind Setting Knob\"\nknob.data.materials.append(metal)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1, 0, 3), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)\n\n# Step 6: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1.5, 0, 3))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.9327925131315813, "unit_n": 5, "param_ratio": 7.2}
{"id": "7fa1ebff-a6ac-4116-9ebe-842d8110ad4f", "name": "Wall Art", "instruction": "Create a piece of wall art that features an abstract geometric pattern. Use a variety of shapes and sizes, arranged in a visually balanced composition. The piece should be framed and ready to hang.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1.0, 1.0, 0.0, 1)  # Yellow color\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray frame color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (1.1, 1.1, 0.05)\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Background\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.05))\nbackground = bpy.context.object\nbackground.name = \"Background\"\n\n# Step 4: Create Abstract Shapes\n# Circle\nbpy.ops.mesh.primitive_circle_add(radius=0.3, location=(-0.5, 0.5, 0.1))\ncircle = bpy.context.object\ncircle.name = \"Circle\"\ncircle.data.materials.append(blue)\n\n# Square\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0.5, 0.5, 0.1))\nsquare = bpy.context.object\nsquare.name = \"Square\"\nsquare.data.materials.append(red)\n\n# Triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.3, depth=0.1, location=(0.5, -0.5, 0.1))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(green)\n\n# Hexagon\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.3, location=(-0.5, -0.5, 0.1))\nhexagon = bpy.context.object\nhexagon.name = \"Hexagon\"\nhexagon.data.materials.append(yellow)\n\n# Step 5: Arrange Shapes in a Balanced Composition\ncircle.location = (-0.5, 0.5, 0.1)\nsquare.location = (0.5, 0.5, 0.1)\ntriangle.location = (0.5, -0.5, 0.1)\nhexagon.location = (-0.5, -0.5, 0.1)\n\n# Ensure all shapes are slightly above the background\nfor obj in [circle, square, triangle, hexagon]:\n    obj.location.z = 0.1\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.390673298229264, "unit_n": 6, "param_ratio": 8.666666666666666}
{"id": "5250b027-edc2-407b-ba6c-e6c08cdbbfd2", "name": "Hot Air Balloon", "instruction": "Consider the basic structure of a hot air balloon. Focus on the essential components: the envelope, basket, and burner. The envelope should be large enough to provide lift. The basket needs to accommodate passengers. The burner, positioned above the basket, generates the hot air.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nenvelope_color = bpy.data.materials.new(name=\"Envelope Color\")\nenvelope_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\nburner_color = bpy.data.materials.new(name=\"Burner Color\")\nburner_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Envelope\nbpy.ops.mesh.primitive_uv_sphere_add(radius=2, location=(0, 0, 4))\nenvelope = bpy.context.object\nenvelope.name = \"Envelope\"\nenvelope.data.materials.append(envelope_color)\n\n# Step 3: Create the Basket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.scale[2] = 0.5  # Make the basket shorter in height\nbasket.data.materials.append(basket_color)\n\n# Step 4: Create the Burner\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 1.25))\nburner = bpy.context.object\nburner.name = \"Burner\"\nburner.data.materials.append(burner_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.336070842743446, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "02abd0fd-831f-4525-a95c-6694cf7a1a61", "name": "Paper", "instruction": "Create a standard sheet of paper that is A4 size.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the A4 Sheet of Paper\n# A4 dimensions in meters: 0.21m x 0.297m\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\npaper = bpy.context.object\npaper.name = \"A4 Paper\"\npaper.scale = (0.105, 0.1485, 1)  # Scale to A4 dimensions\n\n# Step 3: Set the color to white\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\npaper.data.materials.append(white_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 9.0}
{"id": "e40e70cb-cbe8-485c-b709-0e30d9926bcc", "name": "Smartphone", "instruction": "Create a smartphone.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (0.4, 0.8, 0.02)\nbody.name = \"Smartphone Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.scale = (0.38, 0.78, 1)\nscreen.name = \"Smartphone Screen\"\nscreen.data.materials.append(dark_gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "d1222342-6dd6-42d0-8650-d52e183edc74", "name": "Video Projector", "instruction": "Imagine we're decorating a space with visual technology; how would you incorporate a video projector into the room's aesthetic while ensuring optimal functionality for large-scale displays?", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nprojector_body_color = bpy.data.materials.new(name=\"Projector Body Color\")\nprojector_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nlens_color = bpy.data.materials.new(name=\"Lens Color\")\nlens_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Projector Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nprojector_body = bpy.context.object\nprojector_body.name = \"Projector Body\"\nprojector_body.scale = (1.5, 1, 0.5)\nprojector_body.data.materials.append(projector_body_color)\n\n# Step 3: Create the Projector Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0.75, 0, 0.5), rotation=(0, math.pi/2, 0))\nlens = bpy.context.object\nlens.name = \"Projector Lens\"\nlens.data.materials.append(lens_color)\n\n# Step 4: Create the Projector Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, -0.5))\nstand = bpy.context.object\nstand.name = \"Projector Stand\"\nstand.data.materials.append(projector_body_color)\n\n# Step 5: Create the Projector Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Projector Base\"\nbase.data.materials.append(projector_body_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.032578455190326, "unit_n": 4, "param_ratio": 8.0}
{"id": "c48a490a-18a3-42fa-ac49-5377ca5fe890", "name": "Donut", "instruction": "I need you to compare two donuts. The first donut should have a plain surface. The second donut should have a frosting and sprinkles on top. Both donuts should have a hole in the center and be the same size.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplain_color = bpy.data.materials.new(name=\"Plain\")\nplain_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for plain donut\n\nfrosting_color = bpy.data.materials.new(name=\"Frosting\")\nfrosting_color.diffuse_color = (1, 0.5, 0.5, 1)  # Pink color for frosting\n\nsprinkle_color = bpy.data.materials.new(name=\"Sprinkle\")\nsprinkle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color for sprinkles\n\n# Step 2: Create the Plain Donut\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(-2, 0, 0))\nplain_donut = bpy.context.object\nplain_donut.name = \"Plain Donut\"\nplain_donut.data.materials.append(plain_color)\n\n# Step 3: Create the Donut with Frosting\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(2, 0, 0))\nfrosted_donut = bpy.context.object\nfrosted_donut.name = \"Frosted Donut\"\nfrosted_donut.data.materials.append(plain_color)\n\n# Step 4: Create the Frosting\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.35, location=(2, 0, 0.1))\nfrosting = bpy.context.object\nfrosting.name = \"Frosting\"\nfrosting.scale.z = 0.3\nfrosting.data.materials.append(frosting_color)\n\n# Step 5: Create the Sprinkles\nfor _ in range(50):\n    x = random.uniform(1.5, 2.5)\n    y = random.uniform(-0.5, 0.5)\n    z = random.uniform(0.1, 0.3)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n    sprinkle = bpy.context.object\n    sprinkle.name = \"Sprinkle\"\n    sprinkle.data.materials.append(sprinkle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8423749696002165, "unit_n": 53, "param_ratio": 0.6415094339622641}
{"id": "52d45165-5ef2-48b9-a39a-4aadad3e514d", "name": "Smartphone", "instruction": "Design a 3D model of a modern smartphone. It should be sleek and rectangular with a large touchscreen display.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Phone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nphone_body = bpy.context.object\nphone_body.name = \"Phone Body\"\nphone_body.scale = (0.4, 0.8, 0.02)\nphone_body.data.materials.append(dark_gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "6cd93013-22b8-42c1-9b8e-b445f47091c1", "name": "Clipboard", "instruction": "Can you design a clipboard? It should have a flat rectangular board with a clip at the top to hold papers.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brownish color for the board\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the clip\n\n# Step 2: Create the Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.scale = (1, 0.05, 1.5)\nboard.name = \"Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.075, 1.45))\nclip = bpy.context.object\nclip.scale = (0.3, 0.05, 0.1)\nclip.name = \"Clip\"\nclip.data.materials.append(clip_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "c714634d-de72-4bf9-b424-0921464d00eb", "name": "Chessboard", "instruction": "I need you to design a chessboard. The board should have 64 squares arranged in an 8x8 grid. Alternate between dark and light squares. Add simple, classic chess pieces for each side.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_color = bpy.data.materials.new(name=\"Dark Square\")\ndark_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nlight_color = bpy.data.materials.new(name=\"Light Square\")\nlight_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_color)\n        else:\n            square.data.materials.append(dark_color)\n\n# Step 3: Create Simple Chess Pieces\n# Define piece colors\nwhite_color = bpy.data.materials.new(name=\"White Piece\")\nwhite_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_color = bpy.data.materials.new(name=\"Black Piece\")\nblack_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Function to create a simple pawn\ndef create_pawn(location, color):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    pawn = bpy.context.object\n    pawn.data.materials.append(color)\n\n# Function to create a simple rook\ndef create_rook(location, color):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=location)\n    rook = bpy.context.object\n    rook.data.materials.append(color)\n\n# Add pawns\nfor i in range(8):\n    create_pawn((i * square_size, 1 * square_size, 0.2), white_color)\n    create_pawn((i * square_size, 6 * square_size, 0.2), black_color)\n\n# Add rooks\ncreate_rook((0 * square_size, 0 * square_size, 0.2), white_color)\ncreate_rook((7 * square_size, 0 * square_size, 0.2), white_color)\ncreate_rook((0 * square_size, 7 * square_size, 0.2), black_color)\ncreate_rook((7 * square_size, 7 * square_size, 0.2), black_color)\n\n# Note: For simplicity, only pawns and rooks are added. Other pieces can be added similarly.", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.612276283961901, "unit_n": 66, "param_ratio": 0.3787878787878788}
{"id": "9dc90ad9-20df-45b7-803e-37e11b8b2be4", "name": "Screwdriver", "instruction": "Create a screwdriver with a straight handle and a flathead tip. Make it about 7 inches long.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the handle\ntip_color = bpy.data.materials.new(name=\"Tip Color\")\ntip_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the tip\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=5, location=(0, 0, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Tip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, -1))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(tip_color)\n\n# Step 4: Create the Flathead\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, -2))\nflathead = bpy.context.object\nflathead.name = \"Flathead\"\nflathead.scale = (0.05, 0.2, 0.1)\nflathead.data.materials.append(tip_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.514915311100522, "unit_n": 3, "param_ratio": 8.0}
{"id": "32da99a6-0d83-4b55-acd8-6b8c3effd43d", "name": "Microscope", "instruction": "Design a microscope. It should have an eyepiece, a stage for placing slides, and adjustment knobs.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(gray)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.25))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(black)\n\n# Step 5: Create the Adjustment Knobs\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, 0, 0.75))\n    knob = bpy.context.object\n    knob.name = f\"Knob {i + 1}\"\n    knob.data.materials.append(gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.9887188945342613, "unit_n": 5, "param_ratio": 5.8}
{"id": "a47017e0-eae0-4390-90dd-057c63f6a166", "name": "Bookshelf", "instruction": "Create a bookshelf with five shelves of equal height. The sides should be straight and the back should be solid.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood brown color\n\n# Step 2: Create the Sides\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.45, 0, 1.25))\nleft_side = bpy.context.object\nleft_side.scale[2] = 2.5\nleft_side.data.materials.append(wood_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.45, 0, 1.25))\nright_side = bpy.context.object\nright_side.scale[2] = 2.5\nright_side.data.materials.append(wood_color)\n\n# Step 3: Create the Back\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.05, 1.25))\nback = bpy.context.object\nback.scale[0] = 0.5\nback.scale[2] = 2.5\nback.data.materials.append(wood_color)\n\n# Step 4: Create the Shelves\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5 + i * 0.5))\n    shelf = bpy.context.object\n    shelf.scale[0] = 0.45\n    shelf.scale[2] = 0.05\n    shelf.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.898952890649693, "unit_n": 8, "param_ratio": 2.625}
{"id": "0d3cb0fa-aa23-48da-a1c1-86b83961fa1e", "name": "Cat Scratcher", "instruction": "How might a cat scratcher look after being used by a cat for several months? Consider the wear on the scratching surface.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nworn_surface = bpy.data.materials.new(name=\"Worn Surface\")\nworn_surface.diffuse_color = (0.5, 0.3, 0.2, 1)  # Worn brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(worn_surface)\n\n# Step 3: Create the Scratching Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Scratching Post\"\npost.data.materials.append(worn_surface)\n\n# Step 4: Create the Worn Scratching Surface\nbpy.ops.mesh.primitive_cylinder_add(radius=0.32, depth=2.8, location=(0, 0, 1))\nworn_post = bpy.context.object\nworn_post.name = \"Worn Scratching Surface\"\nworn_post.data.materials.append(worn_surface)\n\n# Step 5: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.5))\ntop_platform = bpy.context.object\ntop_platform.name = \"Top Platform\"\ntop_platform.data.materials.append(worn_surface)", "color_brightness": "Dark", "verify": "human", "entropy": 3.371347549024506, "unit_n": 4, "param_ratio": 5.75}
{"id": "c18a8e47-4780-4fc8-900f-8a96e58fd61e", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. It should have two slices of bread with layers of fillings in between. Include lettuce, tomato slices, cheese, and a few slices of meat. Ensure the fillings are visible from the sides.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\n\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\n\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\n\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.72, 0.45, 0.20, 1)  # Brown color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.scale[2] = 0.1\nmeat.name = \"Meat\"\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "b56fcaf2-0b28-4b98-950a-9a3d0ec4e0e9", "name": "Circuit Breaker", "instruction": "Create a circuit breaker with a rectangular body and a switch on the front. Compare this design with a circuit breaker that has multiple switches for different circuits.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Circuit Breaker Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.1, 0.5)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create Multiple Switches for Different Circuits\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.5 - i * 0.5))\n    multi_switch = bpy.context.object\n    multi_switch.name = f\"Multi Switch {i + 1}\"\n    multi_switch.scale = (0.2, 0.1, 0.5)\n    multi_switch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.995732273553991, "unit_n": 5, "param_ratio": 4.4}
{"id": "ae989353-a570-4377-8ed5-218e43a7294c", "name": "Dog Bowl", "instruction": "Design a dog bowl. It should be a simple, round bowl with a slightly elevated base.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.4, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Difference to Make the Bowl Hollow\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = inner_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(inner_bowl, do_unlink=True)\n\n# Step 5: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, -0.3))\nbase = bpy.context.object\nbase.name = \"Base\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.766516119131153, "unit_n": 4, "param_ratio": 4.0}
{"id": "ddcaf5a5-7536-42bc-9914-6f29a94b222f", "name": "Sketch Pad", "instruction": "Design a 3D model of a sketch pad. The pad is rectangular and has a spiral binding along one side. It contains blank pages for drawing. The cover is plain and functional, providing protection for the pages inside.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nfor i in range(10):\n    bpy.ops.mesh.primitive_plane_add(size=1.9, location=(0, 0, 0.05 - i * 0.01))\n    page = bpy.context.object\n    page.scale = (1, 1.5, 1)\n    page.name = f\"Page {i + 1}\"\n    page.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.05, -1.5 + i * 0.3, 0.1))\n    spiral = bpy.context.object\n    spiral.rotation_euler = (1.5708, 0, 0)\n    spiral.name = f\"Spiral {i + 1}\"\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.679428120864454, "unit_n": 21, "param_ratio": 1.0952380952380953}
{"id": "52f299e3-acc5-44be-9a86-178c53a9897c", "name": "Decorative Wall Panel", "instruction": "Design a decorative wall panel. It should feature a series of interlocking hexagons, creating a honeycomb pattern. The hexagons should be evenly spaced and aligned in a grid.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nhex_radius = 1\nhex_height = 0.1\nrows = 5\ncols = 5\n\n# Function to create a hexagon\ndef create_hexagon(x, y):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=hex_radius, depth=hex_height, location=(x, y, 0))\n    hexagon = bpy.context.object\n    hexagon.name = f\"Hexagon_{x}_{y}\"\n\n# Step 2: Create the honeycomb pattern\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * hex_radius\n        y = row * math.sqrt(3) * hex_radius\n        if col % 2 == 1:\n            y += math.sqrt(3) * hex_radius / 2\n        create_hexagon(x, y)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 4.0}
{"id": "031cbb47-578a-4791-b3a6-6fcd80420dd7", "name": "Sun Hat", "instruction": "Can you compare a sun hat to a standard cap? Picture a wide-brimmed hat, with the brim being significantly broader than that of a cap. The crown should be tall enough to provide ample headroom.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown of the Sun Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, 0.15))\ncrown = bpy.context.object\ncrown.name = \"Sun Hat Crown\"\n\n# Step 3: Create the Brim of the Sun Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Sun Hat Brim\"\n\n# Step 4: Create the Crown of the Standard Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(1, 0, 0.1))\ncap_crown = bpy.context.object\ncap_crown.name = \"Cap Crown\"\n\n# Step 5: Create the Brim of the Standard Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(1, 0, 0))\ncap_brim = bpy.context.object\ncap_brim.name = \"Cap Brim\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.672846125171523, "unit_n": 4, "param_ratio": 5.0}
{"id": "3a84d32c-cb35-4663-88c2-72b623b1739a", "name": "Drum Kit", "instruction": "How does this drum kit compare to the standard models? Create a drum kit with a bass drum, snare drum, two tom-toms, a floor tom, a hi-hat, and two cymbals. The bass drum should have a diameter of about 22 inches, and the snare drum should be 14 inches in diameter. The tom-toms should be 12 and 13 inches, and the floor tom should be 16 inches. The hi-hat should consist of two 14-inch cymbals, and the other two cymbals should be 16 and 18 inches. Include all necessary stands and pedals.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\ndrum_color = bpy.data.materials.new(name=\"Drum\")\ndrum_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.28, depth=0.18, location=(0, 0, 0.09))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.18, depth=0.06, location=(0.5, 0, 0.3))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 4: Create the Tom-Toms\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.08, location=(0.3, 0.3, 0.4))\ntom_tom_1 = bpy.context.object\ntom_tom_1.name = \"Tom-Tom 1\"\ntom_tom_1.data.materials.append(drum_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.165, depth=0.08, location=(0.3, -0.3, 0.4))\ntom_tom_2 = bpy.context.object\ntom_tom_2.name = \"Tom-Tom 2\"\ntom_tom_2.data.materials.append(drum_color)\n\n# Step 5: Create the Floor Tom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.21, depth=0.1, location=(-0.5, 0, 0.2))\nfloor_tom = bpy.context.object\nfloor_tom.name = \"Floor Tom\"\nfloor_tom.data.materials.append(drum_color)\n\n# Step 6: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.18, depth=0.02, location=(0.7, 0.3, 0.5))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.18, depth=0.02, location=(0.7, 0.3, 0.52))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(metal_color)\n\n# Step 7: Create the Cymbals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.21, depth=0.02, location=(0.9, -0.3, 0.6))\ncymbal_1 = bpy.context.object\ncymbal_1.name = \"Cymbal 1\"\ncymbal_1.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.24, depth=0.02, location=(0.9, 0.3, 0.7))\ncymbal_2 = bpy.context.object\ncymbal_2.name = \"Cymbal 2\"\ncymbal_2.data.materials.append(metal_color)\n\n# Step 8: Create the Stands\ndef create_stand(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=location)\n    stand = bpy.context.object\n    stand.name = \"Stand\"\n    stand.data.materials.append(metal_color)\n    return stand\n\ncreate_stand((0.5, 0, 0.15))  # Snare Drum Stand\ncreate_stand((0.3, 0.3, 0.2))  # Tom-Tom 1 Stand\ncreate_stand((0.3, -0.3, 0.2))  # Tom-Tom 2 Stand\ncreate_stand((-0.5, 0, 0.1))  # Floor Tom Stand\ncreate_stand((0.7, 0.3, 0.25))  # Hi-Hat Stand\ncreate_stand((0.9, -0.3, 0.35))  # Cymbal 1 Stand\ncreate_stand((0.9, 0.3, 0.45))  # Cymbal 2 Stand\n\n# Step 9: Create the Pedals\ndef create_pedal(location):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=location)\n    pedal = bpy.context.object\n    pedal.name = \"Pedal\"\n    pedal.data.materials.append(metal_color)\n    return pedal\n\ncreate_pedal((0, -0.2, 0.05))  # Bass Drum Pedal\ncreate_pedal((0.7, 0.3, 0.1))  # Hi-Hat Pedal", "color_brightness": "Dark", "verify": "human", "entropy": 4.654461983289919, "unit_n": 11, "param_ratio": 5.2727272727272725}
{"id": "52a45ad6-ea3d-4833-a06b-c5265c200006", "name": "Blender", "instruction": "Design a 3D model of a blender. It should have a cylindrical base with a digital control panel, a transparent pitcher with measurement markings, and a removable lid. The blender should be capable of holding up to 2 liters of liquid. Ensure the base and pitcher are securely connected.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.8, 0.25))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale[2] = 0.1\npanel.data.materials.append(panel_color)\n\n# Step 4: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.683023396203402, "unit_n": 4, "param_ratio": 9.75}
{"id": "1d62b6cc-3773-4d55-be33-b54ccd5b46a1", "name": "Sandwich", "instruction": "Imagine a sandwich with three layers. The bottom layer is a slice of bread, followed by a layer of lettuce, a slice of tomato, and a slice of cheese. The second layer is another slice of bread, followed by a slice of ham, a few cucumber slices, and a spread of mayonnaise. The top layer is the final slice of bread. The sandwich is cut diagonally into two equal halves.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color\ncucumber_color = bpy.data.materials.new(name=\"Cucumber\")\ncucumber_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Dark green color\nmayonnaise_color = bpy.data.materials.new(name=\"Mayonnaise\")\nmayonnaise_color.diffuse_color = (1.0, 1.0, 0.88, 1)  # Off-white color\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_plane_add(size=2.2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Slice\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Middle Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\nmiddle_bread = bpy.context.object\nmiddle_bread.name = \"Middle Bread\"\nmiddle_bread.data.materials.append(bread_color)\n\n# Step 7: Create the Ham Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.7))\nham = bpy.context.object\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 8: Create the Cucumber Slices\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0.5 * (i - 1), 0, 0.75))\n    cucumber = bpy.context.object\n    cucumber.name = f\"Cucumber {i + 1}\"\n    cucumber.data.materials.append(cucumber_color)\n\n# Step 9: Create the Mayonnaise Spread\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.8))\nmayonnaise = bpy.context.object\nmayonnaise.name = \"Mayonnaise\"\nmayonnaise.data.materials.append(mayonnaise_color)\n\n# Step 10: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)\n\n# Step 11: Cut the Sandwich Diagonally\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = top_bread\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bisect(plane_co=(0, 0, 0.5), plane_no=(1, 1, 0))\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.424145060900035, "unit_n": 11, "param_ratio": 6.7272727272727275}
{"id": "00836f7f-bcaa-4a9b-ada8-89978614d494", "name": "Office Layout", "instruction": "Design an office layout that includes a central workspace with desks arranged in a U-shape. Add a meeting area with a round table and chairs. Include a small lounge area with a sofa and coffee table. Ensure there is adequate space for movement and accessibility.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\nsofa_color = bpy.data.materials.new(name=\"Sofa\")\nsofa_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the U-shaped desks\ndesk_depth = 0.6\ndesk_height = 0.75\ndesk_thickness = 0.05\n\n# Left Desk\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, desk_height / 2))\nleft_desk = bpy.context.object\nleft_desk.scale = (desk_thickness, desk_depth, desk_height / 2)\nleft_desk.data.materials.append(wood_color)\n\n# Right Desk\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, desk_height / 2))\nright_desk = bpy.context.object\nright_desk.scale = (desk_thickness, desk_depth, desk_height / 2)\nright_desk.data.materials.append(wood_color)\n\n# Center Desk\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, desk_height / 2))\ncenter_desk = bpy.context.object\ncenter_desk.scale = (desk_depth, desk_thickness, desk_height / 2)\ncenter_desk.data.materials.append(wood_color)\n\n# Step 3: Create the Meeting Area\n# Round Table\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.05, location=(0, 3, 0.4))\nround_table = bpy.context.object\nround_table.data.materials.append(wood_color)\n\n# Chairs around the table\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = 1.1 * math.cos(angle)\n    y = 3 + 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.25))\n    chair = bpy.context.object\n    chair.scale = (0.2, 0.2, 0.5)\n    chair.data.materials.append(metal_color)\n\n# Step 4: Create the Lounge Area\n# Sofa\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-3, -3, 0.5))\nsofa = bpy.context.object\nsofa.scale = (1.5, 0.5, 0.5)\nsofa.data.materials.append(sofa_color)\n\n# Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-3, -1.5, 0.25))\ncoffee_table = bpy.context.object\ncoffee_table.scale = (0.75, 0.75, 0.25)\ncoffee_table.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5975146309476513, "unit_n": 10, "param_ratio": 4.4}
{"id": "91750c2f-60e9-4dcb-89b5-68749c5c7238", "name": "Drum", "instruction": "Please make a drum with a cylindrical body and a taut drumhead on top. Include tension rods around the drumhead.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (1, 1, 1, 1)  # White color\ntension_rod_color = bpy.data.materials.new(name=\"Tension Rod Color\")\ntension_rod_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.525))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = 2 * math.pi * i / num_rods\n    x = 1.05 * math.cos(angle)\n    y = 1.05 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.1, location=(x, y, 0))\n    tension_rod = bpy.context.object\n    tension_rod.name = f\"Tension Rod {i + 1}\"\n    tension_rod.data.materials.append(tension_rod_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4780173825443086, "unit_n": 3, "param_ratio": 10.0}
{"id": "42c8e106-8363-4676-98cf-cc7ec4763a35", "name": "Umbrella", "instruction": "Create a 3D model of an umbrella. It should have a collapsible canopy and a straight handle.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Dark blue color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=8, radius1=1, radius2=0, depth=0.5, location=(0, 0, 0.25))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.463953772482897, "unit_n": 2, "param_ratio": 11.0}
{"id": "1c43b8c8-b555-4fd2-aadd-14b77f743684", "name": "Power Supply Unit", "instruction": "Generate a 3D model of a power supply unit. It should be a rectangular box with a fan on one side, several connectors on another side, and a power switch.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_box = bpy.context.object\nmain_box.name = \"Main Box\"\nbpy.ops.transform.resize(value=(1.5, 1, 0.5))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 3: Create the Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(1.5, 0, 0))\nfan = bpy.context.object\nfan.name = \"Fan\"\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 4: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5, 0.5 - i * 0.5, 0.3))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n\n# Step 5: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5, -0.5, -0.3))\npower_switch = bpy.context.object\npower_switch.name = \"Power Switch\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.72824952690084, "unit_n": 6, "param_ratio": 2.8333333333333335}
{"id": "bc1cf261-0094-4bf1-a809-0219e2cfb7f1", "name": "Cat Bowl", "instruction": "Can you design a cat bowl? Make it round and shallow.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbowl_outer = bpy.context.object\nbowl_outer.name = \"Bowl Outer\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.15, location=(0, 0, 0.025))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Hollow Out the Bowl\nbpy.context.view_layer.objects.active = bowl_outer\nmod_bool = bowl_outer.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner part after boolean operation\nbpy.data.objects.remove(bowl_inner, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "eefcfe5f-08df-41ae-8533-079549671cec", "name": "Sofa vs. Loveseat", "instruction": "Create a comparison between a sofa and a loveseat. The sofa should be longer, with three cushions and armrests on both sides. The loveseat should be shorter, with two cushions and armrests on both sides. Ensure both pieces have a similar design but differ in length and seating capacity.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nfabric_color = bpy.data.materials.new(name=\"Fabric Color\")\nfabric_color.diffuse_color = (0.2, 0.2, 0.5, 1)  # A blueish fabric color\n\n# Function to create a cushion\ndef create_cushion(location, size=(0.5, 1, 0.2)):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    cushion = bpy.context.object\n    cushion.scale = size\n    cushion.data.materials.append(fabric_color)\n    return cushion\n\n# Function to create armrest\ndef create_armrest(location, size=(0.1, 1.2, 0.4)):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    armrest = bpy.context.object\n    armrest.scale = size\n    armrest.data.materials.append(fabric_color)\n    return armrest\n\n# Function to create the base\ndef create_base(location, size=(1.8, 1.2, 0.2)):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    base = bpy.context.object\n    base.scale = size\n    base.data.materials.append(fabric_color)\n    return base\n\n# Step 2: Create Sofa\n# Create the base\nsofa_base = create_base(location=(0, 0, 0.1))\n\n# Create the cushions\nfor i in range(3):\n    create_cushion(location=(-0.6 + i*0.6, 0, 0.3))\n\n# Create the armrests\ncreate_armrest(location=(-0.9, 0, 0.2))\ncreate_armrest(location=(0.9, 0, 0.2))\n\n# Step 3: Create Loveseat\n# Create the base\nloveseat_base = create_base(location=(0, -2, 0.1), size=(1.2, 1.2, 0.2))\n\n# Create the cushions\nfor i in range(2):\n    create_cushion(location=(-0.3 + i*0.6, -2, 0.3), size=(0.5, 0.6, 0.2))\n\n# Create the armrests\ncreate_armrest(location=(-0.6, -2, 0.2), size=(0.1, 0.8, 0.4))\ncreate_armrest(location=(0.6, -2, 0.2), size=(0.1, 0.8, 0.4))\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.010374487698788, "unit_n": 3, "param_ratio": 2.6666666666666665}
{"id": "379b033b-bc95-472a-8375-3a2493823b7f", "name": "Dining Table", "instruction": "Please generate a 3D model of a dining table. The table should be large enough to seat six people comfortably. Add six chairs around it, ensuring each chair is evenly spaced. Include a centerpiece, like a bowl of fruit, in the middle of the table.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nfruit_bowl_color = bpy.data.materials.new(name=\"Fruit Bowl\")\nfruit_bowl_color.diffuse_color = (0.85, 0.85, 0.85, 1)  # Light gray color\n\n# Step 2: Create the Table\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Create Table Legs\nfor i in range(4):\n    x = 1.9 * (i % 2) - 0.95\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.scale[2] = 5  # Height\n    leg.name = f\"Table Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Chairs\nfor i in range(6):\n    angle = i * math.pi / 3\n    x = 2.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, y, 0.25))\n    chair_seat = bpy.context.object\n    chair_seat.scale[0] = 0.5  # Length\n    chair_seat.scale[1] = 0.5  # Width\n    chair_seat.scale[2] = 0.05  # Thickness\n    chair_seat.name = f\"Chair Seat {i + 1}\"\n    chair_seat.data.materials.append(wood_color)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, y, 0.75))\n    chair_backrest = bpy.context.object\n    chair_backrest.scale[0] = 0.5  # Length\n    chair_backrest.scale[1] = 0.05  # Width\n    chair_backrest.scale[2] = 0.5  # Height\n    chair_backrest.name = f\"Chair Backrest {i + 1}\"\n    chair_backrest.data.materials.append(wood_color)\n\n# Step 4: Create the Centerpiece (Bowl of Fruit)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 1.1))\nfruit_bowl = bpy.context.object\nfruit_bowl.name = \"Fruit Bowl\"\nfruit_bowl.data.materials.append(fruit_bowl_color)\n\n# Add fruit to the bowl\nfor i in range(5):\n    angle = i * 2 * math.pi / 5\n    x = 0.15 * math.cos(angle)\n    y = 0.15 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 1.2))\n    fruit = bpy.context.object\n    fruit.name = f\"Fruit {i + 1}\"\n    fruit.data.materials.append(fruit_bowl_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.678394736987787, "unit_n": 23, "param_ratio": 1.4782608695652173}
{"id": "c09724ed-aacc-4290-b1b3-946f34bb6c89", "name": "Logo", "instruction": "Create a simple logo with a geometric shape.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a Geometric Shape (e.g., a Torus)\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"LogoShape\"\n\n# Step 3: Apply a Material to the Shape\nmaterial = bpy.data.materials.new(name=\"LogoMaterial\")\nmaterial.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ntorus.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.486749349760814, "unit_n": 1, "param_ratio": 10.0}
{"id": "5bf5a470-5fd5-4650-9ba7-5dee5798dc82", "name": "Travel Backpack", "instruction": "Design a travel backpack.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"Backpack Color\")\nbackpack_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Backpack\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.5, 0.3, 0.7)\nmain_body.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.05, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Straps\nfor i in range(2):\n    x = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.35, 1))\n    strap = bpy.context.object\n    strap.name = f\"Strap {i + 1}\"\n    strap.scale = (0.05, 0.05, 0.7)\n    strap.data.materials.append(backpack_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 4.25}
{"id": "81521efc-232e-41dd-a986-b1ea1e62d619", "name": "Travel Bag", "instruction": "Create a 3D model of a travel bag. The bag should be rectangular with a zipper on the top and two handles for carrying.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbag_color = bpy.data.materials.new(name=\"Bag Color\")\nbag_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Bag Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbag_body = bpy.context.object\nbag_body.name = \"Bag Body\"\nbag_body.scale = (1, 0.5, 0.5)\nbag_body.data.materials.append(bag_color)\n\n# Step 3: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.55))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.9, 0.05, 0.05)\nzipper.data.materials.append(zipper_color)\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 1.2), rotation=(0, 1.57, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(handle_color)\n    handle.scale = (1, 1, 0.2)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.931187463018785, "unit_n": 4, "param_ratio": 7.75}
{"id": "a947bfb1-e656-49c2-8476-48551f0b6959", "name": "Pencil", "instruction": "Create a pencil. It should be a long, cylindrical object with a pointed tip at one end and an eraser at the other.", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Pink color for the eraser\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the metal part\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color for the tip\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(yellow)\n\n# Step 3: Create the Pencil Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0, 0, 2.1))\npencil_tip = bpy.context.object\npencil_tip.name = \"Pencil Tip\"\npencil_tip.data.materials.append(black)\n\n# Step 4: Create the Metal Part\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.1, location=(0, 0, 0.95))\nmetal_part = bpy.context.object\nmetal_part.name = \"Metal Part\"\nmetal_part.data.materials.append(gray)\n\n# Step 5: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 0.85))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)", "color_brightness": "Bright", "verify": "human", "entropy": 4.645575507358837, "unit_n": 4, "param_ratio": 10.0}
{"id": "19da95f6-2986-4cbd-998c-6610ca33a32a", "name": "Blender", "instruction": "Design a blender with a base and a container.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.67874346877963, "unit_n": 2, "param_ratio": 10.0}
{"id": "1703ae95-a570-456d-871d-d4dba8f62873", "name": "Electrical Meter", "instruction": "Design an electrical meter. It should have a rectangular body with a digital display on the front. Include a set of buttons below the display and a small indicator light.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 0, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nindicator_color = bpy.data.materials.new(name=\"Indicator Color\")\nindicator_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Display\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.51, 0.5))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale = (0.8, 1, 0.3)\ndisplay.data.materials.append(display_color)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.3 + i * 0.3, 0.51, -0.5))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.7, 0.51, 0.8))\nindicator = bpy.context.object\nindicator.name = \"Indicator Light\"\nindicator.data.materials.append(indicator_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 0.5877606863662199, "unit_n": 6, "param_ratio": 6.0}
{"id": "eebc0bae-c08d-4cd3-967e-9fa2543ce936", "name": "Trash Can", "instruction": "Create a 3D model of a trash can. It should be cylindrical and have a lid.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ntrash_can_body = bpy.context.object\ntrash_can_body.name = \"Trash Can Body\"\ntrash_can_body.data.materials.append(gray)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 7.5}
{"id": "3ad45c09-15b2-48b2-8703-fa0fca641223", "name": "Syringe", "instruction": "Design a syringe with a plunger and a needle. The body is marked with measurement lines.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body of the Syringe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Syringe Body\"\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.location.z = 1.9\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, -0.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\n\n# Step 5: Create Measurement Lines\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.12, 0, 0.4 * i))\n    line = bpy.context.object\n    line.name = f\"Measurement Line {i + 1}\"\n\n# Optional: Apply Materials\nbody_material = bpy.data.materials.new(name=\"BodyMaterial\")\nbody_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbody.data.materials.append(body_material)\n\nplunger_material = bpy.data.materials.new(name=\"PlungerMaterial\")\nplunger_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nplunger.data.materials.append(plunger_material)\n\nneedle_material = bpy.data.materials.new(name=\"NeedleMaterial\")\nneedle_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle.data.materials.append(needle_material)\n\nline_material = bpy.data.materials.new(name=\"LineMaterial\")\nline_material.diffuse_color = (0, 0, 0, 1)  # Black color\nfor i in range(5):\n    bpy.data.objects[f\"Measurement Line {i + 1}\"].data.materials.append(line_material)", "color_brightness": "Dark", "verify": "human", "entropy": 4.491388424543061, "unit_n": 8, "param_ratio": 4.875}
{"id": "475f5401-4083-451f-a7f8-542cf7fbfb6e", "name": "Syringe", "instruction": "Could you design a syringe for me? The syringe should have a clear barrel with measurement markings, a plunger with a thumb rest, and a detachable needle. Ensure the needle is thin and sharp. Add a protective cap for the needle. The plunger should be smooth and easy to push. The barrel should be transparent to see the liquid inside. This is crucial for precise measurements.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\nclear_material = bpy.data.materials.new(name=\"ClearMaterial\")\nclear_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent material\n\nmetal_material = bpy.data.materials.new(name=\"MetalMaterial\")\nmetal_material.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\n\n# Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2.0, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.18, depth=2.0, location=(0, 0, -0.5))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(metal_material)\n\n# Create the Thumb Rest\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, -1.5))\nthumb_rest = bpy.context.object\nthumb_rest.name = \"ThumbRest\"\nthumb_rest.data.materials.append(metal_material)\n\n# Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.8, location=(0, 0, 1.4))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(metal_material)\n\n# Create the Needle Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.9, location=(0, 0, 1.4))\nneedle_cap = bpy.context.object\nneedle_cap.name = \"NeedleCap\"\nneedle_cap.data.materials.append(metal_material)\n\n# Adjust Needle Position\nneedle.location.z += 0.4\nneedle_cap.location.z += 0.45\nneedle_cap.hide_viewport = True\n\n# Create Measurement Markings (simplified as lines)\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.22, 0, 1 - 0.2 * i))\n    mark = bpy.context.object\n    mark.name = f\"Mark {i + 1}\"\n    mark.data.materials.append(metal_material)\n\n# Move the plunger to make it look inside the barrel\nplunger.location.z += 0.7", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.544908652244687, "unit_n": 15, "param_ratio": 2.6}
{"id": "84a94046-21b5-4cd3-8425-0c0a0d9808d2", "name": "Blender", "instruction": "Design a 3D model of a blender with a base, a transparent pitcher, and a lid.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (1, 1, 1, 0.2)  # Transparent white color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.659885851703786, "unit_n": 3, "param_ratio": 10.0}
{"id": "86db70ed-c4ef-4488-8e9a-29640222778c", "name": "Smartphone", "instruction": "Please create a 3D model of a smartphone. The phone should have a large touchscreen, a front camera at the top, and a single button at the bottom. The back should feature a camera and a flash.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Phone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nphone_body = bpy.context.object\nphone_body.name = \"Phone Body\"\nphone_body.scale = (0.5, 1, 0.05)\nphone_body.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.45, 0.95, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.9, 0.06))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, -0.9, 0.06))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(black)\n\n# Step 6: Create the Back Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.3, 0.95, -0.06))\nback_camera = bpy.context.object\nback_camera.name = \"Back Camera\"\nback_camera.data.materials.append(black)\n\n# Step 7: Create the Flash\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-0.3, 0.95, -0.06))\nflash = bpy.context.object\nflash.name = \"Flash\"\nflash.data.materials.append(white)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5731058298935845, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "9555ad21-442e-4993-b86d-2be7e4fd1874", "name": "Screwdriver", "instruction": "Create a 3D model of a screwdriver set. It should include a handle and interchangeable bits for different screw types. The handle should have a grip for better control.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.3, 0.1, 1)  # Orange color for the handle\nbit_color = bpy.data.materials.new(name=\"Bit Color\")\nbit_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the bits\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Grip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.2, location=(0, 0, 0.8))\ngrip = bpy.context.object\ngrip.name = \"Grip\"\ngrip.data.materials.append(handle_color)\n\n# Step 4: Create the Bit Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.1))\nbit_holder = bpy.context.object\nbit_holder.name = \"Bit Holder\"\nbit_holder.data.materials.append(bit_color)\n\n# Step 5: Create Interchangeable Bits\nbit_types = [\"Flathead\", \"Phillips\", \"Torx\"]\nfor i, bit_type in enumerate(bit_types):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.3, location=(i * 0.15 - 0.15, 0.2, 1.2))\n    bit = bpy.context.object\n    bit.name = f\"{bit_type} Bit\"\n    bit.data.materials.append(bit_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.529654078372, "unit_n": 4, "param_ratio": 7.5}
{"id": "69c01af5-a114-4bba-a856-0318b54605e7", "name": "Garden Layout", "instruction": "Design a garden layout with a variety of flower beds, pathways, and a small pond in the center. The layout should include areas for seating and a few decorative statues. The pathways should lead to different sections of the garden, creating a harmonious and inviting space.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngrass_green = bpy.data.materials.new(name=\"Grass Green\")\ngrass_green.diffuse_color = (0.1, 0.5, 0.1, 1)  # Grass green color\npathway_gray = bpy.data.materials.new(name=\"Pathway Gray\")\npathway_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Pathway gray color\nwater_blue = bpy.data.materials.new(name=\"Water Blue\")\nwater_blue.diffuse_color = (0.1, 0.1, 0.8, 1)  # Water blue color\nflower_bed_brown = bpy.data.materials.new(name=\"Flower Bed Brown\")\nflower_bed_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Flower bed brown color\nstatue_gray = bpy.data.materials.new(name=\"Statue Gray\")\nstatue_gray.diffuse_color = (0.6, 0.6, 0.6, 1)  # Statue gray color\n\n# Step 2: Create the Grass Base\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\ngrass = bpy.context.object\ngrass.name = \"Grass\"\ngrass.data.materials.append(grass_green)\n\n# Step 3: Create the Pathways\npathway_coords = [(-4, 0), (4, 0), (0, -4), (0, 4)]\nfor coord in pathway_coords:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(coord[0], coord[1], 0.01))\n    pathway = bpy.context.object\n    pathway.scale = (0.5, 5, 0.02)\n    pathway.name = \"Pathway\"\n    pathway.data.materials.append(pathway_gray)\n\n# Step 4: Create the Pond\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.05))\npond = bpy.context.object\npond.name = \"Pond\"\npond.data.materials.append(water_blue)\n\n# Step 5: Create Flower Beds\nflower_bed_coords = [(-3, 3), (3, 3), (-3, -3), (3, -3)]\nfor coord in flower_bed_coords:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(coord[0], coord[1], 0.05))\n    flower_bed = bpy.context.object\n    flower_bed.scale = (1, 1, 0.1)\n    flower_bed.name = \"Flower Bed\"\n    flower_bed.data.materials.append(flower_bed_brown)\n\n# Step 6: Create Seating Areas\nseating_coords = [(-2, 0), (2, 0)]\nfor coord in seating_coords:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(coord[0], coord[1], 0.05))\n    seating = bpy.context.object\n    seating.scale = (0.5, 0.5, 0.1)\n    seating.name = \"Seating Area\"\n    seating.data.materials.append(pathway_gray)\n\n# Step 7: Create Decorative Statues\nstatue_coords = [(0, 2), (0, -2)]\nfor coord in statue_coords:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(coord[0], coord[1], 0.2))\n    statue = bpy.context.object\n    statue.name = \"Statue\"\n    statue.data.materials.append(statue_gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9697442773041387, "unit_n": 6, "param_ratio": 8.333333333333334}
{"id": "b70d7982-ab50-4408-baab-3d96d15f7506", "name": "Bread", "instruction": "Design a loaf of bread. It should be rectangular, about 12 inches long and 4 inches high. The top should have a slightly domed shape.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread-like color\n\n# Step 2: Create the base of the loaf (rectangular part)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.scale = (6, 2, 1)  # Scale to 12 inches long, 4 inches wide, and 2 inches high\nbase.name = \"Bread Base\"\nbase.data.materials.append(bread_color)\n\n# Step 3: Create the top dome\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 2))\ndome = bpy.context.object\ndome.scale = (6, 2, 1)  # Scale to match the base dimensions\ndome.name = \"Bread Dome\"\ndome.data.materials.append(bread_color)\n\n# Step 4: Join the base and dome\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\ndome.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.351090844409256, "unit_n": 2, "param_ratio": 6.5}
{"id": "556c0ef3-3040-475c-9fa3-afb9e56987b6", "name": "Cat Scratching Post", "instruction": "Can you create a cat scratching post? It should be about 2 feet tall with a circular base and a cylindrical post.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1.025))\npost = bpy.context.object\npost.name = \"Post\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.567477585857952, "unit_n": 2, "param_ratio": 5.0}
{"id": "c63a5dad-5613-45ff-b1c1-1cc001eab59c", "name": "Juicer", "instruction": "Could you generate a 3D model of a juicer? How does it compare to a standard blender in terms of size?", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntop_color = bpy.data.materials.new(name=\"TopColor\")\ntop_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"JuicerBody\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Top\nbpy.ops.mesh.primitive_cone_add(radius1=1.2, radius2=0, depth=0.5, location=(0, 0, 2.75))\ntop = bpy.context.object\ntop.name = \"JuicerTop\"\ntop.data.materials.append(top_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 1))\nspout = bpy.context.object\nspout.name = \"JuicerSpout\"\nspout.data.materials.append(body_color)\n\n# Step 5: Create the Juice Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, -0.75))\ncontainer = bpy.context.object\ncontainer.name = \"JuiceContainer\"\ncontainer.data.materials.append(body_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.612712356993935, "unit_n": 4, "param_ratio": 7.75}
{"id": "738258ab-74d7-4309-ac42-bae0df093eeb", "name": "Microscope", "instruction": "Can you form a 3D model of a microscope? The microscope should have an eyepiece at the top, a stage for placing slides, and objective lenses of varying magnifications. It should also have focus adjustment knobs on the sides.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 2))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.5, location=(0, 0, 1.25))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(gray)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(black)\n\n# Step 5: Create the Objective Lenses\nfor i in range(3):\n    angle = math.radians(120 * i)\n    x = 0.2 * math.cos(angle)\n    y = 0.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 0.8))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(black)\n\n# Step 6: Create the Focus Adjustment Knobs\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, 0, 0.5), rotation=(0, math.pi/2, 0))\n    knob = bpy.context.object\n    knob.name = f\"Focus Knob {i + 1}\"\n    knob.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.444288339673049, "unit_n": 8, "param_ratio": 4.625}
{"id": "c01ae4a2-8146-48c5-b46b-c11bc236219d", "name": "Blender", "instruction": "Create a 3D model of a blender. It should have a base with a control panel featuring a few buttons, a transparent jar with measurement markings, and a lid. The jar should fit securely onto the base, and the lid should have a removable cap for adding ingredients while blending. The design should be practical and easy to use.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\n\n# Step 4: Create Buttons on the Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 0.75, 0.6))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n\n# Step 5: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(bpy.data.materials.new(name=\"Glass\"))\njar.data.materials[0].diffuse_color = (1, 1, 1, 0.3)  # Transparent material\n\n# Step 6: Create the Measurement Markings\nbpy.ops.mesh.primitive_plane_add(size=0.05, location=(0.8, 0, 1.5))\nmarking = bpy.context.object\nmarking.name = \"Marking\"\nmarking.scale[2] = 10  # Stretch the marking vertically\n\n# Step 7: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 8: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, 2.7))\ncap = bpy.context.object\ncap.name = \"Cap\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.971268565068838, "unit_n": 9, "param_ratio": 3.6666666666666665}
{"id": "6af05a4e-95b3-46ac-b855-eb8ac4a5dcc9", "name": "Travel Pillow", "instruction": "Create a travel pillow. It should have a U-shape to fit around the neck. Ensure it looks comfortable for long journeys. Add a small strap for easy carrying. The design should be compact and practical for travel use.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npillow_color = bpy.data.materials.new(name=\"Pillow Color\")\npillow_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # A comfortable brown color\n\n# Step 2: Create the U-shaped Pillow\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0), rotation=(math.pi/2, 0, 0))\npillow = bpy.context.object\npillow.name = \"Travel Pillow\"\npillow.data.materials.append(pillow_color)\n\n# Remove a part to make it U-shaped\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbpy.ops.transform.translate(value=(1, 0, 0))\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.context.object.select_set(True)\nbpy.context.view_layer.objects.active = pillow\nbpy.ops.object.join()\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.intersect_boolean(operation='DIFFERENCE')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, -1.3, 0.3), rotation=(0, math.pi/2, 0))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(pillow_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.934299887233246, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "a6ba70ef-224b-4645-9b7c-d1a4fd0a439e", "name": "Sofa", "instruction": "Create a 3D sofa. Start with a rectangular base for the seat. Add cushions on the seat and backrest. Include armrests on both sides. The sofa should have a minimalist design.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (2, 1, 0.2)\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Seat Cushions\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(i - 0.5, 0, 0.7))\n    cushion = bpy.context.object\n    cushion.name = f\"Seat Cushion {i + 1}\"\n    cushion.scale = (0.9, 0.9, 0.1)\n    cushion.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.6, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (2, 0.2, 0.6)\nbackrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Back Cushions\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(i - 0.5, -0.6, 1.3))\n    back_cushion = bpy.context.object\n    back_cushion.name = f\"Back Cushion {i + 1}\"\n    back_cushion.scale = (0.9, 0.1, 0.5)\n    back_cushion.data.materials.append(sofa_color)\n\n# Step 6: Create the Armrests\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(1.1 * (i * 2 - 1), 0, 0.7))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 1, 0.4)\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.012566482512041, "unit_n": 8, "param_ratio": 3.125}
{"id": "a665ac62-becd-4048-8ddc-2217fa78b32d", "name": "Winter Gloves", "instruction": "Oh, let's design a pair of winter gloves. They should be fingered gloves that reach up to the wrist, with a snug fit to keep the hands warm.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nglove_material = bpy.data.materials.new(name=\"GloveMaterial\")\nglove_material.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium dark reddish color\n\n# Step 2: Create the Wrist\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(0, 0, 0))\nwrist = bpy.context.object\nwrist.name = \"Wrist\"\nwrist.data.materials.append(glove_material)\n\n# Step 3: Create the Palm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.6, location=(0, 0, 0.4))\npalm = bpy.context.object\npalm.name = \"Palm\"\npalm.data.materials.append(glove_material)\n\n# Step 4: Create the Fingers\nfinger_radius = 0.1\nfinger_depth = 0.6\nfinger_spacing = 0.25\n\nfor i in range(4):\n    x = (i - 1.5) * finger_spacing\n    bpy.ops.mesh.primitive_cylinder_add(radius=finger_radius, depth=finger_depth, location=(x, 0.25, 0.85))\n    finger = bpy.context.object\n    finger.name = f\"Finger {i + 1}\"\n    finger.data.materials.append(glove_material)\n\n# Step 5: Create the Thumb\nbpy.ops.mesh.primitive_cylinder_add(radius=finger_radius, depth=finger_depth, location=(-0.4, 0, 0.6), rotation=(0, 0, math.pi / 4))\nthumb = bpy.context.object\nthumb.name = \"Thumb\"\nthumb.data.materials.append(glove_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.829098262439823, "unit_n": 7, "param_ratio": 3.4285714285714284}
{"id": "f5c4a462-f4c6-4589-80af-9ee579247978", "name": "Travel Mug", "instruction": "Create a travel mug that is 7 inches tall and 3 inches in diameter. How does it compare to a regular coffee cup?", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the travel mug\nmug_color = bpy.data.materials.new(name=\"Mug Color\")\nmug_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Travel Mug\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=7, location=(0, 0, 3.5))\ntravel_mug = bpy.context.object\ntravel_mug.name = \"Travel Mug\"\ntravel_mug.data.materials.append(mug_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "eb9af9bb-4471-41f6-8dab-dedf0dbd6100", "name": "Coffee Machine", "instruction": "Design a 3D model of a coffee machine. Start with a rectangular base for stability. Add a cylindrical water reservoir at the back. The front should feature a drip tray and a coffee spout. Include a control panel with buttons on the top.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Water Reservoir\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, -0.75, 1.25))\nreservoir = bpy.context.object\nreservoir.name = \"Water Reservoir\"\n\n# Step 4: Create the Drip Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.75, 0.25))\ndrip_tray = bpy.context.object\ndrip_tray.name = \"Drip Tray\"\n\n# Step 5: Create the Coffee Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0.75, 1.25))\nspout = bpy.context.object\nspout.name = \"Coffee Spout\"\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\n\n# Step 7: Add Buttons to the Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(-0.3 + i * 0.3, 0, 2.05))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.505097666838718, "unit_n": 8, "param_ratio": 3.375}
{"id": "d36af050-51a7-4f84-8120-f6f5ba8e5054", "name": "Bird Feeder", "instruction": "Imagine a bird feeder that hangs from a tree branch. How would you design it to attract various types of birds and make it easy to refill with seeds?", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Seed Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.8, location=(0, 0, 0.45))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(metal_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 0.85))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)\n\n# Step 5: Create the Hanging Chain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(0, 0, 1.15))\nchain = bpy.context.object\nchain.name = \"Chain\"\nchain.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.40127048820696, "unit_n": 4, "param_ratio": 7.5}
{"id": "826915fe-50a3-4aa4-bd70-3c58eab68165", "name": "Screwdriver", "instruction": "Could you make a 3D model of a screwdriver? It should have a straight handle and a flat head.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray color for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\nhead = bpy.context.object\nhead.name = \"FlatHead\"\nhead.scale[0] = 0.02  # Make it flat\nhead.scale[1] = 0.3  # Make it wide\nhead.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.270275129726422, "unit_n": 3, "param_ratio": 8.0}
{"id": "89bf765a-ac2c-4027-9f51-004e47231be5", "name": "Bird Perch", "instruction": "Create a simple bird perch. Start with a cylindrical post about 40 cm in height. Add a horizontal bar near the top for the bird to stand on. The base should be wide and flat for stability.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, 0, 0.2))\npost = bpy.context.object\npost.name = \"Post\"\n\n# Step 3: Create the Horizontal Bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, 0, 0.35), rotation=(1.5708, 0, 0))\nbar = bpy.context.object\nbar.name = \"Horizontal Bar\"\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(0, 0, 0.01))\nbase = bpy.context.object\nbase.name = \"Base\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8898871452299195, "unit_n": 3, "param_ratio": 6.0}
{"id": "2986ed4e-cca5-457d-b7be-8d3de2130aa8", "name": "Syringe", "instruction": "Generate a syringe with a cylindrical body. Include a plunger at one end and a needle at the other. The body should have measurement markings.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the body\nplunger_color = bpy.data.materials.new(name=\"PlungerColor\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the plunger\nneedle_color = bpy.data.materials.new(name=\"NeedleColor\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Very light gray color for the needle\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=0.4, location=(0, 0, 1.2))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n\n# Step 5: Add Measurement Markings\nbpy.ops.object.text_add(location=(0.12, 0, 0.5))\nmarking = bpy.context.object\nmarking.name = \"Marking\"\nmarking.data.body = \"10ml\"\nmarking.rotation_euler = (1.5708, 0, 0)  # Rotate text to align with the cylinder\nmarking.scale = (0.1, 0.1, 0.1)\nmarking.data.materials.append(body_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.2742313706872785, "unit_n": 4, "param_ratio": 8.25}
{"id": "5bbb3359-ba51-4fdf-bb7c-e915b53ccfd9", "name": "Basket", "instruction": "Design a round basket with a handle arching over the top.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.72, 0.45, 0.20, 1)  # Brown color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.1, location=(0, 0, 0.75), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(basket_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.594276025981584, "unit_n": 2, "param_ratio": 9.0}
{"id": "14656362-e2db-4cd4-b275-2cda5a7a349e", "name": "Violin", "instruction": "Can you create a 3D model of a violin? It should have a hollow wooden body with f-holes on either side of the strings. Include the neck, fingerboard, and scroll at the top. Add four strings and fine tuners.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden body color\nstring_color = bpy.data.materials.new(name=\"String\")\nstring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # String color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.6, 0))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.scale[1] = 4\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Fingerboard\nbpy.ops.mesh.primitive_cube_add(size=0.08, location=(0, 0.6, 0.05))\nfingerboard = bpy.context.object\nfingerboard.name = \"Fingerboard\"\nfingerboard.scale[1] = 4\nfingerboard.data.materials.append(wood_color)\n\n# Step 5: Create the Scroll\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 1.2, 0))\nscroll = bpy.context.object\nscroll.name = \"Scroll\"\nscroll.data.materials.append(wood_color)\n\n# Step 6: Create the Strings\nfor i in range(4):\n    x = 0.02 * (i - 1.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=1.2, location=(x, 0.6, 0.05))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the neck\n    string.data.materials.append(string_color)\n\n# Step 7: Create the Fine Tuners\nfor i in range(4):\n    x = 0.02 * (i - 1.5)\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(x, 0.55, 0.05))\n    fine_tuner = bpy.context.object\n    fine_tuner.name = f\"Fine Tuner {i + 1}\"\n    fine_tuner.data.materials.append(string_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.52781036226774, "unit_n": 12, "param_ratio": 3.0}
{"id": "18be4604-e077-435c-b75d-060b5ec127f4", "name": "Dog Leash", "instruction": "Design a dog leash with a comfortable handle and a secure clip at the other end. The leash should be of medium length, suitable for daily walks.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the leash\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color for the handle\nclip_color = bpy.data.materials.new(name=\"ClipColor\")\nclip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the clip\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=5, location=(0, 0, -2.5))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -5.1))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.data.materials.append(clip_color)\n\n# Position the leash to connect the handle and clip\nleash.location.z -= 0.15", "color_brightness": "Dark", "verify": "human", "entropy": 4.082849296624326, "unit_n": 3, "param_ratio": 10.0}
{"id": "2bedd184-6aed-42b7-ad45-cfe0d52c5c79", "name": "Bird Cage", "instruction": "Let's create a 3D model of a bird cage. The cage should be cylindrical with vertical bars spaced evenly around it. It should have a small door on one side and a perch inside. The top should be dome-shaped with a hook for hanging.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Cage Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Cage Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 2))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale[2] = 0.5\ntop.data.materials.append(metal_color)\n\n# Step 4: Create the Vertical Bars\nnum_bars = 16\nfor i in range(num_bars):\n    angle = i * (2 * math.pi / num_bars)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, y, 1))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n    bar.data.materials.append(metal_color)\n\n# Step 5: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.data.materials.append(metal_color)\n\n# Step 6: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.5), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)\n\n# Step 7: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, 2.5))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.583162803701359, "unit_n": 6, "param_ratio": 6.0}
{"id": "f229abfa-50da-4d90-9e4b-d9babf28004a", "name": "Dog Bowl", "instruction": "Create a dog bowl. It should be round and have a simple design.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.4, location=(0, 0, 0.05))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Modifier to Hollow Out the Bowl\nmod_bool = bowl_base.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\n\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=mod_bool.name)\n\n# Remove the inner cylinder used for the boolean operation\nbpy.data.objects.remove(bowl_inner, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "b60502d4-9269-4b3d-ba29-4e845c78084f", "name": "Apple", "instruction": "Can you model an apple? It should be round with a small stem on top. The apple should be realistic in size and shape. Add a few subtle details like a small leaf attached to the stem and a slight indentation at the bottom. Ensure the overall appearance is natural and appealing.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\nleaf_green = bpy.data.materials.new(name=\"Leaf Green\")\nleaf_green.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color for the leaf\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)\n\n# Step 4: Create the Leaf\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0.15, 0, 1.25))\nleaf = bpy.context.object\nleaf.name = \"Leaf\"\nleaf.data.materials.append(leaf_green)\n\n# Rotate and shape the leaf\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.rotate(value=math.radians(45), orient_axis='X')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Indentation at the Bottom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, -1.1))\nindentation = bpy.context.object\nindentation.name = \"Indentation\"\nindentation.data.materials.append(apple_red)\n\n# Join the indentation to the apple\nbpy.ops.object.select_all(action='DESELECT')\napple.select_set(True)\nindentation.select_set(True)\nbpy.context.view_layer.objects.active = apple\nbpy.ops.object.join()\n\n# Smooth shading for a more natural appearance\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.026070448045639, "unit_n": 4, "param_ratio": 8.0}
{"id": "2585e2c2-5137-4154-bb87-addd111ad4a1", "name": "Apple", "instruction": "Create a 3D model of an apple with a short stem on top.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "011dff6e-79e1-4244-9f9a-3d70073f57d6", "name": "Trash Can", "instruction": "Create a trash can.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Trash Can\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Trash Can Body\"\nbody.data.materials.append(gray)\n\n# Step 3: Create the Lid of the Trash Can\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Trash Can Lid\"\nlid.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 7.5}
{"id": "afb6f5da-b4eb-4e10-9e39-96bffdfec9fa", "name": "Laboratory Flask", "instruction": "Create a conical flask with a narrow neck and wide base. Include measurement markings along the side. Ensure the flask can hold liquids for laboratory experiments.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base of the Flask\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=1, radius2=0.1, depth=2, location=(0, 0, 0))\nflask = bpy.context.object\nflask.name = \"Conical Flask\"\n\n# Step 3: Add Measurement Markings\nmarking_color = bpy.data.materials.new(name=\"Marking Color\")\nmarking_color.diffuse_color = (0, 0, 0, 1)  # Black color for markings\n\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0, 1 - (i * 0.2), -1 + (i * 0.2)))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(marking_color)\n    bpy.ops.transform.resize(value=(0.05, 0.005, 1))\n\n# Step 4: Join Markings with Flask\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = flask\nflask.select_set(True)\nfor i in range(1, 10):\n    bpy.data.objects[f\"Marking {i}\"].select_set(True)\nbpy.ops.object.join()\n\n# Step 5: Apply Material to Flask (Transparent Glass)\nglass_material = bpy.data.materials.new(name=\"Glass Material\")\nglass_material.use_nodes = True\nnodes = glass_material.node_tree.nodes\nnodes.clear()\nnode_output = nodes.new(type='ShaderNodeOutputMaterial')\nnode_glass = nodes.new(type='ShaderNodeBsdfGlass')\nnode_glass.inputs['Roughness'].default_value = 0.1\nnode_glass.inputs['IOR'].default_value = 1.45\nglass_material.node_tree.links.new(node_glass.outputs['BSDF'], node_output.inputs['Surface'])\nflask.data.materials.append(glass_material)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6623073777574056, "unit_n": 10, "param_ratio": 1.7}
{"id": "b855faa5-29c8-4b9a-be25-af17e441f2fa", "name": "Dog Bed", "instruction": "Create a circular dog bed with a diameter of 30 inches and a raised outer edge of about 4 inches.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=0.381, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Outer Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=0.381, minor_radius=0.05, location=(0, 0, 0.05))\nouter_edge = bpy.context.object\nouter_edge.name = \"Outer Edge\"\nouter_edge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.514816442363055, "unit_n": 2, "param_ratio": 7.5}
{"id": "4edbddc0-e50d-43a6-bb59-7e45c2355f17", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. It should have two slices of bread with layers of lettuce, tomato, and cheese in between. Include a toothpick with a small flag on top.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.1, 1)  # Yellow color for cheese\ntoothpick_color = bpy.data.materials.new(name=\"Toothpick\")\ntoothpick_color.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color for toothpick\nflag_color = bpy.data.materials.new(name=\"Flag\")\nflag_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color for flag\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale.z = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale.z = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale.z = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale.z = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale.z = 0.1\ntop_bread.data.materials.append(bread_color)\n\n# Step 7: Create the Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 1))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\ntoothpick.data.materials.append(toothpick_color)\n\n# Step 8: Create the Flag\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0.25, 0, 1.5))\nflag = bpy.context.object\nflag.name = \"Flag\"\nflag.data.materials.append(flag_color)\nflag.rotation_euler[1] = 1.5708  # Rotate the flag to be vertical\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.139483278240345, "unit_n": 7, "param_ratio": 8.428571428571429}
{"id": "60434b8e-5a8b-4f87-be0d-e91e26861fe4", "name": "Riding Boots", "instruction": "Please create a pair of riding boots. Compare them to traditional equestrian boots in terms of height, fit around the calf, and the sole design. What differentiates your design from typical riding boots in terms of providing extra grip during a ride?", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboot_color = bpy.data.materials.new(name=\"Boot Color\")\nboot_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nsole_color = bpy.data.materials.new(name=\"Sole Color\")\nsole_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color\n\n# Step 2: Create the Boots\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    # Create the boot shaft\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.5, location=(x, 0, 0.75))\n    shaft = bpy.context.object\n    shaft.name = f\"Boot Shaft {i + 1}\"\n    shaft.data.materials.append(boot_color)\n    \n    # Create the boot foot\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, 0.2, 0.15))\n    foot = bpy.context.object\n    foot.name = f\"Boot Foot {i + 1}\"\n    foot.scale = (1, 2.5, 1)\n    foot.data.materials.append(boot_color)\n    \n    # Create the boot sole\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, 0.2, 0.05))\n    sole = bpy.context.object\n    sole.name = f\"Boot Sole {i + 1}\"\n    sole.scale = (1, 2.5, 0.2)\n    sole.data.materials.append(sole_color)\n    \n    # Provide extra grip (simple treads on the sole)\n    for j in range(5):\n        bpy.ops.mesh.primitive_cube_add(size=0.05, location=(x, 0.2 + j * 0.1, 0.1))\n        tread = bpy.context.object\n        tread.name = f\"Tread {i + 1}-{j + 1}\"\n        tread.scale = (1, 0.1, 0.05)\n        tread.data.materials.append(sole_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.682712743273789, "unit_n": 16, "param_ratio": 1.6875}
{"id": "9083ca88-9225-4b4f-9040-9a7077e48137", "name": "Syringe", "instruction": "Can you create a 3D model of a syringe? It should have a cylindrical barrel, a plunger, and a needle. Keep the design simple and straightforward.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, 2.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\n\n# Step 5: Create the Plunger Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, 0.1))\nplunger_handle = bpy.context.object\nplunger_handle.name = \"Plunger Handle\"\n\n# Step 6: Create the Needle Hub\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 2.4))\nneedle_hub = bpy.context.object\nneedle_hub.name = \"Needle Hub\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.682032715046107, "unit_n": 5, "param_ratio": 5.0}
{"id": "2b74074f-d0cd-4647-a1cc-7646630457d7", "name": "Hammer", "instruction": "Create a 3D model of a hammer. It should have a simple, traditional design with a solid handle and a metal head.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for wood\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0, 1.1))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale = (0.15, 0.4, 0.15)\nhead.data.materials.append(metal)\n\n# Step 4: Create the Claw (optional, simplified)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(-0.1, 0, 1.15), rotation=(1.57, 0, 1.57))\nclaw = bpy.context.object\nclaw.name = \"Claw\"\nclaw.data.materials.append(metal)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.1, 0, 1.15), rotation=(1.57, 0, -1.57))\nclaw = bpy.context.object\nclaw.name = \"Claw\"\nclaw.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.954212080937926, "unit_n": 4, "param_ratio": 8.75}
{"id": "9a71290e-2cf6-42ca-9a3e-da7e154f8a8b", "name": "Power Strip", "instruction": "How does this power strip compare to a surge protector in terms of functionality and design? The power strip should have multiple outlets arranged in a straight line, with a power switch on one end.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Power Strip Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Power Strip Body\"\nbody.scale[0] = 2  # Length\nbody.scale[1] = 0.5  # Width\nbody.scale[2] = 0.1  # Height\nbody.data.materials.append(white)\n\n# Step 3: Create the Outlets\nfor i in range(4):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(-1.5 + i, 0, 0.05))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lay flat\n    outlet.data.materials.append(black)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(1.8, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Power Switch\"\nswitch.data.materials.append(black)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.152362319413632, "unit_n": 6, "param_ratio": 3.8333333333333335}
{"id": "f48b80a2-da0b-4dfd-b035-5664ef35d5d4", "name": "Chess Board", "instruction": "Can you create a chess board? Ensure it has an 8x8 grid.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nsize = 8\nsquare_size = 1\n\nfor row in range(size):\n    for col in range(size):\n        # Determine the color of the square\n        if (row + col) % 2 == 0:\n            material = white_material\n        else:\n            material = black_material\n        \n        # Create the square\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.data.materials.append(material)\n\n# Step 3: Adjust the position of the board to center it\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "13e6db42-b747-449e-858b-b2fb6c209f50", "name": "Cookie", "instruction": "Design a cookie that is 3 inches in diameter. It should have a slightly raised edge and a flat top with some chocolate chips scattered on it.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie\")\ncookie_color.diffuse_color = (0.82, 0.71, 0.55, 1)  # Light brown color for the cookie\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color for the chocolate chips\n\n# Step 2: Create the Cookie Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\ncookie_base = bpy.context.object\ncookie_base.name = \"Cookie Base\"\ncookie_base.data.materials.append(cookie_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.1, location=(0, 0, 0.1))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(cookie_color)\n\n# Step 4: Scatter Chocolate Chips on the Cookie\nnum_chips = 10\nfor _ in range(num_chips):\n    x = random.uniform(-1.3, 1.3)\n    y = random.uniform(-1.3, 1.3)\n    z = 0.1\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, z))\n    chip = bpy.context.object\n    chip.name = \"Chocolate Chip\"\n    chip.data.materials.append(chocolate_chip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.934005358955969, "unit_n": 3, "param_ratio": 8.0}
{"id": "2d3a7dd8-d9ca-48ce-8e9e-0c03db6c6440", "name": "Toaster Oven", "instruction": "Please create a 3D model of a toaster oven. It should have a front door with a handle, a control panel with dials, and a removable tray inside.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body of the Toaster Oven\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Toaster Body\"\nbody.scale = (1, 0.6, 0.4)\nbody.data.materials.append(metal)\n\n# Step 3: Create the Front Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.61, 1))\ndoor = bpy.context.object\ndoor.name = \"Front Door\"\ndoor.scale = (0.9, 0.05, 0.35)\ndoor.data.materials.append(metal)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0.7, 1.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (1.5708, 0, 0)\nhandle.data.materials.append(black)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.1, 0.61, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (0.1, 0.05, 0.35)\ncontrol_panel.data.materials.append(black)\n\n# Step 6: Create the Dials\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(-1.1, 0.7, 1.2 - i * 0.4))\n    dial = bpy.context.object\n    dial.name = f\"Dial {i + 1}\"\n    dial.rotation_euler = (1.5708, 0, 0)\n    dial.data.materials.append(black)\n\n# Step 7: Create the Removable Tray\nbpy.ops.mesh.primitive_plane_add(size=1.6, location=(0, -0.3, 0.8))\ntray = bpy.context.object\ntray.name = \"Tray\"\ntray.scale = (0.8, 0.5, 1)\ntray.data.materials.append(metal)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.8736107005301696, "unit_n": 8, "param_ratio": 4.5}
{"id": "92e52f1c-31ba-4110-a9d6-23bf46113b34", "name": "Gourmet Chocolate Box", "instruction": "Envision a gourmet chocolate box meant for a connoisseur. What design elements would best showcase an assortment of fine chocolates for a tasting experience?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbox_color = bpy.data.materials.new(name=\"Box Color\")\nbox_color.diffuse_color = (0.3, 0.15, 0.1, 1)  # Dark brown color for the box\nchocolate_color = bpy.data.materials.new(name=\"Chocolate Color\")\nchocolate_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark chocolate color\n\n# Step 2: Create the Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbox = bpy.context.object\nbox.name = \"Box\"\nbox.scale = (1.5, 1.5, 0.2)\nbox.data.materials.append(box_color)\n\n# Step 3: Create Chocolates\nchocolate_positions = [(-1, -1, 0.3), (-1, 0, 0.3), (-1, 1, 0.3), \n                       (0, -1, 0.3), (0, 0, 0.3), (0, 1, 0.3), \n                       (1, -1, 0.3), (1, 0, 0.3), (1, 1, 0.3)]\n\nfor i, pos in enumerate(chocolate_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=pos)\n    chocolate = bpy.context.object\n    chocolate.name = f\"Chocolate {i + 1}\"\n    chocolate.data.materials.append(chocolate_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.382026634673881, "unit_n": 2, "param_ratio": 7.5}
{"id": "e4fee5ac-22b1-4d76-9196-39ac49f25012", "name": "Electric Meter", "instruction": "Design an electric meter for measuring electricity usage. The meter should have a rectangular body with a digital display on the front. There should be a circular dial below the display and a series of buttons for input.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 0, 1)  # Black color\ndial_color = bpy.data.materials.new(name=\"Dial Color\")\ndial_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Display\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.51, 0.5))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale = (0.8, 0.01, 0.3)\ndisplay.data.materials.append(display_color)\n\n# Step 4: Create the Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0.51, -0.5))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.rotation_euler = (1.5708, 0, 0)\ndial.data.materials.append(dial_color)\n\n# Step 5: Create the Buttons\nbutton_positions = [(-0.4, 0.51, -1.2), (-0.2, 0.51, -1.2), (0, 0.51, -1.2), (0.2, 0.51, -1.2), (0.4, 0.51, -1.2)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.scale = (1, 0.1, 1)\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.889214868533215, "unit_n": 4, "param_ratio": 8.5}
{"id": "849475e3-f1d5-495b-9ef7-aef0256f43e0", "name": "Stapler", "instruction": "Create a stapler with a top arm that can be pressed down to staple papers together.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.3, 0.1)\nbase.data.materials.append(black)\n\n# Step 3: Create the Top Arm\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntop_arm = bpy.context.object\ntop_arm.name = \"Top Arm\"\ntop_arm.scale = (1, 0.3, 0.1)\ntop_arm.data.materials.append(gray)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.3, 0.75), rotation=(1.5708, 0, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(black)\n\n# Step 5: Create the Staple Holder\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.9))\nstaple_holder = bpy.context.object\nstaple_holder.name = \"Staple Holder\"\nstaple_holder.scale = (0.8, 0.25, 0.05)\nstaple_holder.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.5459238014698062, "unit_n": 4, "param_ratio": 7.5}
{"id": "374e1b80-dac0-402c-9e00-994d26778b35", "name": "Pizza vs. Burger", "instruction": "Compare a 3D model of a pizza with a burger. The pizza should be round with visible toppings like pepperoni and cheese. The burger should have a bun, patty, lettuce, tomato, and cheese. Highlight the differences in shape, texture, and layers.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\ncheese_color = (1, 0.9, 0.2, 1)  # Yellow\npepperoni_color = (0.8, 0.1, 0.1, 1)  # Red\nbun_color = (0.9, 0.7, 0.4, 1)  # Light brown\npatty_color = (0.4, 0.2, 0.1, 1)  # Brown\nlettuce_color = (0.2, 0.8, 0.2, 1)  # Green\ntomato_color = (0.8, 0.1, 0.1, 1)  # Red\n\n# Create materials\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\ncheese_mat = create_material(\"Cheese\", cheese_color)\npepperoni_mat = create_material(\"Pepperoni\", pepperoni_color)\nbun_mat = create_material(\"Bun\", bun_color)\npatty_mat = create_material(\"Patty\", patty_color)\nlettuce_mat = create_material(\"Lettuce\", lettuce_color)\ntomato_mat = create_material(\"Tomato\", tomato_color)\n\n# Step 2: Create the Pizza\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(-2, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(cheese_mat)\n\n# Pepperoni\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = -2 + 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.06))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_mat)\n\n# Step 3: Create the Burger\n# Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(2, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_mat)\n\n# Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.2, location=(2, 0, 0.2))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_mat)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.05, location=(2, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_mat)\n\n# Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.05, location=(2, 0, 0.4))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_mat)\n\n# Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(2, 0, 0.45))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_mat)\n\n# Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(2, 0, 0.65))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.875434328398281, "unit_n": 15, "param_ratio": 2.6666666666666665}
{"id": "abb9b6d4-f020-4a81-a4a7-75651a46d6a2", "name": "Coffee Table", "instruction": "Design a 3D model of a coffee table. It should be low to the ground with a rectangular top and four legs.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\n\n# Step 3: Create the Legs\nleg_height = 0.4\nleg_radius = 0.05\npositions = [(-1.9, -0.9, -leg_height/2), (1.9, -0.9, -leg_height/2), (-1.9, 0.9, -leg_height/2), (1.9, 0.9, -leg_height/2)]\nfor i, pos in enumerate(positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.147338521055633, "unit_n": 2, "param_ratio": 2.0}
{"id": "de58de55-6526-4b20-8260-7142e7b67c3b", "name": "Fruit Basket", "instruction": "Create a 3D model of a fruit basket. Start with a round, open-weave basket. Fill the basket with various fruits, such as apples, bananas, oranges, grapes, and pears. Arrange the fruits in a visually appealing manner, with some fruits peeking over the edge of the basket.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbasket_color = bpy.data.materials.new(name=\"BasketColor\")\nbasket_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown basket color\n\napple_color = bpy.data.materials.new(name=\"AppleColor\")\napple_color.diffuse_color = (1, 0, 0, 1)  # Red apple color\n\nbanana_color = bpy.data.materials.new(name=\"BananaColor\")\nbanana_color.diffuse_color = (1, 1, 0, 1)  # Yellow banana color\n\norange_color = bpy.data.materials.new(name=\"OrangeColor\")\norange_color.diffuse_color = (1, 0.55, 0, 1)  # Orange color\n\ngrape_color = bpy.data.materials.new(name=\"GrapeColor\")\ngrape_color.diffuse_color = (0.5, 0, 0.5, 1)  # Purple grape color\n\npear_color = bpy.data.materials.new(name=\"PearColor\")\npear_color.diffuse_color = (0.8, 1, 0.2, 1)  # Light green pear color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Create the open-weave effect by adding a torus and scaling it\nfor i in range(1, 6):\n    bpy.ops.mesh.primitive_torus_add(location=(0, 0, i * 0.2), major_radius=2, minor_radius=0.1)\n    weave = bpy.context.object\n    weave.name = f\"Weave {i}\"\n    weave.scale = (1, 1, 0.2)\n    weave.data.materials.append(basket_color)\n\n# Step 3: Create the Fruits\n# Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0.5, 0.5, 0.5))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_color)\n\n# Banana\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(-0.5, -0.5, 0.5), rotation=(0, math.pi/4, 0))\nbanana = bpy.context.object\nbanana.name = \"Banana\"\nbanana.data.materials.append(banana_color)\n\n# Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(-0.5, 0.5, 0.5))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)\n\n# Grapes (cluster of small spheres)\nfor i in range(5):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.3 + 0.1 * i, -0.3, 0.5))\n    grape = bpy.context.object\n    grape.name = f\"Grape {i+1}\"\n    grape.data.materials.append(grape_color)\n\n# Pear\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0.8))\npear = bpy.context.object\npear.name = \"Pear\"\npear.data.materials.append(pear_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.694452834902264, "unit_n": 15, "param_ratio": 4.266666666666667}
{"id": "fb0e1fe8-e571-4b06-a981-3c09bbe0ad56", "name": "Drum", "instruction": "Create a drum.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ndrum_color = bpy.data.materials.new(name=\"Drum Color\")\ndrum_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_color)\n\n# Step 3: Create the Drum Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.75))\ndrum_top = bpy.context.object\ndrum_top.name = \"Drum Top\"\ndrum_top.data.materials.append(drum_color)\n\n# Step 4: Create the Drum Bottom\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, -0.75))\ndrum_bottom = bpy.context.object\ndrum_bottom.name = \"Drum Bottom\"\ndrum_bottom.data.materials.append(drum_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "832dc3f8-b46b-4f1f-9d1a-6b73eb05e703", "name": "Wallpaper Pattern", "instruction": "Could you create a 3D model of a wallpaper pattern? Compare a floral design with a geometric design. The floral pattern should feature flowers and leaves, while the geometric pattern should have shapes like squares and triangles. Highlight the differences in their appearances.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0, 0, 1)  # Red color for flowers\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 1, 0, 1)  # Green color for leaves\nsquare_color = bpy.data.materials.new(name=\"Square Color\")\nsquare_color.diffuse_color = (0, 0, 1, 1)  # Blue color for squares\ntriangle_color = bpy.data.materials.new(name=\"Triangle Color\")\ntriangle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color for triangles\n\n# Step 2: Create the Floral Pattern\n# Create a flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(-1, 0, 0))\nflower = bpy.context.object\nflower.name = \"Flower\"\nflower.data.materials.append(flower_color)\n\n# Create leaves\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.3, 0.2, 0))\nleaf1 = bpy.context.object\nleaf1.name = \"Leaf 1\"\nleaf1.data.materials.append(leaf_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.7, 0.2, 0))\nleaf2 = bpy.context.object\nleaf2.name = \"Leaf 2\"\nleaf2.data.materials.append(leaf_color)\n\n# Step 3: Create the Geometric Pattern\n# Create a square\nbpy.ops.mesh.primitive_plane_add(size=0.4, location=(1, 0, 0))\nsquare = bpy.context.object\nsquare.name = \"Square\"\nsquare.data.materials.append(square_color)\n\n# Create a triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.2, depth=0.1, location=(1.5, 0.5, 0))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(triangle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.204142178339287, "unit_n": 5, "param_ratio": 8.4}
{"id": "0670d553-0c37-47f8-9db1-811d1c6e5b78", "name": "Skateboard", "instruction": "Can you make a 3D model of a skateboard? It should have a flat deck and four wheels.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ndeck_material = bpy.data.materials.new(name=\"Deck Material\")\ndeck_material.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color for the deck\nwheel_material = bpy.data.materials.new(name=\"Wheel Material\")\nwheel_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for the wheels\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale = (3, 0.5, 0.1)\ndeck.data.materials.append(deck_material)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-2.5, -0.6, -0.2), (-2.5, 0.6, -0.2), (2.5, -0.6, -0.2), (2.5, 0.6, -0.2)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.499846209188614, "unit_n": 2, "param_ratio": 9.5}
{"id": "05a2e9fc-063a-4787-a818-02a936e9d22c", "name": "Server Rack", "instruction": "Construct a 3D model of a server rack. The rack should be 6 feet tall and 2 feet wide, with multiple slots for server units. Include ventilation panels on the sides and a lockable door at the front. Ensure there are cable management hooks at the back.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray metal color\n\n# Step 2: Create the Rack Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 3))\nrack_frame = bpy.context.object\nrack_frame.scale = (1, 0.1, 3)\nrack_frame.name = \"Rack Frame\"\nrack_frame.data.materials.append(metal)\n\n# Step 3: Create the Side Panels\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i, 0, 3))\n    side_panel = bpy.context.object\n    side_panel.scale = (0.1, 1, 3)\n    side_panel.name = f\"Side Panel {i}\"\n    side_panel.data.materials.append(metal)\n\n# Step 4: Create the Ventilation Panels\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i, 0, 3))\n    vent_panel = bpy.context.object\n    vent_panel.scale = (0.05, 0.9, 2.8)\n    vent_panel.name = f\"Ventilation Panel {i}\"\n    vent_panel.data.materials.append(metal)\n\n# Step 5: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.1, 3))\ndoor = bpy.context.object\ndoor.scale = (1, 0.05, 3)\ndoor.name = \"Door\"\ndoor.data.materials.append(metal)\n\n# Step 6: Create the Cable Management Hooks\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -1.1, 5 - i))\n    hook = bpy.context.object\n    hook.scale = (0.1, 0.05, 0.1)\n    hook.name = f\"Cable Hook {i + 1}\"\n    hook.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 3.469122733663741, "unit_n": 9, "param_ratio": 2.7777777777777777}
{"id": "616fc801-cb86-4da5-a431-5e731ee927ae", "name": "Espresso Machine", "instruction": "We're designing a 3D model of an espresso machine.\n1. It should feature a portafilter handle on the front.\n2. Include a steam wand on one side.\n3. There should be a drip tray at the bottom.\n4. Add a pressure gauge on the front panel.\n5. There should be two buttons, one for a single shot and one for a double shot.\n6. Place a cup warmer on the top surface.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 3: Create the Portafilter Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 1.1, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Portafilter Handle\"\nhandle.rotation_euler = (math.pi / 2, 0, 0)\n\n# Step 4: Create the Steam Wand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.1, 0, 0.5))\nsteam_wand = bpy.context.object\nsteam_wand.name = \"Steam Wand\"\nsteam_wand.rotation_euler = (0, math.pi / 2, 0)\n\n# Step 5: Create the Drip Tray\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, -0.75))\ndrip_tray = bpy.context.object\ndrip_tray.name = \"Drip Tray\"\n\n# Step 6: Create the Pressure Gauge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 1.05, 1.5))\npressure_gauge = bpy.context.object\npressure_gauge.name = \"Pressure Gauge\"\npressure_gauge.rotation_euler = (math.pi / 2, 0, 0)\n\n# Step 7: Create the Buttons\nfor i in range(2):\n    x = -0.3 + i * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, 1.05, 1.2))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n\n# Step 8: Create the Cup Warmer\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2))\ncup_warmer = bpy.context.object\ncup_warmer.name = \"Cup Warmer\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1404406124558415, "unit_n": 8, "param_ratio": 3.875}
{"id": "2474cfbf-37f1-4ee8-9c3b-9e6288fe717e", "name": "Electric Kettle", "instruction": "Can we make a 3D model of an electric kettle? It should have a cylindrical body with a spout on one side and a handle on the opposite side. Include a lid on top and a base for the electrical connection.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nkettle_body_color = bpy.data.materials.new(name=\"Kettle Body Color\")\nkettle_body_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Kettle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nkettle_body = bpy.context.object\nkettle_body.name = \"Kettle Body\"\nkettle_body.data.materials.append(kettle_body_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.8, location=(1.2, 0, 1.2), rotation=(0, math.pi / 4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(kettle_body_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(-1.5, 0, 1.2), rotation=(math.pi / 2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(kettle_body_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(kettle_body_color)\n\n# Step 6: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(kettle_body_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.236285978730256, "unit_n": 5, "param_ratio": 7.2}
{"id": "ea7f4ff9-2139-4c97-a0da-0f6a94d4d2a8", "name": "Power Strip", "instruction": "How does it feel to design a power strip? The strip should be rectangular with multiple sockets aligned in a row. Include a switch for each socket and a main switch at one end. The power cord extends from the other end.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nswitch_color = bpy.data.materials.new(name=\"Switch\")\nswitch_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Power Strip Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nstrip_body = bpy.context.object\nstrip_body.name = \"Power Strip Body\"\nstrip_body.scale = (3, 0.5, 0.2)\nstrip_body.data.materials.append(plastic_color)\n\n# Step 3: Create the Sockets\nfor i in range(5):\n    x = -2.5 + i * 1.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, 0.3, 0.1), rotation=(1.5708, 0, 0))\n    socket = bpy.context.object\n    socket.name = f\"Socket {i + 1}\"\n    socket.data.materials.append(switch_color)\n\n# Step 4: Create the Switches for Each Socket\nfor i in range(5):\n    x = -2.5 + i * 1.25\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, -0.3, 0.1))\n    switch = bpy.context.object\n    switch.name = f\"Switch {i + 1}\"\n    switch.data.materials.append(switch_color)\n\n# Step 5: Create the Main Switch\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(3.1, 0, 0.1))\nmain_switch = bpy.context.object\nmain_switch.name = \"Main Switch\"\nmain_switch.data.materials.append(switch_color)\n\n# Step 6: Create the Power Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-3.2, 0, 0.1), rotation=(0, 1.5708, 0))\npower_cord = bpy.context.object\npower_cord.name = \"Power Cord\"\npower_cord.data.materials.append(switch_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.609523102832919, "unit_n": 13, "param_ratio": 2.923076923076923}
{"id": "25a2f644-e37a-41a7-b2a5-2155a4ba759d", "name": "Trash Can", "instruction": "Compare a trash can with a recycling bin.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntrash_color = bpy.data.materials.new(name=\"Trash Color\")\ntrash_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for trash can\nrecycling_color = bpy.data.materials.new(name=\"Recycling Color\")\nrecycling_color.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for recycling bin\n\n# Step 2: Create the Trash Can\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(-0.5, 0, 0.3))\ntrash_can = bpy.context.object\ntrash_can.name = \"Trash Can\"\ntrash_can.data.materials.append(trash_color)\n\n# Step 3: Create the Recycling Bin\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0.5, 0, 0.3))\nrecycling_bin = bpy.context.object\nrecycling_bin.name = \"Recycling Bin\"\nrecycling_bin.data.materials.append(recycling_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8334456693978014, "unit_n": 2, "param_ratio": 9.5}
{"id": "d37cba78-17ce-4471-aec0-4aab59246b80", "name": "Thermometer", "instruction": "Design a thermometer that is long and thin. It should have a clear tube with a scale on the side for measuring temperature. The top of the thermometer should have a small bulb for holding the liquid used to measure temperature. The scale should have clear markings for easy reading.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_tube = bpy.data.materials.new(name=\"Clear Tube\")\nclear_tube.diffuse_color = (1, 1, 1, 0.1)  # Clear color with some transparency\nscale_color = bpy.data.materials.new(name=\"Scale Color\")\nscale_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\ntube = bpy.context.object\ntube.name = \"Tube\"\ntube.data.materials.append(clear_tube)\n\n# Step 3: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 2))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(clear_tube)\n\n# Step 4: Create the Scale\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0.1, 0, 1))\nscale = bpy.context.object\nscale.name = \"Scale\"\nscale.data.materials.append(scale_color)\n\n# Step 5: Add Scale Markings\nfor i in range(11):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.1, 0, 0.1 * i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(scale_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.499249129612439, "unit_n": 14, "param_ratio": 1.9285714285714286}
{"id": "9796981b-3efe-4478-ba4b-75cf79eaacf2", "name": "Aquarium Filter", "instruction": "Design an aquarium filter. It should be a rectangular box with an intake tube and an outflow spout. Include a compartment for filter media that can be accessed by removing a panel. Show the filter attached to the side of an aquarium.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Aquarium\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\naquarium = bpy.context.object\naquarium.name = \"Aquarium\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.inset(thickness=0.1)\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -1.8)})\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Filter Box\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.25, 0, 1.25))\nfilter_box = bpy.context.object\nfilter_box.name = \"Filter Box\"\n\n# Step 4: Create the Intake Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.25, -0.25, 0.75))\nintake_tube = bpy.context.object\nintake_tube.name = \"Intake Tube\"\n\n# Step 5: Create the Outflow Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(1.25, 0.25, 1.5), rotation=(1.57, 0, 0))\noutflow_spout = bpy.context.object\noutflow_spout.name = \"Outflow Spout\"\n\n# Step 6: Create the Filter Media Compartment\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(1.25, 0, 1.25))\nfilter_media = bpy.context.object\nfilter_media.name = \"Filter Media\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.inset(thickness=0.05)\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.3)})\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 7: Create the Removable Panel\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(1.25, -0.25, 1.25))\npanel = bpy.context.object\npanel.name = \"Removable Panel\"\npanel.rotation_euler[0] = 1.57\n\n# Step 8: Attach Filter to Aquarium\nbpy.ops.object.select_all(action='DESELECT')\nfilter_box.select_set(True)\nintake_tube.select_set(True)\noutflow_spout.select_set(True)\nfilter_media.select_set(True)\npanel.select_set(True)\nbpy.context.view_layer.objects.active = filter_box\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9577609239431824, "unit_n": 6, "param_ratio": 4.833333333333333}
{"id": "6fd04349-aa6d-49df-8e8e-56def8e777f6", "name": "Chess Piece (Knight)", "instruction": "Create a knight chess piece. The base should be circular with a diameter of 1 inch. The piece should be 2 inches tall, featuring the head and neck of a horse. Ensure the details are clear and recognizable.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body (Neck)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.2, location=(0, 0, 0.8))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 1.6))\nhead = bpy.context.object\nhead.name = \"Head\"\n\n# Step 5: Create the Snout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.4, location=(0, 0.3, 1.6), rotation=(1.57, 0, 0))\nsnout = bpy.context.object\nsnout.name = \"Snout\"\n\n# Step 6: Create the Ears\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0.1, 0, 1.9))\near1 = bpy.context.object\near1.name = \"Ear 1\"\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(-0.1, 0, 1.9))\near2 = bpy.context.object\near2.name = \"Ear 2\"\n\n# Join the parts together\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\nbody.select_set(True)\nhead.select_set(True)\nsnout.select_set(True)\near1.select_set(True)\near2.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.03779905825723, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "4e3dd121-2931-48a5-af36-c85c1679667e", "name": "Umbrella", "instruction": "What features should an umbrella have? Create a 3D model of an umbrella with a handle, a collapsible canopy, and a strap to keep it closed.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nstrap_color = bpy.data.materials.new(name=\"Strap Color\")\nstrap_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(radius1=0.7, radius2=0, depth=1.0, location=(0, 0, 0.5))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)\n\n# Step 4: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0.1, 0, -0.3), rotation=(0, math.pi/2, 0))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(strap_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.253249532507195, "unit_n": 3, "param_ratio": 11.333333333333334}
{"id": "a8b35138-c1fd-4137-964d-bd63092f43f3", "name": "Pizza", "instruction": "Design a 3D model of a pizza. The pizza should be round, with a diameter of about 12 inches. Add evenly spaced pepperoni slices and a few green bell pepper slices on top.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_crust = bpy.data.materials.new(name=\"Pizza Crust\")\npizza_crust.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.5, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_crust)\n\n# Step 3: Add Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.75\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 4.5 * math.cos(angle)\n    y = 4.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.1, location=(x, y, 0.3))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 4: Add Bell Pepper Slices\nnum_bell_peppers = 5\nbell_pepper_radius = 0.5\nfor i in range(num_bell_peppers):\n    angle = i * (2 * math.pi / num_bell_peppers) + math.pi / num_bell_peppers\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=bell_pepper_radius, depth=0.1, location=(x, y, 0.3))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.532435289634011, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "bef0f806-9713-4503-a36b-258ffb1f9848", "name": "Apple vs. Orange", "instruction": "Compare a simple apple and an orange side by side.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_color = bpy.data.materials.new(name=\"Apple Red\")\napple_color.diffuse_color = (1, 0, 0, 1)  # Red color\norange_color = bpy.data.materials.new(name=\"Orange\")\norange_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_color)\n\n# Step 3: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(1, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.569204987067405, "unit_n": 2, "param_ratio": 9.0}
{"id": "290ebcca-1c20-4bc3-8cac-9f38137fcd80", "name": "Blender", "instruction": "Design a 3D model of a blender. Compare a standard blender with a personal-sized blender, focusing on their sizes and functionalities.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\n\n# Step 2: Create the Base for Standard Blender\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase_standard = bpy.context.object\nbase_standard.name = \"Base Standard\"\nbase_standard.data.materials.append(base_color)\n\n# Step 3: Create the Jar for Standard Blender\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1, location=(0, 0, 0.8))\njar_standard = bpy.context.object\njar_standard.name = \"Jar Standard\"\njar_standard.data.materials.append(jar_color)\n\n# Step 4: Create the Base for Personal Blender\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.3, location=(1.5, 0, 0.15))\nbase_personal = bpy.context.object\nbase_personal.name = \"Base Personal\"\nbase_personal.data.materials.append(base_color)\n\n# Step 5: Create the Jar for Personal Blender\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.7, location=(1.5, 0, 0.65))\njar_personal = bpy.context.object\njar_personal.name = \"Jar Personal\"\njar_personal.data.materials.append(jar_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.632048585795925, "unit_n": 4, "param_ratio": 7.5}
{"id": "a97743f1-f9c4-4cc9-a375-9d4d136978da", "name": "Tablet", "instruction": "Create a 3D model of a tablet with a 10-inch touch screen and a minimalistic design.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Tablet\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ntablet_body = bpy.context.object\ntablet_body.name = \"Tablet Body\"\ntablet_body.scale = (0.15, 0.25, 0.01)  # Scale to approximate a 10-inch screen\ntablet_body.data.materials.append(dark_gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.011))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.14, 0.24, 1)  # Slightly smaller than the body\nscreen.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "ccda0b47-c407-47bd-9aba-a4b36597c965", "name": "Screwdriver", "instruction": "Let's design a standard screwdriver with a flathead tip. The handle should be ergonomic for comfortable gripping and feature a shaft long enough for practical use. The tip of the screwdriver must fit securely into various standard screws.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.0, location=(0, 0, -1.0))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Flathead Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -2.05))\ntip = bpy.context.object\ntip.name = \"Flathead Tip\"\ntip.scale[0] = 0.02  # Flatten the tip\ntip.data.materials.append(shaft_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.270275129726423, "unit_n": 3, "param_ratio": 8.0}
{"id": "56a1cd0d-b3d4-4b5b-a63d-a1975dca629c", "name": "Hat", "instruction": "Create a 3D model of a hat that would be suitable for a formal event. It should have a wide brim and a decorative band around the base.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the hat\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium dark color for the band\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)\n\n# Step 4: Create the Decorative Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.65, depth=0.1, location=(0, 0, 0.55))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.152368583217295, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "88997431-2520-437d-b31d-b8906bef9c3f", "name": "Mosaic", "instruction": "Design a 3D model of a mosaic pattern. The pattern should consist of various geometric shapes and colors arranged in a visually appealing manner.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define a function to create a material with a random color\ndef create_random_material(name):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = (random.random(), random.random(), random.random(), 1)\n    return mat\n\n# Step 2: Create the Mosaic Pattern\nshapes = ['CUBE', 'SPHERE', 'CONE', 'CYLINDER']\nfor i in range(10):\n    for j in range(10):\n        shape_type = random.choice(shapes)\n        x = i * 2\n        y = j * 2\n        if shape_type == 'CUBE':\n            bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0))\n        elif shape_type == 'SPHERE':\n            bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(x, y, 0))\n        elif shape_type == 'CONE':\n            bpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1, location=(x, y, 0))\n        elif shape_type == 'CYLINDER':\n            bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(x, y, 0))\n        \n        obj = bpy.context.object\n        obj.data.materials.append(create_random_material(f\"Material_{i}_{j}\"))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.796993806698001, "unit_n": 400, "param_ratio": 0.055}
{"id": "e1f354fa-4383-4d79-ad8a-7566b5fde366", "name": "Pet Bowl", "instruction": "Create a pet bowl with a circular base and slightly sloped sides. Compare it to a typical human bowl in terms of size and depth. It should be easy for a pet to access.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Bowl Base\"\nbase.data.materials.append(bowl_color)\n\n# Step 3: Create the Bowl Sides\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.6, location=(0, 0, 0.35))\nsides = bpy.context.object\nsides.name = \"Bowl Sides\"\nsides.data.materials.append(bowl_color)\n\n# Step 4: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.6, location=(0, 0, 0.35))\ninner = bpy.context.object\ninner.name = \"Bowl Inner\"\ninner.data.materials.append(bowl_color)\n\n# Step 5: Boolean Modifier to Create the Hollow Part\nmod_bool = sides.modifiers.new(type=\"BOOLEAN\", name=\"Boolean\")\nmod_bool.object = inner\nmod_bool.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = sides\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner part object\nbpy.data.objects.remove(inner, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.441179908450605, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "92a31187-5374-4274-8267-aead2bd284f1", "name": "Birthday Cake", "instruction": "Design a birthday cake with three tiers. The cake should have a flat top with no decorations. Include a simple icing layer on each tier.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for the cake\nicing_color = bpy.data.materials.new(name=\"Icing\")\nicing_color.diffuse_color = (1, 1, 1, 1)  # White color for the icing\n\n# Step 2: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"Bottom Tier\"\nbottom_tier.data.materials.append(cake_color)\n\n# Step 3: Create the Middle Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.5, location=(0, 0, 0.75))\nmiddle_tier = bpy.context.object\nmiddle_tier.name = \"Middle Tier\"\nmiddle_tier.data.materials.append(cake_color)\n\n# Step 4: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.5, location=(0, 0, 1.25))\ntop_tier = bpy.context.object\ntop_tier.name = \"Top Tier\"\ntop_tier.data.materials.append(cake_color)\n\n# Step 5: Create the Icing Layers\n# Bottom tier icing\nbpy.ops.mesh.primitive_cylinder_add(radius=1.55, depth=0.1, location=(0, 0, 0.5))\nbottom_icing = bpy.context.object\nbottom_icing.name = \"Bottom Icing\"\nbottom_icing.data.materials.append(icing_color)\n\n# Middle tier icing\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.0))\nmiddle_icing = bpy.context.object\nmiddle_icing.name = \"Middle Icing\"\nmiddle_icing.data.materials.append(icing_color)\n\n# Top tier icing\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.1, location=(0, 0, 1.5))\ntop_icing = bpy.context.object\ntop_icing.name = \"Top Icing\"\ntop_icing.data.materials.append(icing_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.765951492740388, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "9214bfb4-6a09-4caf-b46d-2feb7163ce28", "name": "Sticky Notes", "instruction": "Create a stack of sticky notes. Each note should be a square with a 3-inch side.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the size of each sticky note\nnote_size = 3 * 0.0254  # 3 inches in meters\nnote_thickness = 0.001  # Thickness of each sticky note\n\n# Define the number of sticky notes in the stack\nnum_notes = 10\n\n# Define the color for the sticky notes\nnote_color = bpy.data.materials.new(name=\"Note Color\")\nnote_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the stack of sticky notes\nfor i in range(num_notes):\n    bpy.ops.mesh.primitive_plane_add(size=note_size, location=(0, 0, i * note_thickness))\n    note = bpy.context.object\n    note.name = f\"Sticky Note {i + 1}\"\n    note.data.materials.append(note_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.6888794541139363, "unit_n": 1, "param_ratio": 8.0}
{"id": "7eeedf9a-efee-497a-9466-670a66e04453", "name": "Apple", "instruction": "How about an apple? Imagine taking a bite out of it. It should be round with a small stem on top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Bite\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0.7, 0, 0))\nbite = bpy.context.object\nmod_bool = apple.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bite\nbpy.context.view_layer.objects.active = apple\nbpy.ops.object.modifier_apply(modifier=mod_bool.name)\nbpy.data.objects.remove(bite)\n\n# Step 4: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.310945021568462, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "65084477-4884-45e0-bf75-34be40ae6c8a", "name": "Power Transformer", "instruction": "Imagine a power transformer with two sets of coils, one for input and one for output, wrapped around a central iron core. The coils are separated and there are terminals on top for electrical connections.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Iron Core\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Iron Core\"\ncore_material = bpy.data.materials.new(name=\"Core Material\")\ncore_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncore.data.materials.append(core_material)\n\n# Step 3: Create the Input Coil\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(0, -0.5, 0))\ninput_coil = bpy.context.object\ninput_coil.name = \"Input Coil\"\ninput_coil_material = bpy.data.materials.new(name=\"Input Coil Material\")\ninput_coil_material.diffuse_color = (1, 0, 0, 1)  # Red color\ninput_coil.data.materials.append(input_coil_material)\n\n# Step 4: Create the Output Coil\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(0, 0.5, 0))\noutput_coil = bpy.context.object\noutput_coil.name = \"Output Coil\"\noutput_coil_material = bpy.data.materials.new(name=\"Output Coil Material\")\noutput_coil_material.diffuse_color = (0, 0, 1, 1)  # Blue color\noutput_coil.data.materials.append(output_coil_material)\n\n# Step 5: Create the Terminals\nfor i in range(2):\n    x = -0.2 + i * 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, -0.5, 0.6))\n    terminal = bpy.context.object\n    terminal.name = f\"Input Terminal {i + 1}\"\n    terminal_material = bpy.data.materials.new(name=\"Terminal Material\")\n    terminal_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n    terminal.data.materials.append(terminal_material)\n\nfor i in range(2):\n    x = -0.2 + i * 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, 0.5, 0.6))\n    terminal = bpy.context.object\n    terminal.name = f\"Output Terminal {i + 1}\"\n    terminal.data.materials.append(terminal_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.905360187702648, "unit_n": 7, "param_ratio": 6.285714285714286}
{"id": "54a3c4d0-7870-4a79-8316-65bf24bf6bf4", "name": "Fruit Basket", "instruction": "Design a fruit basket that can hold a variety of fruits. It should be round with a diameter of 12 inches and a height of 6 inches. Include a handle for easy carrying.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the basket\nbasket_color = bpy.data.materials.new(name=\"BasketColor\")\nbasket_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=6, location=(0, 0, 3))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=6, minor_radius=0.2, location=(0, 0, 6), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(basket_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.464629517792098, "unit_n": 2, "param_ratio": 9.0}
{"id": "4b7ec22b-e8c6-4689-a313-65f34cd54062", "name": "Travel Mug", "instruction": "Could you create a 3D model of a travel mug? The mug should have a cylindrical shape with a lid. Picture yourself sipping hot coffee from it on a long journey.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmug_color = bpy.data.materials.new(name=\"Mug Color\")\nmug_color.diffuse_color = (0.25, 0.25, 0.25, 1)  # Gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=1.2, location=(0, 0, 0.6))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.37, depth=0.1, location=(0, 0, 1.2))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "2ae999f4-d064-4af0-be6c-9da0e24aefb7", "name": "Spaghetti", "instruction": "Create a 3D model of a plate of spaghetti. The spaghetti should be arranged in a heaped manner on a round plate. Add a few meatballs on top and some sauce drizzled over the spaghetti.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport random\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplate_color = bpy.data.materials.new(name=\"Plate Color\")\nplate_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nspaghetti_color = bpy.data.materials.new(name=\"Spaghetti Color\")\nspaghetti_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light yellow color\n\nmeatball_color = bpy.data.materials.new(name=\"Meatball Color\")\nmeatball_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=0.2, location=(0, 0, 0))\nplate = bpy.context.object\nplate.name = \"Plate\"\nplate.data.materials.append(plate_color)\n\n# Step 3: Create the Spaghetti\nfor i in range(50):\n    x = random.uniform(-1.5, 1.5)\n    y = random.uniform(-1.5, 1.5)\n    z = random.uniform(0.1, 0.3)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(x, y, z), rotation=(random.uniform(0, math.pi), random.uniform(0, math.pi), random.uniform(0, math.pi)))\n    spaghetti = bpy.context.object\n    spaghetti.name = f\"Spaghetti {i + 1}\"\n    spaghetti.data.materials.append(spaghetti_color)\n\n# Step 4: Create the Meatballs\nfor i in range(5):\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    z = random.uniform(0.5, 0.8)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, z))\n    meatball = bpy.context.object\n    meatball.name = f\"Meatball {i + 1}\"\n    meatball.data.materials.append(meatball_color)\n\n# Step 5: Create the Sauce\nfor i in range(10):\n    x = random.uniform(-1.5, 1.5)\n    y = random.uniform(-1.5, 1.5)\n    z = random.uniform(0.4, 0.6)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, z))\n    sauce = bpy.context.object\n    sauce.name = f\"Sauce {i + 1}\"\n    sauce.data.materials.append(sauce_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.334743234036593, "unit_n": 66, "param_ratio": 0.6212121212121212}
{"id": "c3bfa441-68e5-4759-8b79-2c4911fe76c4", "name": "Logo", "instruction": "Design a 3D logo that features a simple geometric shape. The shape should be centered and have a uniform color.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nlogo_color = bpy.data.materials.new(name=\"LogoColor\")\nlogo_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Geometric Shape (e.g., a cube)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nlogo_shape = bpy.context.object\nlogo_shape.name = \"LogoShape\"\nlogo_shape.data.materials.append(logo_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "4d05c5f9-4f81-4ca3-b704-a76141e2a294", "name": "Dog Leash", "instruction": "Please create a 3D model of a dog leash. It should be a simple, straight leash with a loop handle and a metal clip at the end.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color for the leash\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the metal clip\n\n# Step 2: Create the Leash (a long cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, 1))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle (a torus)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 2.05))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Metal Clip (a small cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(0, 0, 0.05))\nclip_base = bpy.context.object\nclip_base.name = \"ClipBase\"\nclip_base.data.materials.append(metal_color)\n\n# Step 5: Create the Clip Hook (a torus)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(0, 0, 0))\nclip_hook = bpy.context.object\nclip_hook.name = \"ClipHook\"\nclip_hook.data.materials.append(metal_color)\n\n# Position the clip hook correctly\nclip_hook.rotation_euler[0] = math.pi / 2\nclip_hook.location.z -= 0.05\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.324517980499311, "unit_n": 4, "param_ratio": 7.5}
{"id": "35b54ffd-6c74-46ae-ab71-3ee2deb082d1", "name": "Sun Hat", "instruction": "Could you create a sun hat? It should have a wide brim to provide ample shade. The hat should also have a simple band around the base of the crown.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.9, 0.8, 0.7, 1)  # Light beige color\nband_color = bpy.data.materials.new(name=\"Band Color\")\nband_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.5))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.6003084505243095, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "a33e9808-9af9-4778-851d-1ef9ec25f174", "name": "Dog Bed", "instruction": "Create a dog bed with a simple rectangular shape and a soft cushion.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the bed\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the cushion\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.scale[2] = 0.2  # Flatten the cube to make it a rectangular base\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.7))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale[2] = 0.1  # Flatten the cube to make it a cushion\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "4bafc749-e05f-44e7-88a8-abfbb4b1bb4a", "name": "Water Bottle", "instruction": "Let's create a water bottle. Start with a cylindrical body. Add a screw-on cap at the top. Include a loop handle on the cap. Add measurement markings on the side of the bottle. Finally, add a push-pull spout on the cap for drinking.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbottle_color = bpy.data.materials.new(name=\"BottleColor\")\nbottle_color.diffuse_color = (0.2, 0.6, 0.8, 1)  # Light blue color\ncap_color = bpy.data.materials.new(name=\"CapColor\")\ncap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Bottle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=5, location=(0, 0, 0))\nbottle_body = bpy.context.object\nbottle_body.name = \"BottleBody\"\nbottle_body.data.materials.append(bottle_color)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.5, location=(0, 0, 2.75))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(cap_color)\n\n# Step 4: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(0, 0, 3.25), rotation=(math.pi/2, 0, 0))\nloop_handle = bpy.context.object\nloop_handle.name = \"LoopHandle\"\nloop_handle.data.materials.append(cap_color)\n\n# Step 5: Create the Push-Pull Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 3))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(cap_color)\n\n# Step 6: Add Measurement Markings\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(1.05, 0, -2.5 + i * 0.5))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.2277599785908055, "unit_n": 13, "param_ratio": 2.8461538461538463}
{"id": "c6e5945f-ba49-47b1-9328-363ab2546b15", "name": "Basketball", "instruction": "Let's create a 3D model of a basketball. Show it in mid-air as if it's about to go through the hoop.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basketball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 1))\nbasketball = bpy.context.object\nbasketball.name = \"Basketball\"\n\n# Define the basketball color (orange)\nbasketball_material = bpy.data.materials.new(name=\"Basketball_Orange\")\nbasketball_material.diffuse_color = (1, 0.55, 0, 1)  # Orange color\nbasketball.data.materials.append(basketball_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.45347497737784, "unit_n": 1, "param_ratio": 9.0}
{"id": "361e8df9-386c-4dc5-83c2-ec6684b3fabb", "name": "Dog Leash", "instruction": "Let's design a dog leash. It should be a simple strap with a loop handle on one end and a clip on the other end to attach to a collar.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrap_color = bpy.data.materials.new(name=\"StrapColor\")\nstrap_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color for the strap\n\nclip_color = bpy.data.materials.new(name=\"ClipColor\")\nclip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the clip\n\n# Step 2: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, 1))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(strap_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 2))\nloop_handle = bpy.context.object\nloop_handle.name = \"LoopHandle\"\nloop_handle.data.materials.append(strap_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\nclip_base = bpy.context.object\nclip_base.name = \"ClipBase\"\nclip_base.data.materials.append(clip_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0.05, 0))\nclip_cylinder = bpy.context.object\nclip_cylinder.name = \"ClipCylinder\"\nclip_cylinder.data.materials.append(clip_color)\n\n# Join clip base and cylinder\nbpy.ops.object.select_all(action='DESELECT')\nclip_base.select_set(True)\nclip_cylinder.select_set(True)\nbpy.context.view_layer.objects.active = clip_base\nbpy.ops.object.join()\n\n# Position the clip at the end of the strap\nclip_base.location = (0, 0, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.244663681276869, "unit_n": 4, "param_ratio": 7.25}
{"id": "c882ce75-1e3e-41c5-997c-8548e209a749", "name": "Petri Dish", "instruction": "Design a 3D model of a Petri dish. It should be a shallow, round container with a flat lid.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bottom Part of the Petri Dish\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\nbottom = bpy.context.object\nbottom.name = \"Bottom Part\"\n\n# Step 3: Create the Lid of the Petri Dish\nbpy.ops.mesh.primitive_cylinder_add(radius=1.55, depth=0.1, location=(0, 0, 0.2))\nlid = bpy.context.object\nlid.name = \"Lid\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.3321698784996565, "unit_n": 2, "param_ratio": 5.0}
{"id": "6252a785-c5fc-4816-ba7d-ec6824aeb83a", "name": "Sandwich", "instruction": "Construct a sandwich starting with a slice of bread at the bottom. Add layers of lettuce, tomato, and cheese. Top it off with another slice of bread.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Lettuce color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Tomato color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Cheese color\n\n# Step 2: Create the bottom slice of bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the lettuce layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the tomato layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the cheese layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the top slice of bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9434074591775365, "unit_n": 5, "param_ratio": 8.0}
{"id": "5577876c-346d-4cb1-b5a1-65556fe3c8ef", "name": "Drum", "instruction": "Create a 3D model of a drum. The drum should be cylindrical with a tensioned membrane on top and bottom, and include simple lugs for tuning.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nmembrane_color = bpy.data.materials.new(name=\"Membrane Color\")\nmembrane_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Top Membrane\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, 0.525))\ntop_membrane = bpy.context.object\ntop_membrane.name = \"Top Membrane\"\ntop_membrane.data.materials.append(membrane_color)\n\n# Step 4: Create the Bottom Membrane\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, -0.525))\nbottom_membrane = bpy.context.object\nbottom_membrane.name = \"Bottom Membrane\"\nbottom_membrane.data.materials.append(membrane_color)\n\n# Step 5: Create the Lugs\nfor i in range(8):\n    angle = i * (360 / 8)\n    x = 1.1 * math.cos(math.radians(angle))\n    y = 1.1 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(x, y, 0))\n    lug = bpy.context.object\n    lug.name = f\"Lug {i + 1}\"\n    lug.rotation_euler[2] = math.radians(angle)\n    lug.data.materials.append(drum_body_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9412374334181277, "unit_n": 11, "param_ratio": 2.727272727272727}
{"id": "fc9d43f1-9b9b-4190-93b1-095631cbcee8", "name": "Sandwich", "instruction": "Create a sandwich with two slices of bread. Compare the thickness of the bread slices to the fillings inside, which should include lettuce, tomato, cheese, and a slice of ham. Ensure the fillings are evenly distributed.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it thin\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05  # Make it thinner\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05  # Make it thinner\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05  # Make it thinner\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.45))\nham = bpy.context.object\nham.scale[2] = 0.05  # Make it thinner\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it thin\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "617c8a40-53a6-4d99-b15e-7ac223c13616", "name": "Picture Frame", "instruction": "Generate a 3D model of a rectangular picture frame. It should be simple and unadorned.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (cutout)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (0.8, 0.11, 1.2)\n\n# Step 4: Boolean Modifier to Cut Out the Inner Frame\nmod_bool = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.object = inner_frame\nmod_bool.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "808c986d-e3c4-4ba3-9e38-621a5470b50e", "name": "Miniature Golf Set", "instruction": "Create a 3D model of a miniature golf set. The set should include a small putter, a golf ball, and a simplified hole with a flag. The contours of the putting green should be smooth and include a slight incline near the hole.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the putting green\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color for the golf ball\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the putter\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color for the flag\n\n# Step 2: Create the Putting Green\nbpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, 0))\ngreen_plane = bpy.context.object\ngreen_plane.name = \"Putting Green\"\ngreen_plane.data.materials.append(green)\n\n# Add a slight incline near the hole\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.vertex_random(offset=0.1, uniform=0.1, normal=0.1, seed=0)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0, 0.025))\nhole = bpy.context.object\nhole.name = \"Hole\"\nhole.data.materials.append(gray)\n\n# Step 4: Create the Flag\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(0, 0, 0.5))\nflag_pole = bpy.context.object\nflag_pole.name = \"Flag Pole\"\nflag_pole.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0.1, 1))\nflag = bpy.context.object\nflag.name = \"Flag\"\nflag.data.materials.append(red)\n\n# Step 5: Create the Golf Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1, 1, 0.1))\ngolf_ball = bpy.context.object\ngolf_ball.name = \"Golf Ball\"\ngolf_ball.data.materials.append(white)\n\n# Step 6: Create the Putter\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(-1, -1, 0.5))\nputter_handle = bpy.context.object\nputter_handle.name = \"Putter Handle\"\nputter_handle.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1, -1, 0.05))\nputter_head = bpy.context.object\nputter_head.name = \"Putter Head\"\nputter_head.data.materials.append(gray)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.995922610323937, "unit_n": 7, "param_ratio": 7.285714285714286}
{"id": "8aa2354a-ef4a-45ae-a433-a78721b15bff", "name": "Dog Collar", "instruction": "Create a dog collar with a simple buckle and a small tag hanging from it.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nbuckle_color = bpy.data.materials.new(name=\"Buckle Color\")\nbuckle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntag_color = bpy.data.materials.new(name=\"Tag Color\")\ntag_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Tag\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1, -0.2, -0.1))\ntag = bpy.context.object\ntag.name = \"Tag\"\ntag.data.materials.append(tag_color)\n\n# Step 5: Create the Tag Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.12, minor_radius=0.02, location=(1, -0.2, 0))\ntag_loop = bpy.context.object\ntag_loop.name = \"Tag Loop\"\ntag_loop.data.materials.append(collar_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.189227223243375, "unit_n": 4, "param_ratio": 8.25}
{"id": "4bf867ba-1e64-40f1-b1f5-e9d75bb9ae65", "name": "Digital Camera", "instruction": "Create a 3D model of a digital camera. The camera should have a rectangular body with a large lens on the front. Include a screen on the back and several buttons for controls. Add a strap on one side for carrying. Ensure the model has a sleek and modern appearance.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Camera Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Camera Body\"\nbody.scale = (1.5, 0.8, 1)\n\n# Step 3: Create the Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 1.4, 1))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.rotation_euler = (1.5708, 0, 0)\n\n# Step 4: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(0, -0.81, 1))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (1, 0.6, 1)\nscreen.rotation_euler = (0, 1.5708, 0)\n\n# Step 5: Create the Buttons\nbutton_positions = [(-0.6, -0.81, 1.3), (-0.2, -0.81, 1.3), (0.2, -0.81, 1.3), (0.6, -0.81, 1.3)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.rotation_euler = (1.5708, 0, 0)\n\n# Step 6: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-1.55, 0, 1))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.rotation_euler = (0, 1.5708, 0)\nstrap.scale = (1, 0.1, 1)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.770909880306824, "unit_n": 5, "param_ratio": 4.0}
{"id": "28630f3c-5112-4cc9-94c9-b9935babcda5", "name": "Bird Feeder", "instruction": "Design a bird feeder with a cylindrical shape and a perch. It should have a roof to protect the food from rain.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Feeder Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Feeder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1.0, location=(0, 0, 0.55))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(wood_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.2))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(metal_color)\n\n# Step 5: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0.45, 0.3), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1770577659304635, "unit_n": 4, "param_ratio": 8.25}
{"id": "92124115-244e-404c-a19d-627eb00a035d", "name": "Drumstick", "instruction": "Create a 3D model of a drumstick. It should be a long, tapered stick with a rounded tip. Ensure the stick is smooth and straight.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Stick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nstick = bpy.context.object\nstick.name = \"Stick\"\n\n# Step 3: Create the Rounded Tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 2))\ntip = bpy.context.object\ntip.name = \"Tip\"\n\n# Step 4: Join the Stick and Tip\nbpy.ops.object.select_all(action='DESELECT')\nstick.select_set(True)\ntip.select_set(True)\nbpy.context.view_layer.objects.active = stick\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.4746554287742155, "unit_n": 2, "param_ratio": 4.5}
{"id": "92580ada-5e1d-44c9-8fb7-a56d1c63e777", "name": "Coffee Grinder", "instruction": "Imagine a coffee grinder for me. Begin with a cylindrical base, about 8 inches in diameter. On top of this base, place a grinding mechanism with a detachable lid. There should be a handle on the side for manual grinding. The grinder should have a small drawer at the bottom to collect the ground coffee. The overall height should be around 12 inches.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=4, depth=6, location=(0, 0, 3))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood)\n\n# Step 3: Create the Grinding Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=2, location=(0, 0, 7))\nmechanism = bpy.context.object\nmechanism.name = \"Mechanism\"\nmechanism.data.materials.append(metal)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=3.1, depth=0.2, location=(0, 0, 8.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(3, 0, 8), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 6: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -3.5, 1))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.133634321710171, "unit_n": 5, "param_ratio": 7.4}
{"id": "1f454d5d-8466-4197-9af9-351d2d4fbd34", "name": "Smartphone", "instruction": "Design a 3D model of a smartphone with a rectangular shape, a large screen on the front, and minimal bezels.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Smartphone Screen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(dark_gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "49e5b453-cbb6-495d-9ba1-6db880fcac64", "name": "Mop", "instruction": "Create a 3D model of a mop. It should have a long handle and a flat, rectangular head with strips of fabric attached. The handle should be straight and simple.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nhead_color = bpy.data.materials.new(name=\"Head Color\")\nhead_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nfabric_color = bpy.data.materials.new(name=\"Fabric Color\")\nfabric_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 0))\nhead = bpy.context.object\nhead.scale[0] = 2\nhead.scale[1] = 0.5\nhead.scale[2] = 0.1\nhead.name = \"Head\"\nhead.data.materials.append(head_color)\n\n# Step 4: Create the Fabric Strips\nfor i in range(5):\n    x = (i - 2) * 0.2\n    bpy.ops.mesh.primitive_plane_add(size=0.1, location=(x, 0, -0.1))\n    fabric_strip = bpy.context.object\n    fabric_strip.scale[1] = 3\n    fabric_strip.name = f\"Fabric Strip {i + 1}\"\n    fabric_strip.data.materials.append(fabric_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4861505040814817, "unit_n": 7, "param_ratio": 4.0}
{"id": "59780c55-a0d4-4074-b6e2-dbbd7b8794a9", "name": "Interior Wallpaper", "instruction": "Design a wallpaper that can seamlessly integrate with smart home systems to display information or art. It should have a discreet sensor array for interaction.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallpaper_color = bpy.data.materials.new(name=\"Wallpaper\")\nwallpaper_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for wallpaper\n\nsensor_color = bpy.data.materials.new(name=\"Sensor\")\nsensor_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for sensors\n\n# Step 2: Create the Wallpaper\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nwallpaper = bpy.context.object\nwallpaper.name = \"Wallpaper\"\nwallpaper.data.materials.append(wallpaper_color)\n\n# Step 3: Create the Sensor Array\nsensor_positions = [(-4, 4, 0.01), (4, 4, 0.01), (-4, -4, 0.01), (4, -4, 0.01), (0, 0, 0.01)]\nfor i, pos in enumerate(sensor_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    sensor = bpy.context.object\n    sensor.name = f\"Sensor {i + 1}\"\n    sensor.data.materials.append(sensor_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.784189633918262, "unit_n": 2, "param_ratio": 7.5}
{"id": "592ab7d7-e6dc-4329-a212-9699fdfd1fa4", "name": "Blender", "instruction": "Create a simple blender with a base, a transparent jar, and a lid.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.659885851703786, "unit_n": 3, "param_ratio": 10.0}
{"id": "17b6b9d7-777c-4f7f-9400-a5b5d4cd5201", "name": "Circuit Board", "instruction": "Create a 3D model of a circuit board. Ensure it has multiple components like resistors, capacitors, and integrated circuits.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"BoardColor\")\nboard_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color for the circuit board\ncomponent_color = bpy.data.materials.new(name=\"ComponentColor\")\ncomponent_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for components\n\n# Step 2: Create the Circuit Board\nbpy.ops.mesh.primitive_plane_add(size=4, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"CircuitBoard\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create Resistors\nfor i in range(2):\n    x = -1.5 + i * 3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, -0.8, 0.05), rotation=(1.5708, 0, 0))\n    resistor = bpy.context.object\n    resistor.name = f\"Resistor {i + 1}\"\n    resistor.data.materials.append(component_color)\n\n# Step 4: Create Capacitors\nfor i in range(2):\n    x = -1.5 + i * 3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 0, 0.1))\n    capacitor = bpy.context.object\n    capacitor.name = f\"Capacitor {i + 1}\"\n    capacitor.data.materials.append(component_color)\n\n# Step 5: Create Integrated Circuits\nfor i in range(2):\n    x = -1.5 + i * 3\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, 0.8, 0.25))\n    ic = bpy.context.object\n    ic.name = f\"IC {i + 1}\"\n    ic.data.materials.append(component_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1295900136693398, "unit_n": 7, "param_ratio": 4.428571428571429}
{"id": "5f048384-19ad-4dab-834e-c1672b9b888d", "name": "Birthday Cake", "instruction": "Please design a 3D model of a birthday cake. The cake should be three tiers high. Each tier should be round and slightly smaller than the one below it. The top tier should have a single candle. Add some decorative icing around each tier. The cake should look festive.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"CakeColor\")\ncake_color.diffuse_color = (0.96, 0.64, 0.38, 1)  # Light brown cake color\nicing_color = bpy.data.materials.new(name=\"IcingColor\")\nicing_color.diffuse_color = (1, 1, 1, 1)  # White icing color\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 0, 0, 1)  # Red candle color\nflame_color = bpy.data.materials.new(name=\"FlameColor\")\nflame_color.diffuse_color = (1, 0.84, 0, 1)  # Yellow flame color\n\n# Step 2: Create the Cake Tiers\ntiers = [(1, 0.5), (0.8, 0.4), (0.6, 0.3)]\nfor i, (radius, height) in enumerate(tiers):\n    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=(0, 0, height * i))\n    tier = bpy.context.object\n    tier.name = f\"Tier {i + 1}\"\n    tier.data.materials.append(cake_color)\n\n# Step 3: Create the Icing\nfor i, (radius, height) in enumerate(tiers):\n    bpy.ops.mesh.primitive_torus_add(major_radius=radius, minor_radius=0.05, location=(0, 0, height * (i + 1) - 0.05))\n    icing = bpy.context.object\n    icing.name = f\"Icing {i + 1}\"\n    icing.data.materials.append(icing_color)\n\n# Step 4: Create the Candle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, sum(height for _, height in tiers) + 0.15))\ncandle = bpy.context.object\ncandle.name = \"Candle\"\ncandle.data.materials.append(candle_color)\n\n# Step 5: Create the Flame\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0, sum(height for _, height in tiers) + 0.3))\nflame = bpy.context.object\nflame.name = \"Flame\"\nflame.data.materials.append(flame_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.869614891659738, "unit_n": 4, "param_ratio": 9.0}
{"id": "a9814545-19cf-4c61-9dee-88cbe24bcf1f", "name": "Dining Table", "instruction": "Create a 3D model of a dining table. The table should have a rectangular top and four legs. Ensure the legs are evenly spaced at the corners of the table.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 2  # Scale along the x-axis\ntable_top.scale[1] = 1  # Scale along the y-axis\ntable_top.scale[2] = 0.1  # Scale along the z-axis\n\n# Step 3: Create the Legs\nleg_height = 0.75\nleg_radius = 0.1\nleg_positions = [\n    (-1.9, -0.9, leg_height / 2),\n    (1.9, -0.9, leg_height / 2),\n    (-1.9, 0.9, leg_height / 2),\n    (1.9, 0.9, leg_height / 2)\n]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.350082335296633, "unit_n": 2, "param_ratio": 2.0}
{"id": "8f48b8e6-907d-4317-9461-6c748022642d", "name": "Drum", "instruction": "Create a drum. A simple cylindrical shape with a stretched membrane on top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\nmembrane_color = bpy.data.materials.new(name=\"Membrane Color\")\nmembrane_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Membrane\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.5))\nmembrane = bpy.context.object\nmembrane.name = \"Membrane\"\nmembrane.data.materials.append(membrane_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "b9018b93-4531-48f2-a046-a398dc32c474", "name": "Thermometer", "instruction": "Please create a 3D model of a thermometer.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Bulb of the Thermometer\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(red)\n\n# Step 3: Create the Stem of the Thermometer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.1))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(white)\n\n# Step 4: Create the Mercury inside the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.8, location=(0, 0, 1.1))\nmercury = bpy.context.object\nmercury.name = \"Mercury\"\nmercury.data.materials.append(red)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.981208422511527, "unit_n": 3, "param_ratio": 8.0}
{"id": "c89aafcd-ed47-4728-bd41-5e73e9b42d31", "name": "Pet Leash", "instruction": "Design a pet leash that includes a loop handle and a clip at the other end to attach to a collar.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the leash\n\n# Step 2: Create the Leash (a simple cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, 1))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle (a torus)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Clip (a simple cube)\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.data.materials.append(leash_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.19522619251311, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "a0624354-bbbf-4614-b633-6a3336cce6ce", "name": "Syringe", "instruction": "Create a 3D model of a syringe, including the barrel, plunger, and needle. The barrel should be transparent with marked measurements. The plunger should fit snugly inside the barrel.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nplunger_material = bpy.data.materials.new(name=\"Plunger\")\nplunger_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nneedle_material = bpy.data.materials.new(name=\"Needle\")\nneedle_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(transparent_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.095, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 2.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_material)\n\n# Step 5: Add Markings on the Barrel\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.12, 0, i * 0.2))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.rotation_euler[1] = 1.5708  # Rotate to align with the barrel\n    marking.data.materials.append(plunger_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.4069850554373335, "unit_n": 12, "param_ratio": 2.8333333333333335}
{"id": "f6a63782-38c3-4733-afb9-76cdecad0830", "name": "Icon", "instruction": "Create a 3D model of an icon for a weather app. Compare a sun icon and a cloud icon. The sun icon should be circular with rays extending outward. The cloud icon should be a fluffy shape with a smooth outline.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1.0, 1.0, 0.0, 1)  # Bright yellow color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Sun Icon\n# Create the sun's core\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1.5, 0, 0))\nsun_core = bpy.context.object\nsun_core.name = \"Sun Core\"\nsun_core.data.materials.append(yellow)\n\n# Create the sun's rays\nfor i in range(12):\n    angle = i * math.pi / 6\n    x = math.cos(angle) * 0.8\n    y = math.sin(angle) * 0.8\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(-1.5 + x, y, 0), rotation=(0, 0, angle))\n    ray = bpy.context.object\n    ray.name = f\"Sun Ray {i + 1}\"\n    ray.data.materials.append(yellow)\n\n# Step 3: Create the Cloud Icon\n# Create the main body of the cloud\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(1.5, 0, 0))\ncloud_main = bpy.context.object\ncloud_main.name = \"Cloud Main\"\ncloud_main.data.materials.append(gray)\n\n# Create the smaller parts of the cloud\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(1.1, 0.3, 0))\ncloud_part1 = bpy.context.object\ncloud_part1.name = \"Cloud Part 1\"\ncloud_part1.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(1.9, 0.3, 0))\ncloud_part2 = bpy.context.object\ncloud_part2.name = \"Cloud Part 2\"\ncloud_part2.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(1.5, -0.4, 0))\ncloud_part3 = bpy.context.object\ncloud_part3.name = \"Cloud Part 3\"\ncloud_part3.data.materials.append(gray)", "color_brightness": "Bright", "verify": "human", "entropy": 5.615557320706694, "unit_n": 17, "param_ratio": 2.235294117647059}
{"id": "f55c14ad-5303-4c57-a6b2-f1b010bf28ef", "name": "Picture Frame", "instruction": "Can you create a picture frame for me? It should be rectangular and have a simple border around the edges.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Picture (inner rectangle)\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npicture = bpy.context.object\npicture.name = \"Picture\"\npicture.scale = (1, 0.75, 1)\n\n# Step 3: Create the Border (outer rectangle)\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, 0, 0))\nborder = bpy.context.object\nborder.name = \"Border\"\nborder.scale = (1.1, 0.85, 0.1)\nborder.data.materials.append(frame_color)\n\n# Step 4: Create the Inner Cutout for the Picture\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.05))\ncutout = bpy.context.object\ncutout.name = \"Cutout\"\ncutout.scale = (1, 0.75, 0.1)\n\n# Step 5: Boolean Modifier to Cut the Inner Rectangle from the Border\nmod_bool = border.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = cutout\n\nbpy.context.view_layer.objects.active = border\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the cutout object\nbpy.data.objects.remove(cutout, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.718473401330013, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "391a0777-6d35-452e-87b7-41db14f54092", "name": "Travel Toiletry Bag", "instruction": "Create a travel toiletry bag. It should be compact yet spacious enough to hold essential toiletries. Include several compartments and pockets for better organization. The main compartment should have a zipper closure, and there should be a small handle on the side for easy carrying. Compare this design with a standard toiletry bag to ensure its more efficient and travel-friendly.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbag_color = bpy.data.materials.new(name=\"Bag Color\")\nbag_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (1, 0.5, 0.5)\nmain_compartment.data.materials.append(bag_color)\n\n# Step 3: Create the Zipper\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0.55, 1.5), rotation=(0, 1.57, 0))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.data.materials.append(bag_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(1.1, 0, 1.5), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(bag_color)\n\n# Step 5: Create the Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.5, 1.5 - i * 0.5))\n    compartment = bpy.context.object\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.scale = (0.8, 0.1, 0.2)\n    compartment.data.materials.append(bag_color)\n\n# Step 6: Create the Pockets\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.6, -0.5, 1.5 - i * 0.5))\n    pocket = bpy.context.object\n    pocket.name = f\"Pocket {i + 1}\"\n    pocket.scale = (0.4, 0.05, 0.1)\n    pocket.data.materials.append(bag_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8369362184219065, "unit_n": 8, "param_ratio": 4.125}
{"id": "03743b76-48de-4d20-9ff5-cfb14af26cbe", "name": "Basketball", "instruction": "Design a basketball with the standard spherical shape. Include the typical panel lines and ensure the size is regulation.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basketball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.12, location=(0, 0, 0))\nbasketball = bpy.context.object\nbasketball.name = \"Basketball\"\n\n# Step 3: Add Material to the Basketball\norange = bpy.data.materials.new(name=\"Orange\")\norange.diffuse_color = (1, 0.55, 0, 1)  # Basketball orange color\nbasketball.data.materials.append(orange)\n\n# Step 4: Create Panel Lines\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.bevel(offset=0.005, segments=10, profile=0.5)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Add Black Material for Panel Lines\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color for lines\n\n# Assign black material to the bevel edges\nbpy.ops.object.modifier_add(type='BEVEL')\nbpy.context.object.modifiers[\"Bevel\"].width = 0.005\nbpy.context.object.modifiers[\"Bevel\"].segments = 10\nbpy.context.object.modifiers[\"Bevel\"].profile = 0.5\nbpy.context.object.modifiers[\"Bevel\"].material = 1\n\nbasketball.data.materials.append(black)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.6128707980412464, "unit_n": 2, "param_ratio": 7.5}
{"id": "8ca4e356-a63f-4e00-b03c-0133701b9223", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a cylindrical body with a small roof on top. Include a perch at the bottom for birds to stand on.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.65))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, -0.55, 0.1), rotation=(1.5708, 0, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6168383842514618, "unit_n": 3, "param_ratio": 6.0}
{"id": "bb1d4c67-3e65-4702-89e6-3b307bffa7fe", "name": "Pizza", "instruction": "Create a 3D model of a pizza. The pizza should be circular with a diameter of 12 inches. It should have a slightly raised crust around the edge and be topped with a layer of tomato sauce and melted cheese. Add evenly spaced pepperoni slices across the surface.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.98, 0.92, 0.73, 1)  # Melted cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.55, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.02, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.01, location=(0, 0, 0.01))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.015))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.02\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.1 * math.cos(angle)\n    y = 0.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.005, location=(x, y, 0.0175))\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = f\"Pepperoni {i + 1}\"\n    pepperoni_slice.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.940067315572785, "unit_n": 4, "param_ratio": 9.75}
{"id": "bfb4839c-3d4e-49f6-aace-7fea9a3a40bd", "name": "Power Bank", "instruction": "Create a 3D model of a power bank. It should have a sleek design with multiple USB ports for charging. Include a small LED display to show battery percentage.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Power Bank Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Power Bank Body\"\nbody.scale = (1, 0.5, 0.2)\nbody.data.materials.append(black)\n\n# Step 3: Create USB Ports\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.8, -0.2 + i * 0.2, 0.1))\n    usb_port = bpy.context.object\n    usb_port.name = f\"USB Port {i + 1}\"\n    usb_port.scale = (0.2, 0.05, 0.05)\n    usb_port.data.materials.append(gray)\n\n# Step 4: Create LED Display\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(-0.8, 0, 0.15))\nled_display = bpy.context.object\nled_display.name = \"LED Display\"\nled_display.scale = (0.5, 0.2, 0.01)\nled_display.data.materials.append(blue)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1214208180828127, "unit_n": 5, "param_ratio": 5.4}
{"id": "af2d981a-f682-48f5-af16-4efa2e6f79bf", "name": "Dog Collar", "instruction": "Create a dog collar. It should be a simple band with a buckle.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"CollarColor\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\nbuckle_color = bpy.data.materials.new(name=\"BuckleColor\")\nbuckle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Collar Band\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle Frame\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle_frame = bpy.context.object\nbuckle_frame.name = \"Buckle Frame\"\nbuckle_frame.scale[0] = 0.1\nbuckle_frame.scale[1] = 0.3\nbuckle_frame.scale[2] = 0.05\nbuckle_frame.data.materials.append(buckle_color)\n\n# Step 4: Create the Buckle Pin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(1.05, 0, 0))\nbuckle_pin = bpy.context.object\nbuckle_pin.name = \"Buckle Pin\"\nbuckle_pin.rotation_euler[1] = 1.5708  # Rotate 90 degrees on Y-axis\nbuckle_pin.data.materials.append(buckle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.473765445182112, "unit_n": 3, "param_ratio": 8.0}
{"id": "aa1a9ed4-0d65-4d2c-8d2a-f706598f2c1e", "name": "Desktop Computer Tower", "instruction": "What features would you include in a standard desktop computer tower, considering places for a power button, USB ports, and an optical drive bay?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Tower\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntower = bpy.context.object\ntower.name = \"Tower\"\ntower.scale = (0.5, 0.25, 1)\ntower.data.materials.append(black)\n\n# Step 3: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0.4, 0.26, 1.8))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\npower_button.rotation_euler = (1.5708, 0, 0)\npower_button.data.materials.append(gray)\n\n# Step 4: Create the USB Ports\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.4, 0.26, 1.6 - i * 0.15))\n    usb_port = bpy.context.object\n    usb_port.name = f\"USB Port {i + 1}\"\n    usb_port.scale = (0.5, 0.1, 0.1)\n    usb_port.data.materials.append(gray)\n\n# Step 5: Create the Optical Drive Bay\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.26, 1.4))\noptical_drive = bpy.context.object\noptical_drive.name = \"Optical Drive\"\noptical_drive.scale = (1, 0.1, 0.25)\noptical_drive.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 2.287745272639537, "unit_n": 5, "param_ratio": 5.4}
{"id": "a6f8890f-4fff-4d14-8060-b48fe9706159", "name": "Star Icon", "instruction": "I'd like a simple star icon.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Star\n# Define the vertices for a simple 5-pointed star\nvertices = []\nedges = []\nfaces = []\n\n# Parameters for the star\nouter_radius = 1\ninner_radius = 0.5\nnum_points = 5\n\n# Calculate the angle between points\nangle = math.pi / num_points\n\n# Create vertices\nfor i in range(2 * num_points):\n    r = outer_radius if i % 2 == 0 else inner_radius\n    theta = i * angle\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    vertices.append((x, y, 0))\n\n# Create faces\nfaces.append([i for i in range(2 * num_points)])\n\n# Create the mesh and object\nmesh = bpy.data.meshes.new(name=\"Star\")\nmesh.from_pydata(vertices, edges, faces)\nmesh.update()\n\nstar = bpy.data.objects.new(\"Star\", mesh)\n\n# Add the object to the scene\nbpy.context.collection.objects.link(star)", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.3025850929940455, "unit_n": 1, "param_ratio": 3.0}
{"id": "cdb6acae-3ec2-41fc-ba69-38db77dd5560", "name": "Sandwich", "instruction": "Let's design a sandwich. Start with two slices of bread. Between the slices, place layers of lettuce, tomato slices, cheese, and a few slices of deli meat. Ensure the layers are visible from the side.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.83, 0, 1)  # Yellow color for cheese\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.75, 0.22, 0.17, 1)  # Dark red color for meat\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05  # Make it flat\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05  # Make it flat\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05  # Make it flat\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.scale[2] = 0.05  # Make it flat\nmeat.name = \"Meat\"\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "9527ec99-0a01-4681-8064-00fda6d44934", "name": "Pet Bed", "instruction": "Could you create a pet bed? It should be round with raised edges. Add a cushion in the center for comfort.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Bed Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.2))\nedges = bpy.context.object\nedges.name = \"Bed Edges\"\nedges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.15))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.605032105253847, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "b0d946ba-4a55-4bb3-b4ae-f76226a68c2f", "name": "Dog Bowl", "instruction": "Make a simple dog bowl with a round shape and a wide base.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\n\n# Step 3: Create the Bowl Inner Part\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.25, location=(0, 0, 0.025))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Create Hollow Bowl\nmod_bool = bowl_base.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(bowl_inner)\n\n# Step 5: Smooth Shading\nbpy.ops.object.shade_smooth()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "5b2de70d-b648-4286-bba5-ca48cdf2ab6c", "name": "Chocolate Bar", "instruction": "Design a 3D model of a chocolate bar. Imagine the rich taste and the smooth texture as you create the segments and the wrapper.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nchocolate_brown = bpy.data.materials.new(name=\"Chocolate Brown\")\nchocolate_brown.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate brown color\n\n# Step 2: Create the Chocolate Bar Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nchocolate_bar = bpy.context.object\nchocolate_bar.name = \"Chocolate Bar\"\nchocolate_bar.scale[2] = 0.2  # Flatten the bar\nchocolate_bar.data.materials.append(chocolate_brown)\n\n# Step 3: Create the Segments\nfor i in range(4):\n    for j in range(2):\n        bpy.ops.mesh.primitive_cube_add(size=0.8, location=(i - 1.5, j - 0.5, 0.2))\n        segment = bpy.context.object\n        segment.name = f\"Segment {i * 2 + j + 1}\"\n        segment.data.materials.append(chocolate_brown)\n        ", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.862515010718054, "unit_n": 9, "param_ratio": 1.4444444444444444}
{"id": "154ef9fb-63df-4df4-9c57-1377d9e6b15c", "name": "Food Processor", "instruction": "Construct a 3D model of a food processor. It should have a cylindrical base where the motor is housed, a large bowl with a lid on top, and various attachments like blades and discs. The bowl should have a handle and a feed tube for adding ingredients while processing. Include buttons for different speed settings on the base.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray, semi-transparent\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray, semi-transparent\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1, location=(0, 0, 1.25))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.9, 0, 1.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale = (1, 0.2, 2)\nhandle.data.materials.append(base_color)\n\n# Step 6: Create the Feed Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0.9, 1.8))\nfeed_tube = bpy.context.object\nfeed_tube.name = \"Feed Tube\"\nfeed_tube.data.materials.append(lid_color)\n\n# Step 7: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.5 + i * 0.2, 1, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 8: Create the Blades (simplified as discs)\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.05, location=(0, 0, 0.5 + i * 0.5))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.data.materials.append(base_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.213818082240896, "unit_n": 10, "param_ratio": 5.3}
{"id": "00809415-2eb2-40c8-afe3-186e57756d77", "name": "Sushi Platter", "instruction": "Can you create a sushi platter that includes a variety of sushi rolls and sashimi pieces, each clearly distinct from the others?", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrice_color = bpy.data.materials.new(name=\"Rice\")\nrice_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color for rice\nseaweed_color = bpy.data.materials.new(name=\"Seaweed\")\nseaweed_color.diffuse_color = (0.0, 0.2, 0.0, 1)  # Dark green color for seaweed\nfish_color = bpy.data.materials.new(name=\"Fish\")\nfish_color.diffuse_color = (1.0, 0.5, 0.5, 1)  # Light pink color for fish\n\n# Step 2: Create Sushi Rolls\nfor i in range(3):\n    x = i * 1.5 - 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(x, 0, 0.3))\n    roll_rice = bpy.context.object\n    roll_rice.name = f\"Sushi Roll Rice {i + 1}\"\n    roll_rice.data.materials.append(rice_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.6, location=(x, 0, 0.3))\n    roll_seaweed = bpy.context.object\n    roll_seaweed.name = f\"Sushi Roll Seaweed {i + 1}\"\n    roll_seaweed.data.materials.append(seaweed_color)\n\n# Step 3: Create Sashimi Pieces\nfor i in range(3):\n    x = i * 1.5 - 1.5\n    bpy.ops.mesh.primitive_cube_add(size=0.6, location=(x, 1.5, 0.3))\n    sashimi_fish = bpy.context.object\n    sashimi_fish.name = f\"Sashimi Fish {i + 1}\"\n    sashimi_fish.data.materials.append(fish_color)\n\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, 1.5, 0.3))\n    sashimi_rice = bpy.context.object\n    sashimi_rice.name = f\"Sashimi Rice {i + 1}\"\n    sashimi_rice.data.materials.append(rice_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.059479109018641, "unit_n": 12, "param_ratio": 2.75}
{"id": "5119c8f4-a7bc-47b4-8cc8-350f5ade1b59", "name": "Coatrack", "instruction": "Create a 3D model of a coatrack. Begin with a central vertical pole standing 6 feet tall. At the top, add four horizontal arms spaced evenly around the pole, each arm 1 foot long. At the midpoint, add another set of four horizontal arms, slightly shorter at 0.8 feet long. The base should be a round, stable disc 2 feet in diameter.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Central Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=6, location=(0, 0, 3))\npole = bpy.context.object\npole.name = \"Central Pole\"\n\n# Step 3: Create the Top Arms\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = math.cos(angle) * 0.5\n    y = math.sin(angle) * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 5.5), rotation=(0, math.pi / 2, angle))\n    arm = bpy.context.object\n    arm.name = f\"Top Arm {i + 1}\"\n\n# Step 4: Create the Midpoint Arms\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = math.cos(angle) * 0.4\n    y = math.sin(angle) * 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(x, y, 3), rotation=(0, math.pi / 2, angle))\n    arm = bpy.context.object\n    arm.name = f\"Midpoint Arm {i + 1}\"\n\n# Step 5: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.817632332879503, "unit_n": 10, "param_ratio": 2.6}
{"id": "18958140-0534-4563-8c4a-a035fbf71687", "name": "Armchair", "instruction": "Create an armchair. Compare it to a traditional armchair, ensuring it has similar features such as armrests, a backrest, and a seat cushion.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\ncushion_color = bpy.data.materials.new(name=\"Cushion\")\ncushion_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Cushion color\n\n# Step 2: Create the Seat Cushion\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat Cushion\"\nseat.scale[0] = 1.2\nseat.scale[1] = 1.2\nseat.scale[2] = 0.2\nseat.data.materials.append(cushion_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 1.2\nbackrest.scale[1] = 0.2\nbackrest.scale[2] = 1\nbackrest.data.materials.append(cushion_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1) / 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.8))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2\n    armrest.scale[1] = 1.2\n    armrest.scale[2] = 0.2\n    armrest.data.materials.append(wood_color)\n\n# Step 5: Create the Legs\nfor i in range(4):\n    x = 1.1 * (i % 2) - 0.55\n    y = 1.1 * (i // 2) - 0.55\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 0.25))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.384092886125952, "unit_n": 8, "param_ratio": 3.375}
{"id": "ff48c3b8-8273-4964-b124-7cda9a2f984e", "name": "Tile Mosaic", "instruction": "Create a basic square tile with a mosaic pattern.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors for the mosaic pattern\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1)   # Yellow\n]\n\n# Step 2: Create the base tile\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ntile = bpy.context.object\ntile.name = \"Base Tile\"\n\n# Step 3: Create the mosaic pattern\nnum_tiles = 4\ntile_size = 2 / num_tiles\n\nfor i in range(num_tiles):\n    for j in range(num_tiles):\n        bpy.ops.mesh.primitive_plane_add(size=tile_size, location=(i * tile_size - 1 + tile_size / 2, j * tile_size - 1 + tile_size / 2, 0.01))\n        mosaic_tile = bpy.context.object\n        mosaic_tile.name = f\"Mosaic Tile {i * num_tiles + j + 1}\"\n        \n        # Assign a random color from the list\n        mat = bpy.data.materials.new(name=f\"Color {i * num_tiles + j + 1}\")\n        mat.diffuse_color = colors[(i * num_tiles + j) % len(colors)]\n        mosaic_tile.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.240946979679714, "unit_n": 2, "param_ratio": 4.0}
{"id": "ac13db16-7421-4282-ac68-276546e167e8", "name": "Power Converter", "instruction": "Please design a 3D model of a power converter. It should have a rectangular body with input and output ports on the front. Include a cooling fan on one side and a digital display on the top to show the voltage and current levels.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nport_color = bpy.data.materials.new(name=\"Port Color\")\nport_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for ports\nfan_color = bpy.data.materials.new(name=\"Fan Color\")\nfan_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for fan\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color for display\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (2, 1, 1)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Input and Output Ports\nfor i in range(2):\n    x = -1.8 + i * 3.6\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 1.01, -0.5))\n    port = bpy.context.object\n    port.name = f\"Port {i + 1}\"\n    port.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face front\n    port.data.materials.append(port_color)\n\n# Step 4: Create the Cooling Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(-2.01, 0, 0))\nfan = bpy.context.object\nfan.name = \"Fan\"\nfan.rotation_euler = (0, 1.5708, 0)  # Rotate 90 degrees to face side\nfan.data.materials.append(fan_color)\n\n# Step 5: Create the Digital Display\nbpy.ops.mesh.primitive_plane_add(size=0.6, location=(0, 0, 1.01))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.rotation_euler = (1.5708, 0, 0)  # Rotate to face upwards\ndisplay.data.materials.append(display_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5181617420581164, "unit_n": 5, "param_ratio": 7.6}
{"id": "91d9fb85-3497-48a0-a95a-a187c3a0479f", "name": "Microphone", "instruction": "Produce a model of a microphone. It should include a head with a grille for sound entry and a body that houses the electronics. The bottom should have a connector for attaching to a sound system.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngrille_color = bpy.data.materials.new(name=\"Grille Color\")\ngrille_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the grille\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the body\nconnector_color = bpy.data.materials.new(name=\"Connector Color\")\nconnector_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color for the connector\n\n# Step 2: Create the Head with Grille\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(grille_color)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.2, location=(0, 0, 0.4))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 4: Create the Connector\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -0.4))\nconnector = bpy.context.object\nconnector.name = \"Connector\"\nconnector.data.materials.append(connector_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.338450937247582, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "3dfd46f5-4c7e-4b64-8e4f-dea210562bd5", "name": "Power Strip", "instruction": "Create a 3D model of a power strip with six sockets arranged in a single row.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the power strip\npower_strip_color = bpy.data.materials.new(name=\"Power Strip Color\")\npower_strip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the main body of the power strip\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Power Strip Body\"\nmain_body.scale = (3, 0.5, 0.2)\nmain_body.data.materials.append(power_strip_color)\n\n# Step 3: Create the sockets\nfor i in range(6):\n    x = -2.5 + i  # Position sockets in a row\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(x, 0, 0.1))\n    socket = bpy.context.object\n    socket.name = f\"Socket {i + 1}\"\n    socket.rotation_euler = (1.5708, 0, 0)  # Rotate to lay flat\n    socket.data.materials.append(power_strip_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.582046898419726, "unit_n": 7, "param_ratio": 2.0}
{"id": "f90476f0-4d56-4d70-bbbd-e9db38a9b9ba", "name": "Wedding Cake", "instruction": "Create a three-tier wedding cake. The bottom tier is the largest and each subsequent tier gets smaller. Decorate each tier with intricate icing designs and add a few edible flowers. The cake topper should be a pair of small figurines. Ensure the colors of the cake and decorations are harmonious.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (1, 0.9, 0.8, 1)  # Light cream color\nicing_color = bpy.data.materials.new(name=\"Icing Color\")\nicing_color.diffuse_color = (1, 1, 1, 1)  # White icing\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red flowers\n\n# Step 2: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.3, location=(0, 0, 0.15))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"Bottom Tier\"\nbottom_tier.data.materials.append(cake_color)\n\n# Step 3: Create the Middle Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.3, location=(0, 0, 0.45))\nmiddle_tier = bpy.context.object\nmiddle_tier.name = \"Middle Tier\"\nmiddle_tier.data.materials.append(cake_color)\n\n# Step 4: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0, 0, 0.75))\ntop_tier = bpy.context.object\ntop_tier.name = \"Top Tier\"\ntop_tier.data.materials.append(cake_color)\n\n# Step 5: Decorate each tier with icing\nfor tier in [bottom_tier, middle_tier, top_tier]:\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=tier.location, major_radius=tier.dimensions.x/2, minor_radius=0.05)\n    icing = bpy.context.object\n    icing.name = f\"Icing for {tier.name}\"\n    icing.data.materials.append(icing_color)\n\n# Step 6: Add edible flowers\nflower_positions = [(1, 0, 0.3), (-1, 0, 0.3), (0, 1, 0.3), (0, -1, 0.3)]\nfor pos in flower_positions:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=pos)\n    flower = bpy.context.object\n    flower.name = \"Edible Flower\"\n    flower.data.materials.append(flower_color)\n\n# Step 7: Add cake topper figurines\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 1.05))\nfigurine_1 = bpy.context.object\nfigurine_1.name = \"Figurine 1\"\nfigurine_1.data.materials.append(cake_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.2, 0, 1.05))\nfigurine_2 = bpy.context.object\nfigurine_2.name = \"Figurine 2\"\nfigurine_2.data.materials.append(cake_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.707548497614166, "unit_n": 7, "param_ratio": 6.142857142857143}
{"id": "3f8c9315-aab0-45eb-b6e2-2eec6a174c2d", "name": "Pizza", "instruction": "How would you describe a pizza with a thin crust, tomato sauce, mozzarella cheese, and pepperoni slices?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Mozzarella Cheese\")\ncheese_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color for mozzarella cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Mozzarella Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Mozzarella Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0, 0)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.166985104920192, "unit_n": 4, "param_ratio": 10.0}
{"id": "b2e83e32-9479-4b3b-8bc2-012130933461", "name": "Stapler", "instruction": "Design a stapler with a simple and efficient outlook. The body should be rectangular with a lever on top for pressing down. Include a small compartment for storing extra staples.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlever_color = bpy.data.materials.new(name=\"Lever Color\")\nlever_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncompartment_color = bpy.data.materials.new(name=\"Compartment Color\")\ncompartment_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.3, 0.2)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lever\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nlever = bpy.context.object\nlever.name = \"Lever\"\nlever.scale = (0.9, 0.25, 0.1)\nlever.data.materials.append(lever_color)\n\n# Step 4: Create the Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.35, 0.2))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.scale = (0.5, 0.1, 0.1)\ncompartment.data.materials.append(compartment_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 9.0}
{"id": "62d732fc-570d-4075-ab5a-c6619800042b", "name": "Geometric Logo", "instruction": "Create a logo using geometric shapes. It should be symmetrical and balanced.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the central circle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\ncentral_circle = bpy.context.object\ncentral_circle.name = \"Central Circle\"\ncentral_circle.data.materials.append(blue)\n\n# Step 3: Create the surrounding squares\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 1.2 * math.cos(angle)\n    y = 1.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, y, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.333232064002303, "unit_n": 5, "param_ratio": 3.6}
{"id": "4ee0e87b-898e-44d1-8f38-8c5a8516c173", "name": "Centrifuge", "instruction": "Create a 3D model of a laboratory centrifuge. The centrifuge should have a cylindrical body with a hinged lid on top. Inside, include a rotor with multiple slots for holding sample tubes. The control panel should be on the front, featuring a digital display and several buttons for setting time and speed.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nrotor_color = bpy.data.materials.new(name=\"Rotor Color\")\nrotor_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 1.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 1.1))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 5: Create the Slots for Sample Tubes\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 1.1))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1.1, 0.5))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale = (1, 0.1, 0.5)\npanel.data.materials.append(panel_color)\n\n# Step 7: Create the Digital Display\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, -1.15, 0.6))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.rotation_euler = (math.pi / 2, 0, 0)\ndisplay.data.materials.append(display_color)\n\n# Step 8: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(-0.1 + i * 0.1, -1.15, 0.4))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(panel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.436857862959068, "unit_n": 16, "param_ratio": 3.5625}
{"id": "e38c3d03-8434-4aaf-9ee9-6ffa616a1a8e", "name": "Coat Rack", "instruction": "Envision a coat rack suitable for an entryway. It should have multiple hooks at different heights to accommodate various garment sizes. The base must be weighted for stability.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.1))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(metal)\n\n# Step 4: Create the Hooks\nhook_heights = [0.5, 1, 1.5, 2]  # Different heights for the hooks\nfor i, height in enumerate(hook_heights):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0.1, height), rotation=(0, 1.57, 0))\n    hook = bpy.context.object\n    hook.name = f\"Hook {i + 1}\"\n    hook.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.241227149020818, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "8a886d11-8f94-4cef-9fbe-d362a69819b1", "name": "Pet Food Bowl", "instruction": "Could you create a 3D model of a pet food bowl? It should be circular with a shallow depth.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.2, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Difference to Create the Hollow Part\nmod_bool = bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\n\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner bowl as it is no longer needed\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "ed481667-fc83-4307-a833-2b057e42763b", "name": "Blood Pressure Monitor", "instruction": "Design a blood pressure monitor. It should include an arm cuff and a digital display unit. Compare this with a traditional sphygmomanometer in terms of accuracy and ease of use. The digital display unit should show systolic and diastolic pressure readings, as well as pulse rate. The arm cuff should be adjustable to fit different arm sizes. Compare the convenience and accuracy of the digital monitor with the traditional manual version, highlighting the benefits and drawbacks of each.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Arm Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.15, location=(0, 0, 0))\ncuff = bpy.context.object\ncuff.name = \"Arm Cuff\"\ncuff.data.materials.append(blue)\n\n# Step 3: Create the Digital Display Unit\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.6, 0, 0.1))\ndisplay_unit = bpy.context.object\ndisplay_unit.name = \"Digital Display Unit\"\ndisplay_unit.data.materials.append(gray)\n\n# Step 4: Create the Display Screen\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0.6, 0, 0.2))\ndisplay_screen = bpy.context.object\ndisplay_screen.name = \"Display Screen\"\ndisplay_screen.data.materials.append(black)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.6, 0.1 - i * 0.1, 0.05))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 4.161555990429726, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "47812b14-ce69-4d0e-8aa3-1c1ee00ad4a1", "name": "Pizza", "instruction": "Is a pizza with pepperoni topping larger than one with just cheese?", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Crust color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(-1.5, 0, 0))\npizza_base_cheese = bpy.context.object\npizza_base_cheese.name = \"Pizza Base Cheese\"\npizza_base_cheese.data.materials.append(crust_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(1.5, 0, 0))\npizza_base_pepperoni = bpy.context.object\npizza_base_pepperoni.name = \"Pizza Base Pepperoni\"\npizza_base_pepperoni.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(-1.5, 0, 0.05))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(1.5, 0, 0.05))\npepperoni_layer = bpy.context.object\npepperoni_layer.name = \"Pepperoni Layer\"\npepperoni_layer.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Toppings\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 1.5 + 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.749520151776467, "unit_n": 12, "param_ratio": 3.3333333333333335}
{"id": "5860759e-698c-4dba-9ce0-d315e8416a84", "name": "Laptop vs. Tablet", "instruction": "Create 3D models of both a laptop and a tablet. The laptop should have a keyboard and a screen that can be folded. The tablet should be a flat, rectangular device. Compare the two in terms of portability and usability.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Laptop Base (Keyboard)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nlaptop_base = bpy.context.object\nlaptop_base.scale[2] = 0.05\nlaptop_base.name = \"Laptop Base\"\nlaptop_base.data.materials.append(dark_gray)\n\n# Step 3: Create the Laptop Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.05, 1.1))\nlaptop_screen = bpy.context.object\nlaptop_screen.scale[2] = 0.05\nlaptop_screen.rotation_euler[0] = 1.57  # Rotate 90 degrees to stand up\nlaptop_screen.name = \"Laptop Screen\"\nlaptop_screen.data.materials.append(light_gray)\n\n# Step 4: Create the Tablet\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(3, 0, 0.1))\ntablet = bpy.context.object\ntablet.scale[2] = 0.05\ntablet.name = \"Tablet\"\ntablet.data.materials.append(light_gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "549c3818-9be7-45be-bffa-f8f1b0fa0ad1", "name": "Dining Table", "instruction": "Let's create a 3D model of a dining table. It should be rectangular and large enough to seat six people. There should be four legs, one at each corner, and the surface should be flat and even. The table's height should be comfortable for dining. Ensure the edges are smooth, and the overall design is simple and functional.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntabletop = bpy.context.object\ntabletop.scale[0] = 2  # Length\ntabletop.scale[1] = 1  # Width\ntabletop.scale[2] = 0.1  # Thickness\ntabletop.name = \"Tabletop\"\ntabletop.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-1.9, -0.9, 0.5), (1.9, -0.9, 0.5), (-1.9, 0.9, 0.5), (1.9, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 5  # Height\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 2, "param_ratio": 5.0}
{"id": "c70828fa-9ac6-4050-90bb-3c254956e146", "name": "Hat", "instruction": "Design a hat with a wide brim and a simple band around the base of the crown. The hat should have a classic shape that suits both casual and formal occasions.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\nband_color = bpy.data.materials.new(name=\"Band Color\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the band\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.55))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.36925939033766, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "216df759-2188-4a25-88de-f129cdff552a", "name": "Wallpaper Design", "instruction": "Create a wallpaper design with a floral theme.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0.5, 0.5, 1)  # Light pink color\nstem_color = bpy.data.materials.new(name=\"Stem Color\")\nstem_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\n# Step 2: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_color)\n\n# Step 3: Create the Flower Petals\nfor i in range(5):\n    angle = i * (2 * 3.14159 / 5)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 2))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(flower_color)\n\n# Step 4: Create the Flower Center\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 2))\ncenter = bpy.context.object\ncenter.name = \"Flower Center\"\ncenter.data.materials.append(flower_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.776547482188849, "unit_n": 7, "param_ratio": 3.2857142857142856}
{"id": "ca425c9b-b269-4a49-a522-7735f251ca09", "name": "Sticky Note", "instruction": "Design a sticky note with a square shape.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Sticky Note\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nsticky_note = bpy.context.object\nsticky_note.name = \"Sticky Note\"\n\n# Define the color (yellow)\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Assign the color to the sticky note\nsticky_note.data.materials.append(yellow)", "color_brightness": "Very Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 9.0}
{"id": "2afb0c08-be21-4dc2-8692-2cd27bafacae", "name": "Centrifuge", "instruction": "Create a centrifuge designed for laboratory use. It should have a cylindrical body with a transparent lid on top and a control panel on the front. The interior should include a rotor with slots for holding test tubes.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent light gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nrotor_color = bpy.data.materials.new(name=\"Rotor Color\")\nrotor_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.45))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 0.5))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 5: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0.9))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 6: Create the Test Tube Slots\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.9))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.0943386744049945, "unit_n": 12, "param_ratio": 3.6666666666666665}
{"id": "a5f7b764-5816-4ca2-a6c2-2c6f4827557c", "name": "Cargo Truck", "instruction": "Design a cargo truck with a driver's cabin, a large cargo area at the back, and four wheels. Add details like headlights and windows on the cabin.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntruck_body_color = bpy.data.materials.new(name=\"Truck Body Color\")\ntruck_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nwindow_color = bpy.data.materials.new(name=\"Window Color\")\nwindow_color.diffuse_color = (0.5, 0.8, 1, 1)  # Light blue color\n\nheadlight_color = bpy.data.materials.new(name=\"Headlight Color\")\nheadlight_color.diffuse_color = (1, 1, 0.5, 1)  # Light yellow color\n\n# Step 2: Create the Driver's Cabin\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ncabin = bpy.context.object\ncabin.scale = (1, 1.5, 1)\ncabin.name = \"Cabin\"\ncabin.data.materials.append(truck_body_color)\n\n# Step 3: Create the Cargo Area\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 2.5, 1))\ncargo_area = bpy.context.object\ncargo_area.scale = (1.5, 3, 1)\ncargo_area.name = \"Cargo Area\"\ncargo_area.data.materials.append(truck_body_color)\n\n# Step 4: Create the Wheels\nfor i in range(4):\n    x = 1.2 * (i % 2) - 0.6\n    y = 2.5 * (i // 2) - 0.75\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(x, y, 0.3), rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(truck_body_color)\n\n# Step 5: Add Windows to the Cabin\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0.6, 0.5, 1.2))\nwindow1 = bpy.context.object\nwindow1.name = \"Window 1\"\nwindow1.data.materials.append(window_color)\n\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(-0.6, 0.5, 1.2))\nwindow2 = bpy.context.object\nwindow2.name = \"Window 2\"\nwindow2.data.materials.append(window_color)\n\n# Step 6: Add Headlights to the Cabin\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, -0.75, 0.5))\nheadlight1 = bpy.context.object\nheadlight1.name = \"Headlight 1\"\nheadlight1.data.materials.append(headlight_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-0.5, -0.75, 0.5))\nheadlight2 = bpy.context.object\nheadlight2.name = \"Headlight 2\"\nheadlight2.data.materials.append(headlight_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.815740562622363, "unit_n": 10, "param_ratio": 4.7}
{"id": "19a8b8a3-9f33-4f5f-94fb-d5f5f250b0ed", "name": "Webcam", "instruction": "Create a webcam with a rectangular body and a lens in the center. Add a small LED indicator next to the lens and a USB cable extending from the back.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1.5, 0.5, 1)\nbody.data.materials.append(black)\n\n# Step 3: Create the Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0.6, 0))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.data.materials.append(gray)\n\n# Step 4: Create the LED Indicator\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, 0.6, 0.3))\nled = bpy.context.object\nled.name = \"LED\"\nled.data.materials.append(red)\n\n# Step 5: Create the USB Cable\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, -1.5, 0), rotation=(math.pi/2, 0, 0))\nusb_cable = bpy.context.object\nusb_cable.name = \"USB Cable\"\nusb_cable.data.materials.append(black)\n", "color_brightness": "Dark", "verify": "human", "entropy": 1.624630916563723, "unit_n": 4, "param_ratio": 9.0}
{"id": "9d1228b1-c954-41dc-8e92-dd3c6400bfa6", "name": "Circuit Board", "instruction": "Design a 3D model of a circuit board. It should be rectangular with various small components like resistors, capacitors, and microchips mounted on it.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"BoardColor\")\nboard_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color for the circuit board\ncomponent_color = bpy.data.materials.new(name=\"ComponentColor\")\ncomponent_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for components\n\n# Step 2: Create the Circuit Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.scale[2] = 0.05  # Make it flat\nboard.name = \"CircuitBoard\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create Components\n# Resistors\nfor i in range(3):\n    x = -0.5 + i * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, -0.5, 0.05), rotation=(1.57, 0, 0))\n    resistor = bpy.context.object\n    resistor.name = f\"Resistor {i + 1}\"\n    resistor.data.materials.append(component_color)\n\n# Capacitors\nfor i in range(2):\n    x = -0.5 + i * 1.0\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(x, 0, 0.15), rotation=(1.57, 0, 0))\n    capacitor = bpy.context.object\n    capacitor.name = f\"Capacitor {i + 1}\"\n    capacitor.data.materials.append(component_color)\n\n# Microchips\nfor i in range(2):\n    x = -0.5 + i * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, 0.5, 0.15))\n    microchip = bpy.context.object\n    microchip.name = f\"Microchip {i + 1}\"\n    microchip.data.materials.append(component_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.248169056363595, "unit_n": 8, "param_ratio": 4.25}
{"id": "771ffdd6-d522-43cf-87bd-7b76177e72f9", "name": "Chessboard", "instruction": "Design a 3D model of a chessboard. The board should be square, with dimensions of 40cm by 40cm. It should be divided into 64 smaller squares, alternating between two colors. The board should be flat and have a small border around the edge. Include all 32 chess pieces, with distinct shapes for each type.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (1, 1, 1, 1)  # White color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nboard_size = 40\nsquare_size = board_size / 8\nborder_thickness = 0.5\n\n# Create the border\nbpy.ops.mesh.primitive_plane_add(size=board_size + 2 * border_thickness, location=(0, 0, 0))\nborder = bpy.context.object\nborder.name = \"Border\"\nborder.data.materials.append(color1)\n\n# Create the squares\nfor row in range(8):\n    for col in range(8):\n        x = (col - 3.5) * square_size\n        y = (row - 3.5) * square_size\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(x, y, 0.01))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(color1)\n        else:\n            square.data.materials.append(color2)\n\n# Step 3: Create the Chess Pieces\n# For simplicity, we'll use basic shapes to represent the pieces\n\n# Define piece colors\nwhite_piece_color = bpy.data.materials.new(name=\"WhitePiece\")\nwhite_piece_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_piece_color = bpy.data.materials.new(name=\"BlackPiece\")\nblack_piece_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Function to create a piece\ndef create_piece(shape, location, color):\n    if shape == 'pawn':\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=location)\n    elif shape == 'rook':\n        bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    elif shape == 'knight':\n        bpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1, location=location)\n    elif shape == 'bishop':\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1, location=location)\n    elif shape == 'queen':\n        bpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.2, location=location)\n    elif shape == 'king':\n        bpy.ops.mesh.primitive_ico_sphere_add(radius=0.5, location=location)\n    piece = bpy.context.object\n    piece.data.materials.append(color)\n\n# Place the pieces\n# Pawns\nfor i in range(8):\n    create_piece('pawn', ((i - 3.5) * square_size, -2.5 * square_size, 0.5), white_piece_color)\n    create_piece('pawn', ((i - 3.5) * square_size, 2.5 * square_size, 0.5), black_piece_color)\n\n# Rooks\ncreate_piece('rook', (-3.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('rook', (3.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('rook', (-3.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\ncreate_piece('rook', (3.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\n\n# Knights\ncreate_piece('knight', (-2.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('knight', (2.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('knight', (-2.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\ncreate_piece('knight', (2.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\n\n# Bishops\ncreate_piece('bishop', (-1.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('bishop', (1.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('bishop', (-1.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\ncreate_piece('bishop', (1.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\n\n# Queens\ncreate_piece('queen', (-0.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('queen', (-0.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)\n\n# Kings\ncreate_piece('king', (0.5 * square_size, -3.5 * square_size, 0.5), white_piece_color)\ncreate_piece('king', (0.5 * square_size, 3.5 * square_size, 0.5), black_piece_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.611953632298718, "unit_n": 71, "param_ratio": 0.5070422535211268}
{"id": "120195d7-df38-4a6c-b523-77cda420e429", "name": "Toolbox", "instruction": "Could you generate a 3D model of a toolbox? The toolbox should have a rectangular shape with a handle on top. It should feature multiple compartments inside, including a removable tray. Ensure there are latches on the front to secure the lid.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntoolbox_color = bpy.data.materials.new(name=\"ToolboxColor\")\ntoolbox_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Main Body of the Toolbox\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.scale = (1, 0.5, 0.5)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(toolbox_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.75))\nlid = bpy.context.object\nlid.scale = (1, 0.5, 0.1)\nlid.name = \"Lid\"\nlid.data.materials.append(toolbox_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, 2))\nhandle = bpy.context.object\nhandle.rotation_euler = (1.5708, 0, 0)\nhandle.name = \"Handle\"\nhandle.data.materials.append(toolbox_color)\n\n# Step 5: Create the Compartments\ncompartment_color = bpy.data.materials.new(name=\"CompartmentColor\")\ncompartment_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.25 + i * 0.5, 0.75))\n    compartment = bpy.context.object\n    compartment.scale = (0.9, 0.2, 0.1)\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.data.materials.append(compartment_color)\n\n# Step 6: Create the Removable Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.25))\ntray = bpy.context.object\ntray.scale = (0.9, 0.4, 0.1)\ntray.name = \"Tray\"\ntray.data.materials.append(compartment_color)\n\n# Step 7: Create the Latches\nlatch_color = bpy.data.materials.new(name=\"LatchColor\")\nlatch_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.9 + i * 1.8, 0.55, 1.5))\n    latch = bpy.context.object\n    latch.scale = (0.1, 0.05, 0.05)\n    latch.name = f\"Latch {i + 1}\"\n    latch.data.materials.append(latch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3018190641866205, "unit_n": 8, "param_ratio": 5.0}
{"id": "690c785e-6a62-4119-8c08-a79e27c36cd5", "name": "Evening Clutch", "instruction": "Conceive an evening clutch with a clasp on top.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclutch_color = bpy.data.materials.new(name=\"ClutchColor\")\nclutch_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nclasp_color = bpy.data.materials.new(name=\"ClaspColor\")\nclasp_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Clutch Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nclutch = bpy.context.object\nclutch.name = \"Clutch\"\nclutch.scale = (1, 0.3, 0.5)\nclutch.data.materials.append(clutch_color)\n\n# Step 3: Create the Clasp\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0.6))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp.data.materials.append(clasp_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7212116790597864, "unit_n": 2, "param_ratio": 9.0}
{"id": "3f2e7a15-9e28-45db-aa5d-f27f913058cf", "name": "Power Transformer", "instruction": "Create a 3D model of a power transformer. It should have a rectangular base with cylindrical components on top. Include cooling fins on the sides and high-voltage bushings protruding from the top. The model should also feature a control panel on one side.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create Cylindrical Components on Top\nfor i in range(3):\n    x = 0.7 * (i - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(x, 0, 2))\n    cylinder = bpy.context.object\n    cylinder.name = f\"Cylinder {i + 1}\"\n\n# Step 4: Create Cooling Fins on the Sides\nfor i in range(5):\n    y = 0.8 * (i - 2)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.1, y, 1))\n    fin = bpy.context.object\n    fin.name = f\"Cooling Fin Left {i + 1}\"\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.1, y, 1))\n    fin = bpy.context.object\n    fin.name = f\"Cooling Fin Right {i + 1}\"\n\n# Step 5: Create High-Voltage Bushings\nfor i in range(3):\n    x = 0.7 * (i - 1)\n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.5, location=(x, 0, 2.75))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n\n# Step 6: Create Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1.5, 0, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7998324796603806, "unit_n": 18, "param_ratio": 1.5}
{"id": "f82565ad-881b-41ff-aa05-62c19b41c858", "name": "Armchair", "instruction": "Imagine an armchair that invites you to sit and relax. It has a wide seat, a high backrest, and armrests that curve slightly outward. The legs are straight and positioned at the corners for stability.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\nfabric_color = bpy.data.materials.new(name=\"Fabric\")\nfabric_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray fabric color\n\n# Step 2: Create the Legs\nfor i in range(4):\n    x = 0.5 * (i % 2) - 0.25\n    y = 0.5 * (i // 2) - 0.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, -0.2))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.2))\nseat = bpy.context.object\nseat.scale[0] = 0.6\nseat.scale[1] = 0.6\nseat.scale[2] = 0.1\nseat.name = \"Seat\"\nseat.data.materials.append(fabric_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.3, 0.55))\nbackrest = bpy.context.object\nbackrest.scale[0] = 0.6\nbackrest.scale[1] = 0.1\nbackrest.scale[2] = 0.5\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(fabric_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.4))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.05\n    armrest.scale[1] = 0.6\n    armrest.scale[2] = 0.05\n    armrest.rotation_euler[1] = math.radians(10)  # Slight outward curve\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(wood_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.2518051994420363, "unit_n": 8, "param_ratio": 3.375}
{"id": "e8da2c45-6873-4031-bab0-fce0beb176f7", "name": "Geometric Pattern", "instruction": "Please design a 3D geometric pattern consisting of interlocking hexagons. The pattern should be flat and repeatable.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon function\ndef create_hexagon(radius, location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=radius, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    return hexagon\n\n# Step 2: Create the Pattern\nradius = 1\nfor i in range(5):  # Number of rows\n    for j in range(5):  # Number of columns\n        x = j * 1.5 * radius\n        y = i * math.sqrt(3) * radius\n        if j % 2 == 1:\n            y += math.sqrt(3) / 2 * radius\n        create_hexagon(radius, (x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.450002547309176, "unit_n": 1, "param_ratio": 2.0}
{"id": "69b3c163-e741-4aff-acf5-b9fcf608a87d", "name": "Hat", "instruction": "Let's create a 3D model of a hat. Start with a circular brim and a rounded crown. Add a band around the base of the crown for added detail.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.75))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 0.75))\nband = bpy.context.object\nband.name = \"Band\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.338913088573936, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "f3702906-940a-4db9-87a1-9e363cf0981d", "name": "Barcode Scanner", "instruction": "Create a 3D model of a barcode scanner. It should have a simple handle, a trigger, and a flat scanning surface.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscanner_body_color = bpy.data.materials.new(name=\"Scanner Body\")\nscanner_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntrigger_color = bpy.data.materials.new(name=\"Trigger\")\ntrigger_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, -0.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(scanner_body_color)\n\n# Step 3: Create the Trigger\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.15, -0.1))\ntrigger = bpy.context.object\ntrigger.name = \"Trigger\"\ntrigger.data.materials.append(trigger_color)\n\n# Step 4: Create the Scanning Surface\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 0.25))\nscanning_surface = bpy.context.object\nscanning_surface.name = \"Scanning Surface\"\nscanning_surface.data.materials.append(scanner_body_color)\n\n# Step 5: Adjust the Scanning Surface Orientation\nscanning_surface.rotation_euler = (math.radians(45), 0, 0)\nscanning_surface.location.z += 0.1  # Adjust height after rotation\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.913813511961459, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "f4c175db-8224-431c-9eee-4fa4dae2f157", "name": "Skateboard", "instruction": "Create a 3D model of a skateboard with a flat deck and four wheels. The skateboard should be in a horizontal position.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale[1] = 0.2\ndeck.scale[2] = 0.05\n\n# Step 3: Create the Wheels\nwheel_radius = 0.1\nwheel_thickness = 0.05\nwheel_positions = [(-0.75, 0.3, -0.05), (-0.75, -0.3, -0.05), (0.75, 0.3, -0.05), (0.75, -0.3, -0.05)]\n\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=wheel_radius, depth=wheel_thickness, location=pos)\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate the wheel to be horizontal\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8705550332792953, "unit_n": 2, "param_ratio": 2.0}
{"id": "9906a621-057d-4b64-a1ba-59e09dd07378", "name": "Travel Mug", "instruction": "Create a travel mug. It should have a cylindrical shape with a lid that has a small opening for drinking. The mug should have a handle on one side for easy carrying.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmug_color = bpy.data.materials.new(name=\"MugColor\")\nmug_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the mug\n\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the lid\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2.5, location=(0, 0, 1.25))\nmug_body = bpy.context.object\nmug_body.name = \"MugBody\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Drinking Opening\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.8, 0, 2.7))\ndrinking_opening = bpy.context.object\ndrinking_opening.name = \"DrinkingOpening\"\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = lid\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(drinking_opening)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(1.5, 0, 1.25), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mug_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.936762914403814, "unit_n": 5, "param_ratio": 6.8}
{"id": "c6d91400-ca5f-45b2-afc1-1c2dad0dfeba", "name": "Acoustic Guitar", "instruction": "How does an acoustic guitar compare to an electric guitar in terms of body shape and string arrangement? Create a 3D model of an acoustic guitar with a hollow body, six strings, and tuning pegs at the headstock. Compare it to an electric guitar model with a solid body and similar string arrangement.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Light brown color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Acoustic Guitar Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nacoustic_body = bpy.context.object\nacoustic_body.name = \"Acoustic Body\"\nacoustic_body.scale[0] = 0.6\nacoustic_body.scale[1] = 1\nacoustic_body.scale[2] = 0.1\nacoustic_body.data.materials.append(wood_color)\n\n# Step 3: Create the Acoustic Guitar Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.2, 0))\nacoustic_neck = bpy.context.object\nacoustic_neck.name = \"Acoustic Neck\"\nacoustic_neck.scale[1] = 2.5\nacoustic_neck.data.materials.append(wood_color)\n\n# Step 4: Create the Acoustic Guitar Headstock\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 2.5, 0))\nacoustic_headstock = bpy.context.object\nacoustic_headstock.name = \"Acoustic Headstock\"\nacoustic_headstock.scale[1] = 0.5\nacoustic_headstock.data.materials.append(wood_color)\n\n# Step 5: Create the Acoustic Guitar Strings\nfor i in range(6):\n    x = -0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=3, location=(x, 1.5, 0))\n    string = bpy.context.object\n    string.name = f\"Acoustic String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(metal_color)\n\n# Step 6: Create the Electric Guitar Body\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(3, 0, 0))\nelectric_body = bpy.context.object\nelectric_body.name = \"Electric Body\"\nelectric_body.scale[0] = 0.6\nelectric_body.scale[1] = 1\nelectric_body.scale[2] = 0.1\nelectric_body.data.materials.append(wood_color)\n\n# Step 7: Create the Electric Guitar Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(3, 1.2, 0))\nelectric_neck = bpy.context.object\nelectric_neck.name = \"Electric Neck\"\nelectric_neck.scale[1] = 2.5\nelectric_neck.data.materials.append(wood_color)\n\n# Step 8: Create the Electric Guitar Headstock\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(3, 2.5, 0))\nelectric_headstock = bpy.context.object\nelectric_headstock.name = \"Electric Headstock\"\nelectric_headstock.scale[1] = 0.5\nelectric_headstock.data.materials.append(wood_color)\n\n# Step 9: Create the Electric Guitar Strings\nfor i in range(6):\n    x = 3 - 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=3, location=(x, 1.5, 0))\n    string = bpy.context.object\n    string.name = f\"Electric String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.5014696959250893, "unit_n": 18, "param_ratio": 2.4444444444444446}
{"id": "74466836-64cb-4fab-bdbc-80994beac2fb", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. The pizza should be circular with a diameter of 12 inches. Add a layer of tomato sauce, followed by a layer of cheese. Place pepperoni slices evenly distributed on top. Create a slightly raised edge for the crust.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.02, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.01))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.015))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create Pepperoni Slices\npepperoni_radius = 0.02\npepperoni_positions = [\n    (0.05, 0.05), (-0.05, 0.05), (0.05, -0.05), (-0.05, -0.05),\n    (0.1, 0), (-0.1, 0), (0, 0.1), (0, -0.1)\n]\n\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.005, location=(x, y, 0.02))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Raised Edge for the Crust\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1524, minor_radius=0.01, location=(0, 0, 0.02))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(crust_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.552851138018259, "unit_n": 5, "param_ratio": 8.8}
{"id": "820b5710-8018-4564-bad1-7ac145a43330", "name": "Birthday Cake", "instruction": "Design a 3D model of a birthday cake. It should be a two-tiered cake with a smooth surface. The top tier should have a \"Happy Birthday\" message written on it. Add a few candles on the top tier.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"CakeColor\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\n\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\nflame_color = bpy.data.materials.new(name=\"FlameColor\")\nflame_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\n\n# Step 2: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0.5))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"BottomTier\"\nbottom_tier.data.materials.append(cake_color)\n\n# Step 3: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.7, location=(0, 0, 1.35))\ntop_tier = bpy.context.object\ntop_tier.name = \"TopTier\"\ntop_tier.data.materials.append(cake_color)\n\n# Step 4: Add Candles\ncandle_positions = [(-0.5, 0.5), (0.5, 0.5), (-0.5, -0.5), (0.5, -0.5), (0, 0)]\nfor i, (x, y) in enumerate(candle_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 1.85))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 2.0))\n    flame = bpy.context.object\n    flame.name = f\"Flame {i + 1}\"\n    flame.data.materials.append(flame_color)\n\n# Step 5: Add \"Happy Birthday\" Text\nbpy.ops.object.text_add(location=(0, 0, 1.7))\ntext_obj = bpy.context.object\ntext_obj.name = \"HappyBirthdayText\"\ntext_obj.data.body = \"Happy Birthday\"\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.data.size = 0.2\ntext_obj.rotation_euler = (0, 0, 0)\ntext_obj.location = (0, 0, 1.7)\nbpy.context.object.data.extrude = 0.05\nbpy.context.object.data.bevel_depth = 0.01\n", "color_brightness": "Bright", "verify": "human", "entropy": 2.3921855284042097, "unit_n": 5, "param_ratio": 7.4}
{"id": "67a6528c-4f9e-46e3-93f6-a9df268e85a9", "name": "Wall Mural", "instruction": "How would you feel about creating a wall mural? Design a wall mural with a nature theme. Include trees, a river, and mountains in the background. Add a few birds in the sky and some flowers near the riverbank.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for trees\ntree_brown = bpy.data.materials.new(name=\"Tree Brown\")\ntree_brown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for tree trunks\nriver_blue = bpy.data.materials.new(name=\"River Blue\")\nriver_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for river\nmountain_gray = bpy.data.materials.new(name=\"Mountain Gray\")\nmountain_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for mountains\nbird_black = bpy.data.materials.new(name=\"Bird Black\")\nbird_black.diffuse_color = (0, 0, 0, 1)  # Black color for birds\nflower_red = bpy.data.materials.new(name=\"Flower Red\")\nflower_red.diffuse_color = (1, 0, 0, 1)  # Red color for flowers\n\n# Step 2: Create the Mountains\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=3, depth=6, location=(-5, 0, 3))\nmountain1 = bpy.context.object\nmountain1.name = \"Mountain 1\"\nmountain1.data.materials.append(mountain_gray)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2.5, depth=5, location=(0, 0, 2.5))\nmountain2 = bpy.context.object\nmountain2.name = \"Mountain 2\"\nmountain2.data.materials.append(mountain_gray)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2, depth=4, location=(5, 0, 2))\nmountain3 = bpy.context.object\nmountain3.name = \"Mountain 3\"\nmountain3.data.materials.append(mountain_gray)\n\n# Step 3: Create the River\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, -3, 0))\nriver = bpy.context.object\nriver.name = \"River\"\nriver.scale = (0.5, 2, 1)\nriver.data.materials.append(river_blue)\n\n# Step 4: Create the Trees\nfor i in range(3):\n    x = -4 + i * 4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(x, 2, 1))\n    trunk = bpy.context.object\n    trunk.name = f\"Trunk {i + 1}\"\n    trunk.data.materials.append(tree_brown)\n    \n    bpy.ops.mesh.primitive_cone_add(vertices=8, radius1=1, depth=2, location=(x, 2, 2))\n    leaves = bpy.context.object\n    leaves.name = f\"Leaves {i + 1}\"\n    leaves.data.materials.append(tree_green)\n\n# Step 5: Create the Birds\nfor i in range(3):\n    x = -3 + i * 3\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, 5, 5))\n    bird = bpy.context.object\n    bird.name = f\"Bird {i + 1}\"\n    bird.data.materials.append(bird_black)\n\n# Step 6: Create the Flowers\nfor i in range(5):\n    x = -2 + i\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, -3, 0.1))\n    flower = bpy.context.object\n    flower.name = f\"Flower {i + 1}\"\n    flower.data.materials.append(flower_red)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8089584593153756, "unit_n": 18, "param_ratio": 3.9444444444444446}
{"id": "fc6f654b-2947-406e-a328-4973f8f0011c", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should have a rectangular shape with a screen covering most of the front surface. Include a small camera at the top of the screen.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale[0] = 0.4  # Width\nbody.scale[1] = 0.8  # Height\nbody.scale[2] = 0.02  # Thickness\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale[0] = 0.38  # Width\nscreen.scale[1] = 0.78  # Height\nscreen.data.materials.append(dark_gray)\n\n# Step 4: Create the Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0, 0.35, 0.03))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.6460830787868526, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "e8b7bd49-db54-41f4-bec4-f6a9568f8b4d", "name": "Geometric Pattern Wall Art", "instruction": "Design a geometric pattern wall art piece. The base should be a square panel, 24 inches on each side. Incorporate a series of interlocking hexagons and triangles, arranged symmetrically. The design should be flat and uniform.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base Panel\nbpy.ops.mesh.primitive_plane_add(size=24, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Base Panel\"\n\n# Define the material\nbase_material = bpy.data.materials.new(name=\"Base Material\")\nbase_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npanel.data.materials.append(base_material)\n\n# Step 3: Create the Hexagons and Triangles\nhexagon_radius = 2\ntriangle_side = 2 * math.sin(math.pi / 3) * hexagon_radius\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=hexagon_radius, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.name = \"Hexagon\"\n    hexagon.data.materials.append(base_material)\n\n# Function to create a triangle\ndef create_triangle(location, rotation):\n    bpy.ops.mesh.primitive_circle_add(vertices=3, radius=triangle_side / math.sqrt(3), fill_type='NGON', location=location, rotation=rotation)\n    triangle = bpy.context.object\n    triangle.name = \"Triangle\"\n    triangle.data.materials.append(base_material)\n\n# Create a pattern of hexagons and triangles\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = col * 1.5 * hexagon_radius\n        y_offset = row * math.sqrt(3) * hexagon_radius\n        if col % 2 == 1:\n            y_offset += math.sqrt(3) * hexagon_radius / 2\n        create_hexagon((x_offset, y_offset, 0))\n        create_triangle((x_offset + hexagon_radius, y_offset, 0), (0, 0, math.pi / 3))\n        create_triangle((x_offset - hexagon_radius, y_offset, 0), (0, 0, -math.pi / 3))\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.8412078169507198, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "efcc370c-69e7-4939-8aed-99c0bfd1cada", "name": "Geometric Pattern", "instruction": "Create a 3D geometric pattern. The pattern should consist of interconnected shapes, such as triangles and squares, forming a repeating design.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the pattern\n# Create a single unit of the pattern: a square and a triangle\ndef create_pattern_unit(location):\n    # Create a square\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    square = bpy.context.object\n    square.data.materials.append(color1)\n    \n    # Create a triangle\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0, location=(location[0] + 0.5, location[1] + 0.5, location[2]))\n    triangle = bpy.context.object\n    triangle.data.materials.append(color2)\n\n# Step 3: Arrange the pattern units in a grid\nrows = 5\ncols = 5\nspacing = 1.5\n\nfor i in range(rows):\n    for j in range(cols):\n        create_pattern_unit((i * spacing, j * spacing, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.518188012583639, "unit_n": 2, "param_ratio": 8.5}
{"id": "47eab713-bdb4-45e3-9c3f-350dfca57589", "name": "Recliner Sofa", "instruction": "Create a 3D model of a recliner sofa with a reclining backrest and footrest. The sofa should have armrests and a cushioned seat.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale[0] = 1.5\nseat.scale[1] = 1\nseat.scale[2] = 0.5\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.25, 1.5))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 1.5\nbackrest.scale[1] = 0.2\nbackrest.scale[2] = 1\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Footrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.25, 0.25))\nfootrest = bpy.context.object\nfootrest.name = \"Footrest\"\nfootrest.scale[0] = 1.5\nfootrest.scale[1] = 0.5\nfootrest.scale[2] = 0.25\nfootrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 1.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2\n    armrest.scale[1] = 1\n    armrest.scale[2] = 0.75\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4547728927577257, "unit_n": 5, "param_ratio": 4.2}
{"id": "3e4746d7-ba8d-41fd-93ef-890b86344a8a", "name": "Dining Chair", "instruction": "Could you create a 3D model of a dining chair? Make sure it has a high backrest and four straight legs.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Legs\nfor i in range(4):\n    x = 0.6 * (i % 2) - 0.3\n    y = 0.6 * (i // 2) - 0.3\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, -0.45))\n    leg = bpy.context.object\n    leg.scale[2] = 4.5  # Make the legs taller\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nseat = bpy.context.object\nseat.scale[2] = 0.1  # Make the seat thinner\nseat.name = \"Seat\"\nseat.data.materials.append(wood_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.45, 0.75))\nbackrest = bpy.context.object\nbackrest.scale[2] = 1.5  # Make the backrest taller\nbackrest.scale[1] = 0.1  # Make the backrest thinner\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.29357836044127, "unit_n": 6, "param_ratio": 2.8333333333333335}
{"id": "0e9aac4e-b36a-41bf-a921-3d46a5ffe731", "name": "Cupcake", "instruction": "Can you make a 3D cupcake with frosting on top?", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncupcake_base_color = bpy.data.materials.new(name=\"Cupcake Base Color\")\ncupcake_base_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\nfrosting_color = bpy.data.materials.new(name=\"Frosting Color\")\nfrosting_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink color\n\n# Step 2: Create the Cupcake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\ncupcake_base = bpy.context.object\ncupcake_base.name = \"Cupcake Base\"\ncupcake_base.data.materials.append(cupcake_base_color)\n\n# Step 3: Create the Frosting\nbpy.ops.mesh.primitive_cone_add(radius1=1.2, radius2=0.2, depth=1, location=(0, 0, 1))\nfrosting = bpy.context.object\nfrosting.name = \"Frosting\"\nfrosting.data.materials.append(frosting_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.0712605641292425, "unit_n": 2, "param_ratio": 10.5}
{"id": "44a99c01-6c47-48ea-83ad-a9e27ecc1669", "name": "Tablet", "instruction": "Create a 3D model of a tablet. The tablet should have a sleek design with a large touch screen.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray for the body\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Tablet Body\"\nbody.scale[0] = 1.2  # Scale in X direction\nbody.scale[1] = 0.8  # Scale in Y direction\nbody.scale[2] = 0.05  # Scale in Z direction (thin)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Tablet Screen\"\nscreen.scale[0] = 1  # Scale in X direction\nscreen.scale[1] = 0.7  # Scale in Y direction\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "c897a28f-ea1f-4102-8154-94fe95285bb4", "name": "Apple", "instruction": "Create a 3D model of an apple. It should be round with a small indentation at the top for the stem.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Step 3: Create the Indentation at the Top\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.2, radius2=0, depth=0.2, location=(0, 0, 1))\nindentation = bpy.context.object\nindentation.name = \"Indentation\"\n\n# Step 4: Join the Indentation to the Apple\nbpy.context.view_layer.objects.active = apple\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = indentation\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(indentation, do_unlink=True)\n\n# Step 5: Smooth the Apple\nbpy.ops.object.shade_smooth()\n\n# Define the color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red apple color\napple.data.materials.append(apple_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.131344440849357, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "6c539788-b09f-48c2-a8e5-d9ef77b87969", "name": "Electrical Outlet", "instruction": "Create a 3D model of an electrical outlet. The outlet should have two vertical slots and a round hole beneath them. The faceplate should be rectangular, and the outlet should have a small screw in the center at the top and bottom for securing the faceplate.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\ngray_material = bpy.data.materials.new(name=\"Gray\")\ngray_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Faceplate\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nfaceplate = bpy.context.object\nfaceplate.scale = (1, 0.1, 1.5)\nfaceplate.name = \"Faceplate\"\nfaceplate.data.materials.append(white_material)\n\n# Step 3: Create the Vertical Slots\nfor i in range(2):\n    x = (i * 0.4) - 0.2\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.15, 0.3))\n    slot = bpy.context.object\n    slot.scale = (0.05, 0.05, 0.3)\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(gray_material)\n\n# Step 4: Create the Round Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0.15, -0.5))\nround_hole = bpy.context.object\nround_hole.name = \"Round Hole\"\nround_hole.data.materials.append(gray_material)\n\n# Step 5: Create the Screws\nfor i in range(2):\n    z = (i * 1.4) - 0.7\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0.15, z))\n    screw = bpy.context.object\n    screw.name = f\"Screw {i + 1}\"\n    screw.data.materials.append(gray_material)", "color_brightness": "Bright", "verify": "human", "entropy": 3.571211507920908, "unit_n": 6, "param_ratio": 4.666666666666667}
{"id": "0e9c5853-e0f2-479a-974a-b895973ffc04", "name": "Bookshelf", "instruction": "Create a 3D model of a bookshelf with five shelves. Compare it to a single-shelf unit.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the bookshelf\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Function to create a shelf\ndef create_shelf(location, name):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=location)\n    shelf = bpy.context.object\n    shelf.name = name\n    shelf.scale[2] = 0.1  # Make it thin like a shelf\n    shelf.data.materials.append(wood_color)\n    return shelf\n\n# Function to create bookshelf frame\ndef create_frame(location, name, height):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=location)\n    frame = bpy.context.object\n    frame.name = name\n    frame.scale[0] = 0.1  # Make it thin like a frame\n    frame.scale[2] = height  # Adjust height\n    frame.data.materials.append(wood_color)\n    return frame\n\n# Step 2: Create the Bookshelf with Five Shelves\nshelf_height = 1.0\nfor i in range(5):\n    create_shelf((0, 0, i * shelf_height), f\"Shelf {i + 1}\")\n\n# Create the side frames for the bookshelf\ncreate_frame((-1, 0, 2), \"Left Frame\", 5)\ncreate_frame((1, 0, 2), \"Right Frame\", 5)\n\n# Step 3: Create a Single-Shelf Unit for Comparison\ncreate_shelf((4, 0, 0), \"Single Shelf\")\ncreate_frame((3, 0, 0), \"Left Frame Single\", 1)\ncreate_frame((5, 0, 0), \"Right Frame Single\", 1)", "color_brightness": "Dark", "verify": "human", "entropy": 3.9183997637158017, "unit_n": 2, "param_ratio": 3.5}
{"id": "08965d92-2a25-4712-b5fa-28def59ec91e", "name": "Apple", "instruction": "Can you create a 3D model of an apple? Just a simple round shape with a small stem on top.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.0, 0.0, 1)  # Red color\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.0, 1)  # Brown color\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_body.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "007c2609-2dcb-4576-9268-41056202bb73", "name": "Pencil", "instruction": "Create a 3D model of a pencil with a hexagonal body, an eraser at one end, and a sharpened graphite tip.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Wood color\ngraphite_color = bpy.data.materials.new(name=\"Graphite\")\ngraphite_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Graphite color\neraser_color = bpy.data.materials.new(name=\"Eraser\")\neraser_color.diffuse_color = (1, 0.6, 0.6, 1)  # Eraser color\n\n# Step 2: Create the Hexagonal Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Pencil Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Graphite Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.05, radius2=0, depth=0.2, location=(0, 0, 2.1))\ntip = bpy.context.object\ntip.name = \"Graphite Tip\"\ntip.data.materials.append(graphite_color)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=0.2, location=(0, 0, 0.1))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(eraser_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.894811243621693, "unit_n": 3, "param_ratio": 11.333333333333334}
{"id": "c99fa98f-21c6-4639-a7c1-51451f4a4a0d", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker with a switch on the front.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbreaker_body_color = bpy.data.materials.new(name=\"BreakerBodyColor\")\nbreaker_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Breaker Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbreaker_body = bpy.context.object\nbreaker_body.name = \"BreakerBody\"\nbreaker_body.data.materials.append(breaker_body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 1.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "6a34d437-f205-48e0-8871-c42810cbac86", "name": "Puzzle Cube", "instruction": "Design a 3D model of a puzzle cube. The cube should be composed of smaller, movable cubes that can rotate around the central axis. Each face of the cube should be divided into a 3x3 grid with different colors.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 1, 1)   # White\n]\n\n# Create materials for each color\nmaterials = []\nfor i, color in enumerate(colors):\n    mat = bpy.data.materials.new(name=f\"Color {i}\")\n    mat.diffuse_color = color\n    materials.append(mat)\n\n# Step 2: Create the smaller cubes\ncube_size = 0.9\nspacing = 1.0\n\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(x * spacing, y * spacing, z * spacing))\n            small_cube = bpy.context.object\n            small_cube.name = f\"Cube_{x}_{y}_{z}\"\n            \n            # Assign colors to each face\n            for i in range(6):\n                face = small_cube.data.polygons[i]\n                face.material_index = i % len(materials)\n                if len(small_cube.data.materials) < len(materials):\n                    small_cube.data.materials.append(materials[i % len(materials)])\n\n# Step 3: Group the smaller cubes into a single object for easier manipulation\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.join()\n\n# Step 4: Set the origin to the center of the puzzle cube\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.14814814814814814}
{"id": "fd6df21f-2892-4255-bc6f-47a03654111e", "name": "Circuit Breaker Box", "instruction": "Create a rectangular box with a hinged door on the front. The door should have a small handle and a transparent window to view the breakers inside. Inside, include rows of breaker switches arranged in a grid.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nglass = bpy.data.materials.new(name=\"Glass\")\nglass.diffuse_color = (0.8, 0.9, 1, 0.3)  # Transparent glass color\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark plastic color\n\n# Step 2: Create the Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbox = bpy.context.object\nbox.name = \"Box\"\nbox.scale = (1, 0.5, 1.5)\nbox.data.materials.append(metal)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.51, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (0.95, 0.05, 1.45)\ndoor.data.materials.append(metal)\n\n# Step 4: Create the Window\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.56, 1))\nwindow = bpy.context.object\nwindow.name = \"Window\"\nwindow.scale = (0.8, 0.01, 1)\nwindow.data.materials.append(glass)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0.61, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (1.5708, 0, 0)\nhandle.data.materials.append(metal)\n\n# Step 6: Create the Breaker Switches\nrows = 3\ncols = 4\nfor i in range(rows):\n    for j in range(cols):\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.6 + j * 0.4, -0.2, 0.5 + i * 0.5))\n        breaker = bpy.context.object\n        breaker.name = f\"Breaker_{i}_{j}\"\n        breaker.data.materials.append(plastic)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.309468483264103, "unit_n": 5, "param_ratio": 7.2}
{"id": "65b1d4d0-1972-4048-965a-eabd62bf36c8", "name": "Apple", "instruction": "Design an apple with a round shape and a small stem on top. The apple should be red.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 7.0}
{"id": "fb369284-0ff5-46b5-bfba-6bac0ef75b94", "name": "Chocolate Cake", "instruction": "Imagine a chocolate cake that makes you feel at home.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.12, 0.05, 1)  # Dark chocolate color\n\n# Step 2: Create the Cake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ncake_base = bpy.context.object\ncake_base.name = \"Cake Base\"\ncake_base.data.materials.append(chocolate)\n\n# Step 3: Create the Icing\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.55))\nicing = bpy.context.object\nicing.name = \"Icing\"\nicing.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 7.5}
{"id": "161cd8cc-600c-4ef1-b637-5f6d4220b6f3", "name": "Circuit Breaker", "instruction": "Model a compact rectangular box with a switch on the front.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbox = bpy.context.object\nbox.name = \"Box\"\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.1, 0))\nswitch = bpy.context.object\nswitch.name = \"Switch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 4.0}
{"id": "7e2180b5-5431-4324-b3f9-d51e8c600663", "name": "Acoustic Guitar", "instruction": "Could you create a 3D model of an acoustic guitar? Focus on the body shape, neck, and headstock. Make sure the strings are properly aligned.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_brown = bpy.data.materials.new(name=\"Wood Brown\")\nwood_brown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the guitar body\nmetal_gray = bpy.data.materials.new(name=\"Metal Gray\")\nmetal_gray.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the strings\n\n# Step 2: Create the Guitar Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Guitar Body\"\nbody.scale[0] = 1.5  # Scale to make it more guitar-shaped\nbody.scale[1] = 1\nbody.scale[2] = 2\nbody.data.materials.append(wood_brown)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.75, 0))\nneck = bpy.context.object\nneck.name = \"Guitar Neck\"\nneck.scale[0] = 0.1\nneck.scale[1] = 2\nneck.scale[2] = 0.1\nneck.data.materials.append(wood_brown)\n\n# Step 4: Create the Headstock\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.5, 0))\nheadstock = bpy.context.object\nheadstock.name = \"Guitar Headstock\"\nheadstock.scale[0] = 0.4\nheadstock.scale[1] = 0.2\nheadstock.scale[2] = 0.1\nheadstock.data.materials.append(wood_brown)\n\n# Step 5: Create the Strings\nfor i in range(6):\n    x = -0.05 + i * 0.02\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=2, location=(x, 0.75, 0))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(metal_gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0428087285356984, "unit_n": 9, "param_ratio": 3.111111111111111}
{"id": "2505ca97-6d88-462f-b22c-a745e950b29e", "name": "Toy Car", "instruction": "Could you design a toy car? It should be a small, simple car with four wheels and a basic rectangular body. ", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncar_body_color = bpy.data.materials.new(name=\"Car Body Color\")\ncar_body_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Car Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncar_body = bpy.context.object\ncar_body.name = \"Car Body\"\ncar_body.scale = (1, 0.5, 0.3)\ncar_body.data.materials.append(car_body_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-0.7, 0.5, 0.3), (0.7, 0.5, 0.3), (-0.7, -0.5, 0.3), (0.7, -0.5, 0.3)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6805311863209917, "unit_n": 2, "param_ratio": 9.5}
{"id": "b556696a-6f14-49ed-9194-44d77eae6f93", "name": "Pencil", "instruction": "Create a pencil with a hexagonal body and a sharpened tip. Add an eraser at the opposite end.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Pink color\ngraphite = bpy.data.materials.new(name=\"Graphite\")\ngraphite.diffuse_color = (0.1, 0.1, 0.1, 1)  # Graphite color\n\n# Step 2: Create the Hexagonal Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.1, depth=5, location=(0, 0, 2.5))\nbody = bpy.context.object\nbody.name = \"Pencil Body\"\nbody.data.materials.append(yellow)\n\n# Step 3: Create the Sharpened Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.1, radius2=0, depth=0.3, location=(0, 0, 5.15))\ntip = bpy.context.object\ntip.name = \"Pencil Tip\"\ntip.data.materials.append(graphite)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.2, location=(0, 0, 0.1))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)\n\n# Step 5: Position the Eraser\neraser.location.z = -0.1\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9999236750832217, "unit_n": 3, "param_ratio": 11.0}
{"id": "959479ef-cbba-474e-9e24-1f9f9aedf63a", "name": "Soccer Ball", "instruction": "Design a 3D model of a soccer ball. It should be spherical, with a pattern of hexagons and pentagons.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\nimport bmesh\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Soccer Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsoccer_ball = bpy.context.object\nsoccer_ball.name = \"Soccer Ball\"\n\n# Step 3: Add the Pattern\n# Convert to mesh to access vertices and faces\nbpy.ops.object.mode_set(mode='EDIT')\nmesh = bmesh.from_edit_mesh(soccer_ball.data)\n\n# Select all faces\nfor face in mesh.faces:\n    face.select = True\n\n# Inset faces to create the pattern\nbpy.ops.mesh.inset(thickness=0.05)\n\n# Extrude faces slightly to give the pattern some depth\nbpy.ops.mesh.extrude_faces_move(TRANSFORM_OT_shrink_fatten={\"value\":-0.02})\n\n# Update the mesh\nbmesh.update_edit_mesh(soccer_ball.data)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Assign Materials\n# Create black and white materials\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Assign materials to faces\nfor face in soccer_ball.data.polygons:\n    if len(face.vertices) == 5:  # Pentagons\n        face.material_index = 0\n    else:  # Hexagons\n        face.material_index = 1\n\n# Add materials to the object\nsoccer_ball.data.materials.append(black_material)\nsoccer_ball.data.materials.append(white_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.5046462464635395, "unit_n": 1, "param_ratio": 14.0}
{"id": "30e07f21-11c5-4dbe-ae58-ba4b2abbeb4b", "name": "Cat Tree", "instruction": "Design a cat tree. It should have multiple levels, a few platforms, and a couple of scratching posts.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\ncarpet_color = bpy.data.materials.new(name=\"Carpet\")\ncarpet_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray carpet color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Scratching Posts\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(x, 0, 0.5))\n    post = bpy.context.object\n    post.name = f\"Scratching Post {i + 1}\"\n    post.data.materials.append(wood_color)\n\n# Step 4: Create the First Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 1.5))\nplatform1 = bpy.context.object\nplatform1.name = \"Platform 1\"\nplatform1.data.materials.append(carpet_color)\n\n# Step 5: Create the Second Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 3))\nplatform2 = bpy.context.object\nplatform2.name = \"Platform 2\"\nplatform2.data.materials.append(carpet_color)\n\n# Step 6: Create the Third Platform\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, 4.2))\nplatform3 = bpy.context.object\nplatform3.name = \"Platform 3\"\nplatform3.data.materials.append(carpet_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.3738300335485665, "unit_n": 6, "param_ratio": 5.166666666666667}
{"id": "1529964f-29c9-4043-8666-80e6ea2ffc27", "name": "Webcam", "instruction": "I need a 3D model of a webcam designed for high-resolution video streaming. It should include a wide-angle lens, a built-in microphone, and a mountable clip. The webcam should also have a small indicator light to show when it is active. Make sure it has a USB connector for easy plug-and-play functionality.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Webcam Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nwebcam_body = bpy.context.object\nwebcam_body.name = \"Webcam Body\"\nwebcam_body.scale = (1.5, 0.5, 0.5)\nwebcam_body.data.materials.append(black)\n\n# Step 3: Create the Wide-Angle Lens\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0.3, 0))\nlens = bpy.context.object\nlens.name = \"Wide-Angle Lens\"\nlens.data.materials.append(gray)\n\n# Step 4: Create the Built-in Microphone\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.5, 0, 0))\nmicrophone = bpy.context.object\nmicrophone.name = \"Microphone\"\nmicrophone.rotation_euler = (math.pi / 2, 0, 0)\nmicrophone.data.materials.append(gray)\n\n# Step 5: Create the Mountable Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.5, -0.3))\nclip = bpy.context.object\nclip.name = \"Mountable Clip\"\nclip.scale = (1, 0.2, 0.1)\nclip.data.materials.append(black)\n\n# Step 6: Create the Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.7, 0.3, 0.2))\nindicator_light = bpy.context.object\nindicator_light.name = \"Indicator Light\"\nindicator_light.data.materials.append(red)\n\n# Step 7: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.7, -0.3, 0))\nusb_connector = bpy.context.object\nusb_connector.name = \"USB Connector\"\nusb_connector.scale = (0.5, 0.2, 0.1)\nusb_connector.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.574876622776643, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "83d49d13-b170-433c-a39b-ed8dea37fee3", "name": "Coffee Grinder", "instruction": "Design a 3D model of a coffee grinder. The grinder should have a cylindrical body with a transparent container for the coffee beans on top. The container should have a lid. The body should house the grinding mechanism and feature a small spout at the bottom for dispensing the ground coffee. Include a simple control panel with buttons or a dial.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent material\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Grinder Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Transparent Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1, location=(0, 0, 2.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(transparent_material)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 3.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1, 0.5))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.scale[1] = 0.5\nspout.data.materials.append(body_color)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1, 0.5))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale[0] = 1.5\npanel.scale[2] = 0.2\npanel.data.materials.append(panel_color)\n\n# Step 7: Create Buttons on the Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(-0.2 + i * 0.2, -1.1, 0.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(lid_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.7004897111712713, "unit_n": 8, "param_ratio": 6.0}
{"id": "dae1ebb2-55ed-45e0-bd62-56feddf0e2b7", "name": "Chessboard", "instruction": "Create a chessboard with alternating black and white squares.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsize = 8  # 8x8 chessboard\nsquare_size = 1\n\nfor i in range(size):\n    for j in range(size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n            \n# Step 3: Adjust the position of the chessboard to center it\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "faad3d07-7712-4644-974e-c5735ed88458", "name": "Coaster", "instruction": "Design a coaster. It should be circular and flat.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"\n\n# Optionally, you can set a material color for the coaster\nmaterial = bpy.data.materials.new(name=\"CoasterMaterial\")\nmaterial.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncoaster.data.materials.append(material)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "db5b6c50-f518-40f0-8e92-04b6b862ef3b", "name": "Bedside Lamp", "instruction": "Let's create a 3D model of a bedside lamp. The lamp should have a cylindrical base and a conical shade. The base should be about 6 inches in diameter, and the shade should be 10 inches in diameter at the bottom and 6 inches at the top. The lamp should stand about 12 inches tall.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Lamp Base\"\n\n# Step 3: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.25, radius2=0.15, depth=0.4, location=(0, 0, 0.4))\nshade = bpy.context.object\nshade.name = \"Lamp Shade\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.54877837242464, "unit_n": 2, "param_ratio": 5.5}
{"id": "656f23f6-d31a-4a71-b73c-f7a3a78b7ed3", "name": "Screwdriver", "instruction": "Can you create a flat-head screwdriver with a 6-inch long handle?", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=6, location=(0, 0, 3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, -1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -3))\nbpy.ops.transform.resize(value=(0.5, 0.05, 0.1))\nflat_head = bpy.context.object\nflat_head.name = \"FlatHead\"\nflat_head.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.21411211487688, "unit_n": 3, "param_ratio": 8.0}
{"id": "0f17c17e-013e-41c1-ae4f-6d0aedab09ac", "name": "Solar Battery Charger", "instruction": "Can you create a 3D model of a solar battery charger? The design should incorporate a flat solar panel connected to a battery pack with multiple output ports. The charger should include an indicator for charge status and be of a size convenient for portability.", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Solar Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nsolar_panel = bpy.context.object\nsolar_panel.name = \"Solar Panel\"\nsolar_panel.data.materials.append(black)\n\n# Step 3: Create the Battery Pack\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1.25, 0.25))\nbattery_pack = bpy.context.object\nbattery_pack.name = \"Battery Pack\"\nbattery_pack.data.materials.append(gray)\n\n# Step 4: Create the Output Ports\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.2 * (i - 1), -1.5, 0.25))\n    port = bpy.context.object\n    port.name = f\"Output Port {i + 1}\"\n    port.data.materials.append(black)\n\n# Step 5: Create the Charge Status Indicator\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -1.25, 0.5))\nindicator = bpy.context.object\nindicator.name = \"Charge Status Indicator\"\nindicator.data.materials.append(green)", "color_brightness": "Dark", "verify": "human", "entropy": 3.154055833409221, "unit_n": 6, "param_ratio": 5.166666666666667}
{"id": "97749cba-091c-4a5c-a3f7-2ff24a96bb47", "name": "Apple", "instruction": "Model an apple. The apple should be round with a small stem at the top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "b0e6e54a-0e66-4bf5-b614-0600242533ed", "name": "Chess Set", "instruction": "Design a chess set. Include a square board with alternating light and dark squares. Add 16 pieces for each side: one king, one queen, two rooks, two knights, two bishops, and eight pawns.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Define piece colors\nwhite_piece = bpy.data.materials.new(name=\"White Piece\")\nwhite_piece.diffuse_color = (1, 1, 1, 1)  # White color\nblack_piece = bpy.data.materials.new(name=\"Black Piece\")\nblack_piece.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 3: Create a function to add pieces\ndef add_piece(piece_type, location, material):\n    if piece_type == \"pawn\":\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    elif piece_type == \"rook\":\n        bpy.ops.mesh.primitive_cube_add(size=0.4, location=location)\n    elif piece_type == \"knight\":\n        bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=location)\n    elif piece_type == \"bishop\":\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=location)\n    elif piece_type == \"queen\":\n        bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.1, location=location)\n    elif piece_type == \"king\":\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    piece = bpy.context.object\n    piece.data.materials.append(material)\n\n# Step 4: Place the pieces on the board\n# White pieces\nwhite_pieces = [\"rook\", \"knight\", \"bishop\", \"queen\", \"king\", \"bishop\", \"knight\", \"rook\"]\nfor i in range(board_size):\n    add_piece(white_pieces[i], (i * square_size, 0, 0.2), white_piece)\n    add_piece(\"pawn\", (i * square_size, square_size, 0.2), white_piece)\n\n# Black pieces\nblack_pieces = [\"rook\", \"knight\", \"bishop\", \"queen\", \"king\", \"bishop\", \"knight\", \"rook\"]\nfor i in range(board_size):\n    add_piece(black_pieces[i], (i * square_size, 7 * square_size, 0.2), black_piece)\n    add_piece(\"pawn\", (i * square_size, 6 * square_size, 0.2), black_piece)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.560899714490047, "unit_n": 7, "param_ratio": 4.571428571428571}
{"id": "e2d57599-f18d-4088-ba38-328f2372ac23", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker. It should be rectangular with a switch on one side.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Rectangular Body of the Circuit Breaker\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Circuit Breaker Body\"\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.25, 0))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\n\n# Step 4: Adjust the Switch Orientation and Position\nbpy.ops.transform.resize(value=(0.2, 0.5, 0.1))\nbpy.ops.transform.translate(value=(0, 0, 0.75))\nbpy.ops.object.transform_apply(location=True, rotation=True, scale=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 4.0}
{"id": "89d515a1-8ca7-4569-9b83-e64dd6511660", "name": "Screwdriver", "instruction": "Imagine a screwdriver that makes you feel confident. It has a long, straight handle with a firm grip. The shaft is slender and extends to a flat head. The handle is designed for easy turning.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\nflat_head = bpy.context.object\nflat_head.name = \"FlatHead\"\nflat_head.scale[1] = 0.02  # Make it flat\nflat_head.data.materials.append(shaft_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.270275129726422, "unit_n": 3, "param_ratio": 8.0}
{"id": "16306265-ccf5-4794-87cc-948703869872", "name": "Pizza vs. Burger", "instruction": "Compare the structural and visual elements of a pizza and a burger. Highlight the key differences in their shapes, layers, and overall appearance.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color for bread\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Yellow color for cheese\npatty_color = bpy.data.materials.new(name=\"Patty\")\npatty_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for patty\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(-2, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(bread_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(-2, 0, 0.06))\ntomato_sauce = bpy.context.object\ntomato_sauce.name = \"Tomato Sauce\"\ntomato_sauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(-2, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.2, location=(2, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bread_color)\n\n# Step 6: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.15, location=(2, 0, 0.2))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 7: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(2, 0, 0.325))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 8: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.2, location=(2, 0, 0.45))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.478472902569213, "unit_n": 7, "param_ratio": 8.571428571428571}
{"id": "06b17115-dc6c-4f1d-87c8-a0ce43e31592", "name": "Dog Collar", "instruction": "Create a dog collar with a simple buckle and a ring for attaching a leash.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(collar_color)\n\n# Step 4: Create the Ring for Leash\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.03, location=(1.2, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(collar_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.522362426133877, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "c292c391-5740-41e6-a5d9-4549e767c4d5", "name": "Winter Hat", "instruction": "Create a winter hat with a simple, snug fit.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Main Part of the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nhat_main = bpy.context.object\nhat_main.name = \"Hat Main\"\nhat_main.scale[2] = 0.7  # Flatten the sphere to make it hat-shaped\nhat_main.data.materials.append(hat_color)\n\n# Step 3: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 0.3))\nhat_brim = bpy.context.object\nhat_brim.name = \"Hat Brim\"\nhat_brim.data.materials.append(hat_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.585799898498702, "unit_n": 2, "param_ratio": 7.0}
{"id": "7a4922e7-84b0-4315-9624-c1478ec61eec", "name": "Pet Leash", "instruction": "Design a pet leash with a long strap and a loop handle on one end. Add a clip on the other end for attaching to a collar.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrap_color = bpy.data.materials.new(name=\"Strap Color\")\nstrap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=5, location=(0, 0, 0))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(strap_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(0, 0, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(strap_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -2.55))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.data.materials.append(clip_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.2, location=(0, 0, -2.65), rotation=(math.pi/2, 0, 0))\nclip_cylinder = bpy.context.object\nclip_cylinder.name = \"Clip Cylinder\"\nclip_cylinder.data.materials.append(clip_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0, -2.75))\nclip_end = bpy.context.object\nclip_end.name = \"Clip End\"\nclip_end.data.materials.append(clip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.161726415619124, "unit_n": 5, "param_ratio": 7.2}
{"id": "95d7c1f5-cb1d-4f6d-a958-d5730e8ee18c", "name": "Screwdriver", "instruction": "Could you create a 3D model of a screwdriver? The screwdriver should have a straight handle and a flat head. Imagine the satisfaction of tightening a screw with ease.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Grey color for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(0, 0, -0.25))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.25))\nhead = bpy.context.object\nhead.name = \"Flat Head\"\nhead.scale[2] = 0.1  # Flatten the cube to make it a flat head\nhead.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.270275129726422, "unit_n": 3, "param_ratio": 8.0}
{"id": "7a352eac-a823-41fe-b3da-76f00e4ef33a", "name": "Evening Gown", "instruction": "Create a 3D model of an evening gown. The gown should be floor-length with a fitted bodice and a flowing skirt. Add a sweetheart neckline and thin straps. The back should have a simple zip closure. Make sure the gown looks elegant and suitable for a formal occasion.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngown_color = bpy.data.materials.new(name=\"Gown Color\")\ngown_color.diffuse_color = (0.1, 0.1, 0.4, 1)  # Dark blue color\n\n# Step 2: Create the Skirt\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=1, radius2=0.2, depth=2, location=(0, 0, 1))\nskirt = bpy.context.object\nskirt.name = \"Skirt\"\nskirt.data.materials.append(gown_color)\n\n# Step 3: Create the Bodice\nbpy.ops.mesh.primitive_cylinder_add(vertices=64, radius=0.3, depth=1, location=(0, 0, 2.5))\nbodice = bpy.context.object\nbodice.name = \"Bodice\"\nbodice.data.materials.append(gown_color)\n\n# Step 4: Create the Sweetheart Neckline\nbpy.ops.mesh.primitive_uv_sphere_add(segments=64, ring_count=32, radius=0.3, location=(0, 0, 3))\nneckline = bpy.context.object\nneckline.name = \"Neckline\"\nneckline.scale[2] = 0.5\nneckline.data.materials.append(gown_color)\n\n# Step 5: Create the Straps\nfor i in range(2):\n    x = 0.15 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(x, 0, 3.5), rotation=(0, math.pi/4, 0))\n    strap = bpy.context.object\n    strap.name = f\"Strap {i + 1}\"\n    strap.data.materials.append(gown_color)\n\n# Step 6: Create the Zip Closure\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, -0.15, 2))\nzip_closure = bpy.context.object\nzip_closure.name = \"Zip Closure\"\nzip_closure.data.materials.append(gown_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.5317476283448634, "unit_n": 6, "param_ratio": 6.0}
{"id": "af38c947-385a-43c2-896a-4cee92fd19dd", "name": "Sandwich", "instruction": "Design a 3D model of a sandwich. How does it compare to a traditional club sandwich in terms of layers and ingredients? It should have two slices of bread with layers of filling in between. Include visible layers of meat, cheese, lettuce, and tomato.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.8, 0.5, 0.4, 1)  # Meat color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.1, 1)  # Cheese color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.05\nmeat.data.materials.append(meat_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 6: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "de02b1c6-aa2d-4acd-ad8f-f9784575f98f", "name": "Hat", "instruction": "Design a hat. It should have a wide brim and a rounded crown.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 4: Combine the Brim and Crown into one object\nbpy.ops.object.select_all(action='DESELECT')\nbrim.select_set(True)\ncrown.select_set(True)\nbpy.context.view_layer.objects.active = brim\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.933726087323573, "unit_n": 2, "param_ratio": 4.5}
{"id": "236e2f05-25c0-4aae-83ee-82b3218c6bfc", "name": "Hat", "instruction": "Can you create a 3D model of a hat for me? \n\nI want it to be a simple hat with a brim and a crown. \n\nInclude a band around the crown.\n\nThanks!", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.9))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.381975529465569, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "a7a721e4-bdfa-4a65-a9e6-ba13577bcd7e", "name": "Screwdriver", "instruction": "Model a simple screwdriver with a flat head.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for handle\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 0.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1, location=(0, 0, -0.25))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -0.75))\nhead = bpy.context.object\nhead.name = \"Flat Head\"\nhead.scale[2] = 0.02  # Make the head flat\nhead.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.270275129726422, "unit_n": 3, "param_ratio": 8.0}
{"id": "d268f1e7-b85c-46a4-94f4-fab1822e1be1", "name": "Sandwich", "instruction": "Design a sandwich. Compare a club sandwich and a BLT sandwich. The club sandwich should have multiple layers with slices of bread, while the BLT should have bacon, lettuce, and tomato between two slices of bread.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nbacon_color = bpy.data.materials.new(name=\"Bacon\")\nbacon_color.diffuse_color = (0.76, 0.23, 0.13, 1)  # Red-brown color for bacon\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.87, 0.19, 0.19, 1)  # Red color for tomato\n\n# Step 2: Create Club Sandwich\n# Bread layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 2, i * 0.4))\n    bread = bpy.context.object\n    bread.name = f\"Club Bread {i + 1}\"\n    bread.scale[2] = 0.1\n    bread.data.materials.append(bread_color)\n\n# Filling layers\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 2, i * 0.4 + 0.2))\n    filling = bpy.context.object\n    filling.name = f\"Club Filling {i + 1}\"\n    filling.scale[2] = 0.1\n    filling.data.materials.append(lettuce_color if i % 2 == 0 else tomato_color)\n\n# Step 3: Create BLT Sandwich\n# Bottom bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0))\nblt_bread_bottom = bpy.context.object\nblt_bread_bottom.name = \"BLT Bread Bottom\"\nblt_bread_bottom.scale[2] = 0.1\nblt_bread_bottom.data.materials.append(bread_color)\n\n# Bacon layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.2))\nbacon = bpy.context.object\nbacon.name = \"BLT Bacon\"\nbacon.scale[2] = 0.1\nbacon.data.materials.append(bacon_color)\n\n# Lettuce layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.4))\nlettuce = bpy.context.object\nlettuce.name = \"BLT Lettuce\"\nlettuce.scale[2] = 0.1\nlettuce.data.materials.append(lettuce_color)\n\n# Tomato layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.6))\ntomato = bpy.context.object\ntomato.name = \"BLT Tomato\"\ntomato.scale[2] = 0.1\ntomato.data.materials.append(tomato_color)\n\n# Top bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.8))\nblt_bread_top = bpy.context.object\nblt_bread_top.name = \"BLT Bread Top\"\nblt_bread_top.scale[2] = 0.1\nblt_bread_top.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8275088902259253, "unit_n": 10, "param_ratio": 4.8}
{"id": "374bf220-328d-4b88-9194-4eb83eaab835", "name": "Puzzle Cube", "instruction": "Please design a puzzle cube. It should consist of smaller cubes that can be rotated around a central axis.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the smaller cubes\ncube_size = 0.9\noffset = 1.0\n\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(x * offset, y * offset, z * offset))\n            cube = bpy.context.object\n            cube.name = f\"Cube_{x}_{y}_{z}\"\n\n# Step 3: Add a central empty for rotation\nbpy.ops.object.empty_add(type='PLAIN_AXES', location=(offset, offset, offset))\ncentral_empty = bpy.context.object\ncentral_empty.name = \"Central_Empty\"\n\n# Step 4: Parent all small cubes to the central empty\nfor obj in bpy.context.scene.objects:\n    if \"Cube\" in obj.name:\n        obj.parent = central_empty", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 28, "param_ratio": 0.25}
{"id": "e7b8fa5c-f796-4762-9235-d0978bb56e7b", "name": "Garden Fountain", "instruction": "Let's create a garden fountain. Start with a circular base, about 3 feet in diameter. Add a central column that rises to about 4 feet, with water spouts at various heights. The water should cascade down into the base, creating a soothing sound. Surround the base with decorative stones and small plants. The fountain should be an elegant centerpiece for any garden.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstone_color = bpy.data.materials.new(name=\"Stone\")\nstone_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for stones\nwater_color = bpy.data.materials.new(name=\"Water\")\nwater_color.diffuse_color = (0.2, 0.4, 0.8, 0.5)  # Light blue color for water\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(stone_color)\n\n# Step 3: Create the Central Column\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=4, location=(0, 0, 2.1))\ncolumn = bpy.context.object\ncolumn.name = \"Column\"\ncolumn.data.materials.append(stone_color)\n\n# Step 4: Create Water Spouts\nspout_height = [1, 2, 3]  # Heights at which spouts will be placed\nfor height in spout_height:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.3, height))\n    spout = bpy.context.object\n    spout.name = f\"Spout {height}\"\n    spout.data.materials.append(water_color)\n\n# Step 5: Create Decorative Stones\nfor i in range(12):\n    angle = math.radians(i * 30)\n    x = 1.7 * math.cos(angle)\n    y = 1.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.1))\n    stone = bpy.context.object\n    stone.name = f\"Stone {i + 1}\"\n    stone.data.materials.append(stone_color)\n\n# Step 6: Create Small Plants\nfor i in range(6):\n    angle = math.radians(i * 60)\n    x = 1.9 * math.cos(angle)\n    y = 1.9 * math.sin(angle)\n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(x, y, 0.15))\n    plant = bpy.context.object\n    plant.name = f\"Plant {i + 1}\"\n    plant.data.materials.append(stone_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.503573274570555, "unit_n": 21, "param_ratio": 1.5714285714285714}
{"id": "8e675876-1297-466b-8cb6-b1989d2b61c0", "name": "Circuit Breaker Switch", "instruction": "Describe the feel of a circuit breaker switch.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(gray)\n\n# Step 4: Rotate the Switch to an Angled Position\nswitch.rotation_euler = (0.5, 0, 0)  # Rotate around the X-axis\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "38f614c3-4282-49bb-ae7f-0886de625253", "name": "Stethoscope", "instruction": "Create a 3D model of a stethoscope. It should have a Y-shaped tubing connected to a chest piece with a diaphragm on one end and earpieces on the other. Show the flexibility of the tubing and the placement of the earpieces.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntubing_color = bpy.data.materials.new(name=\"Tubing Color\")\ntubing_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Chest Piece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, 0))\nchest_piece = bpy.context.object\nchest_piece.name = \"Chest Piece\"\nchest_piece.data.materials.append(metal_color)\n\n# Step 3: Create the Diaphragm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=0.01, location=(0, 0, 0.01))\ndiaphragm = bpy.context.object\ndiaphragm.name = \"Diaphragm\"\ndiaphragm.data.materials.append(tubing_color)\n\n# Step 4: Create the Tubing\nbpy.ops.curve.primitive_bezier_curve_add(location=(0, 0, 0))\ntubing = bpy.context.object\ntubing.name = \"Tubing\"\ntubing.data.bevel_depth = 0.02\ntubing.data.bevel_resolution = 4\ntubing.data.materials.append(tubing_color)\n\n# Adjust the curve to form a Y shape\ntubing.data.splines[0].bezier_points[0].co = (0, 0, 0.01)\ntubing.data.splines[0].bezier_points[0].handle_left = (0, -0.1, 0.01)\ntubing.data.splines[0].bezier_points[0].handle_right = (0, 0.1, 0.01)\ntubing.data.splines[0].bezier_points[1].co = (0, 0.5, 0.5)\ntubing.data.splines[0].bezier_points[1].handle_left = (0, 0.4, 0.4)\ntubing.data.splines[0].bezier_points[1].handle_right = (0, 0.6, 0.6)\n\n# Add second part of the Y shape\nbpy.ops.curve.primitive_bezier_curve_add(location=(0, 0, 0))\ntubing2 = bpy.context.object\ntubing2.name = \"Tubing2\"\ntubing2.data.bevel_depth = 0.02\ntubing2.data.bevel_resolution = 4\ntubing2.data.materials.append(tubing_color)\n\ntubing2.data.splines[0].bezier_points[0].co = (0, 0.5, 0.5)\ntubing2.data.splines[0].bezier_points[0].handle_left = (0, 0.4, 0.4)\ntubing2.data.splines[0].bezier_points[0].handle_right = (0, 0.6, 0.6)\ntubing2.data.splines[0].bezier_points[1].co = (-0.3, 1, 1)\ntubing2.data.splines[0].bezier_points[1].handle_left = (-0.2, 0.9, 0.9)\ntubing2.data.splines[0].bezier_points[1].handle_right = (-0.4, 1.1, 1.1)\n\n# Add third part of the Y shape\nbpy.ops.curve.primitive_bezier_curve_add(location=(0, 0, 0))\ntubing3 = bpy.context.object\ntubing3.name = \"Tubing3\"\ntubing3.data.bevel_depth = 0.02\ntubing3.data.bevel_resolution = 4\ntubing3.data.materials.append(tubing_color)\n\ntubing3.data.splines[0].bezier_points[0].co = (0, 0.5, 0.5)\ntubing3.data.splines[0].bezier_points[0].handle_left = (0, 0.4, 0.4)\ntubing3.data.splines[0].bezier_points[0].handle_right = (0, 0.6, 0.6)\ntubing3.data.splines[0].bezier_points[1].co = (0.3, 1, 1)\ntubing3.data.splines[0].bezier_points[1].handle_left = (0.2, 0.9, 0.9)\ntubing3.data.splines[0].bezier_points[1].handle_right = (0.4, 1.1, 1.1)\n\n# Step 5: Create the Earpieces\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, 1, 1.05))\n    earpiece = bpy.context.object\n    earpiece.name = f\"Earpiece {i + 1}\"\n    earpiece.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.075525055038092, "unit_n": 7, "param_ratio": 4.857142857142857}
{"id": "8d60ed12-fa25-4560-a0be-b2764b1f66bf", "name": "Food Processor", "instruction": "Construct a 3D model of a food processor. It should have a large, transparent mixing bowl with measurement markings, a set of interchangeable blades and discs, and a control panel with a few buttons. The base should be sturdy to support the weight of the bowl and ingredients.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.3)  # Transparent color\nbase_material = bpy.data.materials.new(name=\"BaseMaterial\")\nbase_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nblade_material = bpy.data.materials.new(name=\"BladeMaterial\")\nblade_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbutton_material = bpy.data.materials.new(name=\"ButtonMaterial\")\nbutton_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_material)\n\n# Step 3: Create the Mixing Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=1.5, location=(0, 0, 0.75))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(transparent_material)\n\n# Step 4: Create the Blades and Discs\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, 0.1))\nblade = bpy.context.object\nblade.name = \"Blade\"\nblade.data.materials.append(blade_material)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.02, location=(0, 0, 0.2))\ndisc = bpy.context.object\ndisc.name = \"Disc\"\ndisc.data.materials.append(blade_material)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.7, -0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(base_material)\n\n# Step 6: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.2 + i * 0.2, 1.7, -0.1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.382438818201906, "unit_n": 8, "param_ratio": 6.0}
{"id": "ab94381b-7e37-4223-9792-917ce206689e", "name": "Smartphone", "instruction": "Envision a smartphone with a large screen and minimal bezels.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbezel_color = bpy.data.materials.new(name=\"Bezel Color\")\nbezel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color for the bezels\n\n# Step 2: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.6, 1.2, 0.05)  # Large screen\nscreen.data.materials.append(screen_color)\n\n# Step 3: Create the Bezel (Frame)\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, -0.05))\nbezel = bpy.context.object\nbezel.name = \"Bezel\"\nbezel.scale = (0.65, 1.25, 0.1)  # Minimal bezels around the screen\nbezel.data.materials.append(bezel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "8d5b2dc7-4f37-446a-811a-e0386d09ba99", "name": "Transformer", "instruction": "Create a 3D model of a transformer with a boxy structure. It should have multiple connectors and a cooling system visible on one side.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_box = bpy.context.object\nmain_box.name = \"Main Box\"\nmain_box.data.materials.append(gray)\n\n# Step 3: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(-0.8 + i * 0.8, 1.1, 1.5))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(dark_gray)\n\n# Step 4: Create the Cooling System\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.3, 0, 1))\ncooling_system = bpy.context.object\ncooling_system.name = \"Cooling System\"\ncooling_system.data.materials.append(dark_gray)\n\n# Step 5: Add Cooling Fins\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(1.55, -0.2 + i * 0.1, 1))\n    fin = bpy.context.object\n    fin.name = f\"Cooling Fin {i + 1}\"\n    fin.data.materials.append(dark_gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.0287344216228616, "unit_n": 10, "param_ratio": 2.7}
{"id": "9a206029-08da-4c4b-a819-bc61701d642a", "name": "Laundry Basket", "instruction": "Create a simple laundry basket with handles on both sides.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Basket Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbasket_body = bpy.context.object\nbasket_body.name = \"Basket Body\"\nbasket_body.data.materials.append(basket_color)\n\n# Step 3: Create the Handles\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(x, 0, 1.25), major_radius=0.3, minor_radius=0.05, rotation=(1.5708, 0, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(basket_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.986562352392705, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "95c25c01-e990-41b0-810d-10ed12bfaa0a", "name": "Kitchen Sponge", "instruction": "Create a 3D model of a kitchen sponge. It should be rectangular and have a scrubber side.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsponge_color = bpy.data.materials.new(name=\"Sponge Color\")\nsponge_color.diffuse_color = (1, 0.85, 0.35, 1)  # Yellow sponge color\nscrubber_color = bpy.data.materials.new(name=\"Scrubber Color\")\nscrubber_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark scrubber color\n\n# Step 2: Create the Sponge Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsponge = bpy.context.object\nsponge.name = \"Sponge\"\nsponge.scale = (1, 0.5, 0.2)\nsponge.data.materials.append(sponge_color)\n\n# Step 3: Create the Scrubber Side\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\nscrubber = bpy.context.object\nscrubber.name = \"Scrubber\"\nscrubber.scale = (1, 0.5, 0.05)\nscrubber.data.materials.append(scrubber_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "3a4801b1-9e8d-4305-9e47-426767760875", "name": "Blender", "instruction": "Could you create a 3D model of a blender? It should have a base with buttons, a tall container with measurements marked on it, and a lid.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray with some transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.4 * (i - 1), 0.9, 0.1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.65, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Add Measurement Marks (simplified as small cubes)\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.65, 0, 0.5 + i * 0.4))\n    mark = bpy.context.object\n    mark.name = f\"Mark {i + 1}\"\n    mark.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.770836094572395, "unit_n": 11, "param_ratio": 3.909090909090909}
{"id": "fbd2350c-3efb-4efc-9add-6871981d0f40", "name": "Tablet", "instruction": "Design a tablet with a large screen, thin bezels, and a single physical button at the bottom.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbezel_color = bpy.data.materials.new(name=\"Bezel Color\")\nbezel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray for the bezels\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter dark gray for the button\n\n# Step 2: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (1.5, 0.01, 2)  # Large flat screen\nscreen.data.materials.append(screen_color)\n\n# Step 3: Create the Bezels (frame around the screen)\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, 0))\nbezel = bpy.context.object\nbezel.name = \"Bezel\"\nbezel.scale = (1.55, 0.02, 2.05)  # Slightly larger than the screen to act as a thin bezel\nbezel.data.materials.append(bezel_color)\n\n# Step 4: Create the Physical Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0.02, -1.9))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.316143456645735, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "e68c4fd6-dec0-44b3-bd3f-a4db4a1e51bc", "name": "Bird Cage", "instruction": "Please generate a 3D model of a bird cage. The cage should be cylindrical with vertical bars and a small door. Inside, include a perch and a water dish.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cage Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Cage Base\"\n\n# Step 3: Create the Cage Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 2))\ntop = bpy.context.object\ntop.name = \"Cage Top\"\n\n# Step 4: Create the Cage Bars\nnum_bars = 20\nfor i in range(num_bars):\n    angle = (2 * 3.14159 / num_bars) * i\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(x, y, 1))\n    bar = bpy.context.object\n    bar.name = f\"Cage Bar {i + 1}\"\n\n# Step 5: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Cage Door\"\n\n# Step 6: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.8), rotation=(0, 1.5708, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 7: Create the Water Dish\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0.5, 0, 0.1))\nwater_dish = bpy.context.object\nwater_dish.name = \"Water Dish\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.276051183606162, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "a5c587d6-ef0b-415c-9146-976f92a517c5", "name": "Travel Backpack", "instruction": "Let's design a travel backpack. The main compartment should be spacious, with a front pocket for smaller items. There should be two adjustable shoulder straps and a handle on top. The backpack should also have side pockets for water bottles and a padded back panel for comfort. Include a zipper closure for the main compartment and additional pockets.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"BackpackColor\")\nbackpack_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.6, 0.3, 1)\nmain_compartment.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.5, 0.05, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.35, 1))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n    strap.scale = (0.05, 0.05, 1.2)\n    strap.data.materials.append(backpack_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, -0.35, 2.1), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(backpack_color)\n\n# Step 6: Create the Side Pockets\nfor i in range(2):\n    x = 0.65 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    side_pocket = bpy.context.object\n    side_pocket.name = f\"Side Pocket {i + 1}\"\n    side_pocket.scale = (0.05, 0.2, 0.3)\n    side_pocket.data.materials.append(backpack_color)\n\n# Step 7: Create the Padded Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.35, 1))\nback_panel = bpy.context.object\nback_panel.name = \"Back Panel\"\nback_panel.scale = (0.6, 0.05, 1)\nback_panel.data.materials.append(backpack_color)\n\n# Step 8: Create the Zipper Closure\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, 1.9))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.55, 0.02, 0.05)\nzipper.data.materials.append(backpack_color)\n\n# Additional Pockets (Optional, not specified in the instruction)\n# bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.35, 0.2))\n# additional_pocket = bpy.context.object\n# additional_pocket.name = \"Additional Pocket\"\n# additional_pocket.scale = (0.4, 0.05, 0.2)\n# additional_pocket.data.materials.append(backpack_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.75623721774714, "unit_n": 9, "param_ratio": 4.111111111111111}
{"id": "e0004ad1-2917-41d1-af54-d0332d180c83", "name": "Travel Wallet", "instruction": "Design a travel wallet. It should have compartments for passports, boarding passes, and a section for credit cards. Ensure there's a secure closure mechanism.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wallet Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_base = bpy.context.object\nwallet_base.name = \"WalletBase\"\nwallet_base.scale = (1.5, 0.1, 1)\nwallet_base.data.materials.append(wallet_color)\n\n# Step 3: Create the Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.15, 0.5))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"PassportCompartment\"\npassport_compartment.scale = (0.6, 0.02, 0.8)\npassport_compartment.data.materials.append(wallet_color)\n\n# Step 4: Create the Boarding Pass Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 0.15, 0.5))\nboarding_pass_compartment = bpy.context.object\nboarding_pass_compartment.name = \"BoardingPassCompartment\"\nboarding_pass_compartment.scale = (0.6, 0.02, 0.8)\nboarding_pass_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create the Credit Card Section\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, -0.5))\ncredit_card_section = bpy.context.object\ncredit_card_section.name = \"CreditCardSection\"\ncredit_card_section.scale = (1.2, 0.02, 0.4)\ncredit_card_section.data.materials.append(wallet_color)\n\n# Step 6: Create the Closure Mechanism\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.2, 0))\nclosure_mechanism = bpy.context.object\nclosure_mechanism.name = \"ClosureMechanism\"\nclosure_mechanism.scale = (1.5, 0.02, 1.1)\nclosure_mechanism.data.materials.append(wallet_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.2729911457779703, "unit_n": 5, "param_ratio": 5.0}
{"id": "ff70052a-2265-40eb-a9e7-37ac380e5ca4", "name": "Electric Blender", "instruction": "Let's create an electric blender. It should have a tall, cylindrical container with measurement markings and a detachable lid. The base should house a simple control panel with buttons for various speeds and settings.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=3, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 3.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(container_color)\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=1, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.2, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[2] = 0.2\ncontrol_panel.data.materials.append(base_color)\n\n# Step 6: Create the Buttons\nbutton_positions = [(-0.2, 1.2, 0.6), (0, 1.2, 0.6), (0.2, 1.2, 0.6)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.6532937780213555, "unit_n": 5, "param_ratio": 7.0}
{"id": "a461119a-606a-49e2-9ca4-39996cb0e336", "name": "Dog Leash", "instruction": "Design a 3D model of a dog leash. The handle should be a loop large enough to comfortably hold. The main part of the leash should be a straight, thin strip. Include a clasp at the end for attaching to a dog collar.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Handle (Loop)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.02, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 3: Create the Main Part of the Leash (Thin Strip)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=2, location=(0, 0, -1.1))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 4: Create the Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0, -2.15))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp.data.materials.append(leash_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.880691722586215, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "9aa0d37b-1b82-444e-a3b5-632b62b95662", "name": "Electrical Transformer", "instruction": "Create a 3D model of an electrical transformer with a cylindrical core and two sets of coils wrapped around it.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncoil_color = bpy.data.materials.new(name=\"Coil Color\")\ncoil_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Coils\n# First set of coils\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0.3))\ncoil1 = bpy.context.object\ncoil1.name = \"Coil 1\"\ncoil1.data.materials.append(coil_color)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, -0.3))\ncoil2 = bpy.context.object\ncoil2.name = \"Coil 2\"\ncoil2.data.materials.append(coil_color)\n\n# Second set of coils\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, 0.5))\ncoil3 = bpy.context.object\ncoil3.name = \"Coil 3\"\ncoil3.data.materials.append(coil_color)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, -0.5))\ncoil4 = bpy.context.object\ncoil4.name = \"Coil 4\"\ncoil4.data.materials.append(coil_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.507529852950135, "unit_n": 5, "param_ratio": 7.0}
{"id": "874caed3-06ef-4ecb-9b18-693621519e1e", "name": "Dog Bed", "instruction": "Design a dog bed for me. It should have a rectangular base with raised edges on all sides. The base should be thick and cushioned for comfort. The edges should be slightly lower on one side to allow easy access for the dog.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale[2] = 0.25  # Make the base thick\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge (lowered for easy access)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 0.75))\nfront_edge = bpy.context.object\nfront_edge.scale[2] = 0.1\nfront_edge.scale[1] = 0.1\nfront_edge.name = \"Front Edge\"\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1, 0.75))\nback_edge = bpy.context.object\nback_edge.scale[2] = 0.25\nback_edge.scale[1] = 0.1\nback_edge.name = \"Back Edge\"\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1, 0, 0.75))\nleft_edge = bpy.context.object\nleft_edge.scale[2] = 0.25\nleft_edge.scale[0] = 0.1\nleft_edge.name = \"Left Edge\"\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1, 0, 0.75))\nright_edge = bpy.context.object\nright_edge.scale[2] = 0.25\nright_edge.scale[0] = 0.1\nright_edge.name = \"Right Edge\"\nright_edge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.976334281479486, "unit_n": 5, "param_ratio": 5.0}
{"id": "3357bcea-df78-4e21-af2a-b57da7886b2b", "name": "Sandwich", "instruction": "Design a 3D model of a sandwich. Start with two slices of bread. Add layers of lettuce, tomato, cheese, and deli meat between the slices.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Lettuce color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Tomato color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.35, 1)  # Cheese color\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.72, 0.45, 0.20, 1)  # Deli meat color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.05\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "92dfd182-1662-41bf-a46d-29c903ca536e", "name": "Fruit Basket", "instruction": "Could you create a fruit basket filled with various fruits like apples, bananas, and grapes?", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for apples\nbanana_yellow = bpy.data.materials.new(name=\"Banana Yellow\")\nbanana_yellow.diffuse_color = (1.0, 1.0, 0.2, 1)  # Yellow color for bananas\ngrape_purple = bpy.data.materials.new(name=\"Grape Purple\")\ngrape_purple.diffuse_color = (0.5, 0.0, 0.5, 1)  # Purple color for grapes\nbasket_brown = bpy.data.materials.new(name=\"Basket Brown\")\nbasket_brown.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color for the basket\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, -0.25))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_brown)\n\n# Step 3: Create Apples\nfor i in range(3):\n    x = 0.5 * math.cos(i * 2 * math.pi / 3)\n    y = 0.5 * math.sin(i * 2 * math.pi / 3)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0))\n    apple = bpy.context.object\n    apple.name = f\"Apple {i + 1}\"\n    apple.data.materials.append(apple_red)\n\n# Step 4: Create Bananas\nfor i in range(2):\n    x = 0.7 * math.cos(i * math.pi)\n    y = 0.7 * math.sin(i * math.pi)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(x, y, 0.1), rotation=(0, math.pi/4, 0))\n    banana = bpy.context.object\n    banana.name = f\"Banana {i + 1}\"\n    banana.data.materials.append(banana_yellow)\n\n# Step 5: Create Grapes\nfor i in range(5):\n    x = 0.3 * math.cos(i * 2 * math.pi / 5)\n    y = 0.3 * math.sin(i * 2 * math.pi / 5)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.2))\n    grape = bpy.context.object\n    grape.name = f\"Grape {i + 1}\"\n    grape.data.materials.append(grape_purple)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.238800984006577, "unit_n": 11, "param_ratio": 3.727272727272727}
{"id": "582b8905-1b3d-42db-a580-024505dcc666", "name": "Circuit Breaker", "instruction": "Hi, can you create a 3D model of a circuit breaker for me? It should be rectangular and compact, with a switch on the front. Thanks!", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 1, 1.5)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.1, 0.5)\nswitch.data.materials.append(dark_gray)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "4e7479a0-c362-4c79-ac93-639d987b576e", "name": "Piano Keyboard", "instruction": "Design a piano keyboard with 88 keys. Ensure the keys are appropriately sized for comfortable playing.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_key_color = bpy.data.materials.new(name=\"White Key\")\nwhite_key_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_key_color = bpy.data.materials.new(name=\"Black Key\")\nblack_key_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Key dimensions\nwhite_key_width = 0.2\nwhite_key_height = 1\nwhite_key_depth = 0.5\nblack_key_width = 0.1\nblack_key_height = 0.6\nblack_key_depth = 0.3\n\n# Positioning variables\nx_position = 0\n\n# Step 2: Create the Keys\nfor i in range(88):\n    # Create white key\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x_position, 0, 0))\n    white_key = bpy.context.object\n    white_key.scale = (white_key_width, white_key_depth, white_key_height)\n    white_key.data.materials.append(white_key_color)\n    \n    # Create black keys for all but the last white key\n    if i % 7 in [0, 1, 3, 4, 5] and i < 87:\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x_position + white_key_width / 2 + black_key_width / 2, 0, black_key_height / 2))\n        black_key = bpy.context.object\n        black_key.scale = (black_key_width, black_key_depth, black_key_height)\n        black_key.data.materials.append(black_key_color)\n    \n    # Move to the next key position\n    x_position += white_key_width\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.382453486894575, "unit_n": 176, "param_ratio": 0.10227272727272728}
{"id": "754f409c-8193-4674-b65e-16cb8c7b3525", "name": "Pizza vs. Burger", "instruction": "Compare the 3D models of a pizza and a burger. The pizza should be a flat, circular shape with visible toppings, while the burger should have a layered structure with a bun, patty, and other ingredients.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\n# Function to create a pizza\ndef create_pizza():\n    # Create pizza base\n    bpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\n    pizza_base = bpy.context.object\n    pizza_base.name = \"Pizza Base\"\n    pizza_base_material = bpy.data.materials.new(name=\"Pizza Base Material\")\n    pizza_base_material.diffuse_color = (1, 0.8, 0.6, 1)  # Light brown color\n    pizza_base.data.materials.append(pizza_base_material)\n    \n    # Create pizza toppings\n    topping_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5)]\n    for i, pos in enumerate(topping_positions):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(pos[0], pos[1], 0.15))\n        topping = bpy.context.object\n        topping.name = f\"Topping {i + 1}\"\n        topping_material = bpy.data.materials.new(name=f\"Topping Material {i + 1}\")\n        topping_material.diffuse_color = (1, 0, 0, 1)  # Red color for toppings\n        topping.data.materials.append(topping_material)\n\n# Function to create a burger\ndef create_burger():\n    # Create bottom bun\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(3, 0, 0.15))\n    bottom_bun = bpy.context.object\n    bottom_bun.name = \"Bottom Bun\"\n    bottom_bun_material = bpy.data.materials.new(name=\"Bottom Bun Material\")\n    bottom_bun_material.diffuse_color = (0.9, 0.6, 0.3, 1)  # Light brown color\n    bottom_bun.data.materials.append(bottom_bun_material)\n    \n    # Create patty\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(3, 0, 0.45))\n    patty = bpy.context.object\n    patty.name = \"Patty\"\n    patty_material = bpy.data.materials.new(name=\"Patty Material\")\n    patty_material.diffuse_color = (0.4, 0.2, 0, 1)  # Dark brown color\n    patty.data.materials.append(patty_material)\n    \n    # Create top bun\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(3, 0, 0.75))\n    top_bun = bpy.context.object\n    top_bun.name = \"Top Bun\"\n    top_bun_material = bpy.data.materials.new(name=\"Top Bun Material\")\n    top_bun_material.diffuse_color = (0.9, 0.6, 0.3, 1)  # Light brown color\n    top_bun.data.materials.append(top_bun_material)\n\n# Clear the scene\nclear_scene()\n\n# Create pizza and burger\ncreate_pizza()\ncreate_burger()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.104354538686384, "unit_n": 5, "param_ratio": 9.8}
{"id": "65edd29f-6563-44b7-a4e0-4b8ca082b824", "name": "Smartphone", "instruction": "What are the key features of a modern smartphone? Include aspects like the screen, camera, and any notable functionalities.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.3, 0.6, 0.02)  # Smartphone dimensions\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.28, 0.58, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0.55, 0.03))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.827071527533953, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "7365346e-0ca0-4e5f-a11f-0b9d557475b1", "name": "Geometric Logo", "instruction": "Develop a logo featuring intersecting geometric shapes.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the First Shape (Cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"Cube\"\n\n# Step 3: Create the Second Shape (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(0.5, 0.5, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\n\n# Step 4: Create the Third Shape (Cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.5, location=(-0.5, -0.5, 0))\ncylinder = bpy.context.object\ncylinder.name = \"Cylinder\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.044936791132214, "unit_n": 3, "param_ratio": 4.333333333333333}
{"id": "73c9ed59-052d-4ed4-ac44-9eb1f5bdbb63", "name": "External Hard Drive", "instruction": "Design an external hard drive with a rectangular shape, a USB port on one side, and a single LED indicator on the front.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Hard Drive Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nhard_drive = bpy.context.object\nhard_drive.name = \"Hard Drive\"\nhard_drive.scale = (1.5, 1, 0.2)\nhard_drive.data.materials.append(gray)\n\n# Step 3: Create the USB Port\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.6, 0, -0.15))\nusb_port = bpy.context.object\nusb_port.name = \"USB Port\"\nusb_port.scale = (0.5, 0.1, 0.05)\nusb_port.data.materials.append(gray)\n\n# Step 4: Create the LED Indicator\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(1.4, 0.9, 0.15))\nled_indicator = bpy.context.object\nled_indicator.name = \"LED Indicator\"\nled_indicator.data.materials.append(blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.246747771106354, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "6cab1ba3-8e5f-4d8b-ac8a-389503e46282", "name": "Sandwich", "instruction": "Compare a club sandwich to a BLT sandwich. Include layers of ingredients such as bread, lettuce, tomato, bacon, and other typical fillings. Show the differences in their structure and presentation.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\nbacon_color = bpy.data.materials.new(name=\"Bacon\")\nbacon_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color for bacon\nchicken_color = bpy.data.materials.new(name=\"Chicken\")\nchicken_color.diffuse_color = (0.9, 0.8, 0.7, 1)  # Light beige color for chicken\n\n# Function to create a sandwich layer\ndef create_layer(name, color, location):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    layer = bpy.context.object\n    layer.name = name\n    layer.scale[2] = 0.1  # Make it a thin layer\n    layer.data.materials.append(color)\n\n# Step 2: Create the Club Sandwich\nclub_sandwich_layers = [\n    (\"Bread Bottom\", bread_color, (0, -1, 0)),\n    (\"Lettuce\", lettuce_color, (0, -1, 0.2)),\n    (\"Tomato\", tomato_color, (0, -1, 0.4)),\n    (\"Chicken\", chicken_color, (0, -1, 0.6)),\n    (\"Bread Middle\", bread_color, (0, -1, 0.8)),\n    (\"Bacon\", bacon_color, (0, -1, 1.0)),\n    (\"Lettuce\", lettuce_color, (0, -1, 1.2)),\n    (\"Tomato\", tomato_color, (0, -1, 1.4)),\n    (\"Bread Top\", bread_color, (0, -1, 1.6))\n]\n\nfor name, color, location in club_sandwich_layers:\n    create_layer(name, color, location)\n\n# Step 3: Create the BLT Sandwich\nblt_sandwich_layers = [\n    (\"Bread Bottom\", bread_color, (0, 1, 0)),\n    (\"Lettuce\", lettuce_color, (0, 1, 0.2)),\n    (\"Tomato\", tomato_color, (0, 1, 0.4)),\n    (\"Bacon\", bacon_color, (0, 1, 0.6)),\n    (\"Bread Top\", bread_color, (0, 1, 0.8))\n]\n\nfor name, color, location in blt_sandwich_layers:\n    create_layer(name, color, location)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.105685282823551, "unit_n": 1, "param_ratio": 26.0}
{"id": "76c40f98-fa13-48fe-b6d4-294ddf14a8d0", "name": "Bird Cage", "instruction": "I'd like a bird cage model. The cage is cylindrical, with a diameter of 18 inches and height of 24 inches. Include a perch in the center and a small door on the side.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\ncage_diameter = 18 * 0.0254  # Convert inches to meters\ncage_radius = cage_diameter / 2\ncage_height = 24 * 0.0254  # Convert inches to meters\nperch_length = cage_radius * 1.5\ndoor_width = cage_radius / 2\ndoor_height = cage_height / 3\n\n# Step 2: Create the Cage\nbpy.ops.mesh.primitive_cylinder_add(radius=cage_radius, depth=cage_height, location=(0, 0, cage_height / 2))\ncage = bpy.context.object\ncage.name = \"Cage\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=perch_length, location=(0, 0, cage_height / 2), rotation=(0, math.pi / 2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 4: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(cage_radius, 0, cage_height / 2))\ndoor = bpy.context.object\ndoor.scale = (door_width / 2, 0.02, door_height / 2)\ndoor.name = \"Door\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.631447911478727, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "713a3778-0ece-457f-af4c-8fdd51eea86a", "name": "Pizza Slice", "instruction": "Can you create a 3D model of a pizza slice with pepperoni and cheese?", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Slice (Triangle)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Step 3: Create Pepperoni\npepperoni_positions = [(0.3, 0.2, 0.05), (-0.3, 0.2, 0.05), (0, -0.2, 0.05)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1710744218218037, "unit_n": 2, "param_ratio": 9.5}
{"id": "6808f5b7-3f22-40d0-8811-60176393e8fc", "name": "Solar Power Inverter", "instruction": "Could you design a 3D solar power inverter? Think about how it would convert DC to AC power, and include a display for monitoring output and a series of standard electrical sockets.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the body\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for the sockets\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color for the display\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Display\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0.51, 1.5))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.rotation_euler = (0, 0, 0)\ndisplay.data.materials.append(blue)\n\n# Step 4: Create the Sockets\nfor i in range(4):\n    x = -0.5 + i * 0.33\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, -0.51, 0.5))\n    socket = bpy.context.object\n    socket.name = f\"Socket {i + 1}\"\n    socket.data.materials.append(dark_gray)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.658162873816453, "unit_n": 6, "param_ratio": 4.5}
{"id": "2b7566a1-fdbd-498a-b60b-743520159745", "name": "Wall Decal", "instruction": "Create a 3D model of a wall decal. It should be a flat, rectangular sheet with a simple geometric pattern.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Step 2: Create the Wall Decal (a flat rectangular sheet)\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ndecal = bpy.context.object\ndecal.name = \"Wall Decal\"\n\n# Define the material and geometric pattern\nmaterial = bpy.data.materials.new(name=\"Decal Material\")\nmaterial.use_nodes = True\nbsdf = material.node_tree.nodes[\"Principled BSDF\"]\n\n# Add a checker texture to the material\nchecker_texture = material.node_tree.nodes.new('ShaderNodeTexChecker')\nchecker_texture.inputs['Scale'].default_value = 4.0  # Adjust the scale for the pattern\n\nmaterial.node_tree.links.new(checker_texture.outputs['Color'], bsdf.inputs['Base Color'])\ndecal.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 5.0}
{"id": "110aa442-656b-40bc-95f7-4efdc42c9e99", "name": "Stapler", "instruction": "Create a 3D model of a stapler. The base should be flat, and the top part should be hinged to allow for stapling. The front end should have an opening for inserting paper, and the back end should have a compartment for storing extra staples. The mechanism should be simple and functional.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntop_color = bpy.data.materials.new(name=\"Top Color\")\ntop_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5\nbase.scale[1] = 0.5\nbase.scale[2] = 0.1\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Top Part\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale[0] = 1.5\ntop.scale[1] = 0.5\ntop.scale[2] = 0.1\ntop.data.materials.append(top_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, -0.5, 0.4), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(base_color)\n\n# Step 5: Create the Front Opening\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 0, 0.75))\nfront_opening = bpy.context.object\nfront_opening.name = \"Front Opening\"\nfront_opening.scale[0] = 0.1\nfront_opening.scale[1] = 0.4\nfront_opening.scale[2] = 0.1\nfront_opening.data.materials.append(base_color)\n\n# Step 6: Create the Back Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.4, 0, 0.25))\nback_compartment = bpy.context.object\nback_compartment.name = \"Back Compartment\"\nback_compartment.scale[0] = 0.1\nback_compartment.scale[1] = 0.4\nback_compartment.scale[2] = 0.1\nback_compartment.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.1843069258153287, "unit_n": 5, "param_ratio": 6.8}
{"id": "18e71c0a-042a-4c15-93c7-f3d2aa63eb2e", "name": "Ice Cream Cone", "instruction": "Imagine an ice cream cone. The cone is 6 inches tall and has a scoop of ice cream on top, 3 inches in diameter.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncone_color = bpy.data.materials.new(name=\"Cone Color\")\ncone_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color for the cone\nice_cream_color = bpy.data.materials.new(name=\"Ice Cream Color\")\nice_cream_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink color for the ice cream\n\n# Step 2: Create the Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, radius2=0, depth=6, location=(0, 0, 3))\ncone = bpy.context.object\ncone.name = \"Cone\"\ncone.data.materials.append(cone_color)\n\n# Step 3: Create the Ice Cream Scoop\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.5, location=(0, 0, 6))\nscoop = bpy.context.object\nscoop.name = \"Ice Cream Scoop\"\nscoop.data.materials.append(ice_cream_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.219929986785409, "unit_n": 2, "param_ratio": 10.5}
{"id": "3c60b21f-e286-4f91-8f08-9cbeca281dee", "name": "Drum", "instruction": "Please create a 3D model of a drum. It should be cylindrical with a taut membrane on top.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\nmembrane_color = bpy.data.materials.new(name=\"Membrane Color\")\nmembrane_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Membrane\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0.75))\nmembrane = bpy.context.object\nmembrane.name = \"Membrane\"\nmembrane.data.materials.append(membrane_color)\n\n# Convert the circle to a filled mesh\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.fill()\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.928963275954553, "unit_n": 2, "param_ratio": 9.5}
{"id": "1d7d2fdc-522e-4edb-8931-f2047eeb86ff", "name": "Stapler", "instruction": "Let's craft a stapler. It should have a rectangular base and a levered arm that pivots at one end. The top of the arm should have a slightly curved surface. Ensure there is a staple loading compartment underneath the arm and a small metal plate at the base for the staples to crimp against.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\narm_color = bpy.data.materials.new(name=\"Arm Color\")\narm_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nmetal_plate_color = bpy.data.materials.new(name=\"Metal Plate Color\")\nmetal_plate_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (1, 0.3, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\narm = bpy.context.object\narm.scale = (1, 0.25, 0.1)\narm.name = \"Arm\"\narm.data.materials.append(arm_color)\n\n# Step 4: Create the Curved Top of the Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 1.25), rotation=(math.pi/2, 0, 0))\ncurved_top = bpy.context.object\ncurved_top.scale = (0.5, 0.25, 0.1)\ncurved_top.name = \"Curved Top\"\ncurved_top.data.materials.append(arm_color)\n\n# Step 5: Create the Staple Loading Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.9))\ncompartment = bpy.context.object\ncompartment.scale = (0.8, 0.2, 0.05)\ncompartment.name = \"Compartment\"\ncompartment.data.materials.append(base_color)\n\n# Step 6: Create the Metal Plate\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.55))\nmetal_plate = bpy.context.object\nmetal_plate.scale = (0.8, 0.2, 0.02)\nmetal_plate.name = \"Metal Plate\"\nmetal_plate.data.materials.append(metal_plate_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.860673030107237, "unit_n": 5, "param_ratio": 7.8}
{"id": "68b293b1-28ec-469c-b89d-125d8b8a9311", "name": "Screwdriver", "instruction": "Create a 3D model of a screwdriver. Start with the handle, which should be cylindrical and ergonomic. Add a straight metal shaft extending from the handle. At the end of the shaft, include a flat or cross-shaped tip for driving screws. Ensure the proportions are balanced and practical for use.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.3, 0.1, 1)  # Reddish color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.25))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, 0, -1.25))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(shaft_color)\n\n# Create the cross-shaped tip\nbpy.ops.mesh.primitive_cube_add(size=0.04, location=(0, 0, -1.3))\ncross_tip = bpy.context.object\ncross_tip.name = \"CrossTip\"\ncross_tip.scale = (1, 0.1, 0.1)\ncross_tip.data.materials.append(shaft_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.04, location=(0, 0, -1.3))\ncross_tip2 = bpy.context.object\ncross_tip2.name = \"CrossTip2\"\ncross_tip2.scale = (0.1, 1, 0.1)\ncross_tip2.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.791012185802262, "unit_n": 5, "param_ratio": 6.6}
{"id": "2a929535-8f17-4a89-ad79-05c85193c593", "name": "Dog Leash", "instruction": "Create a dog leash. Begin with a long, cylindrical rope, about 6 feet in length. Attach a loop handle at one end. At the other end, add a metal clasp for attaching to a collar.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrope_color = bpy.data.materials.new(name=\"RopeColor\")\nrope_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the rope\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Gray color for the metal clasp\n\n# Step 2: Create the Rope\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=6, location=(0, 0, 3))\nrope = bpy.context.object\nrope.name = \"Rope\"\nrope.data.materials.append(rope_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 6))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(rope_color)\n\n# Step 4: Create the Metal Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\nclasp_base = bpy.context.object\nclasp_base.name = \"ClaspBase\"\nclasp_base.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0, 0.05))\nclasp_hinge = bpy.context.object\nclasp_hinge.name = \"ClaspHinge\"\nclasp_hinge.data.materials.append(metal_color)\nclasp_hinge.parent = clasp_base\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0, 0.15))\nclasp_sphere = bpy.context.object\nclasp_sphere.name = \"ClaspSphere\"\nclasp_sphere.data.materials.append(metal_color)\nclasp_sphere.parent = clasp_base", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8561435464287843, "unit_n": 5, "param_ratio": 6.6}
{"id": "26729838-63df-4dce-9003-66e9498d8d9b", "name": "Desk Organizer", "instruction": "Can you generate a 3D model of a desk organizer that has compartments for pens, a dedicated slot for a smartphone, and a small area for paper clips or thumbtacks?", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\norganizer_color = bpy.data.materials.new(name=\"OrganizerColor\")\norganizer_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make it flat\nbase.data.materials.append(organizer_color)\n\n# Step 3: Create Pen Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(-0.6 + i * 0.6, 0.6, 0.7))\n    pen_compartment = bpy.context.object\n    pen_compartment.name = f\"PenCompartment {i + 1}\"\n    pen_compartment.scale[2] = 1.5  # Make it taller\n    pen_compartment.data.materials.append(organizer_color)\n\n# Step 4: Create Smartphone Slot\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.6, -0.6, 0.7))\nsmartphone_slot = bpy.context.object\nsmartphone_slot.name = \"SmartphoneSlot\"\nsmartphone_slot.scale[2] = 1.5  # Make it taller\nsmartphone_slot.scale[0] = 0.2  # Make it thinner\nsmartphone_slot.data.materials.append(organizer_color)\n\n# Step 5: Create Small Area for Paper Clips or Thumbtacks\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.6, -0.6, 0.7))\nsmall_area = bpy.context.object\nsmall_area.name = \"SmallArea\"\nsmall_area.scale[2] = 0.3  # Make it shorter\nsmall_area.data.materials.append(organizer_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8423198783845605, "unit_n": 6, "param_ratio": 3.5}
{"id": "94da0601-bb09-420b-aa54-6b42a4c3a28c", "name": "Desktop Computer", "instruction": "Imagine a desktop computer setup. It should include a main tower, a monitor, a keyboard, and a mouse. The tower should be rectangular with a power button on the front. The monitor should be flat and rectangular. The keyboard should have standard keys, and the mouse should be simple and ergonomic.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Tower\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntower = bpy.context.object\ntower.name = \"Main Tower\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(0.5, 1, 1.5))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0.45, 0, 1.5))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\n\n# Step 4: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=2, location=(3, 0, 1.5))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.5, 0.1, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(3, -1.5, 0.5))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.5, 0.3, 0.1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 6: Create the Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(4, -1.5, 0.3))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1, 0.6, 0.3))\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.6785664834964205, "unit_n": 5, "param_ratio": 4.2}
{"id": "48012442-4b10-46ce-ac7e-26bdd49a5fb5", "name": "Spice Rack", "instruction": "Form a 3D spice rack with rows to hold various spice containers.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.95, 0.55))\nback_panel = bpy.context.object\nback_panel.name = \"Back Panel\"\nback_panel.scale[2] = 0.5\nback_panel.scale[1] = 0.05\nback_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Shelves\nshelf_height = 0.3\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, (i + 1) * shelf_height))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale[2] = 0.05\n    shelf.data.materials.append(wood_color)\n\n# Step 5: Create the Side Panels\nfor i in range(2):\n    x = 1.0 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.55))\n    side_panel = bpy.context.object\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.scale[0] = 0.05\n    side_panel.scale[2] = 0.5\n    side_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3044930929259086, "unit_n": 7, "param_ratio": 3.0}
{"id": "746a4433-e52d-468a-bd1c-b68e83839b31", "name": "Coffee Grinder", "instruction": "Create a coffee grinder with a simple cylindrical body. Add a handle on top that rotates for grinding. Include a small drawer at the base for collecting ground coffee.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndrawer_color = bpy.data.materials.new(name=\"Drawer Color\")\ndrawer_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Dark brown color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 2.5))\nhandle_stem = bpy.context.object\nhandle_stem.name = \"Handle Stem\"\nhandle_stem.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.5, 2.5))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(handle_color)\n\n# Step 4: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1, 0.25))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(drawer_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.084465709386719, "unit_n": 4, "param_ratio": 8.25}
{"id": "503d951b-76e3-4066-8ff5-a4f45a888de6", "name": "Frisbee", "instruction": "Let's design a frisbee. It should be circular, about 10 inches in diameter, and have a slightly concave surface.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Frisbee\nbpy.ops.mesh.primitive_cylinder_add(radius=0.127, depth=0.02, location=(0, 0, 0))\nfrisbee = bpy.context.object\nfrisbee.name = \"Frisbee\"\n\n# Step 3: Make the Surface Slightly Concave\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.transform.shrink_fatten(value=-0.005, use_even_offset=False)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Smooth the Surface\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 5.0}
{"id": "42211cdc-be5c-449c-a41a-6fee5a991218", "name": "Water Pitcher", "instruction": "Design a water pitcher. It should have a wide base, a narrow neck, and a spout for pouring. Include a handle on one side.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pitcher_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 2))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(pitcher_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.3, depth=0.5, location=(0, 0.5, 2.5))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(pitcher_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.75, minor_radius=0.1, location=(0.75, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(pitcher_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.697334821863634, "unit_n": 4, "param_ratio": 7.25}
{"id": "1db683d4-21eb-48e4-8a41-840f07603eac", "name": "Guitar", "instruction": "Create a guitar for me. It should have a classic body shape and six strings. Make sure to include the tuning pegs and the sound hole.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nstring_color = bpy.data.materials.new(name=\"String\")\nstring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray for strings\n\n# Step 2: Create the Guitar Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.5, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Guitar Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Guitar Neck\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.6, 0))\nneck = bpy.context.object\nneck.scale[1] = 4  # Scale the neck to be long and thin\nneck.name = \"Guitar Neck\"\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Sound Hole\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=0.02, location=(0, 0, 0.06))\nsound_hole = bpy.context.object\nsound_hole.name = \"Sound Hole\"\nsound_hole.data.materials.append(string_color)\n\n# Step 5: Create the Strings\nfor i in range(6):\n    x = -0.025 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(vertices=16, radius=0.005, depth=1.2, location=(x, 0.6, 0))\n    string = bpy.context.object\n    string.rotation_euler[0] = 1.5708  # Rotate to align with the neck\n    string.name = f\"String {i + 1}\"\n    string.data.materials.append(string_color)\n\n# Step 6: Create the Tuning Pegs\nfor i in range(6):\n    x = -0.025 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(vertices=16, radius=0.02, depth=0.1, location=(x, 1.2, 0))\n    peg = bpy.context.object\n    peg.rotation_euler[0] = 1.5708  # Rotate to align with the neck\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.451464573974972, "unit_n": 15, "param_ratio": 2.533333333333333}
{"id": "313a2b09-eaca-4a36-8d77-913f82889120", "name": "Cat Scratching Post", "instruction": "Design a cat scratching post intended for indoor use. It should have a stable base and a vertical post covered in a material suitable for scratching. Add a small platform on top for the cat to perch on.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for base\npost_color = bpy.data.materials.new(name=\"PostColor\")\npost_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for post\nplatform_color = bpy.data.materials.new(name=\"PlatformColor\")\nplatform_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for platform\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.5))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.data.materials.append(platform_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.019889530335162, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "181b76d8-a5c0-431e-862a-11b8c6227b31", "name": "Sofa", "instruction": "Create a sofa with three cushions on the seat and a backrest. How does it look in a modern living room?", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Sofa Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_base = bpy.context.object\nsofa_base.scale = (2, 1, 0.5)\nsofa_base.name = \"Sofa Base\"\nsofa_base.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.25, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.3\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    cushion = bpy.context.object\n    cushion.scale = (0.6, 0.9, 0.2)\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.6542220950859403, "unit_n": 5, "param_ratio": 4.4}
{"id": "6484987c-16a7-4b58-813c-024caf7ebcac", "name": "Drum", "instruction": "Let's create a 3D model of a drum. The drum should have a cylindrical body with a flat top and bottom. Add a set of tension rods evenly spaced around the circumference. The drum should have two drumheads, one on the top and one on the bottom. The body should be decorated with horizontal lines.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\n\n# Step 3: Create the Top Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.775))\ntop_drumhead = bpy.context.object\ntop_drumhead.name = \"Top Drumhead\"\n\n# Step 4: Create the Bottom Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, -0.775))\nbottom_drumhead = bpy.context.object\nbottom_drumhead.name = \"Bottom Drumhead\"\n\n# Step 5: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = (2 * math.pi / num_rods) * i\n    x = 1.05 * math.cos(angle)\n    y = 1.05 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(x, y, 0))\n    rod = bpy.context.object\n    rod.name = f\"Tension Rod {i + 1}\"\n\n# Step 6: Decorate the Drum Body with Horizontal Lines\nnum_lines = 5\nfor i in range(num_lines):\n    z = -0.6 + (i * 0.3)\n    bpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.02, location=(0, 0, z))\n    line = bpy.context.object\n    line.name = f\"Horizontal Line {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.659577982772435, "unit_n": 5, "param_ratio": 5.0}
{"id": "6a899d37-24de-4586-9485-f63b2267c71e", "name": "Puzzle Cube", "instruction": "Create a puzzle cube that is fun and engaging.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 1, 1)   # White\n]\n\n# Step 2: Create the Puzzle Cube\nfor i in range(3):\n    for j in range(3):\n        for k in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=0.9, location=(i, j, k))\n            cube = bpy.context.object\n            cube.name = f\"Cube_{i}_{j}_{k}\"\n            mat = bpy.data.materials.new(name=f\"Mat_{i}_{j}_{k}\")\n            mat.diffuse_color = colors[(i + j + k) % len(colors)]\n            cube.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.18518518518518517}
{"id": "8e74180b-034a-4767-9202-4188b11a32dd", "name": "Ceramic Dish Set", "instruction": "Can you produce a 3D model of a ceramic dish set? It should include a dinner plate, a salad plate, a soup bowl, and a mug.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the ceramic\nceramic_color = bpy.data.materials.new(name=\"Ceramic\")\nceramic_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Dinner Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.05, location=(0, 0, 0))\ndinner_plate = bpy.context.object\ndinner_plate.name = \"Dinner Plate\"\ndinner_plate.data.materials.append(ceramic_color)\n\n# Step 3: Create the Salad Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.05, location=(2, 0, 0))\nsalad_plate = bpy.context.object\nsalad_plate.name = \"Salad Plate\"\nsalad_plate.data.materials.append(ceramic_color)\n\n# Step 4: Create the Soup Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.3, location=(4, 0, 0))\nsoup_bowl = bpy.context.object\nsoup_bowl.name = \"Soup Bowl\"\nsoup_bowl.data.materials.append(ceramic_color)\n\n# Step 5: Create the Mug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.6, location=(6, 0, 0))\nmug = bpy.context.object\nmug.name = \"Mug\"\nmug.data.materials.append(ceramic_color)\n\n# Create the handle for the mug\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(6.4, 0, 0.3))\nhandle = bpy.context.object\nhandle.name = \"Mug Handle\"\nhandle.data.materials.append(ceramic_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.1096189621439545, "unit_n": 5, "param_ratio": 6.0}
{"id": "084fb838-569c-4758-881a-6200b2c8adec", "name": "Office layout", "instruction": "Design an office layout that maximizes space efficiency and promotes a collaborative work environment. Include designated areas for individual workstations, meeting rooms, and a communal break area. Ensure there is ample lighting and easy access to office supplies.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nworkstation_color = bpy.data.materials.new(name=\"WorkstationColor\")\nworkstation_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nmeeting_room_color = bpy.data.materials.new(name=\"MeetingRoomColor\")\nmeeting_room_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nbreak_area_color = bpy.data.materials.new(name=\"BreakAreaColor\")\nbreak_area_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create Individual Workstations\nfor i in range(4):\n    for j in range(2):\n        x = i * 2\n        y = j * 2\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.5))\n        workstation = bpy.context.object\n        workstation.name = f\"Workstation_{i}_{j}\"\n        workstation.data.materials.append(workstation_color)\n\n# Step 3: Create Meeting Room\nbpy.ops.mesh.primitive_cube_add(size=3, location=(5, 5, 1.5))\nmeeting_room = bpy.context.object\nmeeting_room.name = \"MeetingRoom\"\nmeeting_room.scale = (1.5, 1.5, 1)\nmeeting_room.data.materials.append(meeting_room_color)\n\n# Step 4: Create Communal Break Area\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 5, 1))\nbreak_area = bpy.context.object\nbreak_area.name = \"BreakArea\"\nbreak_area.scale = (1, 1, 0.5)\nbreak_area.data.materials.append(break_area_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.382026634673881, "unit_n": 10, "param_ratio": 2.7}
{"id": "44e4b435-8a35-4884-8e5d-87594afdc041", "name": "Thermometer", "instruction": "Create a digital thermometer with a display screen and a probe.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body of the Thermometer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Thermometer Body\"\nbody.data.materials.append(white)\n\n# Step 3: Create the Display Screen\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.3, 0.8))\nscreen = bpy.context.object\nscreen.name = \"Display Screen\"\nscreen.scale = (0.6, 0.1, 0.3)\nscreen.data.materials.append(black)\n\n# Step 4: Create the Probe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, -1.5))\nprobe = bpy.context.object\nprobe.name = \"Probe\"\nprobe.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.139242250615748, "unit_n": 3, "param_ratio": 8.0}
{"id": "87203e81-9fff-4d84-b299-493cc9e97813", "name": "Transformer", "instruction": "Create a 3D model of a transformer used in electrical systems. The transformer should have a cylindrical core with wires wrapped around it.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"CoreColor\")\ncore_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the core\nwire_color = bpy.data.materials.new(name=\"WireColor\")\nwire_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color for the wires\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Wires\nfor i in range(5):\n    z = -0.4 + i * 0.2\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.35, minor_radius=0.05, location=(0, 0, z))\n    wire = bpy.context.object\n    wire.name = f\"Wire {i + 1}\"\n    wire.data.materials.append(wire_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.2343382762019495, "unit_n": 6, "param_ratio": 3.3333333333333335}
{"id": "3df98913-9802-4ec7-b754-cb9cf138d83a", "name": "Basketball", "instruction": "Generate a 3D model of a basketball. Compare it to a soccer ball in terms of size and shape. The basketball should have the characteristic lines and texture.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basketball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbasketball = bpy.context.object\nbasketball.name = \"Basketball\"\n\n# Add material to the basketball\nbasketball_material = bpy.data.materials.new(name=\"Basketball Material\")\nbasketball_material.diffuse_color = (1, 0.55, 0, 1)  # Orange color\nbasketball.data.materials.append(basketball_material)\n\n# Step 3: Add the characteristic lines\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=1, minor_radius=0.02, rotation=(0, 0, 0))\nline1 = bpy.context.object\nline1.name = \"Line 1\"\nline1.data.materials.append(basketball_material)\n\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=1, minor_radius=0.02, rotation=(1.5708, 0, 0))\nline2 = bpy.context.object\nline2.name = \"Line 2\"\nline2.data.materials.append(basketball_material)\n\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=1, minor_radius=0.02, rotation=(0, 1.5708, 0))\nline3 = bpy.context.object\nline3.name = \"Line 3\"\nline3.data.materials.append(basketball_material)\n\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=1, minor_radius=0.02, rotation=(0.7854, 0, 0))\nline4 = bpy.context.object\nline4.name = \"Line 4\"\nline4.data.materials.append(basketball_material)\n\n# Step 4: Create a Soccer Ball for Comparison\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(3, 0, 0))\nsoccer_ball = bpy.context.object\nsoccer_ball.name = \"Soccer Ball\"\n\n# Add material to the soccer ball\nsoccer_ball_material = bpy.data.materials.new(name=\"Soccer Ball Material\")\nsoccer_ball_material.diffuse_color = (1, 1, 1, 1)  # White color\nsoccer_ball.data.materials.append(soccer_ball_material)\n\n# Add black patches to the soccer ball\nbpy.ops.mesh.primitive_ico_sphere_add(radius=0.2, location=(3, 0.75, 0))\npatch1 = bpy.context.object\npatch1.name = \"Patch 1\"\npatch1_material = bpy.data.materials.new(name=\"Patch Material\")\npatch1_material.diffuse_color = (0, 0, 0, 1)  # Black color\npatch1.data.materials.append(patch1_material)\n\nbpy.ops.mesh.primitive_ico_sphere_add(radius=0.2, location=(3, -0.75, 0))\npatch2 = bpy.context.object\npatch2.name = \"Patch 2\"\npatch2.data.materials.append(patch1_material)\n\nbpy.ops.mesh.primitive_ico_sphere_add(radius=0.2, location=(3, 0, 0.75))\npatch3 = bpy.context.object\npatch3.name = \"Patch 3\"\npatch3.data.materials.append(patch1_material)\n\nbpy.ops.mesh.primitive_ico_sphere_add(radius=0.2, location=(3, 0, -0.75))\npatch4 = bpy.context.object\npatch4.name = \"Patch 4\"\npatch4.data.materials.append(patch1_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.2563871175598695, "unit_n": 10, "param_ratio": 7.1}
{"id": "7322ee4a-172e-4834-844e-922737c2f864", "name": "Juicer", "instruction": "Let's create a 3D model of a juicer. It should have a cylindrical body with a spout on one side. Include a handle on the opposite side and a lid on top. The lid should have a small opening for inserting fruit.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.1, 0, 1.5), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(body_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(-1.5, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(body_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Create the Opening on the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 2.2))\nopening = bpy.context.object\nopening.name = \"Opening\"\nopening.data.materials.append(lid_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.211529339590797, "unit_n": 5, "param_ratio": 8.2}
{"id": "3453f07a-877c-4457-a8d9-4143825f1728", "name": "Sofa Set", "instruction": "Design a sofa set that includes a three-seater sofa, a loveseat, and an armchair. The three-seater should have straight lines and simple armrests. The loveseat should be a smaller version of the three-seater. The armchair should be a single-seat version with a high backrest. All pieces should have uniform cushions and legs.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Function to create a sofa\ndef create_sofa(location, scale):\n    # Create the base\n    bpy.ops.mesh.primitive_cube_add(size=2, location=location)\n    base = bpy.context.object\n    base.scale = scale\n    base.name = \"Sofa Base\"\n    base.data.materials.append(sofa_color)\n    \n    # Create the backrest\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1] - scale[1] - 0.1, location[2] + scale[2]))\n    backrest = bpy.context.object\n    backrest.scale = (scale[0], 0.1, scale[2] * 1.5)\n    backrest.name = \"Sofa Backrest\"\n    backrest.data.materials.append(sofa_color)\n    \n    # Create the armrests\n    for i in [-1, 1]:\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0] + i * (scale[0] + 0.1), location[1], location[2]))\n        armrest = bpy.context.object\n        armrest.scale = (0.1, scale[1], scale[2])\n        armrest.name = f\"Sofa Armrest {i}\"\n        armrest.data.materials.append(sofa_color)\n\n# Create the three-seater sofa\ncreate_sofa(location=(0, 0, 0.5), scale=(1.5, 0.5, 0.5))\n\n# Create the loveseat\ncreate_sofa(location=(4, 0, 0.5), scale=(1, 0.5, 0.5))\n\n# Create the armchair\ncreate_sofa(location=(7, 0, 0.5), scale=(0.5, 0.5, 0.75))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8777155110502677, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "24e560db-1be6-41b6-9207-63a4a91d40d6", "name": "Sofa", "instruction": "Design a 3D model of a sofa. It should have three cushions on the seat and three on the backrest. Include armrests on both sides and short legs to elevate it slightly off the ground. The backrest should be slightly reclined for comfort. Compare this design with a two-seater sofa without armrests and a higher backrest.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Legs\nfor i in range(4):\n    x = 1.5 * (i % 2) - 0.75\n    y = 0.5 * (i // 2) - 0.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, -0.1))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)\n\n# Step 3: Create the Seat Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nseat_base = bpy.context.object\nseat_base.scale[0] = 1.5\nseat_base.scale[1] = 0.5\nseat_base.scale[2] = 0.1\nseat_base.name = \"Seat Base\"\nseat_base.data.materials.append(sofa_color)\n\n# Step 4: Create the Seat Cushions\nfor i in range(3):\n    x = 1.0 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.3))\n    cushion = bpy.context.object\n    cushion.scale[0] = 0.5\n    cushion.scale[1] = 0.5\n    cushion.scale[2] = 0.1\n    cushion.name = f\"Seat Cushion {i + 1}\"\n    cushion.data.materials.append(sofa_color)\n\n# Step 5: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.3, 0.6))\nbackrest = bpy.context.object\nbackrest.scale[0] = 1.5\nbackrest.scale[1] = 0.1\nbackrest.scale[2] = 0.5\nbackrest.rotation_euler[0] = math.radians(-10)  # Slightly reclined\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 6: Create the Back Cushions\nfor i in range(3):\n    x = 1.0 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.3, 0.6))\n    back_cushion = bpy.context.object\n    back_cushion.scale[0] = 0.5\n    back_cushion.scale[1] = 0.1\n    back_cushion.scale[2] = 0.4\n    back_cushion.rotation_euler[0] = math.radians(-10)  # Match the recline of the backrest\n    back_cushion.name = f\"Back Cushion {i + 1}\"\n    back_cushion.data.materials.append(sofa_color)\n\n# Step 7: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.4))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.1\n    armrest.scale[1] = 0.5\n    armrest.scale[2] = 0.4\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2298764714712878, "unit_n": 14, "param_ratio": 2.142857142857143}
{"id": "044f253f-102e-4f75-8ee4-95e1f5fbc56b", "name": "Pencil", "instruction": "Create a simple 3D model of a pencil with a sharp tip and an eraser at the other end.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Light brown color\ngraphite_color = bpy.data.materials.new(name=\"Graphite\")\ngraphite_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\neraser_color = bpy.data.materials.new(name=\"Eraser\")\neraser_color.diffuse_color = (1, 0.5, 0.5, 1)  # Pink color\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(wood_color)\n\n# Step 3: Create the Pencil Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(0, 0, 0.85))\npencil_tip = bpy.context.object\npencil_tip.name = \"Pencil Tip\"\npencil_tip.data.materials.append(graphite_color)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.06, depth=0.1, location=(0, 0, -0.75))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(eraser_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.215794201054748, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "1c3bfa9e-563e-4e0f-a0de-0411ce0b0279", "name": "Circuit Board", "instruction": "Create a 3D model of a circuit board. The board should be rectangular with various electronic components such as resistors, capacitors, and microchips.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color for the board\ncomponent_color = bpy.data.materials.new(name=\"Component Color\")\ncomponent_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for components\n\n# Step 2: Create the Circuit Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.scale[2] = 0.05  # Make it flat\nboard.name = \"Circuit Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create Resistors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(-0.5 + i * 0.5, 0.5, 0.05))\n    resistor = bpy.context.object\n    resistor.rotation_euler[1] = 1.5708  # Rotate 90 degrees\n    resistor.name = f\"Resistor {i + 1}\"\n    resistor.data.materials.append(component_color)\n\n# Step 4: Create Capacitors\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(-0.5 + i * 1, -0.5, 0.1))\n    capacitor = bpy.context.object\n    capacitor.name = f\"Capacitor {i + 1}\"\n    capacitor.data.materials.append(component_color)\n\n# Step 5: Create Microchips\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.5 - i * 1, 0, 0.1))\n    microchip = bpy.context.object\n    microchip.name = f\"Microchip {i + 1}\"\n    microchip.data.materials.append(component_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.508093565092029, "unit_n": 8, "param_ratio": 3.5}
{"id": "7b394126-b430-4ceb-9278-021a2d9b1e38", "name": "Birthday Cake", "instruction": "Let's design a birthday cake. It should be a three-tiered round cake. Each tier should have a different color. Place candles on the top tier, and add a \"Happy Birthday\" sign on the side.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntier1_color = bpy.data.materials.new(name=\"Tier1Color\")\ntier1_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ntier2_color = bpy.data.materials.new(name=\"Tier2Color\")\ntier2_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntier3_color = bpy.data.materials.new(name=\"Tier3Color\")\ntier3_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Tiers\n# Bottom tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ntier1 = bpy.context.object\ntier1.name = \"Tier1\"\ntier1.data.materials.append(tier1_color)\n\n# Middle tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.5, location=(0, 0, 0.75))\ntier2 = bpy.context.object\ntier2.name = \"Tier2\"\ntier2.data.materials.append(tier2_color)\n\n# Top tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.5, location=(0, 0, 1.25))\ntier3 = bpy.context.object\ntier3.name = \"Tier3\"\ntier3.data.materials.append(tier3_color)\n\n# Step 3: Create the Candles\nfor i in range(8):\n    angle = i * (360 / 8)\n    x = 0.35 * math.cos(math.radians(angle))\n    y = 0.35 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 1.55))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n\n# Step 4: Create the \"Happy Birthday\" sign\nbpy.ops.object.text_add(location=(1.5, 0, 0.75))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"Happy Birthday\"\ntext_obj.data.extrude = 0.05\ntext_obj.rotation_euler = (0, 0, math.pi / 2)\ntext_obj.scale = (0.5, 0.5, 0.5)\ntext_obj.name = \"HappyBirthdaySign\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.13157345973023, "unit_n": 12, "param_ratio": 3.5833333333333335}
{"id": "2731be73-a2ff-4e37-a913-4f64ccab798d", "name": "Hat", "instruction": "Create a wide-brimmed hat and compare it to a baseball cap. The wide-brimmed hat should have a circular brim, while the baseball cap has a curved brim and a front panel.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Wide-Brimmed Hat\n# Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"WideBrim\"\nbrim.data.materials.append(hat_color)\n\n# Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 3: Create the Baseball Cap\n# Brim\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=1.5, depth=0.1, location=(3, 0, 0))\ncap_brim = bpy.context.object\ncap_brim.name = \"CapBrim\"\ncap_brim.scale = (1, 0.5, 1)\ncap_brim.data.materials.append(hat_color)\n\n# Front Panel\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(3, 0, 0.75))\ncap_panel = bpy.context.object\ncap_panel.name = \"CapPanel\"\ncap_panel.scale = (1, 1, 1.5)\ncap_panel.data.materials.append(hat_color)\n\n# Adjust the front panel to look like a cap\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\ncap_panel.data.polygons[0].select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, 0, -0.75))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Move the cap slightly up to align with the brim\ncap_panel.location.z += 0.1\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.8033574879866805, "unit_n": 4, "param_ratio": 6.25}
{"id": "720cc132-08cb-4f20-a128-d8bb80fb73cc", "name": "Espresso Tamper", "instruction": "Create a simple espresso tamper with a circular base for compressing ground coffee in a portafilter. The handle should be proportionate to the base for a balanced design.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metallic color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metallic)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.6, location=(0, 0, 0.35))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.472753664654359, "unit_n": 2, "param_ratio": 10.0}
{"id": "50ed7f2c-6de3-4067-abe5-93f261c0b358", "name": "Dish Rack", "instruction": "What does a basic dish rack look like?", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05  # Make it flat\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Racks\nfor i in range(5):\n    x = -0.8 + i * 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0.3))\n    rack = bpy.context.object\n    rack.name = f\"Rack {i + 1}\"\n    rack.scale[1] = 0.05  # Make it thin\n    rack.scale[2] = 1.5  # Make it tall\n    rack.data.materials.append(metal_color)\n\n# Step 4: Create the Side Supports\nfor i in range(2):\n    y = 0.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, y, 0.75))\n    support = bpy.context.object\n    support.name = f\"Support {i + 1}\"\n    support.scale[0] = 0.05  # Make it thin\n    support.scale[2] = 0.75  # Make it tall\n    support.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 8, "param_ratio": 2.125}
{"id": "2af1e322-93a6-4024-a7e8-76fedc82867e", "name": "Dish Rack", "instruction": "Can you design a dish rack? The rack should have slots for plates and compartments for utensils. Include a drip tray underneath.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color for plastic\n\n# Step 2: Create the Drip Tray\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.1))\ndrip_tray = bpy.context.object\ndrip_tray.scale[2] = 0.05\ndrip_tray.name = \"Drip Tray\"\ndrip_tray.data.materials.append(plastic)\n\n# Step 3: Create the Plate Slots\nfor i in range(5):\n    x = (i - 2) * 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0.2))\n    slot = bpy.context.object\n    slot.scale[1] = 1\n    slot.scale[2] = 0.5\n    slot.name = f\"Plate Slot {i + 1}\"\n    slot.data.materials.append(metal)\n\n# Step 4: Create the Utensil Compartments\nfor i in range(2):\n    x = (i - 0.5) * 1.2\n    bpy.ops.mesh.primitive_cube_add(size=0.6, location=(x, 1, 0.3))\n    compartment = bpy.context.object\n    compartment.scale[2] = 0.6\n    compartment.name = f\"Utensil Compartment {i + 1}\"\n    compartment.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7256660955097067, "unit_n": 8, "param_ratio": 2.75}
{"id": "7ca648df-224f-406b-86cb-18d4d49debcf", "name": "Wallpaper Pattern", "instruction": "Could you create a wallpaper pattern with a repeating design of geometric shapes?", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green\ncolor3 = bpy.data.materials.new(name=\"Color3\")\ncolor3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue\n\n# Function to create a geometric shape\ndef create_shape(shape_type, location, material):\n    if shape_type == 'cube':\n        bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    elif shape_type == 'sphere':\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=location)\n    elif shape_type == 'cylinder':\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=location)\n    shape = bpy.context.object\n    shape.data.materials.append(material)\n\n# Step 2: Create the repeating pattern\nfor x in range(-5, 6, 2):\n    for y in range(-5, 6, 2):\n        create_shape('cube', (x, y, 0), color1)\n        create_shape('sphere', (x + 1, y, 0), color2)\n        create_shape('cylinder', (x, y + 1, 0), color3)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.473963659632972, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "4f31bcf3-db01-4298-9a02-8aaec976f08c", "name": "Iron", "instruction": "Create an iron. It should have a flat, triangular soleplate and a handle on top.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\niron_color = bpy.data.materials.new(name=\"Iron Color\")\niron_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for iron\n\n# Step 2: Create the Soleplate\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\nsoleplate = bpy.context.object\nsoleplate.name = \"Soleplate\"\nsoleplate.data.materials.append(iron_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 0.3), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(iron_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0009052689943516, "unit_n": 2, "param_ratio": 10.0}
{"id": "4fe28b6c-fd60-40bd-91d4-0b0bb7aae3bb", "name": "Hoodie", "instruction": "Design a hoodie with a front zipper. The hoodie should have a large pocket on the front, a drawstring hood, and ribbed cuffs and hem. Make sure the sleeves are long and slightly loose. Add a small logo on the left chest area.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhoodie_color = bpy.data.materials.new(name=\"HoodieColor\")\nhoodie_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the hoodie\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.2)\nbody.data.materials.append(hoodie_color)\n\n# Step 3: Create the Sleeves\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2.5, location=(x, 0, 1))\n    sleeve = bpy.context.object\n    sleeve.name = f\"Sleeve {i + 1}\"\n    sleeve.rotation_euler[1] = 1.57  # Rotate to align with the body\n    sleeve.data.materials.append(hoodie_color)\n\n# Step 4: Create the Hood\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.8, location=(0, -0.7, 2))\nhood = bpy.context.object\nhood.name = \"Hood\"\nhood.scale = (1, 1, 0.7)\nhood.data.materials.append(hoodie_color)\n\n# Step 5: Create the Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.55, 0.5))\npocket = bpy.context.object\npocket.name = \"Pocket\"\npocket.scale = (0.8, 0.1, 0.4)\npocket.data.materials.append(hoodie_color)\n\n# Step 6: Create the Ribbed Cuffs and Hem\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(x, 0, -0.3))\n    cuff = bpy.context.object\n    cuff.name = f\"Cuff {i + 1}\"\n    cuff.rotation_euler[1] = 1.57  # Rotate to align with the sleeves\n    cuff.data.materials.append(hoodie_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, 0, -0.1))\nhem = bpy.context.object\nhem.name = \"Hem\"\nhem.scale = (1, 0.1, 0.2)\nhem.data.materials.append(hoodie_color)\n\n# Step 7: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, 0.55, 1))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.05, 0.1, 1.2)\nzipper.data.materials.append(hoodie_color)\n\n# Step 8: Add a Small Logo\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0.5, 0.55, 1.5))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.rotation_euler[0] = 1.57  # Rotate to align with the body\nlogo.data.materials.append(hoodie_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.821525857895118, "unit_n": 10, "param_ratio": 3.9}
{"id": "6e11a854-96d1-4661-b224-50521f85ef43", "name": "Notebook", "instruction": "Let's create a 3D model of a notebook. The notebook should have a hard cover and lined pages inside. It should be closed with an elastic band that wraps around the front cover. Include a ribbon bookmark attached to the spine. The notebook should be portable and easy to carry.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nelastic_color = bpy.data.materials.new(name=\"Elastic Color\")\nelastic_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray for the elastic band\nbookmark_color = bpy.data.materials.new(name=\"Bookmark Color\")\nbookmark_color.diffuse_color = (1, 0, 0, 1)  # Red color for the ribbon bookmark\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale = (1, 1.5, 0.1)\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, -0.05))\npages = bpy.context.object\npages.name = \"Pages\"\npages.scale = (0.9, 1.4, 0.09)\npages.data.materials.append(page_color)\n\n# Step 4: Create the Elastic Band\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 1.55, 0))\nelastic = bpy.context.object\nelastic.name = \"Elastic Band\"\nelastic.scale = (0.05, 0.02, 1)\nelastic.data.materials.append(elastic_color)\n\n# Step 5: Create the Ribbon Bookmark\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -1.55, -0.1))\nbookmark = bpy.context.object\nbookmark.name = \"Ribbon Bookmark\"\nbookmark.scale = (0.02, 0.1, 0.5)\nbookmark.data.materials.append(bookmark_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.119162312519754, "unit_n": 4, "param_ratio": 9.0}
{"id": "27727ba2-6a58-49ae-8807-6a8f21061eea", "name": "Belt", "instruction": "Let's design a 3D model of a belt. The belt should be a continuous loop with a buckle at one end. The buckle should have a simple prong mechanism for fastening. Add evenly spaced holes along the length of the belt for adjustment. How would this design look in different colors?", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbelt_color = bpy.data.materials.new(name=\"Belt Color\")\nbelt_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbuckle_color = bpy.data.materials.new(name=\"Buckle Color\")\nbuckle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Belt\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0), rotation=(0, math.pi/2, 0))\nbelt = bpy.context.object\nbelt.name = \"Belt\"\nbelt.data.materials.append(belt_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Prong\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.15, location=(1.05, 0, 0))\nprong = bpy.context.object\nprong.name = \"Prong\"\nprong.data.materials.append(buckle_color)\n\n# Step 5: Create the Holes\nhole_distance = 0.2\nnum_holes = 5\nfor i in range(num_holes):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(0.8 - i * hole_distance, 0, 0))\n    hole = bpy.context.object\n    hole.name = f\"Hole {i + 1}\"\n    hole.rotation_euler = (math.pi/2, 0, 0)\n    hole.data.materials.append(buckle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.8117942428474776, "unit_n": 4, "param_ratio": 8.0}
{"id": "233cc04c-2e1d-4909-9bc0-0b637a064db8", "name": "Chess Set", "instruction": "Create a chess set with a square board. The board should have alternating light and dark squares. Include a full set of chess pieces, each with a distinct shape. Arrange the pieces in their starting positions.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwhite_piece = bpy.data.materials.new(name=\"White Piece\")\nwhite_piece.diffuse_color = (1, 1, 1, 1)  # White color\nblack_piece = bpy.data.materials.new(name=\"Black Piece\")\nblack_piece.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Board\nboard_size = 8\nsquare_size = 1\nfor i in range(board_size):\n    for j in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create the Pieces\ndef create_piece(shape, location, material):\n    if shape == 'pawn':\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    elif shape == 'rook':\n        bpy.ops.mesh.primitive_cube_add(size=0.4, location=location)\n    elif shape == 'knight':\n        bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=location)\n    elif shape == 'bishop':\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=location)\n    elif shape == 'queen':\n        bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.1, location=location)\n    elif shape == 'king':\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    piece = bpy.context.object\n    piece.data.materials.append(material)\n\n# Place pawns\nfor i in range(board_size):\n    create_piece('pawn', (i * square_size, 1 * square_size, 0.2), white_piece)\n    create_piece('pawn', (i * square_size, 6 * square_size, 0.2), black_piece)\n\n# Place rooks\ncreate_piece('rook', (0 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('rook', (7 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('rook', (0 * square_size, 7 * square_size, 0.2), black_piece)\ncreate_piece('rook', (7 * square_size, 7 * square_size, 0.2), black_piece)\n\n# Place knights\ncreate_piece('knight', (1 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('knight', (6 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('knight', (1 * square_size, 7 * square_size, 0.2), black_piece)\ncreate_piece('knight', (6 * square_size, 7 * square_size, 0.2), black_piece)\n\n# Place bishops\ncreate_piece('bishop', (2 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('bishop', (5 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('bishop', (2 * square_size, 7 * square_size, 0.2), black_piece)\ncreate_piece('bishop', (5 * square_size, 7 * square_size, 0.2), black_piece)\n\n# Place queens\ncreate_piece('queen', (3 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('queen', (3 * square_size, 7 * square_size, 0.2), black_piece)\n\n# Place kings\ncreate_piece('king', (4 * square_size, 0 * square_size, 0.2), white_piece)\ncreate_piece('king', (4 * square_size, 7 * square_size, 0.2), black_piece)", "color_brightness": "Dark", "verify": "human", "entropy": 5.560899714490047, "unit_n": 7, "param_ratio": 4.571428571428571}
{"id": "36b86573-9a8b-4e71-9394-1f0dac90097f", "name": "Warning Icons", "instruction": "Let's create two 3D warning icons. One should be a triangle with an exclamation mark inside, and the other should be a circle with a slash through it. Compare their dimensions to ensure they are the same size.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Triangle Warning Icon\n# Create the triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(-1.5, 0, 0))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle Warning Icon\"\ntriangle.data.materials.append(yellow)\n\n# Create the exclamation mark\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(-1.5, 0, 0.3))\nexclamation_body = bpy.context.object\nexclamation_body.name = \"Exclamation Body\"\nexclamation_body.data.materials.append(red)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-1.5, 0, 0.7))\nexclamation_dot = bpy.context.object\nexclamation_dot.name = \"Exclamation Dot\"\nexclamation_dot.data.materials.append(red)\n\n# Step 3: Create the Circle Warning Icon\n# Create the circle\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(1.5, 0, 0))\ncircle = bpy.context.object\ncircle.name = \"Circle Warning Icon\"\ncircle.data.materials.append(red)\n\n# Create the slash\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.5, 0, 0))\nslash = bpy.context.object\nslash.scale = (1.4, 0.1, 0.1)\nslash.rotation_euler = (0, 0, math.radians(45))\nslash.name = \"Slash\"\nslash.data.materials.append(red)\n", "color_brightness": "Bright", "verify": "human", "entropy": 2.5450834908172864, "unit_n": 5, "param_ratio": 6.8}
{"id": "3cefd2f1-761a-45d3-a0eb-f1e4e3729505", "name": "Bird Feeder", "instruction": "Create a 3D model of a bird feeder. It should have a container for holding birdseed and a perch for birds to stand on.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0.55, 0.1), rotation=(1.5708, 0, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6803861534038376, "unit_n": 2, "param_ratio": 6.5}
{"id": "73d9c91e-617b-496d-825a-450dfee1b997", "name": "Hat", "instruction": "Create a 3D model of a hat that evokes a sense of nostalgia. The hat should have a wide brim and a rounded crown. Include a band around the base of the crown.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.scale[2] = 1.2  # Make the crown taller\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.5))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.971981540229514, "unit_n": 3, "param_ratio": 8.0}
{"id": "08eebeee-9a59-49f7-ba7b-d92392377efc", "name": "Microscope", "instruction": "Let's craft a 3D model of a microscope. Start with a sturdy base, about 8 inches in diameter. Add a vertical arm extending upwards about 12 inches. Attach a stage with clips for holding slides, positioned halfway up the arm. Include a focusing knob on the side of the arm. At the top, place an eyepiece tube angled at 45 degrees. Add objective lenses on a rotating nosepiece just above the stage.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Vertical Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.3, location=(0, 0, 0.175))\narm = bpy.context.object\narm.name = \"Arm\"\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=0.15, location=(0, 0, 0.15))\nstage = bpy.context.object\nstage.name = \"Stage\"\n\n# Step 5: Create the Clips\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.05, 0, 0.16))\nclip1 = bpy.context.object\nclip1.name = \"Clip 1\"\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(-0.05, 0, 0.16))\nclip2 = bpy.context.object\nclip2.name = \"Clip 2\"\n\n# Step 6: Create the Focusing Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.04, location=(0.05, 0, 0.2), rotation=(0, math.pi/2, 0))\nknob = bpy.context.object\nknob.name = \"Focusing Knob\"\n\n# Step 7: Create the Eyepiece Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, 0, 0.325), rotation=(math.pi/4, 0, 0))\neyepiece_tube = bpy.context.object\neyepiece_tube.name = \"Eyepiece Tube\"\n\n# Step 8: Create the Nosepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.02, location=(0, 0, 0.22))\nnosepiece = bpy.context.object\nnosepiece.name = \"Nosepiece\"\n\n# Step 9: Create the Objective Lenses\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.04 * math.cos(angle)\n    y = 0.04 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.05, location=(x, y, 0.19))\n    objective = bpy.context.object\n    objective.name = f\"Objective {i + 1}\"", "color_brightness": "Dark", "verify": "human", "entropy": 3.972314115848401, "unit_n": 11, "param_ratio": 4.363636363636363}
{"id": "04cf43c9-1b93-43c2-b8bb-aaeca526d13f", "name": "Bird Cage", "instruction": "Could you design a bird cage with a spacious interior and multiple perches? Make sure it has a secure door and a removable tray for easy cleaning.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Cage\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncage = bpy.context.object\ncage.name = \"Cage\"\ncage.data.materials.append(metal_color)\n\n# Step 3: Create the Perches\nperch_positions = [(0, 0.5, 1.2), (0, -0.5, 0.8), (0.5, 0, 1.5), (-0.5, 0, 0.5)]\nfor i, pos in enumerate(perch_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=pos, rotation=(0, 0, 1.57))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n    perch.data.materials.append(metal_color)\n\n# Step 4: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.data.materials.append(metal_color)\n\n# Step 5: Create the Removable Tray\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, -0.25))\ntray = bpy.context.object\ntray.name = \"Tray\"\ntray.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4298654045602013, "unit_n": 4, "param_ratio": 5.75}
{"id": "122cb0c6-667a-4109-995e-6552b2f6d683", "name": "Sandwich", "instruction": "Can you show a sandwich with layers of lettuce, tomato, and cheese?", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.64, 0.38, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.83, 0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.804778023065548, "unit_n": 5, "param_ratio": 8.0}
{"id": "2fc24fa3-5dda-4966-9233-f7a9620a9a14", "name": "Company Logo", "instruction": "Create a 3D model of a company logo. The logo should be a combination of the company initials \"XYZ\" and an abstract shape representing innovation. The initials should be bold and prominent, while the abstract shape should be simple and integrated with the letters. Ensure the logo is symmetrical and balanced. The color scheme should be professional, using shades of blue and grey. Add a slight shadow effect to give the logo depth and dimension.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ngrey = bpy.data.materials.new(name=\"Grey\")\ngrey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\n\n# Step 2: Create the Letters \"XYZ\"\nbpy.ops.object.text_add(location=(-2, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"XYZ\"\ntext_obj.data.extrude = 0.1\ntext_obj.data.size = 1\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.data.materials.append(blue)\n\n# Convert text to mesh\nbpy.ops.object.convert(target='MESH')\n\n# Step 3: Create the Abstract Shape\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(2, 0, 0), major_radius=1, minor_radius=0.2)\nabstract_shape = bpy.context.object\nabstract_shape.data.materials.append(grey)\n\n# Step 4: Add Shadow Effect\nbpy.context.scene.render.engine = 'CYCLES'\nbpy.ops.object.light_add(type='SUN', location=(5, 5, 5))\nlight = bpy.context.object\nlight.data.energy = 5\n\n# Add a plane to catch the shadow\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, -1))\nplane = bpy.context.object\nplane.data.materials.append(grey)\n\n# Set the plane to receive shadows only\nplane.cycles.is_shadow_catcher = True\n\n# Adjust camera\nbpy.ops.object.camera_add(location=(5, -5, 5))\ncamera = bpy.context.object\ncamera.rotation_euler = (1.1, 0, 0.7)\nbpy.context.scene.camera = camera", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7191390554178305, "unit_n": 5, "param_ratio": 6.0}
{"id": "671b1b51-ec67-4b90-b9b8-be764ba4f8b0", "name": "Food Processor", "instruction": "Let's create a 3D model of a food processor. The food processor should have a base with a control panel that includes a dial and buttons for different settings. The main body is a clear container where the processing blades are visible. Include a lid with a chute for adding ingredients while the machine is running. The design should be practical and show all the necessary parts clearly.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nclear_container = bpy.data.materials.new(name=\"Clear Container\")\nclear_container.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Clear color with some transparency\ndial_color = bpy.data.materials.new(name=\"Dial Color\")\ndial_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\n# Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0.6, 0, 0.55))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.data.materials.append(dial_color)\n\n# Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.3, -0.2 + i * 0.2, 0.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Main Body (Clear Container)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.2, location=(0, 0, 1.1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(clear_container)\n\n# Step 5: Create the Processing Blades\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0, 0.7), rotation=(0, 0, math.pi/4))\nblade1 = bpy.context.object\nblade1.name = \"Blade 1\"\nblade1.data.materials.append(dial_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0, 0.7), rotation=(0, 0, -math.pi/4))\nblade2 = bpy.context.object\nblade2.name = \"Blade 2\"\nblade2.data.materials.append(dial_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 1.75))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 7: Create the Chute\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(0, 0.6, 1.9))\nchute = bpy.context.object\nchute.name = \"Chute\"\nchute.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.370260385499539, "unit_n": 10, "param_ratio": 6.5}
{"id": "8ae32c01-94f5-4bab-8621-b81d99a2a019", "name": "Screwdriver", "instruction": "Design a 3D model of a screwdriver. It should have a cross-shaped tip and a comfortable handle.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray for metal\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.6, 1)  # Dark blue for handle\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Cross-shaped Tip\n# Create the first part of the cross\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\ncross1 = bpy.context.object\ncross1.scale = (0.05, 0.05, 0.2)\ncross1.data.materials.append(metal_color)\n\n# Create the second part of the cross\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\ncross2 = bpy.context.object\ncross2.scale = (0.2, 0.05, 0.05)\ncross2.data.materials.append(metal_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.27157028373345, "unit_n": 4, "param_ratio": 7.0}
{"id": "1504ed1e-f078-4a48-b040-75a6005b6451", "name": "Coffee Grinder", "instruction": "Compare a manual coffee grinder with a cylindrical body and a crank handle to an electric coffee grinder with a button operation on the top.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray metal color\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark plastic color\n\n# Manual Coffee Grinder\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(-1.5, 0, 0))\nmanual_body = bpy.context.object\nmanual_body.name = \"Manual Grinder Body\"\nmanual_body.data.materials.append(metal)\n\n# Step 3: Create the Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.7, location=(-1.5, 0.5, 0.5), rotation=(0, math.pi/2, 0))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(metal)\n\n# Step 4: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-1.5, 0.85, 0.5))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(plastic)\n\n# Electric Coffee Grinder\n# Step 5: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(1.5, 0, 0))\nelectric_body = bpy.context.object\nelectric_body.name = \"Electric Grinder Body\"\nelectric_body.data.materials.append(plastic)\n\n# Step 6: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(1.5, 0, 0.55))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 2.752640120957686, "unit_n": 5, "param_ratio": 7.4}
{"id": "0d599a7d-432d-4068-aa35-53a1855bca24", "name": "Cat Scratching Post", "instruction": "Could you design a 3D model of a cat scratching post? It should have a sturdy base, a vertical post wrapped in sisal rope for scratching, and a platform at the top for the cat to perch on. Add a dangling toy from the top platform.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the base\npost_color = bpy.data.materials.new(name=\"PostColor\")\npost_color.diffuse_color = (0.8, 0.7, 0.5, 1)  # Sisal rope color\nplatform_color = bpy.data.materials.new(name=\"PlatformColor\")\nplatform_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the platform\ntoy_color = bpy.data.materials.new(name=\"ToyColor\")\ntoy_color.diffuse_color = (1, 0, 0, 1)  # Red color for the toy\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2.75))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.data.materials.append(platform_color)\n\n# Step 5: Create the Dangling Toy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -0.75, 2.5))\ntoy = bpy.context.object\ntoy.name = \"Toy\"\ntoy.data.materials.append(toy_color)\n\n# Create a string for the toy\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, -0.75, 2.75))\nstring = bpy.context.object\nstring.name = \"String\"\nstring.data.materials.append(post_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.5261811469743334, "unit_n": 5, "param_ratio": 8.4}
{"id": "20459aa3-267b-4692-8671-cb236f60b3ea", "name": "Pizza", "instruction": "Please create a 3D model of a pizza. It should be a round shape with a diameter of 12 inches. Include a layer of tomato sauce, cheese, and various toppings like pepperoni, mushrooms, and green peppers evenly spread on top.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough Color\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown dough color\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom Color\")\nmushroom_color.diffuse_color = (0.8, 0.8, 0.7, 1)  # Mushroom color\ngreen_pepper_color = bpy.data.materials.new(name=\"Green Pepper Color\")\ngreen_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green pepper color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.02, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(dough_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.01, location=(0, 0, 0.01))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.015))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Toppings\n# Pepperoni\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = 0.1 * math.cos(angle)\n    y = 0.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.005, location=(x, y, 0.02))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Mushrooms\nfor i in range(4):\n    angle = i * (2 * 3.14159 / 4) + 3.14159 / 8\n    x = 0.08 * math.cos(angle)\n    y = 0.08 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=0.005, location=(x, y, 0.02))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Green Peppers\nfor i in range(6):\n    angle = i * (2 * 3.14159 / 6) + 3.14159 / 12\n    x = 0.12 * math.cos(angle)\n    y = 0.12 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.005, location=(x, y, 0.02))\n    green_pepper = bpy.context.object\n    green_pepper.name = f\"Green Pepper {i + 1}\"\n    green_pepper.data.materials.append(green_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.898396383911173, "unit_n": 21, "param_ratio": 2.857142857142857}
{"id": "4fed24a4-cfe8-4cf9-84b0-8c9b40162c58", "name": "Trumpet", "instruction": "Create a 3D model of a trumpet. Ensure it has the typical curved shape with three valves.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.83, 0.68, 0.21, 1)  # Brass color\n\n# Step 2: Create the main body of the trumpet\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(brass)\n\n# Step 3: Create the bell of the trumpet\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.05, depth=0.5, location=(0, 0, 1.25))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.data.materials.append(brass)\n\n# Step 4: Create the mouthpiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0, -1.1))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"\nmouthpiece.data.materials.append(brass)\n\n# Step 5: Create the valves\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(0, 0.1, -0.5 + i * 0.5))\n    valve = bpy.context.object\n    valve.name = f\"Valve {i + 1}\"\n    valve.data.materials.append(brass)\n\n# Step 6: Create the curved pipe\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.05, location=(0, 0, -0.75), rotation=(math.pi/2, 0, 0))\ncurved_pipe = bpy.context.object\ncurved_pipe.name = \"Curved Pipe\"\ncurved_pipe.data.materials.append(brass)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.474297795561821, "unit_n": 7, "param_ratio": 4.857142857142857}
{"id": "616d3495-5c69-4b3a-ad8d-86aa088369fa", "name": "Smartphone", "instruction": "Create a smartphone. It should have a rectangular shape with rounded corners. The front should feature a large screen with minimal bezels. Include a camera and speaker at the top. The back should have a dual-camera setup and a small logo in the center.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.3, 0.6, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.28, 0.58, 0.01)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0, 0.55, 0.06))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Speaker\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.6, 0.06))\nspeaker = bpy.context.object\nspeaker.name = \"Speaker\"\nspeaker.scale = (0.1, 0.02, 0.01)\nspeaker.data.materials.append(black)\n\n# Step 6: Create the Back Cameras\nfor i in range(2):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0.1, -0.55 + i * 0.1, 0.06))\n    back_camera = bpy.context.object\n    back_camera.name = f\"Back Camera {i + 1}\"\n    back_camera.data.materials.append(black)\n\n# Step 7: Create the Logo\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.06))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.scale = (0.05, 0.05, 0.01)\nlogo.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.9900434552627693, "unit_n": 7, "param_ratio": 4.857142857142857}
{"id": "8b119847-1080-4f00-a3e3-919708ee090f", "name": "Dog Leash", "instruction": "Can you create a dog leash? It should be about 6 feet long with a loop handle at one end and a metal clip at the other end.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brownish color for the leash\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray color for the metal clip\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(0, 0, 0.9))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.8))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Metal Clip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, 0, 0))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=0.05, location=(0, 0, 0.075))\nclip_top = bpy.context.object\nclip_top.name = \"Clip Top\"\nclip_top.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.015, location=(0, 0, 0.1))\nclip_ball = bpy.context.object\nclip_ball.name = \"Clip Ball\"\nclip_ball.data.materials.append(metal_color)\n\n# Adjust the position of the leash to connect with the clip\nleash.location.z = 0.95", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3989279777066157, "unit_n": 5, "param_ratio": 6.8}
{"id": "75122be5-9124-48e8-a51c-df74a18ad0a2", "name": "Chess Set", "instruction": "Design a chess set. The board should be an 8x8 grid with alternating light and dark squares. Create the chess pieces, including pawns, rooks, knights, bishops, a queen, and a king for each side.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"LightSquare\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"DarkSquare\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create the Chess Pieces\n# Define a simple pawn shape\ndef create_pawn(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.2))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], location[2]))\n    bpy.ops.object.select_all(action='DESELECT')\n\n# Place pawns for both sides\nfor i in range(board_size):\n    create_pawn((i * square_size, 1 * square_size, 0.2))  # White pawns\n    create_pawn((i * square_size, 6 * square_size, 0.2))  # Black pawns\n\n# Note: For simplicity, only pawns are created. Other pieces (rooks, knights, bishops, queens, and kings) are omitted.", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.379981155559714, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "8d7cbb68-5551-4dca-a76c-e15f4d788862", "name": "Coaster Set", "instruction": "Create a set of four coasters, each being a perfect square with a side length of 4 inches. The coasters should have a simple, flat design.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coasters\nside_length = 0.1016  # 4 inches in meters\n\nfor i in range(4):\n    x = (i % 2) * (side_length + 0.02) - 0.06\n    y = (i // 2) * (side_length + 0.02) - 0.06\n    bpy.ops.mesh.primitive_plane_add(size=side_length, location=(x, y, 0))\n    coaster = bpy.context.object\n    coaster.name = f\"Coaster {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 4, "param_ratio": 0.75}
{"id": "049dcc13-22de-494d-8609-894f3849d9c3", "name": "Bookshelf", "instruction": "Imagine a bookshelf. It should be rectangular with five evenly spaced shelves. Each shelf should be wide enough to hold a variety of books. The sides and back should be solid for support. The overall height should be around 6 feet, and the width should be about 3 feet. The depth should be around 1 foot.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nheight = 6  # 6 feet\nwidth = 3   # 3 feet\ndepth = 1   # 1 foot\nshelf_thickness = 0.1\nnum_shelves = 5\n\n# Define the material\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Sides\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-width/2 + shelf_thickness/2, 0, height/2))\nleft_side = bpy.context.object\nleft_side.scale = (shelf_thickness/2, depth/2, height/2)\nleft_side.data.materials.append(wood_material)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(width/2 - shelf_thickness/2, 0, height/2))\nright_side = bpy.context.object\nright_side.scale = (shelf_thickness/2, depth/2, height/2)\nright_side.data.materials.append(wood_material)\n\n# Step 3: Create the Back\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -depth/2 + shelf_thickness/2, height/2))\nback = bpy.context.object\nback.scale = (width/2, shelf_thickness/2, height/2)\nback.data.materials.append(wood_material)\n\n# Step 4: Create the Shelves\nfor i in range(num_shelves + 1):\n    z = i * (height / num_shelves)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (width/2, depth/2, shelf_thickness/2)\n    shelf.data.materials.append(wood_material)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6605352918516596, "unit_n": 4, "param_ratio": 5.25}
{"id": "8b0af1e7-cc8f-485f-8e8c-50a56ab67bbc", "name": "Wallpaper Pattern", "instruction": "Design a wallpaper pattern featuring a repeating motif of leaves and flowers. The pattern should be evenly distributed and suitable for a living room.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleaf_green = bpy.data.materials.new(name=\"Leaf Green\")\nleaf_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for leaves\nflower_red = bpy.data.materials.new(name=\"Flower Red\")\nflower_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for flowers\n\n# Step 2: Create a Leaf\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0, 0))\nleaf = bpy.context.object\nleaf.name = \"Leaf\"\nleaf.data.materials.append(leaf_green)\n\n# Step 3: Create a Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0.7, 0, 0))\nflower = bpy.context.object\nflower.name = \"Flower\"\nflower.data.materials.append(flower_red)\n\n# Step 4: Duplicate the motif to create a pattern\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (i, j, 0)\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (i + 0.7, j, 0)\n\n# Step 5: Adjust the pattern to be evenly distributed\nfor obj in bpy.context.scene.objects:\n    if obj.name.startswith(\"Leaf\") or obj.name.startswith(\"Flower\"):\n        obj.location.x += (obj.location.x // 1) * 0.5\n        obj.location.y += (obj.location.y // 1) * 0.5", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.339360925110594, "unit_n": 2, "param_ratio": 9.0}
{"id": "623aae4a-e6c3-48f3-a2cd-2800be87700b", "name": "Chess Set", "instruction": "Design a chess set with a square board and 32 pieces. The board should have alternating light and dark squares. Include all the standard chess pieces: king, queen, bishops, knights, rooks, and pawns.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"LightSquare\")\nlight_square.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndark_square = bpy.data.materials.new(name=\"DarkSquare\")\ndark_square.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col, row, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create the Chess Pieces\n# Define a simple pawn shape for demonstration\ndef create_pawn(location, color):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    pawn = bpy.context.object\n    pawn.name = \"Pawn\"\n    pawn.data.materials.append(color)\n\n# Define the colors for the pieces\nwhite_piece = bpy.data.materials.new(name=\"WhitePiece\")\nwhite_piece.diffuse_color = (1, 1, 1, 1)  # White color\nblack_piece = bpy.data.materials.new(name=\"BlackPiece\")\nblack_piece.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Place pawns for demonstration\nfor col in range(board_size):\n    create_pawn((col, 1, 0.2), white_piece)\n    create_pawn((col, 6, 0.2), black_piece)\n\n# Note: For simplicity, only pawns are created. Other pieces (king, queen, bishops, knights, rooks) should be similarly created and placed.\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.601537842239587, "unit_n": 2, "param_ratio": 12.0}
{"id": "22229d25-d565-44b1-b138-b8fdc126a666", "name": "Chess Set", "instruction": "Let's design a chess set. The board should be checkered with alternating dark and light squares. Each piece should be distinct, with the pawns being the smallest and the king being the tallest. The pieces should be easily recognizable by their shapes.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\ndark_square = bpy.data.materials.new(name=\"Dark_Square\")\ndark_square.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_square = bpy.data.materials.new(name=\"Light_Square\")\nlight_square.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Chessboard\nfor i in range(8):\n    for j in range(8):\n        x = i - 3.5\n        y = j - 3.5\n        color = dark_square if (i + j) % 2 == 0 else light_square\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0))\n        cube = bpy.context.object\n        cube.name = f\"Square_{i}_{j}\"\n        cube.data.materials.append(color)\n\n# Step 3: Define Piece Shapes\ndef create_pawn(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=location)\n\ndef create_rook(location):\n    bpy.ops.mesh.primitive_cube_add(size=0.8, location=location)\n\ndef create_knight(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.1, location=location)\n    bpy.ops.mesh.primitive_cone_add(radius1=0.25, radius2=0, depth=0.3, location=(location[0], location[1], location[2] + 0.25))\n\ndef create_bishop(location):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.1, depth=0.8, location=location)\n\ndef create_queen(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.35, location=location)\n\ndef create_king(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.15, location=location)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(location[0], location[1], location[2] + 0.2))\n\n# Step 4: Create Pieces\nfor i in range(8):\n    create_pawn((i - 3.5, -2.5, 0.05))\ncreate_rook((-3.5, -3.5, 0.05))\ncreate_rook((3.5, -3.5, 0.05))\ncreate_knight((-2.5, -3.5, 0.05))\ncreate_knight((2.5, -3.5, 0.05))\ncreate_bishop((-1.5, -3.5, 0.05))\ncreate_bishop((1.5, -3.5, 0.05))\ncreate_queen((0.5, -3.5, 0.05))\ncreate_king((-0.5, -3.5, 0.05))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.652771867601744, "unit_n": 72, "param_ratio": 0.4861111111111111}
{"id": "83587ed5-ecdd-4ab7-9f1d-49a6100856fa", "name": "Centrifuge", "instruction": "Design a tabletop centrifuge with a transparent lid. Include a digital display panel on the front and a rotor with tube holders inside. Ensure the lid has a secure locking mechanism.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the body\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 1, 1)  # Blue color for the display\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (1, 1, 1, 0.3)  # Transparent color for the lid\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.6, location=(0, 0, 0.3))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.65))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.5))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(body_color)\n\n# Step 5: Create Tube Holders\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.55))\n    tube_holder = bpy.context.object\n    tube_holder.name = f\"Tube Holder {i + 1}\"\n    tube_holder.data.materials.append(body_color)\n\n# Step 6: Create the Display Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, -1.05, 0.3))\ndisplay_panel = bpy.context.object\ndisplay_panel.name = \"Display Panel\"\ndisplay_panel.scale[1] = 0.1\ndisplay_panel.scale[2] = 0.2\ndisplay_panel.data.materials.append(display_color)\n\n# Step 7: Create the Locking Mechanism\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.8, 0, 0.65))\nlock = bpy.context.object\nlock.name = \"Lock\"\nlock.data.materials.append(body_color)\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.8, 0, 0.65))\nlock = bpy.context.object\nlock.name = \"Lock\"\nlock.data.materials.append(body_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.338357565678385, "unit_n": 14, "param_ratio": 3.357142857142857}
{"id": "16ca60f3-d6b2-4b85-9acb-31005432905e", "name": "Sun Hat", "instruction": "Design a sun hat with a wide brim to provide ample shade. The hat should have a simple, classic shape with a ribbon around the base of the crown.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.94, 0.87, 0.54, 1)  # Light yellow color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Crown of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 3: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.05, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.05, location=(0, 0, 0.275))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.613024589652218, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "38aa8163-bac1-420d-a836-bdda46248938", "name": "Winter Hat", "instruction": "Let's design a winter hat. It should be a simple beanie style. The hat should be able to cover the ears and have a folded brim. Ensure it's designed to fit snugly on an average adult head. Add a small pom-pom at the top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Main Part of the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nmain_hat = bpy.context.object\nmain_hat.name = \"MainHat\"\nmain_hat.scale[2] = 1.2  # Elongate the sphere to cover the ears\nmain_hat.data.materials.append(hat_color)\n\n# Step 3: Create the Folded Brim\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.4))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.scale[2] = 0.5  # Flatten the torus to make it look like a folded brim\nbrim.data.materials.append(hat_color)\n\n# Step 4: Create the Pom-Pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2.2))\npom_pom = bpy.context.object\npom_pom.name = \"PomPom\"\npom_pom.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.263267285651372, "unit_n": 3, "param_ratio": 6.0}
{"id": "11f82f12-aaff-4f69-b2ad-e87f9720f189", "name": "Picture Frame", "instruction": "Can you create a 3D model of a picture frame? It should be rectangular and sized to fit a 5x7 inch photo.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nframe_width = 0.1  # Width of the frame border\nphoto_width = 5 * 0.0254  # Convert inches to meters\nphoto_height = 7 * 0.0254  # Convert inches to meters\nframe_depth = 0.02  # Depth of the frame\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = ((photo_width + 2 * frame_width) / 2, (photo_height + 2 * frame_width) / 2, frame_depth / 2)\nouter_frame.name = \"Outer Frame\"\n\n# Step 3: Create the Inner Cutout\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ninner_cutout = bpy.context.object\ninner_cutout.scale = (photo_width / 2, photo_height / 2, (frame_depth + 0.01) / 2)\ninner_cutout.name = \"Inner Cutout\"\n\n# Step 4: Boolean Modifier to Cut Out the Inner Part\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_cutout\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner cutout object\nbpy.data.objects.remove(inner_cutout, do_unlink=True)\n\n# Step 5: Set the material for the frame\nframe_material = bpy.data.materials.new(name=\"Frame Material\")\nframe_material.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brownish color\nouter_frame.data.materials.append(frame_material)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "8212aa2c-d15a-4195-9798-e9daba6cd5dc", "name": "Capacitor", "instruction": "Generate a model of a capacitor. It should be cylindrical with two terminals extending from the top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncapacitor_body_color = bpy.data.materials.new(name=\"Capacitor Body Color\")\ncapacitor_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nterminal_color = bpy.data.materials.new(name=\"Terminal Color\")\nterminal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Capacitor Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 0.25))\ncapacitor_body = bpy.context.object\ncapacitor_body.name = \"Capacitor Body\"\ncapacitor_body.data.materials.append(capacitor_body_color)\n\n# Step 3: Create the Terminals\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(x, 0, 0.65))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5072017312922377, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "82cff3f3-1fcb-4b70-9ec3-122de8c38acd", "name": "Acoustic Guitar", "instruction": "Let's craft an acoustic guitar. It should have six strings, a hollow wooden body with a sound hole in the middle, and a fretted neck. The headstock should feature tuning pegs, and there should be a bridge to anchor the strings. The body should be curved and symmetrical, with a pickguard under the sound hole.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden color\nstring_color = bpy.data.materials.new(name=\"String\")\nstring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for strings\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[0] = 1.4  # Make it oval\nbody.scale[1] = 1\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Sound Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 0.06))\nsound_hole = bpy.context.object\nsound_hole.name = \"Sound Hole\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.delete(type='ONLY_FACE')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.2, 0))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.scale[1] = 3  # Lengthen the neck\nneck.data.materials.append(wood_color)\n\n# Step 5: Create the Headstock\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 2.8, 0))\nheadstock = bpy.context.object\nheadstock.name = \"Headstock\"\nheadstock.scale[0] = 0.5\nheadstock.scale[1] = 0.3\nheadstock.data.materials.append(wood_color)\n\n# Step 6: Create the Tuning Pegs\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, 2.9, 0))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(string_color)\n\n# Step 7: Create the Bridge\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.5, 0))\nbridge = bpy.context.object\nbridge.name = \"Bridge\"\nbridge.scale[0] = 0.5\nbridge.scale[1] = 0.1\nbridge.data.materials.append(wood_color)\n\n# Step 8: Create the Strings\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=3.3, location=(x, 1.15, 0))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(string_color)\n\n# Step 9: Create the Pickguard\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(-0.5, -0.3, 0.06))\npickguard = bpy.context.object\npickguard.name = \"Pickguard\"\npickguard.rotation_euler[0] = math.pi / 2\npickguard.scale[0] = 0.5\npickguard.scale[1] = 0.3\npickguard.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8552433855889103, "unit_n": 18, "param_ratio": 2.5555555555555554}
{"id": "26bddb9e-a604-4613-ad76-1e0ca4b9da45", "name": "Traffic Sign", "instruction": "Create a 3D model of a traffic sign. The sign should be a simple rectangular shape with the word \"STOP\" written in bold letters. Place the sign on a pole.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\nimport bmesh\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsign_color = bpy.data.materials.new(name=\"SignColor\")\nsign_color.diffuse_color = (1, 0, 0, 1)  # Red color for the sign\npole_color = bpy.data.materials.new(name=\"PoleColor\")\npole_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the pole\n\n# Step 2: Create the Sign\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2))\nsign = bpy.context.object\nsign.scale = (1, 0.1, 0.5)\nsign.name = \"Sign\"\nsign.data.materials.append(sign_color)\n\n# Step 3: Add Text to the Sign\nbpy.ops.object.text_add(location=(0, 0.11, 2))\ntext = bpy.context.object\ntext.data.body = \"STOP\"\ntext.data.size = 0.4\ntext.data.align_x = 'CENTER'\ntext.data.align_y = 'CENTER'\ntext.rotation_euler = (0, 0, 0)\ntext.name = \"Text\"\ntext.data.extrude = 0.05\n\n# Convert text to mesh and join with sign\nbpy.ops.object.convert(target='MESH')\nbpy.ops.object.select_all(action='DESELECT')\nsign.select_set(True)\ntext.select_set(True)\nbpy.context.view_layer.objects.active = sign\nbpy.ops.object.join()\n\n# Step 4: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, 0))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(pole_color)\n\n# Step 5: Position the Sign on the Pole\nsign.location.z = 2.5\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.016602783517685, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "0f5c7844-a31f-42de-b5d5-d01183312f6c", "name": "Dog Leash", "instruction": "Design a dog leash. Start with a long, thin strap, about 5 feet in length. Add a loop handle at one end and a metal clasp at the other end for attaching to a collar. The leash should be straightforward and practical.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrap_color = bpy.data.materials.new(name=\"StrapColor\")\nstrap_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.524, location=(0, 0, 0.762))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(strap_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.524))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(strap_color)\n\n# Step 4: Create the Metal Clasp\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(0, 0, 0))\nclasp_body = bpy.context.object\nclasp_body.name = \"ClaspBody\"\nclasp_body.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0, -0.075))\nclasp_sphere = bpy.context.object\nclasp_sphere.name = \"ClaspSphere\"\nclasp_sphere.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.304830130728629, "unit_n": 4, "param_ratio": 7.25}
{"id": "1d73e412-69e0-4f17-a6f4-e7ec3fd45294", "name": "Sandwich", "instruction": "Create a sandwich with two slices of bread. Include layers of lettuce, tomato, and cheese.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "732f1676-c011-4f3a-9847-c6a96e071b70", "name": "Desktop Organizer", "instruction": "Design a desktop organizer for office supplies. It should include sections for pens, notepads, and small office accessories. The overall shape is rectangular with multiple compartments of varying sizes. Ensure there is a dedicated space for sticky notes and a small drawer at the bottom for miscellaneous items. The organizer should be functional and fit on a standard office desk.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Back Wall\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1))\nback_wall = bpy.context.object\nback_wall.name = \"Back Wall\"\nback_wall.scale[2] = 1\nback_wall.scale[1] = 0.05\nback_wall.data.materials.append(wood_color)\n\n# Step 4: Create the Side Walls\nfor i in [-0.9, 0.9]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i, 0, 1))\n    side_wall = bpy.context.object\n    side_wall.name = f\"Side Wall {i}\"\n    side_wall.scale[0] = 0.05\n    side_wall.scale[2] = 1\n    side_wall.data.materials.append(wood_color)\n\n# Step 5: Create the Pen Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-0.5, 0.4, 0.75))\npen_compartment = bpy.context.object\npen_compartment.name = \"Pen Compartment\"\npen_compartment.scale[0] = 0.4\npen_compartment.scale[1] = 0.4\npen_compartment.scale[2] = 0.5\npen_compartment.data.materials.append(wood_color)\n\n# Step 6: Create the Notepad Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0.5, 0.4, 0.75))\nnotepad_compartment = bpy.context.object\nnotepad_compartment.name = \"Notepad Compartment\"\nnotepad_compartment.scale[0] = 0.4\nnotepad_compartment.scale[1] = 0.4\nnotepad_compartment.scale[2] = 0.5\nnotepad_compartment.data.materials.append(wood_color)\n\n# Step 7: Create the Sticky Notes Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.4, 0.75))\nsticky_notes_compartment = bpy.context.object\nsticky_notes_compartment.name = \"Sticky Notes Compartment\"\nsticky_notes_compartment.scale[0] = 0.4\nsticky_notes_compartment.scale[1] = 0.4\nsticky_notes_compartment.scale[2] = 0.5\nsticky_notes_compartment.data.materials.append(wood_color)\n\n# Step 8: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.4, 0.25))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.scale[0] = 0.8\ndrawer.scale[1] = 0.8\ndrawer.scale[2] = 0.2\ndrawer.data.materials.append(wood_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.639022697939713, "unit_n": 7, "param_ratio": 4.714285714285714}
{"id": "3a2abf21-3968-4b0b-a6c7-938e90ae739b", "name": "Backpack", "instruction": "Let's design a backpack with practicality in mind. The backpack should have a main compartment with a zipper closure and a smaller front pocket with a zipper. Include two adjustable shoulder straps for comfortable carrying. Add a side pocket on each side for holding water bottles. Ensure the backpack has a top handle for easy lifting. The overall design should be suitable for daily use, whether for school, work, or travel.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"BackpackColor\")\nbackpack_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.5, 0.3, 0.7)\nmain_compartment.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.65, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.1, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.45 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.3, 1))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n    strap.scale = (0.05, 0.02, 0.6)\n    strap.data.materials.append(backpack_color)\n\n# Step 5: Create the Side Pockets\nfor i in range(2):\n    x = 0.55 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    side_pocket = bpy.context.object\n    side_pocket.name = f\"Side Pocket {i + 1}\"\n    side_pocket.scale = (0.05, 0.1, 0.3)\n    side_pocket.data.materials.append(backpack_color)\n\n# Step 6: Create the Top Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.3, 1.7))\ntop_handle = bpy.context.object\ntop_handle.name = \"Top Handle\"\ntop_handle.scale = (0.3, 0.05, 0.05)\ntop_handle.data.materials.append(backpack_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6292675875580374, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "3ae04964-3b92-4fc4-85f9-d5c354a7a70a", "name": "Sailboat", "instruction": "Could you model a sailboat with a single mast and a triangular sail? Include a rudder at the back for steering.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboat_color = bpy.data.materials.new(name=\"Boat Color\")\nboat_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brownish color for the boat\nsail_color = bpy.data.materials.new(name=\"Sail Color\")\nsail_color.diffuse_color = (1, 1, 1, 1)  # White color for the sail\n\n# Step 2: Create the Hull\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nhull = bpy.context.object\nhull.name = \"Hull\"\nhull.scale = (1, 0.3, 0.2)\nhull.data.materials.append(boat_color)\n\n# Step 3: Create the Mast\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nmast = bpy.context.object\nmast.name = \"Mast\"\nmast.data.materials.append(boat_color)\n\n# Step 4: Create the Sail\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=1.5, location=(0, 0.5, 1.5), rotation=(0, 0, math.pi/2))\nsail = bpy.context.object\nsail.name = \"Sail\"\nsail.data.materials.append(sail_color)\n\n# Step 5: Create the Rudder\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.7, -0.1))\nrudder = bpy.context.object\nrudder.name = \"Rudder\"\nrudder.scale = (0.1, 0.05, 0.3)\nrudder.data.materials.append(boat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.1848511486059707, "unit_n": 4, "param_ratio": 8.0}
{"id": "738db20c-fb65-4c6c-aa4e-8c7978fdb703", "name": "Recliner Chair", "instruction": "Can you create a recliner chair? It should have a comfortable seat and backrest with a footrest that can be extended. The chair should be adjustable to different reclining positions.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_blue = bpy.data.materials.new(name=\"Dark Blue\")\ndark_blue.diffuse_color = (0.0, 0.0, 0.5, 1)  # Dark blue color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale = (1, 1, 0.2)\nseat.data.materials.append(dark_blue)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1, 0.2, 1)\nbackrest.data.materials.append(dark_blue)\n\n# Step 4: Create the Footrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.6, 0.3))\nfootrest = bpy.context.object\nfootrest.name = \"Footrest\"\nfootrest.scale = (1, 0.5, 0.1)\nfootrest.data.materials.append(dark_blue)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 1.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.8))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 1, 0.2)\n    armrest.data.materials.append(dark_blue)\n\n# Step 6: Adjust the Backrest for reclining\nbackrest.rotation_euler = (math.radians(30), 0, 0)", "color_brightness": "Dark", "verify": "human", "entropy": 3.342305863833965, "unit_n": 5, "param_ratio": 4.2}
{"id": "587bfa39-c816-4777-a6a6-10608e4c4c06", "name": "Chessboard", "instruction": "Let's visualize a 3D model of a chessboard. The chessboard has alternating light and dark squares arranged in a grid pattern. Each square is clearly defined, and there is a border around the edge.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\nborder_color = bpy.data.materials.new(name=\"Border\")\nborder_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nboard_size = 8 * square_size\n\n# Create the squares\nfor i in range(8):\n    for j in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create the Border\nbpy.ops.mesh.primitive_plane_add(size=board_size + 2 * square_size, location=(3.5 * square_size, 3.5 * square_size, -0.01))\nborder = bpy.context.object\nborder.name = \"Border\"\nborder.scale = (1.1, 1.1, 1)\nborder.data.materials.append(border_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.3663357198968535, "unit_n": 65, "param_ratio": 0.3384615384615385}
{"id": "16287c47-6ac5-47b2-aa29-9280ee521f72", "name": "Puzzle", "instruction": "Create a 3D jigsaw puzzle with 10 pieces.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npuzzle_color = bpy.data.materials.new(name=\"PuzzleColor\")\npuzzle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Puzzle Pieces\nfor i in range(10):\n    x = (i % 5) * 2\n    y = (i // 5) * 2\n    bpy.ops.mesh.primitive_cube_add(size=1.8, location=(x, y, 0))\n    piece = bpy.context.object\n    piece.name = f\"Piece {i + 1}\"\n    piece.data.materials.append(puzzle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.382026634673881, "unit_n": 10, "param_ratio": 0.9}
{"id": "2db42246-21a2-4dee-bf4d-fe0b2fd5bb6e", "name": "Cat Bed", "instruction": "Envision a cat bed shaped like a small dome with an entrance at the front.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Dome\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.5))\ndome = bpy.context.object\ndome.name = \"Dome\"\n\n# Step 3: Create the Entrance\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, -0.5, 0.5), rotation=(1.5708, 0, 0))\nentrance = bpy.context.object\nentrance.name = \"Entrance\"\n\n# Step 4: Boolean Modifier to Subtract Entrance from Dome\nmod_bool = dome.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = entrance\n\n# Apply the modifier\nbpy.context.view_layer.objects.active = dome\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the entrance object\nbpy.data.objects.remove(entrance, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.543487867035222, "unit_n": 2, "param_ratio": 6.0}
{"id": "7b46c6b4-8b5f-4b03-bb68-c3214db6e7d1", "name": "Puzzle Mat", "instruction": "How would you feel about creating a puzzle mat that can accommodate 1000 pieces, with a flat surface and borders to prevent pieces from falling off?", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmat_color = bpy.data.materials.new(name=\"Mat Color\")\nmat_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\nborder_color = bpy.data.materials.new(name=\"Border Color\")\nborder_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Mat Surface\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nmat = bpy.context.object\nmat.name = \"Mat\"\nmat.data.materials.append(mat_color)\n\n# Step 3: Create the Borders\nborder_thickness = 0.1\nborder_height = 0.2\n\n# Left Border\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-5 + border_thickness / 2, 0, border_height / 2))\nleft_border = bpy.context.object\nleft_border.scale = (border_thickness / 2, 5, border_height / 2)\nleft_border.name = \"Left Border\"\nleft_border.data.materials.append(border_color)\n\n# Right Border\nbpy.ops.mesh.primitive_cube_add(size=1, location=(5 - border_thickness / 2, 0, border_height / 2))\nright_border = bpy.context.object\nright_border.scale = (border_thickness / 2, 5, border_height / 2)\nright_border.name = \"Right Border\"\nright_border.data.materials.append(border_color)\n\n# Top Border\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 5 - border_thickness / 2, border_height / 2))\ntop_border = bpy.context.object\ntop_border.scale = (5, border_thickness / 2, border_height / 2)\ntop_border.name = \"Top Border\"\ntop_border.data.materials.append(border_color)\n\n# Bottom Border\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -5 + border_thickness / 2, border_height / 2))\nbottom_border = bpy.context.object\nbottom_border.scale = (5, border_thickness / 2, border_height / 2)\nbottom_border.name = \"Bottom Border\"\nbottom_border.data.materials.append(border_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.9673881112917146, "unit_n": 5, "param_ratio": 6.0}
{"id": "3cd1c5ae-0fe2-4877-847c-c701cb339a81", "name": "Rolling Suitcase", "instruction": "How about a rolling suitcase with a telescoping handle and four wheels?", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nsuitcase = bpy.context.object\nsuitcase.name = \"Suitcase Body\"\nsuitcase.scale = (0.5, 0.25, 0.75)\nsuitcase.data.materials.append(suitcase_color)\n\n# Step 3: Create the Wheels\nfor i in range(4):\n    x = 0.4 * (i % 2) - 0.2\n    y = 0.2 * (i // 2) - 0.1\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 0.05), rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(handle_color)\n\n# Step 4: Create the Telescoping Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.5))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.scale = (0.05, 0.05, 0.5)\nhandle_base.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.25))\nhandle_top = bpy.context.object\nhandle_top.name = \"Handle Top\"\nhandle_top.scale = (0.05, 0.05, 0.25)\nhandle_top.data.materials.append(handle_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.0428921099670645, "unit_n": 7, "param_ratio": 4.285714285714286}
{"id": "106c0beb-20bf-4c8d-8864-c2cc18a4ad3f", "name": "Trumpet", "instruction": "Let's create a 3D model of a trumpet. Start by designing a long, cylindrical main body with a flared bell at the end. Add three evenly spaced valves on the top of the body. Finally, include a mouthpiece at the opposite end of the bell.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 3: Create the Flared Bell\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.05, depth=0.6, location=(0, 0, 2.3))\nbell = bpy.context.object\nbell.name = \"Bell\"\n\n# Step 4: Create the Valves\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0.1, 0.5 + i * 0.6))\n    valve = bpy.context.object\n    valve.name = f\"Valve {i + 1}\"\n\n# Step 5: Create the Mouthpiece\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.3, location=(0, 0, -0.15))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.138926093410566, "unit_n": 6, "param_ratio": 3.6666666666666665}
{"id": "5f9f40ff-35e9-4925-ae15-27634fd57eef", "name": "Pet Carrier", "instruction": "Create a pet carrier with a spacious interior, a secure door, and ventilation slots on all sides. It should have a handle on top and a shoulder strap for easy carrying. The carrier should be suitable for small to medium-sized pets.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncarrier_color = bpy.data.materials.new(name=\"Carrier Color\")\ncarrier_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1, 1.5, 1)\nmain_body.data.materials.append(carrier_color)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(0, -1.5, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.rotation_euler = (1.5708, 0, 0)\ndoor.data.materials.append(carrier_color)\n\n# Step 4: Create Ventilation Slots\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 1.5, 0.5 + i * 0.3))\n    slot = bpy.context.object\n    slot.name = f\"Ventilation Slot {i + 1}\"\n    slot.scale = (1, 0.05, 0.05)\n    slot.data.materials.append(carrier_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 2.2), rotation=(1.5708, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(carrier_color)\n\n# Step 6: Create the Shoulder Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(0, 0, 1.5), rotation=(0, 1.5708, 0))\nstrap = bpy.context.object\nstrap.name = \"Shoulder Strap\"\nstrap.data.materials.append(carrier_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.911882995852706, "unit_n": 9, "param_ratio": 3.6666666666666665}
{"id": "2f70077b-c72a-40aa-a3fd-c3e2575b5cd2", "name": "Living Room Arrangement", "instruction": "Design a living room arrangement with a sofa, coffee table, and a TV stand. Place the sofa facing the TV stand, with the coffee table in between. Include a rug under the coffee table and a floor lamp next to the sofa. Add a bookshelf against one wall and a few decorative items on the coffee table and TV stand. Ensure the layout is functional and visually balanced.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntable_color = bpy.data.materials.new(name=\"Table Color\")\ntable_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\ntv_stand_color = bpy.data.materials.new(name=\"TV Stand Color\")\ntv_stand_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color\nrug_color = bpy.data.materials.new(name=\"Rug Color\")\nrug_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlamp_color = bpy.data.materials.new(name=\"Lamp Color\")\nlamp_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\nbookshelf_color = bpy.data.materials.new(name=\"Bookshelf Color\")\nbookshelf_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color\ndecor_color = bpy.data.materials.new(name=\"Decor Color\")\ndecor_color.diffuse_color = (0.9, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -3, 1))\nsofa = bpy.context.object\nsofa.name = \"Sofa\"\nsofa.scale = (1, 0.5, 0.5)\nsofa.data.materials.append(sofa_color)\n\n# Step 3: Create the Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1, 0.5))\ncoffee_table = bpy.context.object\ncoffee_table.name = \"Coffee Table\"\ncoffee_table.scale = (0.5, 0.5, 0.1)\ncoffee_table.data.materials.append(table_color)\n\n# Step 4: Create the TV Stand\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 1, 0.75))\ntv_stand = bpy.context.object\ntv_stand.name = \"TV Stand\"\ntv_stand.scale = (0.75, 0.3, 0.3)\ntv_stand.data.materials.append(tv_stand_color)\n\n# Step 5: Create the Rug\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, -1, 0))\nrug = bpy.context.object\nrug.name = \"Rug\"\nrug.scale = (1, 0.5, 1)\nrug.data.materials.append(rug_color)\n\n# Step 6: Create the Floor Lamp\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-1.5, -3, 1))\nlamp_stand = bpy.context.object\nlamp_stand.name = \"Lamp Stand\"\nlamp_stand.data.materials.append(lamp_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(-1.5, -3, 2))\nlamp_shade = bpy.context.object\nlamp_shade.name = \"Lamp Shade\"\nlamp_shade.data.materials.append(lamp_color)\n\n# Step 7: Create the Bookshelf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(3, 0, 1))\nbookshelf = bpy.context.object\nbookshelf.name = \"Bookshelf\"\nbookshelf.scale = (0.3, 1, 1)\nbookshelf.data.materials.append(bookshelf_color)\n\n# Step 8: Add Decorative Items\n# On Coffee Table\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -1, 0.6))\ndecor1 = bpy.context.object\ndecor1.name = \"Decor Item 1\"\ndecor1.data.materials.append(decor_color)\n\n# On TV Stand\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 1, 1))\ndecor2 = bpy.context.object\ndecor2.name = \"Decor Item 2\"\ndecor2.data.materials.append(decor_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.9820807958444293, "unit_n": 9, "param_ratio": 8.0}
{"id": "32905aa7-c035-4e83-8fbb-c6fc1a1f769e", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. Include a screen, buttons, and a camera.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.45, 0.9, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Buttons\n# Side Button\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.55, 0, 0))\nside_button = bpy.context.object\nside_button.name = \"Side Button\"\nside_button.scale = (0.05, 0.2, 0.01)\nside_button.data.materials.append(dark_gray)\n\n# Bottom Button\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.95, 0))\nbottom_button = bpy.context.object\nbottom_button.name = \"Bottom Button\"\nbottom_button.scale = (0.2, 0.05, 0.01)\nbottom_button.data.materials.append(dark_gray)\n\n# Step 5: Create the Camera\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, 0.9, 0.06))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to lay flat\ncamera.data.materials.append(dark_gray)", "color_brightness": "Dark", "verify": "human", "entropy": 2.226982986499198, "unit_n": 5, "param_ratio": 7.2}
{"id": "6266caf0-768c-4f10-a161-9edbf05b6f5d", "name": "Floral Ornament", "instruction": "Design a 3D floral ornament. The ornament should feature a central flower with five petals, surrounded by smaller buds and leaves. The arrangement should be symmetrical and visually balanced.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0, 0, 1)  # Red color\nbud_color = bpy.data.materials.new(name=\"Bud Color\")\nbud_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Central Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Center\"\ncenter.data.materials.append(flower_color)\n\n# Create the Petals\nfor i in range(5):\n    angle = i * (2 * math.pi / 5)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(flower_color)\n\n# Step 3: Create the Buds\nfor i in range(5):\n    angle = i * (2 * math.pi / 5) + (math.pi / 5)\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0))\n    bud = bpy.context.object\n    bud.name = f\"Bud {i + 1}\"\n    bud.data.materials.append(bud_color)\n\n# Step 4: Create the Leaves\nfor i in range(5):\n    angle = i * (2 * math.pi / 5) + (math.pi / 10)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=(x, y, 0))\n    leaf = bpy.context.object\n    leaf.name = f\"Leaf {i + 1}\"\n    leaf.rotation_euler = (0, 0, angle)\n    leaf.data.materials.append(leaf_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.028763442664001, "unit_n": 16, "param_ratio": 1.9375}
{"id": "35946f40-e48e-4159-b652-2f8f6bd5df8f", "name": "Syringe", "instruction": "Design a syringe with a cylindrical barrel marked with measurement lines, a plunger, and a needle. The plunger should fit snugly into the barrel. At the base of the needle, add a small, clear cap to cover it when not in use. Include a detachable needle guard for safety. The syringe should also have a finger grip on either side of the barrel to allow for precise control during use.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent material\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(clear_material)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 2.75))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(clear_material)\n\n# Step 5: Create the Needle Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=0.55, location=(0, 0, 2.75))\nneedle_cap = bpy.context.object\nneedle_cap.name = \"Needle Cap\"\nneedle_cap.data.materials.append(clear_material)\n\n# Step 6: Create the Needle Guard\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.6, location=(0, 0, 2.75))\nneedle_guard = bpy.context.object\nneedle_guard.name = \"Needle Guard\"\nneedle_guard.data.materials.append(clear_material)\n\n# Step 7: Create the Finger Grips\nfor i in range(2):\n    x = 0.15 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, 0, 1))\n    finger_grip = bpy.context.object\n    finger_grip.name = f\"Finger Grip {i + 1}\"\n    finger_grip.data.materials.append(clear_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.950479292607594, "unit_n": 7, "param_ratio": 5.0}
{"id": "5215245b-ae72-408d-9139-f71c997bf282", "name": "Chocolate Bar", "instruction": "Let's create a chocolate bar. It should be a rectangular piece, divided into smaller squares for easy breaking. The bar should have a glossy surface and be wrapped in a simple wrapper.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create Chocolate Bar Base (Rectangular piece)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nchocolate_bar = bpy.context.object\nchocolate_bar.name = \"Chocolate Bar\"\nchocolate_bar.scale = (2, 1, 0.2)  # Adjust dimensions for rectangular shape\n\n# Step 3: Divide into smaller squares\nfor i in range(5):\n    for j in range(2):\n        x = (i - 2) * 0.4\n        y = (j - 0.5) * 0.4\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0.1))\n        square = bpy.context.object\n        square.name = f\"Square {i}{j}\"\n\n# Step 4: Create Glossy Surface Material\nglossy = bpy.data.materials.new(name=\"Glossy Chocolate\")\nglossy.use_nodes = True\nglossy.node_tree.nodes.clear()\nnode = glossy.node_tree.nodes.new('ShaderNodeBsdfGlossy')\nnode.inputs['Roughness'].default_value = 0.1\nglossy.node_tree.nodes.new('ShaderNodeOutputMaterial')\nglossy.node_tree.links.new(node.outputs['BSDF'], glossy.node_tree.nodes['Material Output'].inputs['Surface'])\n\n# Apply material to chocolate bar\nchocolate_bar.data.materials.append(glossy)\n\n# Step 5: Create Simple Wrapper\nbpy.ops.mesh.primitive_cube_add(size=1.2, location=(0, 0, -0.1))\nwrapper = bpy.context.object\nwrapper.name = \"Wrapper\"\nwrapper.scale = (2.1, 1.1, 0.3)  # Adjust dimensions for wrapper size\n\n# Step 6: Assign Material to Wrapper\nwrapper_material = bpy.data.materials.new(name=\"Wrapper Material\")\nwrapper_material.use_nodes = True\nwrapper_material.node_tree.nodes.clear()\nnode = wrapper_material.node_tree.nodes.new('ShaderNodeBsdfDiffuse')\nnode.inputs['Color'].default_value = (0.8, 0.8, 0.8, 1)  # Light gray color\nwrapper_material.node_tree.nodes.new('ShaderNodeOutputMaterial')\nwrapper_material.node_tree.links.new(node.outputs['BSDF'], wrapper_material.node_tree.nodes['Material Output'].inputs['Surface'])\nwrapper.data.materials.append(wrapper_material)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.564348191467836, "unit_n": 12, "param_ratio": 1.1666666666666667}
{"id": "3f5b663e-9c1c-48dd-a433-5313fa476337", "name": "Floral Ornament", "instruction": "Create a 3D model of a floral ornament. The ornament consists of a central flower with petals radiating outward. Surround the central flower with smaller flowers and leaves. Compare this with a geometric ornament.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 0.5, 0, 1)  # Green color\n\n# Step 2: Create the Central Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\ncentral_flower = bpy.context.object\ncentral_flower.name = \"Central Flower\"\ncentral_flower.data.materials.append(flower_color)\n\n# Create Petals for the Central Flower\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(flower_color)\n\n# Step 3: Create Surrounding Smaller Flowers\nfor i in range(6):\n    angle = i * math.pi / 3\n    x = 1.0 * math.cos(angle)\n    y = 1.0 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(x, y, 0))\n    small_flower = bpy.context.object\n    small_flower.name = f\"Small Flower {i + 1}\"\n    small_flower.data.materials.append(flower_color)\n\n    # Create Petals for the Smaller Flowers\n    for j in range(6):\n        petal_angle = j * math.pi / 3\n        petal_x = x + 0.25 * math.cos(petal_angle)\n        petal_y = y + 0.25 * math.sin(petal_angle)\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(petal_x, petal_y, 0))\n        small_petal = bpy.context.object\n        small_petal.name = f\"Small Petal {i + 1}-{j + 1}\"\n        small_petal.data.materials.append(flower_color)\n\n# Step 4: Create Leaves\nfor i in range(6):\n    angle = i * math.pi / 3 + math.pi / 6\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.3, location=(x, y, 0), rotation=(0, 0, angle))\n    leaf = bpy.context.object\n    leaf.name = f\"Leaf {i + 1}\"\n    leaf.data.materials.append(leaf_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.490872589916814, "unit_n": 57, "param_ratio": 0.5789473684210527}
{"id": "1e00b0db-e4a3-4bb4-b5b5-2c4fa268d22a", "name": "Stapler", "instruction": "Create a 3D model of a stapler. The stapler should have a two-part design with a hinge in the middle. The top part should be flat and slightly curved, while the bottom part should have a base for resting on a surface.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstapler_color = bpy.data.materials.new(name=\"Stapler Color\")\nstapler_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Bottom Part (Base)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1.5, 0.5, 0.1)\nbase.data.materials.append(stapler_color)\n\n# Step 3: Create the Top Part\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.75))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale = (1.5, 0.5, 0.1)\ntop.rotation_euler = (math.radians(10), 0, 0)  # Slightly curved\ntop.data.materials.append(stapler_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, -0.25, 0.5), rotation=(0, math.radians(90), 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(stapler_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.96325307788537, "unit_n": 3, "param_ratio": 7.0}
{"id": "6ee9affd-76ad-44ff-9b3c-00b499b9ac2e", "name": "Drum", "instruction": "Design a drum that can be used in a musical band. It should have a cylindrical body and a drumhead stretched across the top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "7c7ed94e-50df-4416-b4d6-e445670b3ce7", "name": "Dog Leash", "instruction": "Design a dog leash with a loop handle on one end and a clip on the other. The leash should be straight and about 1 meter long.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(0, 0, 0.5))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0, 0))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.data.materials.append(leash_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.19522619251311, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "19981f59-7fee-4513-b9d9-63d6ac66d23a", "name": "Centrifuge", "instruction": "How does a centrifuge differ from a mixer? Create a centrifuge with a rotor and sample tubes.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, -0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n\n# Step 3: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.05))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(gray)\n\n# Step 4: Create the Sample Tubes\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.15), rotation=(math.pi/2, 0, angle))\n    tube = bpy.context.object\n    tube.name = f\"Tube {i + 1}\"\n    tube.data.materials.append(blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.770864168485307, "unit_n": 10, "param_ratio": 2.8}
{"id": "34945e4c-db25-43a6-976c-a16da4886a6d", "name": "Travel Wallet", "instruction": "Create a 3D model of a travel wallet. It should have multiple compartments for cards, cash, and a passport. The wallet should fold closed and have a secure closure mechanism.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Wallet\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.scale = (1, 0.1, 0.6)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(wallet_color)\n\n# Step 3: Create the Card Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.8 + i * 0.8, 0.11, 0.3))\n    card_compartment = bpy.context.object\n    card_compartment.scale = (0.35, 0.02, 0.15)\n    card_compartment.name = f\"Card Compartment {i + 1}\"\n    card_compartment.data.materials.append(wallet_color)\n\n# Step 4: Create the Cash Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.11, -0.2))\ncash_compartment = bpy.context.object\ncash_compartment.scale = (0.9, 0.02, 0.25)\ncash_compartment.name = \"Cash Compartment\"\ncash_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create the Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.11, 0.6))\npassport_compartment = bpy.context.object\npassport_compartment.scale = (0.9, 0.02, 0.35)\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.data.materials.append(wallet_color)\n\n# Step 6: Create the Closure Mechanism\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, 0))\nclosure_mechanism = bpy.context.object\nclosure_mechanism.scale = (0.1, 0.02, 0.6)\nclosure_mechanism.name = \"Closure Mechanism\"\nclosure_mechanism.data.materials.append(wallet_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.5302465617637595, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "5682df42-932e-436e-92e1-4900e6ee843e", "name": "Duffel Bag", "instruction": "Create a 3D model of a duffel bag. It should be cylindrical with a zipper running along the top. Include two handles on either side and an adjustable shoulder strap attached with clips.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body (Cylindrical shape)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0))\nduffel_bag = bpy.context.object\nduffel_bag.name = \"Duffel Bag\"\n\n# Step 3: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=1.0, location=(0, 0, 0.6))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.9, 0.05, 0.05)\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(0, 0.575, 0))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0.5 * (-1 + 2*i)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(x, 0.5, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    bpy.ops.transform.resize(value=(0.2, 0.2, 1))\n\n# Step 5: Create the Shoulder Strap\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 0.5))\nshoulder_strap = bpy.context.object\nshoulder_strap.name = \"Shoulder Strap\"\nshoulder_strap.scale = (0.05, 0.4, 0.05)\n\n# Step 6: Attach Clips to the Shoulder Strap\nfor i in range(2):\n    x = 0.3 * (-1 + 2*i)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, 0, 0.5))\n    clip = bpy.context.object\n    clip.name = f\"Clip {i + 1}\"\n    bpy.ops.transform.resize(value=(0.5, 0.5, 0.2))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3058204246844127, "unit_n": 7, "param_ratio": 3.2857142857142856}
{"id": "24588277-989e-4308-bd2e-67d16e78843b", "name": "Hat", "instruction": "Design a hat that feels comfortable and stylish to wear.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "24675637-4547-4ad4-870c-f0165f6a0627", "name": "Pizza", "instruction": "Create a 3D model of a pizza. The pizza should be round, with a diameter of about 12 inches. It should have a golden-brown crust and be topped with tomato sauce, mozzarella cheese, pepperoni slices, and fresh basil leaves. The cheese should be melted and slightly browned. Show a slice being lifted out with cheese stretching.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Golden-brown crust color\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.95, 0.87, 0.70, 1)  # Mozzarella cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.55, 0.14, 0.14, 1)  # Pepperoni color\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Fresh basil color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.5, depth=0.05, location=(0, 0, 0.1))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.3, depth=0.05, location=(0, 0, 0.15))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create Pepperoni Slices\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(x, y, 0.2))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create Basil Leaves\nfor i in range(4):\n    angle = i * (math.pi / 2) + math.pi / 4\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.8, location=(x, y, 0.25))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.rotate(value=math.pi / 4, orient_axis='X')\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 7: Create a Pizza Slice being lifted\nbpy.ops.mesh.primitive_cone_add(radius1=2, radius2=0, depth=0.2, location=(6, 0, 0.1), rotation=(0, 0, math.pi / 6))\nslice = bpy.context.object\nslice.name = \"Pizza Slice\"\nslice.data.materials.append(crust_color)\n\n# Step 8: Create Cheese Stretch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(5, 0, 0.2), rotation=(0, math.pi / 2, 0))\ncheese_stretch = bpy.context.object\ncheese_stretch.name = \"Cheese Stretch\"\ncheese_stretch.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.738158289855259, "unit_n": 17, "param_ratio": 3.8823529411764706}
{"id": "5b7f7c9b-5cc9-4cf9-8611-b196bc0e1c06", "name": "Notebook", "instruction": "Design a notebook with a spiral binding on the left side. The cover should have a title in the center.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Spiral Binding\nnum_spirals = 10\nfor i in range(num_spirals):\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(-1.1, 0.9 - i * 0.2, 0), major_radius=0.1, minor_radius=0.02)\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)\n\n# Step 4: Add the Title\nbpy.ops.object.text_add(location=(0, 0, 0.01))\ntitle = bpy.context.object\ntitle.name = \"Title\"\ntitle.data.body = \"Notebook\"\ntitle.data.align_x = 'CENTER'\ntitle.data.align_y = 'CENTER'\ntitle.scale = (0.3, 0.3, 0.3)\ntitle.location = (0, 0, 0.01)\ntitle.rotation_euler = (0, 0, 0)\nbpy.context.object.data.extrude = 0.02\n\n# Ensure the title is above the cover\nbpy.context.view_layer.objects.active = cover\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\ncover.location.z = -0.01\nbpy.context.view_layer.objects.active = title\ntitle.location.z = 0.01", "color_brightness": "Bright", "verify": "human", "entropy": 4.105266139916944, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "2b23e999-a3c7-4586-82bf-c05b68a4e4a4", "name": "Laptop", "instruction": "Could you create a 3D model of a laptop for me? It should have a rectangular screen attached to a keyboard base. Include a touchpad below the keyboard and a few ports on the sides.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Keyboard Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nkeyboard_base = bpy.context.object\nkeyboard_base.scale[2] = 0.05\nkeyboard_base.name = \"Keyboard Base\"\nkeyboard_base.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.95, 1.2))\nscreen = bpy.context.object\nscreen.scale[2] = 0.05\nscreen.scale[1] = 0.6\nscreen.name = \"Screen\"\nscreen.data.materials.append(black)\n\n# Step 4: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.5, 0.15))\ntouchpad = bpy.context.object\ntouchpad.scale[2] = 0.01\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(gray)\n\n# Step 5: Create the Ports\nfor i in range(3):\n    x = -0.9 + i * 0.3\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, -1.05, 0.1))\n    port = bpy.context.object\n    port.scale[2] = 0.02\n    port.scale[1] = 0.05\n    port.name = f\"Port {i + 1}\"\n    port.data.materials.append(gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4961806749775355, "unit_n": 6, "param_ratio": 4.333333333333333}
{"id": "79d4d609-56bd-4053-b2f7-535b0e00c7b5", "name": "Screw", "instruction": "Make a screw with a flat head.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Step 2: Create the Screw Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nshaft = bpy.context.object\nshaft.name = \"Screw Shaft\"\n\n# Step 3: Create the Screw Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, 1.05))\nhead = bpy.context.object\nhead.name = \"Screw Head\"\n\n# Step 4: Create the Screw Slot\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 1.1))\nslot = bpy.context.object\nslot.scale[1] = 0.02  # Making it a thin slot\nslot.name = \"Screw Slot\"\n\n# Step 5: Boolean Modifier to Cut the Slot in the Head\nmod_bool = head.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.use_self = True\nmod_bool.object = slot\n\nbpy.context.view_layer.objects.active = head\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the slot object as it is no longer needed\nbpy.data.objects.remove(slot, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.313746288438386, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "7bf146d1-d371-42d6-8e5d-0594dcca0b73", "name": "Apple Pie", "instruction": "Can you make a 3D model of an apple pie? It should have a lattice crust on top and look like its freshly baked with golden brown edges.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngolden_brown = bpy.data.materials.new(name=\"Golden Brown\")\ngolden_brown.diffuse_color = (0.72, 0.53, 0.04, 1)  # Golden brown color\n\n# Step 2: Create the Pie Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\npie_base = bpy.context.object\npie_base.name = \"Pie Base\"\npie_base.data.materials.append(golden_brown)\n\n# Step 3: Create the Lattice Crust\nlattice_width = 0.1\nlattice_spacing = 0.3\nnum_strips = int(2 * 1.5 / lattice_spacing) + 1\n\nfor i in range(num_strips):\n    x = -1.5 + i * lattice_spacing\n    bpy.ops.mesh.primitive_cube_add(size=lattice_width, location=(x, 0, 0.15))\n    strip = bpy.context.object\n    strip.scale[1] = 1.5\n    strip.data.materials.append(golden_brown)\n\nfor i in range(num_strips):\n    y = -1.5 + i * lattice_spacing\n    bpy.ops.mesh.primitive_cube_add(size=lattice_width, location=(0, y, 0.15))\n    strip = bpy.context.object\n    strip.scale[0] = 1.5\n    strip.data.materials.append(golden_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.752608533197742, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "621089da-fe9b-41de-b32c-806d5f94c323", "name": "Tomato vs. Cucumber", "instruction": "Create a 3D model showing the differences between a tomato and a cucumber.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntomato_red = bpy.data.materials.new(name=\"Tomato Red\")\ntomato_red.diffuse_color = (1, 0, 0, 1)  # Bright red color\ncucumber_green = bpy.data.materials.new(name=\"Cucumber Green\")\ncucumber_green.diffuse_color = (0, 0.5, 0, 1)  # Medium green color\n\n# Step 2: Create the Tomato\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_red)\n\n# Step 3: Create the Cucumber\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=2, location=(1, 0, 0))\ncucumber = bpy.context.object\ncucumber.name = \"Cucumber\"\ncucumber.data.materials.append(cucumber_green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.842698605966362, "unit_n": 2, "param_ratio": 9.5}
{"id": "3df93a04-f1c2-4550-b49e-ecc27169dc2c", "name": "Pet Carrier", "instruction": "How about making a pet carrier with a mesh window on one side and a handle on top?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body of the Pet Carrier\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 3: Create the Mesh Window\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(1.01, 0, 1))\nmesh_window = bpy.context.object\nmesh_window.name = \"Mesh Window\"\n\n# Add a wireframe modifier to the mesh window to make it look like a mesh\nbpy.ops.object.modifier_add(type='WIREFRAME')\nmesh_window.modifiers[\"Wireframe\"].thickness = 0.05\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 2.2), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 5: Position the Handle Ends\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(-0.6, 0, 2.2))\nhandle_end1 = bpy.context.object\nhandle_end1.name = \"Handle End 1\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0.6, 0, 2.2))\nhandle_end2 = bpy.context.object\nhandle_end2.name = \"Handle End 2\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0948462685634484, "unit_n": 6, "param_ratio": 4.5}
{"id": "3fddea31-064c-4528-bad9-879110391b7f", "name": "Hammer", "instruction": "Design a hammer with a claw on one side and a flat striking surface on the other. The handle should be ergonomic and long enough to provide a good grip. Ensure the head is securely attached to the handle.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 0.3))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[0] = 0.15\nhead.scale[1] = 0.4\nhead.scale[2] = 0.15\nhead.data.materials.append(metal)\n\n# Step 4: Create the Claw\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.25, 0.3))\nclaw = bpy.context.object\nclaw.name = \"Claw\"\nclaw.rotation_euler[0] = math.pi / 2\nclaw.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.35, 0.3))\nclaw2 = bpy.context.object\nclaw2.name = \"Claw2\"\nclaw2.rotation_euler[0] = math.pi / 2\nclaw2.data.materials.append(metal)\n\n# Step 5: Position the Claw\nclaw.location = (0, -0.15, 0.3)\nclaw2.location = (0, -0.25, 0.3)\n\n# Step 6: Create the Striking Surface\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0.25, 0.3))\nstriking_surface = bpy.context.object\nstriking_surface.name = \"Striking Surface\"\nstriking_surface.rotation_euler[0] = math.pi / 2\nstriking_surface.data.materials.append(metal)\n\n# Step 7: Ensure the Head is Securely Attached\nhead.select_set(True)\nhandle.select_set(True)\nbpy.context.view_layer.objects.active = head\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.429663368442485, "unit_n": 5, "param_ratio": 6.8}
{"id": "83dc99a3-39de-41c5-8f28-5dc6874a0ef3", "name": "Drum Set", "instruction": "Design a 3D model of a drum set. The set should include a bass drum, a snare drum, two tom-toms, a floor tom, a hi-hat, and two cymbals. Each drum should have a simple cylindrical shape, and the cymbals should be circular and slightly concave. Arrange the drums and cymbals in a typical drum set configuration.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.6, location=(0, -2, 0.3))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(-1.5, -1, 0.45))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\n\n# Step 4: Create the Tom-Toms\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(-0.5, -0.5, 0.6))\ntom_tom1 = bpy.context.object\ntom_tom1.name = \"Tom-Tom 1\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0.5, -0.5, 0.6))\ntom_tom2 = bpy.context.object\ntom_tom2.name = \"Tom-Tom 2\"\n\n# Step 5: Create the Floor Tom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.4, location=(1.5, -1, 0.4))\nfloor_tom = bpy.context.object\nfloor_tom.name = \"Floor Tom\"\n\n# Step 6: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(-2, 0, 0.8))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(-2, 0, 0.85))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\n\n# Step 7: Create the Cymbals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.05, location=(-1, 1, 1.2))\ncymbal1 = bpy.context.object\ncymbal1.name = \"Cymbal 1\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.05, location=(1, 1, 1.2))\ncymbal2 = bpy.context.object\ncymbal2.name = \"Cymbal 2\"\n\n# Make cymbals slightly concave\nfor cymbal in [cymbal1, cymbal2]:\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.mesh.select_all(action='SELECT')\n    bpy.ops.transform.shrink_fatten(value=-0.1)\n    bpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.75364951300735, "unit_n": 9, "param_ratio": 5.0}
{"id": "41f491f0-f7c2-4236-9f00-024265b87658", "name": "Chessboard with Pieces", "instruction": "Create a 3D model of a chessboard with all the pieces set up in their starting positions. The board should be a classic 8x8 grid with alternating dark and light squares. Each piece should be easily distinguishable, with pawns, rooks, knights, bishops, a queen, and a king for both sides. Add some intricate details to the pieces to give them character.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Chessboard\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(col, row, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create a simple pawn piece\ndef create_pawn(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.2))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.1))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(location[0], location[1], 0.4))\n\n# Place pawns for both sides\nfor i in range(8):\n    create_pawn((i, 1, 0))  # White pawns\n    create_pawn((i, 6, 0))  # Black pawns\n\n# Step 4: Create a simple rook piece\ndef create_rook(location):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(location[0], location[1], 0.2))\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(location[0], location[1], 0.4))\n\n# Place rooks for both sides\ncreate_rook((0, 0, 0))\ncreate_rook((7, 0, 0))\ncreate_rook((0, 7, 0))\ncreate_rook((7, 7, 0))\n\n# Step 5: Create a simple knight piece\ndef create_knight(location):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=(location[0], location[1], 0.2))\n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.2, location=(location[0], location[1], 0.4))\n\n# Place knights for both sides\ncreate_knight((1, 0, 0))\ncreate_knight((6, 0, 0))\ncreate_knight((1, 7, 0))\ncreate_knight((6, 7, 0))\n\n# Step 6: Create a simple bishop piece\ndef create_bishop(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.2))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(location[0], location[1], 0.4))\n\n# Place bishops for both sides\ncreate_bishop((2, 0, 0))\ncreate_bishop((5, 0, 0))\ncreate_bishop((2, 7, 0))\ncreate_bishop((5, 7, 0))\n\n# Step 7: Create a simple queen piece\ndef create_queen(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.5, location=(location[0], location[1], 0.25))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.5))\n\n# Place queens for both sides\ncreate_queen((3, 0, 0))\ncreate_queen((3, 7, 0))\n\n# Step 8: Create a simple king piece\ndef create_king(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(location[0], location[1], 0.3))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(location[0], location[1], 0.6))\n\n# Place kings for both sides\ncreate_king((4, 0, 0))\ncreate_king((4, 7, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.4080788197022205, "unit_n": 77, "param_ratio": 0.948051948051948}
{"id": "12a45ef6-c1b6-4d88-818c-65f69e1b5cc2", "name": "Lamp", "instruction": "Design a 3D model of a desk lamp. It should have a base, a vertical stand, an adjustable arm, and a light source at the end of the arm.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nstand_color = bpy.data.materials.new(name=\"StandColor\")\nstand_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\narm_color = bpy.data.materials.new(name=\"ArmColor\")\narm_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlight_color = bpy.data.materials.new(name=\"LightColor\")\nlight_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1.1))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.data.materials.append(stand_color)\n\n# Step 4: Create the Adjustable Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(0, 0, 2.6), rotation=(0, math.pi/4, 0))\narm = bpy.context.object\narm.name = \"Arm\"\narm.data.materials.append(arm_color)\n\n# Step 5: Create the Light Source\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(1.5, 0, 3.5))\nlight = bpy.context.object\nlight.name = \"Light\"\nlight.data.materials.append(light_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.4431669784457086, "unit_n": 4, "param_ratio": 10.5}
{"id": "50d03390-051a-4207-8d7c-7d51716d16d0", "name": "Hat Pin", "instruction": "Can you design a hat pin with a simple, round top?", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, -1))\npin = bpy.context.object\npin.name = \"Pin\"\n\n# Step 3: Create the Round Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 1.1))\nround_top = bpy.context.object\nround_top.name = \"Round Top\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.441991852592463, "unit_n": 2, "param_ratio": 4.5}
{"id": "3bcf77d0-fdcc-4e2b-beff-b15ed051d688", "name": "Syringe", "instruction": "Design a syringe with a cylindrical barrel and a plunger. The barrel should have clear markings for measurement.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Semi-transparent for the barrel\nplunger_material = bpy.data.materials.new(name=\"Plunger\")\nplunger_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for the plunger\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 0.75))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=1.6, location=(0, 0, 0.8))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Plunger Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(0, 0, 1.55))\nhandle = bpy.context.object\nhandle.name = \"Plunger Handle\"\nhandle.data.materials.append(plunger_material)\n\n# Step 5: Create Measurement Markings\nfor i in range(1, 15):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.1, 0, i * 0.1))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.rotation_euler = (0, 1.5708, 0)  # Rotate to be vertical\n    marking.data.materials.append(plunger_material)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.707525350177273, "unit_n": 17, "param_ratio": 1.7058823529411764}
{"id": "2e8b2065-c3a5-467f-9bb5-67003284e81e", "name": "Guitar", "instruction": "Create a 3D model of an acoustic guitar. The body should be hollow with a sound hole in the center. Include six strings, tuning pegs, and a fretboard with frets. The body should have a curved shape.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nstring_color = bpy.data.materials.new(name=\"String\")\nstring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray for strings\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Guitar Body\"\nbody.scale[0] = 1.5  # Make the body oval\nbody.scale[2] = 0.2  # Flatten the body\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Sound Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0.1))\nsound_hole = bpy.context.object\nsound_hole.name = \"Sound Hole\"\nsound_hole.data.materials.append(string_color)\n\n# Step 4: Create the Fretboard\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.9, 0))\nfretboard = bpy.context.object\nfretboard.name = \"Fretboard\"\nfretboard.scale[0] = 0.1\nfretboard.scale[1] = 2\nfretboard.scale[2] = 0.05\nfretboard.data.materials.append(wood_color)\n\n# Step 5: Create the Frets\nfor i in range(12):\n    bpy.ops.mesh.primitive_cube_add(size=0.01, location=(0, 0.9 + i * 0.15, 0))\n    fret = bpy.context.object\n    fret.name = f\"Fret {i + 1}\"\n    fret.scale[0] = 0.1\n    fret.scale[2] = 0.05\n    fret.data.materials.append(string_color)\n\n# Step 6: Create the Strings\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=2.5, location=(x, 0.9, 0))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(string_color)\n\n# Step 7: Create the Tuning Pegs\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, 2.3, 0))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.361079897744327, "unit_n": 27, "param_ratio": 1.3703703703703705}
{"id": "2f0d130d-fb2c-49af-a729-b0c26260713e", "name": "Blender", "instruction": "Can you design a 3D model of a blender? The blender should have a base with a control panel, a transparent pitcher with measurement markings, and a removable lid with a feeding hole. The control panel should include various speed settings and a pulse function. The pitcher should be securely attached to the base and have a handle for easy pouring. The lid should fit snugly on the pitcher to prevent spills. The blender should also have a safety feature that prevents it from operating if the pitcher is not properly attached. Additionally, include a description of how the blender can be used to make smoothies, soups, and other blended recipes.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for base\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent gray for pitcher\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black for lid\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for handle\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.75))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(base_color)\n\n# Step 4: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.75))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, 0, 2.5))\nhandle = bpy.context.object\nhandle.scale = (1, 0.2, 1)\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 7: Create the Feeding Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 2.85))\nfeeding_hole = bpy.context.object\nfeeding_hole.name = \"Feeding Hole\"\nfeeding_hole.data.materials.append(lid_color)\n\n# Note: The safety feature and control panel functionality are not physically modeled but can be considered as part of the design description.", "color_brightness": "Dark", "verify": "human", "entropy": 4.607546181463046, "unit_n": 6, "param_ratio": 8.0}
{"id": "8dd3b7d5-a1f9-48ed-b9df-b8972c2916cd", "name": "Pizza", "instruction": "Hello! Could you create a 3D model of a pizza for me? \n\n1. It should be round and about 12 inches in diameter.\n2. The crust should be slightly raised and have a golden-brown color.\n3. Add a layer of tomato sauce spread evenly across the base.\n4. Cover it generously with cheese.\n5. Add pepperoni slices evenly distributed on top.\n6. Add a few green bell pepper slices for some color.\n\nThat's it! A simple yet delicious-looking pizza.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngolden_brown = bpy.data.materials.new(name=\"Golden Brown\")\ngolden_brown.diffuse_color = (0.76, 0.60, 0.42, 1)  # Golden brown color for the crust\ntomato_sauce = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese = bpy.data.materials.new(name=\"Cheese\")\ncheese.diffuse_color = (1, 0.9, 0.5, 1)  # Cheese color\npepperoni = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni.diffuse_color = (0.7, 0.1, 0.1, 1)  # Pepperoni color\ngreen_pepper = bpy.data.materials.new(name=\"Green Pepper\")\ngreen_pepper.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green bell pepper color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(golden_brown)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.01, location=(0, 0, 0.01))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.015))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese\"\ncheese_layer.data.materials.append(cheese)\n\n# Step 5: Add Pepperoni Slices\npepperoni_radius = 0.02\npepperoni_depth = 0.005\npepperoni_positions = [\n    (0.05, 0.05, 0.02),\n    (-0.05, 0.05, 0.02),\n    (0.05, -0.05, 0.02),\n    (-0.05, -0.05, 0.02),\n    (0.1, 0, 0.02),\n    (-0.1, 0, 0.02),\n    (0, 0.1, 0.02),\n    (0, -0.1, 0.02)\n]\n\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=pepperoni_depth, location=pos)\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = \"Pepperoni Slice\"\n    pepperoni_slice.data.materials.append(pepperoni)\n\n# Step 6: Add Green Bell Pepper Slices\ngreen_pepper_positions = [\n    (0.08, 0.08, 0.025),\n    (-0.08, 0.08, 0.025),\n    (0.08, -0.08, 0.025),\n    (-0.08, -0.08, 0.025)\n]\n\nfor pos in green_pepper_positions:\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.015, minor_radius=0.005, location=pos)\n    green_pepper_slice = bpy.context.object\n    green_pepper_slice.name = \"Green Pepper Slice\"\n    green_pepper_slice.data.materials.append(green_pepper)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.377308288682616, "unit_n": 5, "param_ratio": 8.4}
{"id": "971068a7-8a1a-4ada-99bb-c3230cc9b460", "name": "Adjustable Wrench", "instruction": "Let's design an adjustable wrench. It should have a long handle with a textured grip for easy handling. The jaw at the end needs to be adjustable with a thumbwheel mechanism allowing for a range of sizes. The head of the wrench should be slightly angled to allow access to tight spaces. Include measurement markings on the jaw for precision.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal_color)\n\n# Step 3: Create the Textured Grip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.5, location=(0, 0, 1.75))\ngrip = bpy.context.object\ngrip.name = \"Grip\"\ngrip.data.materials.append(metal_color)\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.25))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metal_color)\nbpy.ops.transform.rotate(value=0.25, orient_axis='Y')\n\n# Step 5: Create the Jaw\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.3, 0.25))\njaw = bpy.context.object\njaw.name = \"Jaw\"\njaw.data.materials.append(metal_color)\n\n# Step 6: Create the Thumbwheel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0.4, 0.25))\nthumbwheel = bpy.context.object\nthumbwheel.name = \"Thumbwheel\"\nthumbwheel.data.materials.append(metal_color)\n\n# Step 7: Add Measurement Markings (simplified as small cubes)\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0.3 + i * 0.05, 0.25))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i + 1}\"\n    marking.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.5971547768899685, "unit_n": 10, "param_ratio": 3.2}
{"id": "2021751a-2ebc-4229-bb5b-b172f6555111", "name": "Fountain Pen", "instruction": "Design a fountain pen. Compare the cap and barrel in terms of length and shape.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npen_color = bpy.data.materials.new(name=\"Pen Color\")\npen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 0.75))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(pen_color)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=0.8, location=(0, 0, 1.9))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(pen_color)\n\n# Step 4: Create the Nib\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(0, 0, 0.1))\nnib = bpy.context.object\nnib.name = \"Nib\"\nnib.data.materials.append(pen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.538773018293098, "unit_n": 3, "param_ratio": 7.0}
{"id": "7c16797c-4854-48c3-b7ff-3bbb4edb9b82", "name": "Circuit Breaker", "instruction": "Could you create a 3D model of a circuit breaker? It should have a rectangular body with a switch on the front for toggling the electrical connection.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"CircuitBreakerBody\"\nbody.scale = (0.5, 1, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.1, 0.2, 0.5)\nswitch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "95450087-c806-4492-8042-17a0c6819500", "name": "Power Strip", "instruction": "Design a 3D model of a power strip. The power strip should have six outlets arranged in a single row. Include an on/off switch at one end.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Power Strip Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.scale[0] = 3  # Length\nbase.scale[1] = 0.5  # Width\nbase.scale[2] = 0.1  # Height\nbase.name = \"Power Strip Base\"\nbase.data.materials.append(white)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    x = -2.5 + i * 1  # Position outlets along the length of the strip\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(x, 0, 0.05))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(black)\n\n# Step 4: Create the On/Off Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(3, 0, 0.05))\nswitch = bpy.context.object\nswitch.scale[0] = 0.5  # Length\nswitch.scale[1] = 0.25  # Width\nswitch.scale[2] = 0.05  # Height\nswitch.name = \"On/Off Switch\"\nswitch.data.materials.append(red)", "color_brightness": "Bright", "verify": "human", "entropy": 4.216538365529461, "unit_n": 8, "param_ratio": 3.5}
{"id": "66cf0b94-e0ee-4f1b-bdd2-0249be676ebf", "name": "Pencil Sharpener", "instruction": "Create a 3D model of a pencil sharpener. Compare the design of a manual sharpener with a small handle and a simple hole for the pencil.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color\n\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Sharpener\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Sharpener Body\"\nbody.scale = (0.5, 0.3, 0.7)\nbody.data.materials.append(plastic_color)\n\n# Step 3: Create the Hole for the Pencil\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.7, location=(0, 0.4, 0))\nhole = bpy.context.object\nhole.name = \"Pencil Hole\"\nhole.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees on X-axis\n\n# Boolean modifier to create the hole\nmod_bool = body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = hole\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(hole)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.35, 0.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (0, 1.5708, 0)  # Rotate 90 degrees on Y-axis\nhandle.data.materials.append(metal_color)\n\n# Create the knob at the end of the handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.08, location=(0, -0.5, 0.2))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.712937400227976, "unit_n": 4, "param_ratio": 7.0}
{"id": "76d09d04-abe1-4716-a0a9-5ffa51f6b1b3", "name": "Wall Mural", "instruction": "Create a wall mural that depicts a serene landscape. Include elements such as mountains, a river, trees, and a clear sky. Ensure the composition is balanced and visually appealing.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsky_blue = bpy.data.materials.new(name=\"Sky Blue\")\nsky_blue.diffuse_color = (0.53, 0.81, 0.92, 1)  # Light blue color for the sky\nmountain_gray = bpy.data.materials.new(name=\"Mountain Gray\")\nmountain_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the mountains\nriver_blue = bpy.data.materials.new(name=\"River Blue\")\nriver_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for the river\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the trees\n\n# Step 2: Create the Sky\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nsky = bpy.context.object\nsky.name = \"Sky\"\nsky.data.materials.append(sky_blue)\n\n# Step 3: Create the Mountains\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2, depth=3, location=(-2, 0, 1.5))\nmountain1 = bpy.context.object\nmountain1.name = \"Mountain 1\"\nmountain1.data.materials.append(mountain_gray)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1.5, depth=2.5, location=(1, 0, 1.25))\nmountain2 = bpy.context.object\nmountain2.name = \"Mountain 2\"\nmountain2.data.materials.append(mountain_gray)\n\n# Step 4: Create the River\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, -2, 0.1))\nriver = bpy.context.object\nriver.name = \"River\"\nriver.scale = (0.5, 5, 1)\nriver.data.materials.append(river_blue)\n\n# Step 5: Create the Trees\nfor i in range(3):\n    x = -3 + i * 3\n    bpy.ops.mesh.primitive_cone_add(vertices=8, radius1=0.5, depth=1.5, location=(x, 0, 0.75))\n    tree = bpy.context.object\n    tree.name = f\"Tree {i + 1}\"\n    tree.data.materials.append(tree_green)", "color_brightness": "Bright", "verify": "human", "entropy": 3.1192269885697184, "unit_n": 7, "param_ratio": 6.571428571428571}
{"id": "35f4dd53-b61c-48fa-9645-16dee0771820", "name": "Paintbrush Set", "instruction": "Design a set of paintbrushes. Compare a round brush and a flat brush. The round brush should have a pointed tip, while the flat brush should have a rectangular tip.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbrush_color = bpy.data.materials.new(name=\"BrushColor\")\nbrush_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Round Brush Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(-0.5, 0, 0))\nround_handle = bpy.context.object\nround_handle.name = \"Round Brush Handle\"\nround_handle.data.materials.append(brush_color)\n\n# Step 3: Create the Round Brush Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(-0.5, 0, 0.6))\nround_tip = bpy.context.object\nround_tip.name = \"Round Brush Tip\"\nround_tip.data.materials.append(brush_color)\n\n# Step 4: Create the Flat Brush Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0.5, 0, 0))\nflat_handle = bpy.context.object\nflat_handle.name = \"Flat Brush Handle\"\nflat_handle.data.materials.append(brush_color)\n\n# Step 5: Create the Flat Brush Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, 0, 0.6))\nflat_tip = bpy.context.object\nflat_tip.scale[2] = 0.2\nflat_tip.name = \"Flat Brush Tip\"\nflat_tip.data.materials.append(brush_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4948844228264933, "unit_n": 4, "param_ratio": 6.25}
{"id": "4280ab01-b6fe-42e9-b20c-59850ea01a6d", "name": "Sweater", "instruction": "Create a sweater. It should have long sleeves, a round neckline, and a length that reaches the hips. The sweater should have a ribbed texture at the cuffs, hem, and neckline. The body should be plain without any patterns or designs.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nsweater_color = bpy.data.materials.new(name=\"SweaterColor\")\nsweater_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Sweater Body\"\nbody.data.materials.append(sweater_color)\n\n# Step 3: Create the Sleeves\nfor i in range(2):\n    x = 0.75 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1, location=(x, 0, 0.9), rotation=(0, 1.57, 0))\n    sleeve = bpy.context.object\n    sleeve.name = f\"Sleeve {i + 1}\"\n    sleeve.data.materials.append(sweater_color)\n\n# Step 4: Create the Neckline\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 1.2))\nneckline = bpy.context.object\nneckline.name = \"Neckline\"\nneckline.data.materials.append(sweater_color)\n\n# Step 5: Create the Cuffs\nfor i in range(2):\n    x = 0.75 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.03, location=(x, 0, 0.4), rotation=(0, 1.57, 0))\n    cuff = bpy.context.object\n    cuff.name = f\"Cuff {i + 1}\"\n    cuff.data.materials.append(sweater_color)\n\n# Step 6: Create the Hem\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.05, location=(0, 0, 0))\nhem = bpy.context.object\nhem.name = \"Hem\"\nhem.data.materials.append(sweater_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.608065929049323, "unit_n": 7, "param_ratio": 5.142857142857143}
{"id": "7fa28d9b-edf4-4fee-87b1-fc6740b009d1", "name": "Basketball", "instruction": "What would a basketball look like with a unique pattern on it?", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\norange = bpy.data.materials.new(name=\"Orange\")\norange.diffuse_color = (1, 0.55, 0, 1)  # Basketball orange color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color for the pattern\n\n# Step 2: Create the Basketball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbasketball = bpy.context.object\nbasketball.name = \"Basketball\"\nbasketball.data.materials.append(orange)\n\n# Step 3: Create the Pattern\n# Horizontal stripe\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.05, location=(0, 0, 0), rotation=(1.5708, 0, 0))\nstripe1 = bpy.context.object\nstripe1.name = \"Stripe 1\"\nstripe1.data.materials.append(black)\n\n# Vertical stripe\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.05, location=(0, 0, 0), rotation=(0, 1.5708, 0))\nstripe2 = bpy.context.object\nstripe2.name = \"Stripe 2\"\nstripe2.data.materials.append(black)\n\n# Diagonal stripe 1\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.05, location=(0, 0, 0), rotation=(0.7854, 0, 0.7854))\nstripe3 = bpy.context.object\nstripe3.name = \"Stripe 3\"\nstripe3.data.materials.append(black)\n\n# Diagonal stripe 2\nbpy.ops.mesh.primitive_cylinder_add(radius=1.01, depth=0.05, location=(0, 0, 0), rotation=(-0.7854, 0, 0.7854))\nstripe4 = bpy.context.object\nstripe4.name = \"Stripe 4\"\nstripe4.data.materials.append(black)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.479472107046368, "unit_n": 5, "param_ratio": 9.2}
{"id": "5c5b02df-7f11-47a4-95d5-248836df2d5a", "name": "Espresso Machine", "instruction": "Create a 3D model of an espresso machine. How does it compare to a regular coffee maker in terms of design and functionality? Include the portafilter, steam wand, and a cup tray.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray metal color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Portafilter\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 1.1, 0.6))\nportafilter = bpy.context.object\nportafilter.name = \"Portafilter\"\nportafilter.data.materials.append(metal)\n\n# Step 4: Create the Steam Wand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.7, location=(1, -0.8, 1.2), rotation=(0, math.pi/4, 0))\nsteam_wand = bpy.context.object\nsteam_wand.name = \"Steam Wand\"\nsteam_wand.data.materials.append(metal)\n\n# Step 5: Create the Cup Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.1, 0.3))\ncup_tray = bpy.context.object\ncup_tray.name = \"Cup Tray\"\ncup_tray.data.materials.append(black)\n\n# Step 6: Create the Cup Tray Grid\nbpy.ops.mesh.primitive_plane_add(size=0.9, location=(0, 1.1, 0.35))\ncup_tray_grid = bpy.context.object\ncup_tray_grid.name = \"Cup Tray Grid\"\ncup_tray_grid.data.materials.append(metal)\n\n# Adjust the Cup Tray Grid to be a grid\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=10)\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='WIREFRAME')\nbpy.context.object.modifiers[\"Wireframe\"].thickness = 0.02\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.4063868177755685, "unit_n": 6, "param_ratio": 6.0}
{"id": "57d77973-349c-4f6e-8a08-1a2792cc218d", "name": "Stapler", "instruction": "Imagine a stapler on your desk. How does it make you feel when you use it to neatly bind papers together?", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (2, 1, 0.2)\nbase.data.materials.append(dark_gray)\n\n# Step 3: Create the Top Part\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.4))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale = (2, 0.8, 0.2)\ntop.data.materials.append(dark_gray)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0, -0.5, 0.2))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.rotation_euler = (1.5708, 0, 0)\nhinge.data.materials.append(dark_gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.715340212016618, "unit_n": 3, "param_ratio": 6.0}
{"id": "66e4283f-e05b-4c04-981e-70bf320b7e0e", "name": "Geometric Logo", "instruction": "Please design a 3D model of a geometric logo. It should feature interlocking shapes.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the First Shape (Torus)\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"Torus\"\ntorus.scale = (1, 1, 0.2)\ntorus.data.materials.append(blue)\n\n# Step 3: Create the Second Shape (Cube)\nbpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"Cube\"\ncube.scale = (0.5, 0.5, 0.5)\ncube.data.materials.append(red)\n\n# Step 4: Position the Cube to Interlock with the Torus\ncube.location = (0.75, 0, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.8540958820555415, "unit_n": 2, "param_ratio": 8.0}
{"id": "05d0c727-fd12-4760-bf52-218f4f420bf3", "name": "Notebook", "instruction": "Model a notebook with a spiral binding.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Notebook Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Notebook Cover\"\ncover.scale[0] = 1.5\ncover.scale[1] = 0.1\ncover.scale[2] = 2\n\n# Step 3: Create the Notebook Pages\nbpy.ops.mesh.primitive_cube_add(size=1.95, location=(0, 0, -0.02))\npages = bpy.context.object\npages.name = \"Notebook Pages\"\npages.scale[0] = 1.45\npages.scale[1] = 0.05\npages.scale[2] = 1.95\n\n# Step 4: Create the Spiral Binding\nnum_spirals = 20\nfor i in range(num_spirals):\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(-1.6, 0, 1.8 - i * 0.18), major_radius=0.05, minor_radius=0.02)\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.rotation_euler[1] = 1.5708  # Rotate 90 degrees in radians\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.255087862856634, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "4bd6c8cf-c755-45e0-a856-5f92b3e0d81c", "name": "Chess Piece", "instruction": "Create a 3D model of a king chess piece. Ensure it has a height of 3.75 inches and a base diameter of 1.5 inches. The piece should have a crown on top and intricate details along the body to distinguish it from other pieces.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2.8, location=(0, 0, 1.5))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.2, location=(0, 0, 2.9))\ntop = bpy.context.object\ntop.name = \"Top\"\n\n# Step 5: Create the Crown\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.1, depth=0.5, location=(0, 0, 3.25))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 6: Add Intricate Details\n# Adding a torus as an example of intricate detail\nbpy.ops.mesh.primitive_torus_add(major_radius=0.55, minor_radius=0.05, location=(0, 0, 1.0))\ndetail1 = bpy.context.object\ndetail1.name = \"Detail1\"\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.55, minor_radius=0.05, location=(0, 0, 2.0))\ndetail2 = bpy.context.object\ndetail2.name = \"Detail2\"\n\n# Combine all parts into one object\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\nbody.select_set(True)\ntop.select_set(True)\ncrown.select_set(True)\ndetail1.select_set(True)\ndetail2.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()\n\n# Scale the entire piece to the correct height\nbpy.context.object.scale = (1, 1, 3.75 / bpy.context.object.dimensions.z)\nbpy.ops.object.transform_apply(scale=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.725224537018974, "unit_n": 6, "param_ratio": 5.166666666666667}
{"id": "49c92c26-2a02-4d63-a8e0-81e70ca14643", "name": "Pet Bed", "instruction": "Compare two pet beds: one with a rectangular shape and another with a circular shape. Highlight the differences in their dimensions and suitability for different pet sizes.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrect_bed_color = bpy.data.materials.new(name=\"RectBedColor\")\nrect_bed_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brown color for rectangular bed\ncirc_bed_color = bpy.data.materials.new(name=\"CircBedColor\")\ncirc_bed_color.diffuse_color = (0.2, 0.5, 0.8, 1)  # Blue color for circular bed\n\n# Step 2: Create the Rectangular Pet Bed\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, 0, 0))\nrect_bed = bpy.context.object\nrect_bed.name = \"Rectangular Bed\"\nrect_bed.scale = (1.5, 1, 0.3)\nrect_bed.data.materials.append(rect_bed_color)\n\n# Step 3: Create the Circular Pet Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.6, location=(2, 0, 0))\ncirc_bed = bpy.context.object\ncirc_bed.name = \"Circular Bed\"\ncirc_bed.data.materials.append(circ_bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8625150107180546, "unit_n": 2, "param_ratio": 9.5}
{"id": "237021d5-e724-48e0-b88e-3438fd48b819", "name": "Juicer", "instruction": "Create a 3D model of a juicer. The juicer should have a cylindrical body with a spout for pouring juice. Include a handle for pressing down fruits and a container for collecting the juice. Add a pulp collector at the back.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 0.5), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(body_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 1, 2), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(body_color)\n\n# Step 5: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, -0.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(body_color)\n\n# Step 6: Create the Pulp Collector\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(-1, 0, 1))\npulp_collector = bpy.context.object\npulp_collector.name = \"Pulp Collector\"\npulp_collector.data.materials.append(body_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.189801694340619, "unit_n": 5, "param_ratio": 7.2}
{"id": "2e80b973-94a2-41a9-8567-344c78947d3e", "name": "Digital Camera", "instruction": "Imagine capturing moments with a digital camera. Create a rectangular device with a prominent lens on the front. Include a small flash above the lens and a screen on the back. Add a few buttons for navigation and settings.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\n\n# Step 2: Create the Camera Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncamera_body = bpy.context.object\ncamera_body.name = \"Camera Body\"\ncamera_body.scale = (1.5, 0.5, 1)\ncamera_body.data.materials.append(black)\n\n# Step 3: Create the Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0.6, 0))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.data.materials.append(gray)\n\n# Step 4: Create the Flash\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.8, 0.5))\nflash = bpy.context.object\nflash.name = \"Flash\"\nflash.data.materials.append(white)\n\n# Step 5: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.2, location=(0, -0.51, 0))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face back\nscreen.data.materials.append(blue)\n\n# Step 6: Create the Buttons\nbutton_positions = [(0.7, -0.51, 0.4), (0.7, -0.51, 0.2), (0.7, -0.51, 0), (0.7, -0.51, -0.2)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5929341735764506, "unit_n": 5, "param_ratio": 7.6}
{"id": "88e08d44-620e-4e63-a2e5-d2d1c182cfff", "name": "Apple vs. Orange", "instruction": "Create a 3D model of an apple and an orange side by side. Compare their sizes and shapes.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_color = bpy.data.materials.new(name=\"Apple Color\")\napple_color.diffuse_color = (1, 0, 0, 1)  # Red color for the apple\norange_color = bpy.data.materials.new(name=\"Orange Color\")\norange_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color for the orange\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_color)\n\n# Step 3: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(1, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.534515284851885, "unit_n": 2, "param_ratio": 9.0}
{"id": "72843e5e-92d3-4799-b281-871c56cb9e81", "name": "Dog Leash", "instruction": "Show a comparison between a short and a long dog leash.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Short Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(-1, 0, 0))\nshort_leash = bpy.context.object\nshort_leash.name = \"Short Leash\"\nshort_leash.data.materials.append(leash_color)\n\n# Step 3: Create the Long Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=3, location=(1, 0, 0))\nlong_leash = bpy.context.object\nlong_leash.name = \"Long Leash\"\nlong_leash.data.materials.append(leash_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.524155887072955, "unit_n": 2, "param_ratio": 7.5}
{"id": "75b6032c-531d-44c4-b130-1ccdd323af7a", "name": "Pencil", "instruction": "Create a pencil. It should be about 7 inches long and cylindrical.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the tip\n\n# Step 2: Create the Body of the Pencil\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=7, location=(0, 0, 3.5))\nbody = bpy.context.object\nbody.name = \"Pencil Body\"\nbody.data.materials.append(yellow)\n\n# Step 3: Create the Tip of the Pencil\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.5, location=(0, 0, 7.25))\ntip = bpy.context.object\ntip.name = \"Pencil Tip\"\ntip.data.materials.append(gray)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9458764229438446, "unit_n": 2, "param_ratio": 10.5}
{"id": "8aeb2fa1-15c6-4358-8849-f9556bb09310", "name": "Laundry Basket", "instruction": "Let's design a laundry basket. It should be cylindrical with a wide opening at the top and handles on either side. The surface should have a pattern of holes for ventilation. The basket should be large enough to hold a substantial amount of laundry.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basket Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbasket_body = bpy.context.object\nbasket_body.name = \"Basket Body\"\n\n# Step 3: Add a Solidify Modifier to give thickness to the basket\nsolidify_modifier = basket_body.modifiers.new(name=\"Solidify\", type='SOLIDIFY')\nsolidify_modifier.thickness = 0.1\n\n# Step 4: Create the Ventilation Holes\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.2, location=(0, 0, 1))\nhole = bpy.context.object\nhole.name = \"Hole\"\n\n# Step 5: Duplicate and position the holes\nfor i in range(16):\n    angle = i * (math.pi / 8)\n    x = math.cos(angle) * 0.9\n    y = math.sin(angle) * 0.9\n    for j in range(5):\n        z = 0.4 * j\n        new_hole = hole.copy()\n        new_hole.location = (x, y, z + 0.2)\n        bpy.context.collection.objects.link(new_hole)\n\n# Step 6: Use Boolean Modifier to subtract holes from the basket body\nfor obj in bpy.context.collection.objects:\n    if obj.name.startswith(\"Hole\"):\n        bool_mod = basket_body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\n        bool_mod.operation = 'DIFFERENCE'\n        bool_mod.object = obj\n        bpy.context.view_layer.objects.active = basket_body\n        bpy.ops.object.modifier_apply(modifier=bool_mod.name)\n        bpy.data.objects.remove(obj, do_unlink=True)\n\n# Step 7: Create the Handles\nfor i in range(2):\n    angle = i * math.pi\n    x = math.cos(angle) * 1.1\n    y = math.sin(angle) * 1.1\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(x, y, 1.5), rotation=(math.pi/2, 0, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.229441067251018, "unit_n": 4, "param_ratio": 4.5}
{"id": "13ec0e09-482e-47a7-8833-a01437a5f764", "name": "Broom", "instruction": "Create a 3D model of a broom. Compare the appearance of a traditional straw broom and a modern plastic broom.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstraw_color = bpy.data.materials.new(name=\"Straw\")\nstraw_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Straw color\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray plastic color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(plastic_color)\n\n# Step 3: Create the Straw Broom Head\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0.1, depth=0.5, location=(0, 0, 0.25))\nstraw_head = bpy.context.object\nstraw_head.name = \"Straw Head\"\nstraw_head.data.materials.append(straw_color)\n\n# Step 4: Create the Plastic Broom Head\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(1, 0, 0.3))\nplastic_head = bpy.context.object\nplastic_head.name = \"Plastic Head\"\nplastic_head.data.materials.append(plastic_color)\n\n# Step 5: Position the Plastic Broom Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(1, 0, 1))\nplastic_handle = bpy.context.object\nplastic_handle.name = \"Plastic Handle\"\nplastic_handle.data.materials.append(plastic_color)\n\n# Step 6: Join the Plastic Broom Head and Handle\nbpy.context.view_layer.objects.active = plastic_handle\nplastic_handle.select_set(True)\nplastic_head.select_set(True)\nbpy.ops.object.join()\nplastic_handle.name = \"Plastic Broom\"\n\n# Step 7: Join the Straw Broom Head and Handle\nbpy.context.view_layer.objects.active = handle\nhandle.select_set(True)\nstraw_head.select_set(True)\nbpy.ops.object.join()\nhandle.name = \"Straw Broom\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.625654699532958, "unit_n": 4, "param_ratio": 7.5}
{"id": "28826d30-866d-4b00-b218-46ae3954f137", "name": "Vacuum Cleaner", "instruction": "Can you create a 3D model of a vacuum cleaner? It should be upright and have a handle on top.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, 0, 1.3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(body_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.216469105640616, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "6f42b6c7-c504-40a0-a32f-da9ef84a517f", "name": "Kettle", "instruction": "Make a 3D model of a kettle with a spout, handle, and lid. ", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body of the Kettle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Kettle Body\"\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(1.1, 0, 0.3), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(-0.8, 0, 0.8), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.2, location=(0, 0, 1.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.275027252767568, "unit_n": 4, "param_ratio": 6.25}
{"id": "37b3611a-6db4-4094-944a-4266d1abffd4", "name": "Vacuum Cleaner", "instruction": "Design a 3D model of a vacuum cleaner.\n\n1. The main body should be cylindrical.\n2. Include a long hose attached to the body.\n3. Add a handle on the hose.\n4. The base should have wheels for mobility.\n5. Include a dust container at the back.\n6. Add a power button on the main body.\n7. Ensure the design is practical and functional.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nhose_color = bpy.data.materials.new(name=\"Hose Color\")\nhose_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(body_color)\n\n# Step 3: Create the Hose\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, -0.75, 1.25), rotation=(math.pi/4, 0, 0))\nhose = bpy.context.object\nhose.name = \"Hose\"\nhose.data.materials.append(hose_color)\n\n# Step 4: Create the Handle on the Hose\nbpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.3, location=(0, -1.5, 1.5), rotation=(0, 0, math.pi/2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(hose_color)\n\n# Step 5: Create the Wheels\nfor i in range(2):\n    x = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.5, 0.1), rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(body_color)\n\n# Step 6: Create the Dust Container\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.75, 0.5))\ndust_container = bpy.context.object\ndust_container.name = \"Dust Container\"\ndust_container.data.materials.append(body_color)\n\n# Step 7: Create the Power Button\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 1.1))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\npower_button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.518499247851178, "unit_n": 7, "param_ratio": 7.428571428571429}
{"id": "8c52fd48-49b3-4b30-bf21-eea432e06afb", "name": "Blender", "instruction": "Model a blender with a transparent pitcher and a lid.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nlid_material = bpy.data.materials.new(name=\"Lid\")\nlid_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the lid\n\n# Step 2: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(transparent_material)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "23fef60a-4395-4cb7-9b21-c187c53a94c9", "name": "Bluetooth Speaker", "instruction": "Design a small, portable Bluetooth speaker with a sleek, modern appearance.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Main Body of the Speaker\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.5, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Speaker Grille\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 0.3))\ngrille = bpy.context.object\ngrille.name = \"Grille\"\ngrille.data.materials.append(gray)\n\n# Step 4: Create the Bottom Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, -0.3))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.679872721561161, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "4d86b87c-a757-406d-9685-788cd26db004", "name": "Hat", "instruction": "Could you create a 3D model of a hat? It should have a wide brim and a rounded top. The hat should be about 12 inches in diameter with a 4-inch height.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=3, location=(0, 0, 2))\ntop = bpy.context.object\ntop.name = \"Top\"\n\n# Step 4: Combine the Brim and Top\nbpy.ops.object.select_all(action='DESELECT')\nbrim.select_set(True)\ntop.select_set(True)\nbpy.context.view_layer.objects.active = brim\nbpy.ops.object.join()\n\n# Step 5: Adjust the Position\nbpy.context.object.location[2] = 1\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.852478066159039, "unit_n": 2, "param_ratio": 4.5}
{"id": "6d344ddd-e2c9-48e5-a518-4de232060a4d", "name": "Thermometer", "instruction": "Let's design a thermometer. Begin with a thin, elongated body. At one end, include a small, rounded bulb. Along the length of the body, add a clear display area for temperature readings.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbulb_color = bpy.data.materials.new(name=\"Bulb Color\")\nbulb_color.diffuse_color = (1, 0, 0, 1)  # Red color for the bulb\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the display\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(bulb_color)\n\n# Step 4: Create the Display Area\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.06, 1.2))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale[1] = 0.02\ndisplay.scale[2] = 0.5\ndisplay.data.materials.append(display_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.544740212442309, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "4d52d891-5d79-41f0-b5ee-19a595d3db15", "name": "Desk Organizer", "instruction": "Design a desk organizer with multiple compartments. Include a pen holder, a slot for notepads, and a section for miscellaneous items. Ensure the organizer is compact and fits on a standard desk.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Flatten the base\n\n# Step 3: Create the pen holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.6, location=(-0.7, 0.7, 0.3))\npen_holder = bpy.context.object\npen_holder.name = \"Pen Holder\"\n\n# Step 4: Create the notepad slot\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, -0.7, 0.3))\nnotepad_slot = bpy.context.object\nnotepad_slot.name = \"Notepad Slot\"\nnotepad_slot.scale[0] = 0.3  # Narrow the slot\n\n# Step 5: Create the miscellaneous section\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 0.3, 0.3))\nmisc_section = bpy.context.object\nmisc_section.name = \"Miscellaneous Section\"\nmisc_section.scale[0] = 0.4  # Adjust size to be a bit larger than notepad slot\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.262962100493492, "unit_n": 4, "param_ratio": 4.25}
{"id": "102b55e6-8e21-4ebf-aa12-fd09da408c77", "name": "Trumpet", "instruction": "Create a trumpet with a long, cylindrical body and three valves on top. The mouthpiece should be slightly flared, and the bell at the other end should be wide and open. Include a few loops in the tubing for the characteristic shape.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.8, 0.6, 0.2, 1)  # Brass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(0, 0, 1.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(brass)\n\n# Step 3: Create the Mouthpiece\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.3, location=(0, 0, 3.15))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"\nmouthpiece.data.materials.append(brass)\n\n# Step 4: Create the Bell\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.05, depth=1, location=(0, 0, -0.5))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.data.materials.append(brass)\n\n# Step 5: Create the Valves\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0.1 * (i - 1), 2))\n    valve = bpy.context.object\n    valve.name = f\"Valve {i + 1}\"\n    valve.data.materials.append(brass)\n\n# Step 6: Create the Loops\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0.5, 1))\nloop1 = bpy.context.object\nloop1.name = \"Loop 1\"\nloop1.data.materials.append(brass)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, -0.5, 1))\nloop2 = bpy.context.object\nloop2.name = \"Loop 2\"\nloop2.data.materials.append(brass)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.357471046596177, "unit_n": 8, "param_ratio": 4.625}
{"id": "5a0a09be-8ac5-43e1-aa80-2f3737a337d9", "name": "Fedora", "instruction": "How does the brim of a fedora compare to that of a sun hat?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfedora_color = bpy.data.materials.new(name=\"Fedora Color\")\nfedora_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\nsun_hat_color = bpy.data.materials.new(name=\"Sun Hat Color\")\nsun_hat_color.diffuse_color = (0.9, 0.8, 0.6, 1)  # Light beige color\n\n# Step 2: Create the Fedora\n# Fedora Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.4, location=(-1.5, 0, 0.2))\nfedora_crown = bpy.context.object\nfedora_crown.name = \"Fedora Crown\"\nfedora_crown.data.materials.append(fedora_color)\n\n# Fedora Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.05, location=(-1.5, 0, 0))\nfedora_brim = bpy.context.object\nfedora_brim.name = \"Fedora Brim\"\nfedora_brim.data.materials.append(fedora_color)\n\n# Step 3: Create the Sun Hat\n# Sun Hat Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.3, location=(1.5, 0, 0.15))\nsun_hat_crown = bpy.context.object\nsun_hat_crown.name = \"Sun Hat Crown\"\nsun_hat_crown.data.materials.append(sun_hat_color)\n\n# Sun Hat Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.05, location=(1.5, 0, 0))\nsun_hat_brim = bpy.context.object\nsun_hat_brim.name = \"Sun Hat Brim\"\nsun_hat_brim.data.materials.append(sun_hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.603312726345061, "unit_n": 4, "param_ratio": 7.5}
{"id": "0515de6a-cc27-47a7-beb6-eac3bb7cd0a6", "name": "Evening Gown", "instruction": "Design an evening gown that is floor-length with a fitted bodice and a flowing skirt. The dress should have off-the-shoulder sleeves and a sweetheart neckline. Add some intricate embroidery around the neckline and the hem of the skirt. The gown should be in a deep, rich color.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ndeep_rich_color = bpy.data.materials.new(name=\"Deep Rich Color\")\ndeep_rich_color.diffuse_color = (0.2, 0.05, 0.1, 1)  # Deep rich color\n\n# Step 2: Create the Bodice\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 1))\nbodice = bpy.context.object\nbodice.name = \"Bodice\"\nbodice.scale[2] = 0.5  # Make it fitted\nbodice.data.materials.append(deep_rich_color)\n\n# Step 3: Create the Skirt\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, radius2=0, depth=2, location=(0, 0, -0.5))\nskirt = bpy.context.object\nskirt.name = \"Skirt\"\nskirt.data.materials.append(deep_rich_color)\n\n# Step 4: Create the Off-the-Shoulder Sleeves\nfor i in range(2):\n    x = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 1.25), rotation=(0, 0, 1.57))\n    sleeve = bpy.context.object\n    sleeve.name = f\"Sleeve {i + 1}\"\n    sleeve.data.materials.append(deep_rich_color)\n\n# Step 5: Create the Sweetheart Neckline\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 1.5))\nneckline = bpy.context.object\nneckline.name = \"Neckline\"\nneckline.scale[0] = 1.2\nneckline.scale[1] = 0.5\nneckline.scale[2] = 0.3\nneckline.data.materials.append(deep_rich_color)\n\n# Step 6: Add Embroidery (simplified as small spheres)\nfor i in range(12):\n    angle = i * (3.14 / 6)\n    x = 0.35 * math.cos(angle)\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(x, y, 1.5))\n    embroidery = bpy.context.object\n    embroidery.name = f\"Embroidery Neckline {i + 1}\"\n    embroidery.data.materials.append(deep_rich_color)\n\nfor i in range(24):\n    angle = i * (3.14 / 12)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(x, y, -1.5))\n    embroidery = bpy.context.object\n    embroidery.name = f\"Embroidery Hem {i + 1}\"\n    embroidery.data.materials.append(deep_rich_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.861228254540484, "unit_n": 41, "param_ratio": 0.8780487804878049}
{"id": "54fa87a4-e6d1-4b08-99ca-466ddcff32c3", "name": "Winter Hat vs. Beanie", "instruction": "I need a comparison between a winter hat and a beanie. Create 3D models of both. The winter hat should have ear flaps and a pom-pom on top, while the beanie should be simple with a snug fit.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brownish color\npom_pom_color = bpy.data.materials.new(name=\"Pom Pom Color\")\npom_pom_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Winter Hat\n# Main part of the hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1.5, 0, 0.5))\nwinter_hat = bpy.context.object\nwinter_hat.name = \"Winter Hat\"\nwinter_hat.scale[2] = 0.7  # Flatten the sphere to make it hat-shaped\nwinter_hat.data.materials.append(hat_color)\n\n# Ear flaps\nfor i in range(2):\n    x = -1.5\n    y = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, y, 0.1))\n    ear_flap = bpy.context.object\n    ear_flap.name = f\"Ear Flap {i + 1}\"\n    ear_flap.scale[1] = 0.5  # Flatten the cube to make it flap-shaped\n    ear_flap.data.materials.append(hat_color)\n\n# Pom-pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(-1.5, 0, 1.1))\npom_pom = bpy.context.object\npom_pom.name = \"Pom Pom\"\npom_pom.data.materials.append(pom_pom_color)\n\n# Step 3: Create the Beanie\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(1.5, 0, 0.5))\nbeanie = bpy.context.object\nbeanie.name = \"Beanie\"\nbeanie.scale[2] = 0.6  # Flatten the sphere to make it beanie-shaped\nbeanie.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.00837621756094, "unit_n": 5, "param_ratio": 5.2}
{"id": "064cf7a6-53f4-498a-9cfb-3cef8cac01b3", "name": "Company Logo", "instruction": "Create a 3D model of a company logo. The logo should feature the company's initials intertwined in a creative manner. The design should be bold and easily recognizable.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlogo_color = bpy.data.materials.new(name=\"Logo Color\")\nlogo_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Bold blue color\n\n# Step 2: Create the First Initial (e.g., 'A')\nbpy.ops.object.text_add(location=(-1, 0, 0))\ntext_obj1 = bpy.context.object\ntext_obj1.data.body = \"A\"\ntext_obj1.data.extrude = 0.1\ntext_obj1.data.bevel_depth = 0.02\ntext_obj1.data.materials.append(logo_color)\n\n# Step 3: Create the Second Initial (e.g., 'B')\nbpy.ops.object.text_add(location=(1, 0, 0))\ntext_obj2 = bpy.context.object\ntext_obj2.data.body = \"B\"\ntext_obj2.data.extrude = 0.1\ntext_obj2.data.bevel_depth = 0.02\ntext_obj2.data.materials.append(logo_color)\n\n# Step 4: Intertwine the Initials\n# Rotate and position the second initial to intertwine with the first\ntext_obj2.rotation_euler = (0, 0, math.radians(45))\ntext_obj2.location = (0.5, 0, 0)\n\n# Adjust the first initial position slightly for better intertwining\ntext_obj1.location = (-0.5, 0, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 0.0, "unit_n": 2, "param_ratio": 5.5}
{"id": "646b06eb-8a29-45c5-b00b-bf506d424a8b", "name": "Bird Cage", "instruction": "Create a bird cage. It should have a circular base, 18 inches in diameter, and be 24 inches tall with vertical bars.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Convert inches to Blender units (assuming 1 inch = 0.0254 meters)\ndiameter = 18 * 0.0254\nradius = diameter / 2\nheight = 24 * 0.0254\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=0.02, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Vertical Bars\nnum_bars = 20\nangle_step = 360 / num_bars\nfor i in range(num_bars):\n    angle = math.radians(i * angle_step)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=height, location=(x, y, height / 2))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n\n# Step 4: Create the Top Ring\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=0.02, location=(0, 0, height))\ntop_ring = bpy.context.object\ntop_ring.name = \"Top Ring\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.175848277408281, "unit_n": 3, "param_ratio": 4.0}
{"id": "6db66bb4-baf3-4177-98b7-eaca36ea3b75", "name": "Soccer Ball", "instruction": "Craft a 3D model of a soccer ball. Compare the different sizes by creating a standard adult size and a smaller child size.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Standard Adult Size Soccer Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nadult_ball = bpy.context.object\nadult_ball.name = \"Adult Soccer Ball\"\n\n# Step 3: Create the Smaller Child Size Soccer Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(2, 0, 0))\nchild_ball = bpy.context.object\nchild_ball.name = \"Child Soccer Ball\"\n\n# Step 4: Apply a basic white material to both soccer balls\nwhite_material = bpy.data.materials.new(name=\"White Material\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\nadult_ball.data.materials.append(white_material)\nchild_ball.data.materials.append(white_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.276190037638563, "unit_n": 2, "param_ratio": 6.5}
{"id": "2ccd03b4-22f4-4e0e-b395-bdb25d330032", "name": "Chess Set", "instruction": "Can you add a thematic flourish to a standard chess set, such as dragon and knight motifs for the pieces?", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color\n\n# Step 2: Create the Chess Board\nbpy.ops.mesh.primitive_plane_add(size=8, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Chess Board\"\nboard.data.materials.append(white_material)\n\n# Step 3: Create the Chess Pieces\n# Function to create a simple pawn\ndef create_pawn(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.2))\n    pawn_head = bpy.context.object\n    pawn_head.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.1))\n    pawn_body = bpy.context.object\n    pawn_body.data.materials.append(material)\n\n# Create pawns for both sides\nfor i in range(8):\n    create_pawn((-3.5 + i, -2.5, 0), black_material)\n    create_pawn((-3.5 + i, 2.5, 0), white_material)\n\n# Function to create a simple rook\ndef create_rook(location, material):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(location[0], location[1], 0.2))\n    rook_base = bpy.context.object\n    rook_base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(location[0], location[1], 0.4))\n    rook_top = bpy.context.object\n    rook_top.data.materials.append(material)\n\n# Create rooks for both sides\ncreate_rook((-3.5, -3.5, 0), black_material)\ncreate_rook((3.5, -3.5, 0), black_material)\ncreate_rook((-3.5, 3.5, 0), white_material)\ncreate_rook((3.5, 3.5, 0), white_material)\n\n# Function to create a simple knight\ndef create_knight(location, material):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=(location[0], location[1], 0.2))\n    knight_base = bpy.context.object\n    knight_base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.2, location=(location[0], location[1], 0.5))\n    knight_head = bpy.context.object\n    knight_head.data.materials.append(material)\n\n# Create knights for both sides\ncreate_knight((-2.5, -3.5, 0), black_material)\ncreate_knight((2.5, -3.5, 0), black_material)\ncreate_knight((-2.5, 3.5, 0), white_material)\ncreate_knight((2.5, 3.5, 0), white_material)\n\n# Function to create a simple bishop\ndef create_bishop(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.2))\n    bishop_base = bpy.context.object\n    bishop_base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(location[0], location[1], 0.4))\n    bishop_head = bpy.context.object\n    bishop_head.data.materials.append(material)\n\n# Create bishops for both sides\ncreate_bishop((-1.5, -3.5, 0), black_material)\ncreate_bishop((1.5, -3.5, 0), black_material)\ncreate_bishop((-1.5, 3.5, 0), white_material)\ncreate_bishop((1.5, 3.5, 0), white_material)\n\n# Function to create a simple queen\ndef create_queen(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.5, location=(location[0], location[1], 0.25))\n    queen_base = bpy.context.object\n    queen_base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.5))\n    queen_head = bpy.context.object\n    queen_head.data.materials.append(material)\n\n# Create queens for both sides\ncreate_queen((0.5, -3.5, 0), black_material)\ncreate_queen((0.5, 3.5, 0), white_material)\n\n# Function to create a simple king\ndef create_king(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.6, location=(location[0], location[1], 0.3))\n    king_base = bpy.context.object\n    king_base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.6))\n    king_head = bpy.context.object\n    king_head.data.materials.append(material)\n\n# Create kings for both sides\ncreate_king((-0.5, -3.5, 0), black_material)\ncreate_king((-0.5, 3.5, 0), white_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.362916143716847, "unit_n": 13, "param_ratio": 5.230769230769231}
{"id": "72f1f288-c446-48fd-b450-e390f2e0188b", "name": "Toy Rocket", "instruction": "Let's create a toy rocket. It should have a pointed nose, fins at the bottom, and a cylindrical body. Add some windows and a door. Now, animate the rocket taking off, flying through the sky, and landing back on the ground.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nfin_color = bpy.data.materials.new(name=\"Fin Color\")\nfin_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\nwindow_color = bpy.data.materials.new(name=\"Window Color\")\nwindow_color.diffuse_color = (0.1, 0.8, 0.8, 1)  # Cyan color\ndoor_color = bpy.data.materials.new(name=\"Door Color\")\ndoor_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=5, location=(0, 0, 2.5))\nbody = bpy.context.object\nbody.name = \"Rocket Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Nose\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=2, location=(0, 0, 6))\nnose = bpy.context.object\nnose.name = \"Rocket Nose\"\nnose.data.materials.append(body_color)\n\n# Step 4: Create the Fins\nfor i in range(4):\n    angle = math.radians(i * 90)\n    x = math.cos(angle) * 1.2\n    y = math.sin(angle) * 1.2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.5))\n    fin = bpy.context.object\n    fin.scale = (0.1, 1, 0.5)\n    fin.rotation_euler = (0, 0, angle)\n    fin.name = f\"Fin {i + 1}\"\n    fin.data.materials.append(fin_color)\n\n# Step 5: Create the Windows\nfor i in range(3):\n    angle = math.radians(i * 120)\n    x = math.cos(angle) * 0.8\n    y = math.sin(angle) * 0.8\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, 3))\n    window = bpy.context.object\n    window.name = f\"Window {i + 1}\"\n    window.data.materials.append(window_color)\n\n# Step 6: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1, 1))\ndoor = bpy.context.object\ndoor.scale = (0.5, 0.1, 1)\ndoor.name = \"Door\"\ndoor.data.materials.append(door_color)\n\n# Step 7: Animate the Rocket\nrocket = bpy.data.objects[\"Rocket Body\"]\nrocket.select_set(True)\nbpy.context.view_layer.objects.active = rocket\n\n# Insert keyframes for takeoff\nrocket.location = (0, 0, 0)\nrocket.keyframe_insert(data_path=\"location\", frame=1)\nrocket.location = (0, 0, 20)\nrocket.keyframe_insert(data_path=\"location\", frame=50)\n\n# Insert keyframes for flying\nrocket.location = (0, 0, 20)\nrocket.keyframe_insert(data_path=\"location\", frame=100)\nrocket.location = (10, 0, 20)\nrocket.keyframe_insert(data_path=\"location\", frame=150)\n\n# Insert keyframes for landing\nrocket.location = (10, 0, 20)\nrocket.keyframe_insert(data_path=\"location\", frame=200)\nrocket.location = (10, 0, 0)\nrocket.keyframe_insert(data_path=\"location\", frame=250)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.888029134373339, "unit_n": 10, "param_ratio": 4.2}
{"id": "7e05dfcf-b96b-4169-a4d0-ebcd62fb7164", "name": "Blender", "instruction": "Could you create a 3D model of a blender? The blender should have a cylindrical base with buttons on the front, a transparent container on top, and a lid. The container should have measurement markings on the side.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.3 * (i - 1), 1.05, 0.15))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Add Measurement Markings (Simple representation using small cubes)\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.72, 0, 0.5 + i * 0.3))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i + 1}\"\n    marking.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.379812014072286, "unit_n": 11, "param_ratio": 3.909090909090909}
{"id": "1414937e-9a21-4092-82ac-565ba1966134", "name": "Power Strip", "instruction": "Imagine a power strip with six outlets and a single on/off switch. It should have a long, flat body with evenly spaced outlets. The power cord should extend from one end.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\noutlet_color = bpy.data.materials.new(name=\"OutletColor\")\noutlet_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\ncord_color = bpy.data.materials.new(name=\"CordColor\")\ncord_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (3, 1, 0.2)\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(-2.5 + i, 0, 0.1))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(3, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=4, location=(-3.5, 0, -0.1), rotation=(0, 1.5708, 0))\ncord = bpy.context.object\ncord.name = \"Cord\"\ncord.data.materials.append(cord_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8198007494518866, "unit_n": 9, "param_ratio": 4.444444444444445}
{"id": "7eb472a0-d84c-4c93-a33d-785688080dc7", "name": "Travel Wallet", "instruction": "Create a travel wallet with slots for cards, a zippered compartment for coins, and a section for holding a passport.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wallet Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_base = bpy.context.object\nwallet_base.name = \"Wallet Base\"\nwallet_base.scale = (1, 0.1, 0.6)\nwallet_base.data.materials.append(wallet_color)\n\n# Step 3: Create Card Slots\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.8 + i * 0.6, 0.1, 0.3))\n    card_slot = bpy.context.object\n    card_slot.name = f\"Card Slot {i + 1}\"\n    card_slot.scale = (0.3, 0.02, 0.2)\n    card_slot.data.materials.append(wallet_color)\n\n# Step 4: Create Zippered Compartment\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.6, 0.1, -0.3))\nzippered_compartment = bpy.context.object\nzippered_compartment.name = \"Zippered Compartment\"\nzippered_compartment.scale = (0.4, 0.02, 0.2)\nzippered_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create Passport Section\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(-0.6, 0.1, -0.3))\npassport_section = bpy.context.object\npassport_section.name = \"Passport Section\"\npassport_section.scale = (0.5, 0.02, 0.4)\npassport_section.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.524627420627919, "unit_n": 6, "param_ratio": 3.5}
{"id": "896107db-02c7-4bb3-92c9-e937ac8985a9", "name": "Laptop vs. Desktop Computer", "instruction": "Compare a laptop and a desktop computer. The laptop is a portable device with an integrated keyboard and screen, while the desktop computer consists of a separate monitor, keyboard, and tower.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Laptop Screen\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nlaptop_screen = bpy.context.object\nlaptop_screen.name = \"Laptop Screen\"\nlaptop_screen.scale = (1.5, 0.1, 1)\nlaptop_screen.data.materials.append(gray)\n\n# Step 3: Create the Laptop Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 0))\nlaptop_keyboard = bpy.context.object\nlaptop_keyboard.name = \"Laptop Keyboard\"\nlaptop_keyboard.scale = (1.5, 1, 0.1)\nlaptop_keyboard.data.materials.append(gray)\n\n# Step 4: Create the Desktop Monitor\nbpy.ops.mesh.primitive_cube_add(size=1, location=(3, 0, 1))\ndesktop_monitor = bpy.context.object\ndesktop_monitor.name = \"Desktop Monitor\"\ndesktop_monitor.scale = (1.5, 0.1, 1)\ndesktop_monitor.data.materials.append(gray)\n\n# Step 5: Create the Desktop Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(3, -0.6, 0.1))\ndesktop_keyboard = bpy.context.object\ndesktop_keyboard.name = \"Desktop Keyboard\"\ndesktop_keyboard.scale = (1.5, 0.5, 0.1)\ndesktop_keyboard.data.materials.append(gray)\n\n# Step 6: Create the Desktop Tower\nbpy.ops.mesh.primitive_cube_add(size=1, location=(4.5, -0.6, 0.5))\ndesktop_tower = bpy.context.object\ndesktop_tower.name = \"Desktop Tower\"\ndesktop_tower.scale = (0.5, 1, 1.5)\ndesktop_tower.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2729911457779703, "unit_n": 5, "param_ratio": 5.0}
{"id": "3b006ba6-c46b-4d65-a717-f1caaeca727f", "name": "Loaf of Bread", "instruction": "Generate a 3D model of a loaf of bread. It should have a slightly domed top and a rectangular base.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the bread color\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\n\n# Step 2: Create the Base of the Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.5, 0.3)\nbase.data.materials.append(bread_color)\n\n# Step 3: Create the Top of the Bread\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1.1))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale = (1, 0.5, 0.3)\ntop.data.materials.append(bread_color)\n\n# Join the two parts to make a single object\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\ntop.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.191687185980506, "unit_n": 2, "param_ratio": 6.5}
{"id": "844a29ee-9d30-4191-8404-2e6a8324551c", "name": "Smartphone", "instruction": "Describe a smartphone.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (0.4, 0.8, 0.05)\nbody.name = \"Smartphone Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.scale = (0.38, 0.78, 1)\nscreen.name = \"Smartphone Screen\"\nscreen.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "040a63b0-c601-4b89-a320-3cc139905575", "name": "Coffee Grinder", "instruction": "Could you create a coffee grinder? It should have a handle on top for manual grinding and a container at the bottom to collect the ground coffee.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(wood)\n\n# Step 3: Create the Grinder Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.1, location=(0, 0, 1.05))\ngrinder_top = bpy.context.object\ngrinder_top.name = \"Grinder Top\"\ngrinder_top.data.materials.append(metal)\n\n# Step 4: Create the Handle Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.15))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal)\n\n# Step 5: Create the Handle Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0.25, 0, 1.25), rotation=(0, math.pi/2, 0))\nhandle_arm = bpy.context.object\nhandle_arm.name = \"Handle Arm\"\nhandle_arm.data.materials.append(metal)\n\n# Step 6: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.5, 0, 1.25))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.3328649130624193, "unit_n": 5, "param_ratio": 7.4}
{"id": "8d3e7e7e-442a-4a2d-8907-88d324d56a1e", "name": "Dining Table", "instruction": "Could you design a dining table that seats six people comfortably? Ensure there's enough space for chairs to be pulled out and for people to move around.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2.5  # Length\ntable_top.scale[1] = 1.2  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Table Legs\nleg_positions = [(-2.4, -1.1, 0.5), (2.4, -1.1, 0.5), (-2.4, 1.1, 0.5), (2.4, 1.1, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 5  # Height\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.3921930563912035, "unit_n": 2, "param_ratio": 5.0}
{"id": "4105ea05-a639-4c86-ab03-f6b7ff84a36e", "name": "Centrifuge", "instruction": "Let's create a centrifuge for laboratory use. The body is cylindrical and about 1.5 feet in height. It has a lid on top that can open and close. Inside, there are slots to hold test tubes. The base is wider for stability. Compare this model with a standard laboratory centrifuge to ensure accuracy.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the body\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Lighter gray for the lid\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Darker gray for the base\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.1, location=(0, 0, -0.75))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.75))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Test Tube Slots\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.35 * math.cos(angle)\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(x, y, 0.2))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(body_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.743233144337637, "unit_n": 11, "param_ratio": 3.1818181818181817}
{"id": "81c04c1c-284f-4f06-83a2-45164f3f9a9d", "name": "Circuit Breaker", "instruction": "Create a circuit breaker with a simple on/off switch. The body should be rectangular and compact.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.3, 0.75))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.1, 0.4)\nswitch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "4baef854-7238-495f-82de-cdc37222b3d1", "name": "Circuit Breaker", "instruction": "Design a circuit breaker. It should be rectangular with a switch on the front.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 2)\nbody.data.materials.append(black)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.1, 0.5)\nswitch.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "6e9b70f0-8877-44e0-844a-4c33f2ffae5b", "name": "Cat Scratching Post", "instruction": "Picture a cat scratching post. It should have a sturdy base and a vertical post. How could this design encourage a cat to use it frequently?", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color for the base\npost_color = bpy.data.materials.new(name=\"PostColor\")\npost_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the post\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.763180447528589, "unit_n": 2, "param_ratio": 9.5}
{"id": "549adcad-af96-4ee9-b2df-08cdf087ff37", "name": "Bird Cage", "instruction": "Create a bird cage with a cylindrical shape. The cage should have vertical bars and a domed top. Include a perch inside the cage and ensure there is a small door for access.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Cage Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Vertical Bars\nnum_bars = 16\nfor i in range(num_bars):\n    angle = i * (2 * math.pi / num_bars)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(x, y, 1.5))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n    bar.data.materials.append(metal_color)\n\n# Step 4: Create the Dome Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 3))\ndome = bpy.context.object\ndome.name = \"Dome\"\ndome.scale[2] = 0.5\ndome.data.materials.append(metal_color)\n\n# Step 5: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1.5), rotation=(0, 0, math.pi/2))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)\n\n# Step 6: Create the Door\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.rotation_euler[1] = math.pi / 2\ndoor.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.678998716250865, "unit_n": 5, "param_ratio": 6.2}
{"id": "70c61345-5c6d-4505-8b74-c18205d8d1a3", "name": "Winter Gloves", "instruction": "Design a pair of winter gloves. They should cover the entire hand, including the fingers, and have a simple cuff around the wrist. Ensure the gloves are identical and suitable for cold weather.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nglove_color = bpy.data.materials.new(name=\"Glove Color\")\nglove_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\n\n# Function to create a glove\ndef create_glove(location):\n    # Create the palm\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=location)\n    palm = bpy.context.object\n    palm.name = \"Palm\"\n    palm.data.materials.append(glove_color)\n    \n    # Create the fingers\n    finger_positions = [(0.2, 0.5, 0.5), (-0.2, 0.5, 0.5), (0, 0.5, 0.7), (0, 0.5, 0.3)]\n    for i, pos in enumerate(finger_positions):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(location[0] + pos[0], location[1] + pos[1], location[2] + pos[2]))\n        finger = bpy.context.object\n        finger.name = f\"Finger {i + 1}\"\n        finger.data.materials.append(glove_color)\n    \n    # Create the thumb\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0] - 0.3, location[1] + 0.3, location[2] + 0.3), rotation=(0, 0, 0.5))\n    thumb = bpy.context.object\n    thumb.name = \"Thumb\"\n    thumb.data.materials.append(glove_color)\n    \n    # Create the cuff\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.2, location=(location[0], location[1] - 0.5, location[2]))\n    cuff = bpy.context.object\n    cuff.name = \"Cuff\"\n    cuff.data.materials.append(glove_color)\n\n# Create two gloves\ncreate_glove(location=(1, 0, 0))\ncreate_glove(location=(-1, 0, 0))", "color_brightness": "Dark", "verify": "human", "entropy": 5.352922546130641, "unit_n": 4, "param_ratio": 6.0}
{"id": "0a104899-10c5-4fd2-9492-b64e5ca756a0", "name": "Wallpaper Pattern", "instruction": "Design a wallpaper pattern that features a repeating geometric design. It should be visually appealing and suitable for a living room.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the repeating geometric design\nfor i in range(5):\n    for j in range(5):\n        # Create a square\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i, j, 0))\n        square = bpy.context.object\n        square.name = f\"Square {i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(color1)\n        else:\n            square.data.materials.append(color2)\n\n# Step 3: Create a larger plane to represent the wallpaper background\nbpy.ops.mesh.primitive_plane_add(size=10, location=(2.5, 2.5, -0.01))\nbackground = bpy.context.object\nbackground.name = \"Background\"\nbackground.data.materials.append(color1)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5780106213568414, "unit_n": 26, "param_ratio": 0.6923076923076923}
{"id": "442ad19f-7485-4592-b82d-c0e5597b17d4", "name": "Adjustable Spanner", "instruction": "Design an adjustable spanner.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray metal color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.scale = (0.1, 0.5, 0.1)\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal_color)\n\n# Step 3: Create the Fixed Jaw\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.6, 0))\nfixed_jaw = bpy.context.object\nfixed_jaw.scale = (0.1, 0.1, 0.1)\nfixed_jaw.name = \"Fixed Jaw\"\nfixed_jaw.data.materials.append(metal_color)\n\n# Step 4: Create the Movable Jaw\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.4, 0.1))\nmovable_jaw = bpy.context.object\nmovable_jaw.scale = (0.1, 0.1, 0.1)\nmovable_jaw.name = \"Movable Jaw\"\nmovable_jaw.data.materials.append(metal_color)\n\n# Step 5: Create the Adjustment Screw\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0.3, 0))\nadjustment_screw = bpy.context.object\nadjustment_screw.rotation_euler = (1.5708, 0, 0)\nadjustment_screw.name = \"Adjustment Screw\"\nadjustment_screw.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9240885457959713, "unit_n": 4, "param_ratio": 5.5}
{"id": "104c0cf8-c751-4880-aa09-0c4eb07f6d49", "name": "Stapler", "instruction": "Create a stapler for me. Add a decorative pattern on the top.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstapler_body_color = bpy.data.materials.new(name=\"Stapler Body Color\")\nstapler_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\ndecorative_pattern_color = bpy.data.materials.new(name=\"Decorative Pattern Color\")\ndecorative_pattern_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Base of the Stapler\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (0.2, 1, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(stapler_body_color)\n\n# Step 3: Create the Top Part of the Stapler\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntop = bpy.context.object\ntop.scale = (0.2, 1, 0.1)\ntop.name = \"Top\"\ntop.data.materials.append(stapler_body_color)\n\n# Step 4: Create the Decorative Pattern\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.5, 1.1))\ndecorative_pattern = bpy.context.object\ndecorative_pattern.name = \"Decorative Pattern\"\ndecorative_pattern.data.materials.append(decorative_pattern_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 1.9028414914291574, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "49744c7b-c637-47f7-89a1-50686f166a23", "name": "Pizza", "instruction": "Design a 3D model of a pizza. It should be a round pizza with a thin crust. Include a tomato sauce base, cheese, and pepperoni slices evenly distributed on top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Crust color\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.98, 0.93, 0.36, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.98, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0.7, 0), (-0.7, 0), (0, 0.7), (0, -0.7)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.841471688251196, "unit_n": 4, "param_ratio": 10.0}
{"id": "1e2251dc-def7-4553-8d92-4c367a4736ea", "name": "Sofa vs. Loveseat", "instruction": "Create a 3D model comparing a sofa and a loveseat. The sofa should have three seats, while the loveseat should have two seats. Both should have armrests and a backrest.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Function to create a seat\ndef create_seat(location, name):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    seat = bpy.context.object\n    seat.name = name\n    seat.scale[0] = 1.5  # Make it rectangular\n    seat.scale[1] = 1\n    seat.scale[2] = 0.2  # Thin seat\n    seat.data.materials.append(sofa_color)\n    return seat\n\n# Function to create a backrest\ndef create_backrest(location, name):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    backrest = bpy.context.object\n    backrest.name = name\n    backrest.scale[0] = 1.5  # Match seat width\n    backrest.scale[1] = 0.2  # Thin backrest\n    backrest.scale[2] = 0.5  # Tall backrest\n    backrest.data.materials.append(sofa_color)\n    return backrest\n\n# Function to create an armrest\ndef create_armrest(location, name):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    armrest = bpy.context.object\n    armrest.name = name\n    armrest.scale[0] = 0.2  # Thin armrest\n    armrest.scale[1] = 1  # Match seat depth\n    armrest.scale[2] = 0.5  # Tall armrest\n    armrest.data.materials.append(sofa_color)\n    return armrest\n\n# Create the Sofa (Three seats)\nfor i in range(3):\n    create_seat(location=(i * 1.6 - 1.6, 0, 0.2), name=f\"Sofa Seat {i + 1}\")\n\ncreate_backrest(location=(0, -0.6, 0.7), name=\"Sofa Backrest\")\ncreate_armrest(location=(-2.4, 0, 0.7), name=\"Sofa Armrest Left\")\ncreate_armrest(location=(2.4, 0, 0.7), name=\"Sofa Armrest Right\")\n\n# Create the Loveseat (Two seats)\nfor i in range(2):\n    create_seat(location=(i * 1.6 - 0.8, -2, 0.2), name=f\"Loveseat Seat {i + 1}\")\n\ncreate_backrest(location=(0, -2.6, 0.7), name=\"Loveseat Backrest\")\ncreate_armrest(location=(-1.6, -2, 0.7), name=\"Loveseat Armrest Left\")\ncreate_armrest(location=(1.6, -2, 0.7), name=\"Loveseat Armrest Right\")", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.099256534172782, "unit_n": 3, "param_ratio": 2.6666666666666665}
{"id": "60f08055-e0c5-4253-be1f-b431bed44dd0", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. It should have two slices of bread with layers of ingredients like lettuce, tomato, and cheese in between.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.84, 0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "02a24358-a351-4da6-b223-e172d8197a6d", "name": "Cushion", "instruction": "Create a square cushion with a simple, solid color and no patterns.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Solid color (e.g., red)\n\n# Step 2: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale.z = 0.1  # Make it flat like a cushion\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "02c82ccb-4836-47c1-b0ad-79daedff493a", "name": "Suitcase vs. Backpack", "instruction": "Compare a suitcase and a backpack. The suitcase should have a rectangular shape with wheels and a telescopic handle. The backpack should have two shoulder straps and a zipper closure.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 0.5))\nsuitcase = bpy.context.object\nsuitcase.scale = (0.6, 0.3, 0.8)\nsuitcase.name = \"Suitcase\"\nsuitcase.data.materials.append(gray)\n\n# Step 3: Create the Suitcase Wheels\nfor i in range(4):\n    x = 1.5 + 0.5 * (i % 2) - 0.25\n    y = 0.3 * (i // 2) - 0.15\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 0.05))\n    wheel = bpy.context.object\n    wheel.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lay flat\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 4: Create the Telescopic Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 1.5))\nhandle = bpy.context.object\nhandle.scale = (0.05, 0.05, 0.5)\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)\n\n# Step 5: Create the Backpack Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0.5))\nbackpack = bpy.context.object\nbackpack.scale = (0.5, 0.3, 0.7)\nbackpack.name = \"Backpack\"\nbackpack.data.materials.append(gray)\n\n# Step 6: Create the Backpack Shoulder Straps\nfor i in range(2):\n    x = -1.5 + 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.35, 0.5))\n    strap = bpy.context.object\n    strap.scale = (0.05, 0.05, 0.5)\n    strap.name = f\"Strap {i + 1}\"\n    strap.data.materials.append(black)\n\n# Step 7: Create the Backpack Zipper\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 1.05))\nzipper = bpy.context.object\nzipper.scale = (0.05, 0.3, 0.05)\nzipper.name = \"Zipper\"\nzipper.data.materials.append(black)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.939375054044615, "unit_n": 10, "param_ratio": 3.5}
{"id": "05a19829-b604-4138-9106-f88b556fbf1d", "name": "Blender", "instruction": "Create a blender. The base should be cylindrical with a control panel featuring a few buttons and a dial. The blender jar should be transparent and fit securely onto the base. Include a lid for the jar with a removable center cap for adding ingredients while blending.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ndial_color = bpy.data.materials.new(name=\"Dial Color\")\ndial_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.9, 0.3)  # Transparent light blue color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\n# Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.3 * (i - 1), 0.9, 0.5))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0.9, 0.55))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.data.materials.append(dial_color)\n\n# Step 4: Create the Blender Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Create the Removable Center Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 2.6))\ncenter_cap = bpy.context.object\ncenter_cap.name = \"Center Cap\"\ncenter_cap.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.3595323880740775, "unit_n": 8, "param_ratio": 6.75}
{"id": "15a9f98d-25d0-4b5a-9449-342378520f79", "name": "Stand Mixer", "instruction": "Generate a 3D model of a stand mixer. It should have a mixing bowl attached to the base and a mixing attachment above the bowl. The main body should have a lever for adjusting the speed.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Mixing Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 1.5))\nbowl = bpy.context.object\nbowl.name = \"Mixing Bowl\"\n\n# Step 4: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 3))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 5: Create the Mixing Attachment\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 3.5))\nattachment = bpy.context.object\nattachment.name = \"Mixing Attachment\"\n\n# Step 6: Create the Lever\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 3))\nlever = bpy.context.object\nlever.name = \"Lever\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.037232848832988, "unit_n": 5, "param_ratio": 4.4}
{"id": "60b1ec71-6116-4a68-8b65-3ca4c88ada0d", "name": "Vacuum Cleaner", "instruction": "How would you design a vacuum cleaner that is easy to maneuver around furniture and tight spaces while still maintaining strong suction power?", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.5, location=(0, 0, 0.25))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0.35, 0.65), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.03, location=(x, -0.2, 0.1))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(handle_color)\n\n# Step 5: Create the Suction Head\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.5, 0.1))\nsuction_head = bpy.context.object\nsuction_head.name = \"Suction Head\"\nsuction_head.data.materials.append(handle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.4548883753628057, "unit_n": 5, "param_ratio": 6.4}
{"id": "83e7ba26-d741-4a7b-ac0a-58a3b946241b", "name": "Screwdriver", "instruction": "Let's create a screwdriver. Start with a cylindrical handle, about 5 inches long. Attach a straight, metal shaft to the handle, extending 3 inches outward. The tip of the shaft should be flat and narrow. Add a simple grip pattern on the handle for better hold.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for handle\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color for shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=5, location=(0, 0, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Add Grip Pattern to the Handle\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 2.5))\n    grip = bpy.context.object\n    grip.scale[2] = 5\n    grip.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=3, location=(0, 0, 6.5))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 5: Create the Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 8))\ntip = bpy.context.object\ntip.scale[0] = 0.05\ntip.scale[1] = 0.3\ntip.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.861499132461487, "unit_n": 11, "param_ratio": 2.5454545454545454}
{"id": "5b0d9340-f987-4d5c-83ce-3c68807d70e4", "name": "Guitar", "instruction": "Describe the feeling of playing a guitar. The guitar should have a classic shape with six strings, a sound hole in the center of the body, and tuning pegs on the headstock. When played, the strings should produce a rich, resonant sound that fills the room. The neck of the guitar should be smooth, allowing for easy movement of the fingers along the frets.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Sound Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0.06))\nsound_hole = bpy.context.object\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.delete(type='ONLY_FACE')\nbpy.ops.object.mode_set(mode='OBJECT')\nsound_hole.name = \"Sound Hole\"\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.8, 0))\nneck = bpy.context.object\nneck.scale[1] = 3\nneck.name = \"Neck\"\nneck.data.materials.append(wood_color)\n\n# Step 5: Create the Headstock\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 2.2, 0))\nheadstock = bpy.context.object\nheadstock.scale[1] = 0.5\nheadstock.name = \"Headstock\"\nheadstock.data.materials.append(wood_color)\n\n# Step 6: Create the Strings\nfor i in range(6):\n    x = -0.05 * 2.5 + 0.02 * i\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=3.5, location=(x, 1.1, 0.05))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the neck\n\n# Step 7: Create the Tuning Pegs\nfor i in range(6):\n    x = -0.05 * 2.5 + 0.02 * i\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, 2.3, 0.05))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.rotation_euler[1] = 1.5708  # Rotate 90 degrees to align with the headstock\n    peg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8993926924162405, "unit_n": 16, "param_ratio": 2.0625}
{"id": "1fb00965-056d-47c0-87bf-c256115162a1", "name": "Travel Umbrella", "instruction": "Design a travel umbrella. It should have a compact, foldable design with a telescopic shaft. The canopy should open wide enough to cover one person. The handle should be ergonomic. Include a strap for easy carrying.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.5, radius2=0, depth=0.1, location=(0, 0, 1.5))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(black)\n\n# Step 3: Create the Telescopic Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(gray)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 0.15))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)\n\n# Step 5: Create the Strap\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(0, -0.2, 0.15), rotation=(math.pi/2, 0, 0))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.28718168419193, "unit_n": 4, "param_ratio": 8.75}
{"id": "88b45008-4e63-47a3-be72-2e503ed3815f", "name": "Blender", "instruction": "Create a 3D model of a blender. It should have a base with buttons for different settings and a transparent container on top for blending ingredients. Include a lid for the container.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent gray color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.5 - i * 0.5, 0.9, 0.35))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.775894066338046, "unit_n": 6, "param_ratio": 6.5}
{"id": "77d3aecf-9b3f-4822-9c4f-5e6256ff7a0f", "name": "Sandwich", "instruction": "Generate a 3D model of a sandwich. It should have two slices of bread with visible layers of lettuce, tomato, cheese, and ham in between.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make a bread slice\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make a lettuce layer\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make a tomato layer\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make a cheese layer\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05  # Flatten the cube to make a ham layer\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make a bread slice\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "49d85179-e065-40e3-a58f-68731ea1f6c1", "name": "Stethoscope vs. Blood Pressure Monitor", "instruction": "Generate two 3D models: one of a stethoscope and one of a blood pressure monitor. The stethoscope should have earpieces connected to a chest piece by flexible tubing. The blood pressure monitor should include an inflatable cuff and a gauge.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Stethoscope\n\n# Earpieces\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 0, 1.8))\n    earpiece = bpy.context.object\n    earpiece.name = f\"Earpiece {i + 1}\"\n    earpiece.data.materials.append(black)\n\n# Tubing\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.5, location=(0, 0, 1))\ntubing = bpy.context.object\ntubing.name = \"Tubing\"\ntubing.data.materials.append(black)\n\n# Chest Piece\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0.25))\nchest_piece = bpy.context.object\nchest_piece.name = \"Chest Piece\"\nchest_piece.data.materials.append(gray)\n\n# Step 3: Create the Blood Pressure Monitor\n\n# Cuff\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, 0, 0.25))\ncuff = bpy.context.object\ncuff.name = \"Cuff\"\ncuff.data.materials.append(gray)\n\n# Gauge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(1.5, 0.3, 0.5))\ngauge = bpy.context.object\ngauge.name = \"Gauge\"\ngauge.data.materials.append(gray)\n\n# Tubing from Cuff to Gauge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(1.5, 0.15, 0.35), rotation=(1.57, 0, 0))\ntubing_cuff_to_gauge = bpy.context.object\ntubing_cuff_to_gauge.name = \"Tubing Cuff to Gauge\"\ntubing_cuff_to_gauge.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5663379134642677, "unit_n": 7, "param_ratio": 5.714285714285714}
{"id": "37a9ffac-9871-480a-9a9c-46f3e0de8dbc", "name": "Laptop Stand", "instruction": "Design a 3D model of a laptop stand. The stand should have an adjustable height feature and a flat surface to place the laptop on. Include ventilation holes to allow for airflow.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstand_color = bpy.data.materials.new(name=\"Stand Color\")\nstand_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Flat Surface\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsurface = bpy.context.object\nsurface.name = \"Flat Surface\"\nsurface.scale[2] = 0.05  # Make it flat\nsurface.data.materials.append(stand_color)\n\n# Step 3: Create the Legs\nfor i in range(2):\n    x = 0.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 1  # Adjust height\n    leg.data.materials.append(stand_color)\n\n# Step 4: Create the Adjustable Height Feature\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))\nadjustable_height = bpy.context.object\nadjustable_height.name = \"Adjustable Height\"\nadjustable_height.scale[2] = 1  # Adjust height\nadjustable_height.data.materials.append(stand_color)\n\n# Step 5: Create Ventilation Holes\nfor i in range(-4, 5, 2):\n    for j in range(-1, 2, 2):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(i * 0.2, j * 0.5, 1.05))\n        hole = bpy.context.object\n        hole.name = f\"Ventilation Hole {i}_{j}\"\n        hole.rotation_euler[0] = math.pi / 2\n\n        # Boolean modifier to create holes\n        mod_bool = surface.modifiers.new(name=f\"Vent Hole {i}_{j}\", type='BOOLEAN')\n        mod_bool.operation = 'DIFFERENCE'\n        mod_bool.object = hole\n        bpy.context.view_layer.objects.active = surface\n        bpy.ops.object.modifier_apply(modifier=mod_bool.name)\n        bpy.data.objects.remove(hole)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.296430223102509, "unit_n": 5, "param_ratio": 4.4}
{"id": "134a3c2f-5aec-4a6f-a7da-f8a4cfa53493", "name": "Cat Scratching Post", "instruction": "Can you design a cat scratching post that would appeal to both cats and their owners, focusing on the interaction between the pet and the object?", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbeige = bpy.data.materials.new(name=\"Beige\")\nbeige.diffuse_color = (0.96, 0.87, 0.70, 1)  # Beige color\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(beige)\n\n# Step 3: Create the Scratching Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Scratching Post\"\npost.data.materials.append(brown)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2.5))\ntop_platform = bpy.context.object\ntop_platform.name = \"Top Platform\"\ntop_platform.data.materials.append(beige)\n\n# Step 5: Create a Toy Hanging from the Top Platform\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, 0, 2))\ntoy = bpy.context.object\ntoy.name = \"Toy\"\ntoy.data.materials.append(brown)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 1.433553024841923, "unit_n": 4, "param_ratio": 6.75}
{"id": "32943726-773e-4a19-944f-0709cf4cd914", "name": "USB Flash Drive", "instruction": "Create a 3D model of a USB flash drive. It should have a retractable USB connector and a small loop for attaching to a keychain. The body should be simple and functional, with a small indicator light.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nusb_color = bpy.data.materials.new(name=\"USBColor\")\nusb_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nindicator_color = bpy.data.materials.new(name=\"IndicatorColor\")\nindicator_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[0] = 2.5\nbody.scale[1] = 1\nbody.scale[2] = 0.2\nbody.data.materials.append(body_color)\n\n# Step 3: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, 0, 0))\nusb_connector = bpy.context.object\nusb_connector.name = \"USB Connector\"\nusb_connector.scale[0] = 0.4\nusb_connector.scale[1] = 0.8\nusb_connector.scale[2] = 0.1\nusb_connector.data.materials.append(usb_color)\n\n# Step 4: Create the Keychain Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.03, location=(-1.3, 0, 0.15))\nkeychain_loop = bpy.context.object\nkeychain_loop.name = \"Keychain Loop\"\nkeychain_loop.data.materials.append(body_color)\n\n# Step 5: Create the Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.8, 0.5, 0.15))\nindicator_light = bpy.context.object\nindicator_light.name = \"Indicator Light\"\nindicator_light.data.materials.append(indicator_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.66632970557586, "unit_n": 4, "param_ratio": 8.0}
{"id": "1bedae71-e47c-4d71-aef4-353753ab7000", "name": "Chess Piece", "instruction": "Design a 3D model of a chess piece.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0, 0, 1.85))\nneck = bpy.context.object\nneck.name = \"Neck\"\n\n# Step 5: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 2.3))\nhead = bpy.context.object\nhead.name = \"Head\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.7354805927749615, "unit_n": 4, "param_ratio": 4.75}
{"id": "738c77d2-8adb-496d-9334-a47974749d09", "name": "Winter Hat", "instruction": "Design a 3D model of a winter hat. The hat should have a rounded top with a folded brim at the bottom. Add a pom-pom on top for extra detail. Ensure the brim is slightly thicker than the rest of the hat.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\nbrim_color = bpy.data.materials.new(name=\"BrimColor\")\nbrim_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Darker red color\n\npom_pom_color = bpy.data.materials.new(name=\"PomPomColor\")\npom_pom_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color\n\n# Step 2: Create the Hat Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nhat_body = bpy.context.object\nhat_body.name = \"HatBody\"\nhat_body.data.materials.append(hat_color)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.3, location=(0, 0, 0.15))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(brim_color)\n\n# Step 4: Create the Pom-Pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2.3))\npom_pom = bpy.context.object\npom_pom.name = \"PomPom\"\npom_pom.data.materials.append(pom_pom_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.042824511891225, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "0f5d1d87-13db-4c29-95a8-21e769c4145c", "name": "Stapler", "instruction": "Could you make a stapler for me? It should be a handheld device, used for joining papers together by driving metal staples through them.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (0.3, 1, 0.1)\nbase.data.materials.append(dark_gray)\n\n# Step 3: Create the Top Part\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.6))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale = (0.3, 1, 0.1)\ntop.rotation_euler = (math.radians(15), 0, 0)\ntop.data.materials.append(dark_gray)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.45, 0.35), rotation=(0, math.radians(90), 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(dark_gray)\n\n# Step 5: Create the Staple Holder\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.4, 0.5))\nstaple_holder = bpy.context.object\nstaple_holder.name = \"Staple Holder\"\nstaple_holder.scale = (0.2, 0.2, 0.05)\nstaple_holder.data.materials.append(dark_gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.9252949224165898, "unit_n": 4, "param_ratio": 6.25}
{"id": "5febb1ff-d879-49d7-9bc1-11d678921528", "name": "Hat", "instruction": "Create a 3D model of a hat. It should have a wide brim and a rounded crown.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Combine the Brim and Crown into one object\nbpy.ops.object.select_all(action='DESELECT')\nbrim.select_set(True)\ncrown.select_set(True)\nbpy.context.view_layer.objects.active = brim\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.933726087323573, "unit_n": 2, "param_ratio": 4.5}
{"id": "4ee2596f-82df-4253-b698-cfa083e2d8cb", "name": "Decorative Vase", "instruction": "Create a 3D model of a decorative vase. Compare the designs of a tall, slender vase and a short, wide vase.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Tall, Slender Vase\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(-1, 0, 1))\ntall_vase = bpy.context.object\ntall_vase.name = \"Tall Slender Vase\"\n\n# Step 3: Create the Short, Wide Vase\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(1, 0, 0.5))\nshort_vase = bpy.context.object\nshort_vase.name = \"Short Wide Vase\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9471604645414717, "unit_n": 2, "param_ratio": 5.0}
{"id": "1b472ea7-ea69-4519-95d4-47571e900802", "name": "Geometric Pattern", "instruction": "Create a 3D model of a geometric pattern. It should feature a repeating design of interlocking hexagons. Each hexagon should have a small circle at its center. The pattern should be arranged in a grid.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NOTHING', location=location)\n    hexagon = bpy.context.object\n    return hexagon\n\n# Function to create a circle at the center of a hexagon\ndef create_center_circle(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=32, radius=0.3, fill_type='NGON', location=location)\n    circle = bpy.context.object\n    return circle\n\n# Step 2: Create the pattern\nrows = 5\ncols = 5\nhex_radius = 1\nhex_height = math.sqrt(3) * hex_radius\n\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * hex_radius\n        y = row * hex_height + (col % 2) * (hex_height / 2)\n        hexagon = create_hexagon((x, y, 0))\n        circle = create_center_circle((x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.415849180717411, "unit_n": 2, "param_ratio": 3.0}
{"id": "64e020e3-811d-406b-b7c9-02eb8d36c0b0", "name": "Sofa", "instruction": "Design a sofa. Ensure it has a backrest, armrests, and a seat cushion.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat Cushion\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat Cushion\"\nseat.scale[0] = 2\nseat.scale[1] = 1\nseat.scale[2] = 0.2\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2\nbackrest.scale[1] = 0.2\nbackrest.scale[2] = 0.6\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2\n    armrest.scale[1] = 1\n    armrest.scale[2] = 0.6\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 4.25}
{"id": "627c51f7-77ff-415b-ad15-ce4ae02bee2c", "name": "Carry-on Suitcase", "instruction": "Model a carry-on suitcase with a telescopic handle, two wheels on the bottom, and a side handle for carrying. The suitcase should have a front pocket with a zipper and a main compartment with a locking mechanism.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsuitcase_body = bpy.context.object\nsuitcase_body.name = \"Suitcase Body\"\nsuitcase_body.scale = (0.5, 0.25, 0.75)\nsuitcase_body.data.materials.append(suitcase_color)\n\n# Step 3: Create the Telescopic Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.25, 2))\ntelescopic_handle = bpy.context.object\ntelescopic_handle.name = \"Telescopic Handle\"\ntelescopic_handle.scale = (0.05, 0.05, 0.5)\ntelescopic_handle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.4 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.3, 0.1), rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(handle_color)\n\n# Step 5: Create the Side Handle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.55, 0, 1))\nside_handle = bpy.context.object\nside_handle.name = \"Side Handle\"\nside_handle.scale = (0.05, 0.05, 0.2)\nside_handle.data.materials.append(handle_color)\n\n# Step 6: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.26, 1))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.45, 0.01, 0.3)\nfront_pocket.data.materials.append(suitcase_color)\n\n# Step 7: Create the Main Compartment Lock\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.26, 1.5))\nmain_lock = bpy.context.object\nmain_lock.name = \"Main Lock\"\nmain_lock.scale = (0.05, 0.01, 0.05)\nmain_lock.data.materials.append(handle_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4034202952214985, "unit_n": 7, "param_ratio": 5.428571428571429}
{"id": "63ecdcb5-f078-4272-a27a-d16c703dcb97", "name": "Puzzle Cube", "instruction": "How would a child feel when playing with a colorful puzzle cube?", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors for the puzzle cube\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 1, 1)   # White\n]\n\n# Step 2: Create the Puzzle Cube\nsize = 0.9\ngap = 0.1\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=size, location=(x * (size + gap), y * (size + gap), z * (size + gap)))\n            cube = bpy.context.object\n            cube.name = f\"Cube_{x}_{y}_{z}\"\n            mat = bpy.data.materials.new(name=f\"Mat_{x}_{y}_{z}\")\n            mat.diffuse_color = colors[(x + y + z) % len(colors)]\n            cube.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.14814814814814814}
{"id": "4dd2e7a5-4830-4a2e-89fc-9c3b094759d7", "name": "Burger", "instruction": "Create a simple burger. It should have a bun, a patty, and basic toppings like lettuce and tomato.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, -0.65))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(0, 0, -0.35))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, -0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 5: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(0, 0, 0))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.25))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.28311796940181, "unit_n": 5, "param_ratio": 9.0}
{"id": "89e06058-12d3-4a68-821c-e4fa2b127ad1", "name": "Geometric Pattern Wall Art", "instruction": "Let's create a 3D geometric pattern for wall art. Imagine a square canvas divided into smaller squares and triangles of varying sizes. Each shape should be raised slightly from the surface to give a sense of depth. The pattern should be intricate and symmetrical, with a mix of sharp angles and smooth curves. In the center, place a prominent circular motif that stands out from the rest of the design. The overall look should be modern and eye-catching, suitable for a contemporary living space.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncenter_color = bpy.data.materials.new(name=\"Center Color\")\ncenter_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the base canvas\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ncanvas = bpy.context.object\ncanvas.name = \"Canvas\"\ncanvas.data.materials.append(base_color)\n\n# Step 3: Create smaller squares and triangles\n# Squares\nfor i in range(4):\n    for j in range(4):\n        bpy.ops.mesh.primitive_plane_add(size=0.4, location=(i*0.5 - 0.75, j*0.5 - 0.75, 0.01))\n        square = bpy.context.object\n        square.name = f\"Square {i*4 + j + 1}\"\n        square.data.materials.append(base_color)\n\n# Triangles\nfor i in range(4):\n    for j in range(4):\n        bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.2, depth=0.01, location=(i*0.5 - 0.75, j*0.5 - 0.75, 0.02))\n        triangle = bpy.context.object\n        triangle.name = f\"Triangle {i*4 + j + 1}\"\n        triangle.data.materials.append(base_color)\n\n# Step 4: Create the central circular motif\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0.05))\ncenter_circle = bpy.context.object\ncenter_circle.name = \"Center Circle\"\ncenter_circle.data.materials.append(center_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.492881107439371, "unit_n": 34, "param_ratio": 0.8529411764705882}
{"id": "57c76773-cf1e-4ebd-88fa-51caba21434a", "name": "Whiteboard Marker", "instruction": "Please create a 3D model of a whiteboard marker. It should be cylindrical and about six inches long. The cap should be on one end, and the other end should have a chisel tip. The body should have a label indicating the color of the marker. Include a small clip on the cap for attaching it to a pocket.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmarker_body_color = bpy.data.materials.new(name=\"Marker Body\")\nmarker_body_color.diffuse_color = (1, 1, 1, 1)  # White color\n\nmarker_cap_color = bpy.data.materials.new(name=\"Marker Cap\")\nmarker_cap_color.diffuse_color = (0, 0, 1, 1)  # Blue color\n\nmarker_label_color = bpy.data.materials.new(name=\"Marker Label\")\nmarker_label_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Marker Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=6, location=(0, 0, 3))\nmarker_body = bpy.context.object\nmarker_body.name = \"Marker Body\"\nmarker_body.data.materials.append(marker_body_color)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=0.5, location=(0, 0, 6.25))\nmarker_cap = bpy.context.object\nmarker_cap.name = \"Marker Cap\"\nmarker_cap.data.materials.append(marker_cap_color)\n\n# Step 4: Create the Chisel Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.3, location=(0, 0, -0.15))\nchisel_tip = bpy.context.object\nchisel_tip.name = \"Chisel Tip\"\nchisel_tip.data.materials.append(marker_body_color)\n\n# Step 5: Create the Label\nbpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=1, location=(0, 0, 3))\nmarker_label = bpy.context.object\nmarker_label.name = \"Marker Label\"\nmarker_label.data.materials.append(marker_label_color)\n\n# Step 6: Create the Clip on the Cap\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.15, 0, 6.25))\nclip = bpy.context.object\nclip.scale[1] = 0.5\nclip.scale[2] = 2\nclip.name = \"Clip\"\nclip.data.materials.append(marker_cap_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.739324066181618, "unit_n": 5, "param_ratio": 8.0}
{"id": "84b2c8ab-62bf-4ab6-8806-22e8db9f7f46", "name": "Power Supply Unit", "instruction": "Design a power supply unit with a rectangular body. Include a fan on one side, a power switch, and connectors for various cables.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nfan_color = bpy.data.materials.new(name=\"FanColor\")\nfan_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nconnector_color = bpy.data.materials.new(name=\"ConnectorColor\")\nconnector_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1.5, 1, 0.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(1.5, 0, 0.25), rotation=(0, math.pi/2, 0))\nfan = bpy.context.object\nfan.name = \"Fan\"\nfan.data.materials.append(fan_color)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5, 0, 0.25))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.5, -0.3 + i * 0.3, -0.25))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(connector_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.504566678861287, "unit_n": 6, "param_ratio": 6.666666666666667}
{"id": "26465c1e-7dab-48ff-99af-dd5ab577d7bd", "name": "Wireless Earbuds", "instruction": "Design a pair of wireless earbuds. They should have a sleek, ergonomic design. Include a charging case that displays the battery level. The earbuds should fit snugly in the ears and have touch-sensitive controls on the sides. Make sure to include a small indicator light for connectivity status.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Earbuds\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, 0, 0))\n    earbud = bpy.context.object\n    earbud.name = f\"Earbud {i + 1}\"\n    earbud.data.materials.append(white)\n    \n    # Touch-sensitive controls\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 0.1, 0))\n    touch_control = bpy.context.object\n    touch_control.name = f\"Touch Control {i + 1}\"\n    touch_control.data.materials.append(black)\n    \n    # Indicator light\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(x, -0.1, 0))\n    indicator_light = bpy.context.object\n    indicator_light.name = f\"Indicator Light {i + 1}\"\n    indicator_light.data.materials.append(blue)\n\n# Step 3: Create the Charging Case\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0, -0.4))\ncase = bpy.context.object\ncase.name = \"Charging Case\"\ncase.data.materials.append(white)\n\n# Step 4: Create the Battery Level Display\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0.3, -0.1))\nbattery_display = bpy.context.object\nbattery_display.name = \"Battery Display\"\nbattery_display.data.materials.append(black)", "color_brightness": "Bright", "verify": "human", "entropy": 3.254002392616491, "unit_n": 8, "param_ratio": 4.375}
{"id": "0d01b9fd-cab8-4814-94ef-434966ecb2de", "name": "Board Game", "instruction": "Design a board game with a square board, various colored player pieces, and a set of dice. Include spaces for different actions and a start and finish point.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Board\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Board\"\nboard.data.materials.append(white)\n\n# Step 3: Create Player Pieces\nplayer_colors = [red, blue, green, yellow]\nfor i, color in enumerate(player_colors):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(i * 2 - 3, -5, 0.3))\n    piece = bpy.context.object\n    piece.name = f\"Player Piece {i + 1}\"\n    piece.data.materials.append(color)\n\n# Step 4: Create Dice\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i * 1.5 - 0.75, 5, 0.25))\n    dice = bpy.context.object\n    dice.name = f\"Dice {i + 1}\"\n    dice.data.materials.append(white)\n\n# Step 5: Create Start and Finish Points\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-4.5, -4.5, 0.5))\nstart = bpy.context.object\nstart.name = \"Start\"\nstart.data.materials.append(green)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(4.5, 4.5, 0.5))\nfinish = bpy.context.object\nfinish.name = \"Finish\"\nfinish.data.materials.append(red)\n\n# Step 6: Create Action Spaces\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(i * 2 - 3, 0, 0.5))\n    action_space = bpy.context.object\n    action_space.name = f\"Action Space {i + 1}\"\n    action_space.data.materials.append(blue)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9265574849983724, "unit_n": 10, "param_ratio": 4.9}
{"id": "6f8124ec-e786-491a-9a0b-86d216f44879", "name": "Coffee Pot Lid", "instruction": "Create a 3D model of a coffee pot lid. It should be circular and fit snugly on top of a standard coffee pot. Add a small handle in the center for easy removal.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, 0.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.723707852188834, "unit_n": 2, "param_ratio": 5.0}
{"id": "2735ab32-8ac2-4f56-8e6a-196e46082505", "name": "Sofa", "instruction": "Design a 3D model of a sofa. The sofa should have three cushions on the seat and three cushions on the backrest. Include armrests on both sides and short legs at the bottom. The overall shape should be rectangular, and the seating area should be spacious enough for three people. Ensure the cushions are evenly spaced and properly aligned.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Brownish color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1.5, 0.5, 0.2)\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, -0.65, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1.5, 0.1, 0.6)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 0.5, 0.4)\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Seat Cushions\nfor i in range(3):\n    x = (i - 1) * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.8))\n    seat_cushion = bpy.context.object\n    seat_cushion.name = f\"Seat Cushion {i + 1}\"\n    seat_cushion.scale = (0.45, 0.45, 0.1)\n    seat_cushion.data.materials.append(sofa_color)\n\n# Step 6: Create the Back Cushions\nfor i in range(3):\n    x = (i - 1) * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.65, 1.3))\n    back_cushion = bpy.context.object\n    back_cushion.name = f\"Back Cushion {i + 1}\"\n    back_cushion.scale = (0.45, 0.1, 0.3)\n    back_cushion.data.materials.append(sofa_color)\n\n# Step 7: Create the Legs\nfor i in range(4):\n    x = 1.4 * (i % 2) - 0.7\n    y = 0.4 * (i // 2) - 0.2\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.1))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.685377061713259, "unit_n": 14, "param_ratio": 2.142857142857143}
{"id": "21a5c682-7e23-415e-807c-9360b5b3cd18", "name": "Bird Feeder", "instruction": "Create a bird feeder with a cylindrical body and a sloped roof. Include a small perch near the bottom opening.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.4, location=(0, 0, 1.7))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.5, 0, 0.2), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.025196568183405, "unit_n": 3, "param_ratio": 6.0}
{"id": "64df6249-0af9-4c66-8b5b-0412905377c6", "name": "Coffee Grinder", "instruction": "Design a coffee grinder. Start with a cylindrical base that houses the grinding mechanism. Add a handle on top for manual grinding and a small spout for dispensing ground coffee.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Cylindrical Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 2.5), rotation=(0, 0, math.pi/2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 4: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, 0, 2.5))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(metal)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 0.5), rotation=(math.pi/2, 0, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4297801945980764, "unit_n": 4, "param_ratio": 7.5}
{"id": "588f6413-54ae-4dce-846a-95ae7623cd73", "name": "Drawing Tablet", "instruction": "Create a drawing tablet with a flat, rectangular surface. Include a stylus for drawing and a few buttons on the side for shortcuts. The tablet should have a USB port for connectivity.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntablet_color = bpy.data.materials.new(name=\"TabletColor\")\ntablet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nstylus_color = bpy.data.materials.new(name=\"StylusColor\")\nstylus_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Black color\n\n# Step 2: Create the Tablet Surface\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ntablet = bpy.context.object\ntablet.scale[2] = 0.05  # Make it flat\ntablet.name = \"Tablet\"\ntablet.data.materials.append(tablet_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.9, 0.5 - i * 0.2, 0.05))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Stylus\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1, location=(1, 0, 0.5))\nstylus = bpy.context.object\nstylus.rotation_euler[1] = 1.57  # Rotate to lay it flat\nstylus.name = \"Stylus\"\nstylus.data.materials.append(stylus_color)\n\n# Step 5: Create the USB Port\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, -0.6, 0.05))\nusb_port = bpy.context.object\nusb_port.scale[0] = 0.5  # Make it rectangular\nusb_port.scale[1] = 0.2\nusb_port.name = \"USB Port\"\nusb_port.data.materials.append(button_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.899962631341126, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "17011887-a042-47dc-8a73-274777eb4ca0", "name": "Hat", "instruction": "Create a hat with a wide brim and a rounded crown.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_material = bpy.data.materials.new(name=\"Hat Material\")\nhat_material.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_material)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.933726087323573, "unit_n": 2, "param_ratio": 7.0}
{"id": "3bd1f10a-431d-44da-b921-a07a8f499dd5", "name": "Circuit Breaker Panel", "instruction": "Let's create a 3D model of a circuit breaker panel. The panel should be rectangular with a door that opens. Inside, there are multiple rows of switches. On the front, there should be a label area for identifying circuits.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nlabel_color = bpy.data.materials.new(name=\"LabelColor\")\nlabel_color.diffuse_color = (1, 1, 1, 1)  # White color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale = (1, 0.1, 2)\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.15, 0))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (1, 0.02, 2)\ndoor.data.materials.append(panel_color)\n\n# Step 4: Create the Label Area\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.17, 1.8))\nlabel = bpy.context.object\nlabel.name = \"Label\"\nlabel.scale = (0.8, 1, 0.2)\nlabel.data.materials.append(label_color)\n\n# Step 5: Create the Switches\nrows = 3\ncols = 4\nfor row in range(rows):\n    for col in range(cols):\n        x = (col - (cols / 2 - 0.5)) * 0.4\n        y = 0.2\n        z = (row - (rows / 2 - 0.5)) * 0.8\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, z))\n        switch = bpy.context.object\n        switch.name = f\"Switch_{row}_{col}\"\n        switch.data.materials.append(switch_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.639940644002765, "unit_n": 4, "param_ratio": 7.75}
{"id": "370a9954-d380-4b77-8415-dab77ea4af36", "name": "Drum", "instruction": "Visualize a cylindrical drum with a drumhead on the top. Include tension rods around the drumhead for tuning. The drum should have a flat base to rest on the ground.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\ntension_rod_color = bpy.data.materials.new(name=\"Tension Rod Color\")\ntension_rod_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 2.05))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = i * (360 / num_rods)\n    x = 1.1 * math.cos(math.radians(angle))\n    y = 1.1 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.1, location=(x, y, 1.05))\n    tension_rod = bpy.context.object\n    tension_rod.name = f\"Tension Rod {i + 1}\"\n    tension_rod.data.materials.append(tension_rod_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4780173825443086, "unit_n": 3, "param_ratio": 10.0}
{"id": "18e4dd1f-5e53-4f16-aff0-2a5cf880c23a", "name": "Laptop", "instruction": "Let's design a laptop. Start with a rectangular base for the keyboard and touchpad. Add a thin, rectangular screen attached by hinges to the back of the base. The keyboard should have evenly spaced keys and the touchpad centered below the keyboard. The screen should be able to open and close over the keyboard.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nkey_color = bpy.data.materials.new(name=\"Key Color\")\nkey_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium dark gray color\ntouchpad_color = bpy.data.materials.new(name=\"Touchpad Color\")\ntouchpad_color.diffuse_color = (0.25, 0.25, 0.25, 1)  # Medium dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.scale = (1.5, 1, 0.05)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.05, 1))\nscreen = bpy.context.object\nscreen.scale = (1.5, 0.05, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Keys\nfor i in range(10):\n    for j in range(4):\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(i * 0.15 - 0.675, j * 0.15 - 0.225, 0.05))\n        key = bpy.context.object\n        key.name = f\"Key_{i}_{j}\"\n        key.data.materials.append(key_color)\n\n# Step 5: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.5, 0.05))\ntouchpad = bpy.context.object\ntouchpad.scale = (0.6, 0.4, 0.02)\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(touchpad_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.9289177047230615, "unit_n": 43, "param_ratio": 0.8372093023255814}
{"id": "85e5f0f4-47c8-434c-90ca-d6f0a2ac4cfc", "name": "Chess Piece", "instruction": "Is a rook taller than a pawn?", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_color = bpy.data.materials.new(name=\"White\")\nwhite_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Pawn Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 0))\npawn_base = bpy.context.object\npawn_base.name = \"Pawn Base\"\npawn_base.data.materials.append(white_color)\n\n# Step 3: Create the Pawn Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.4, location=(0, 0, 0.25))\npawn_body = bpy.context.object\npawn_body.name = \"Pawn Body\"\npawn_body.data.materials.append(white_color)\n\n# Step 4: Create the Pawn Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0.5))\npawn_head = bpy.context.object\npawn_head.name = \"Pawn Head\"\npawn_head.data.materials.append(white_color)\n\n# Step 5: Create the Rook Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.1, location=(1, 0, 0))\nrook_base = bpy.context.object\nrook_base.name = \"Rook Base\"\nrook_base.data.materials.append(white_color)\n\n# Step 6: Create the Rook Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(1, 0, 0.35))\nrook_body = bpy.context.object\nrook_body.name = \"Rook Body\"\nrook_body.data.materials.append(white_color)\n\n# Step 7: Create the Rook Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.1, location=(1, 0, 0.7))\nrook_top = bpy.context.object\nrook_top.name = \"Rook Top\"\nrook_top.data.materials.append(white_color)\n\n# Step 8: Create the Rook Top Details\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(1.1, 0, 0.75))\nrook_detail_1 = bpy.context.object\nrook_detail_1.name = \"Rook Detail 1\"\nrook_detail_1.data.materials.append(white_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.9, 0, 0.75))\nrook_detail_2 = bpy.context.object\nrook_detail_2.name = \"Rook Detail 2\"\nrook_detail_2.data.materials.append(white_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(1, 0.1, 0.75))\nrook_detail_3 = bpy.context.object\nrook_detail_3.name = \"Rook Detail 3\"\nrook_detail_3.data.materials.append(white_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(1, -0.1, 0.75))\nrook_detail_4 = bpy.context.object\nrook_detail_4.name = \"Rook Detail 4\"\nrook_detail_4.data.materials.append(white_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.393713349488394, "unit_n": 10, "param_ratio": 5.0}
{"id": "92dc2cf7-eaec-42f1-b544-987a8f0e459f", "name": "Coffee Grinder", "instruction": "Can you create a 3D model of a coffee grinder and compare it to a blender? The coffee grinder should have a cylindrical body with a lid on top. Include a handle on the side for manual grinding. The blender should have a square base with a cylindrical jar on top, and a lid with a small opening.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark plastic color\n\n# Step 2: Create the Coffee Grinder\n# Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(-1.5, 0, 0.5))\ngrinder_body = bpy.context.object\ngrinder_body.name = \"Grinder Body\"\ngrinder_body.data.materials.append(metal)\n\n# Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(-1.5, 0, 1.05))\ngrinder_lid = bpy.context.object\ngrinder_lid.name = \"Grinder Lid\"\ngrinder_lid.data.materials.append(plastic)\n\n# Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(-1.2, 0, 0.75), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 3: Create the Blender\n# Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 0.25))\nblender_base = bpy.context.object\nblender_base.name = \"Blender Base\"\nblender_base.data.materials.append(plastic)\n\n# Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1, location=(1.5, 0, 1))\nblender_jar = bpy.context.object\nblender_jar.name = \"Blender Jar\"\nblender_jar.data.materials.append(metal)\n\n# Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(1.5, 0, 1.55))\nblender_lid = bpy.context.object\nblender_lid.name = \"Blender Lid\"\nblender_lid.data.materials.append(plastic)\n\n# Small opening on the lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(1.5, 0, 1.6))\nblender_opening = bpy.context.object\nblender_opening.name = \"Blender Opening\"\nblender_opening.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 4.196810611545491, "unit_n": 7, "param_ratio": 6.714285714285714}
{"id": "5e582691-e804-4771-9a25-8856bd9642f5", "name": "Solar Cell", "instruction": "Can you create a solar cell with dimensions that would fit within a square foot, with connectors on one edge?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsolar_panel_color = bpy.data.materials.new(name=\"Solar Panel Color\")\nsolar_panel_color.diffuse_color = (0.0, 0.0, 0.3, 1)  # Dark blue color for the solar cell\nconnector_color = bpy.data.materials.new(name=\"Connector Color\")\nconnector_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the connectors\n\n# Step 2: Create the Solar Cell\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nsolar_cell = bpy.context.object\nsolar_cell.name = \"Solar Cell\"\nsolar_cell.data.materials.append(solar_panel_color)\n\n# Step 3: Create the Connectors\nconnector_positions = [(-0.4, -0.55, 0), (0, -0.55, 0), (0.4, -0.55, 0)]\nfor i, pos in enumerate(connector_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(connector_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7380783554095363, "unit_n": 2, "param_ratio": 7.5}
{"id": "5e12f6e1-7111-44f5-a269-9c9e90acb43a", "name": "Bookshelf", "instruction": "Design a simple bookshelf for a living room.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the bookshelf\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Shelves\nshelf_height = 0.2\nshelf_depth = 0.3\nshelf_width = 1.0\nnum_shelves = 5\nfor i in range(num_shelves):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, i * shelf_height))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.05\npanel_height = num_shelves * shelf_height\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-shelf_width / 2 - panel_thickness / 2, 0, panel_height / 2 - shelf_height / 2))\nleft_panel = bpy.context.object\nleft_panel.scale = (panel_thickness, shelf_depth, panel_height / 2)\nleft_panel.name = \"Left Panel\"\nleft_panel.data.materials.append(wood_color)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(shelf_width / 2 + panel_thickness / 2, 0, panel_height / 2 - shelf_height / 2))\nright_panel = bpy.context.object\nright_panel.scale = (panel_thickness, shelf_depth, panel_height / 2)\nright_panel.name = \"Right Panel\"\nright_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2 - panel_thickness / 2, panel_height / 2 - shelf_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width, panel_thickness, panel_height / 2)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7469034751091312, "unit_n": 4, "param_ratio": 5.25}
{"id": "3945e8e3-df4b-42c4-82a9-1758bb7a1fe5", "name": "Wallpaper Pattern", "instruction": "Create a pattern for wallpaper. It should feature repeating floral motifs in a diamond arrangement.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the flowers\n\n# Function to create a single flower\ndef create_flower(location):\n    # Create the center of the flower\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    center = bpy.context.object\n    center.data.materials.append(flower_color)\n    \n    # Create petals around the center\n    for i in range(5):\n        angle = i * (2 * math.pi / 5)\n        x = location[0] + 0.2 * math.cos(angle)\n        y = location[1] + 0.2 * math.sin(angle)\n        z = location[2]\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n        petal = bpy.context.object\n        petal.data.materials.append(flower_color)\n\n# Create a diamond pattern of flowers\nfor i in range(-2, 3):\n    for j in range(-2, 3):\n        if (i + j) % 2 == 0:\n            x = i * 0.6\n            y = j * 0.6\n            create_flower((x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.883854231628355, "unit_n": 6, "param_ratio": 1.6666666666666667}
{"id": "12ed7bdb-922f-4e62-984f-f6b0f08cf3ff", "name": "Circuit Breaker vs. Fuse", "instruction": "Compare a circuit breaker and a fuse. The circuit breaker should be a rectangular box with a switch on top. The fuse should be a small cylindrical tube with metal caps on both ends.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for metal caps\n\n# Step 2: Create the Circuit Breaker (Rectangular Box)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ncircuit_breaker = bpy.context.object\ncircuit_breaker.name = \"Circuit Breaker\"\ncircuit_breaker.scale = (0.5, 0.3, 1)\ncircuit_breaker.data.materials.append(gray)\n\n# Step 3: Create the Switch on Top of the Circuit Breaker\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 1.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.5, 0.2, 0.2)\nswitch.data.materials.append(gray)\n\n# Step 4: Create the Fuse (Cylindrical Tube)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(2, 0, 0.3))\nfuse = bpy.context.object\nfuse.name = \"Fuse\"\nfuse.data.materials.append(gray)\n\n# Step 5: Create the Metal Caps on Both Ends of the Fuse\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(2, 0, 0.6))\ncap1 = bpy.context.object\ncap1.name = \"Cap 1\"\ncap1.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(2, 0, 0))\ncap2 = bpy.context.object\ncap2.name = \"Cap 2\"\ncap2.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0617469664717833, "unit_n": 5, "param_ratio": 6.6}
{"id": "6f9ce106-d5b3-4009-9aea-3f04b2ba2392", "name": "Bird Feeder", "instruction": "Design a bird feeder with a cylindrical body, a perch, and a small opening for birds to access the food. Compare the design to a typical birdhouse, noting the differences in structure and function.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brownish color\n\nperch_color = bpy.data.materials.new(name=\"PerchColor\")\nperch_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Opening\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0.5, 1))\nopening = bpy.context.object\nopening.name = \"Opening\"\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(opening)\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0.65, 0.9), rotation=(math.pi/2, 0, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(perch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.680386153403838, "unit_n": 4, "param_ratio": 7.25}
{"id": "317fc1f5-87fb-41d3-b0d8-46fed562bf03", "name": "Geometric Wall Art", "instruction": "Create a 3D model of a geometric wall art piece. It should consist of interlocking hexagons forming a honeycomb pattern. Ensure the hexagons are uniform in size and evenly spaced.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon size and spacing\nhex_radius = 1\nspacing = 0.1\nhex_height = 0.1\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=hex_radius, depth=hex_height, location=location)\n    hexagon = bpy.context.object\n    hexagon.name = \"Hexagon\"\n\n# Step 2: Create the Honeycomb Pattern\nrows = 5\ncols = 5\n\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = (hex_radius * 1.5 + spacing) * col\n        y_offset = (math.sqrt(3) * hex_radius + spacing) * row\n        if col % 2 == 1:\n            y_offset += math.sqrt(3) * hex_radius / 2\n        create_hexagon((x_offset, y_offset, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.125708123076968, "unit_n": 1, "param_ratio": 1.0}
{"id": "2bff083f-1767-4151-97da-7aa3d70e1f66", "name": "Floor Pattern", "instruction": "What would a floor pattern look like if it were designed to guide foot traffic in two opposite directions without intersecting?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Blue Arrows\nfor i in range(5):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.2, depth=0.1, location=(i, 0.5, 0))\n    arrow = bpy.context.object\n    arrow.rotation_euler = (0, 0, 0)\n    arrow.data.materials.append(blue)\n\n# Step 3: Create the Red Arrows\nfor i in range(5):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.2, depth=0.1, location=(i, -0.5, 0))\n    arrow = bpy.context.object\n    arrow.rotation_euler = (0, 0, 3.14159)  # Rotate 180 degrees\n    arrow.data.materials.append(red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5502500180019476, "unit_n": 10, "param_ratio": 2.2}
{"id": "2dfc3ac8-c1ab-4423-8d3c-24bdc19263ec", "name": "Stapler", "instruction": "Create a 3D model of a stapler. It should have a top arm that can be pressed down, a base where the staples are inserted, and a hinge connecting the two parts. Ensure there is a staple storage compartment inside the base.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal parts\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for plastic parts\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1.5, 0.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(plastic)\n\n# Step 3: Create the Top Arm\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.6))\ntop_arm = bpy.context.object\ntop_arm.scale = (1.5, 0.5, 0.1)\ntop_arm.name = \"Top Arm\"\ntop_arm.data.materials.append(metal)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, -0.25, 0.35), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(metal)\n\n# Step 5: Create the Staple Storage Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.15))\nstorage = bpy.context.object\nstorage.scale = (1.2, 0.4, 0.05)\nstorage.name = \"Staple Storage\"\nstorage.data.materials.append(metal)\n\n# Adjust the position of the storage compartment to be inside the base\nstorage.location.z -= 0.1\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.5459238014698062, "unit_n": 4, "param_ratio": 7.5}
{"id": "488b9c54-2c6f-4274-bdfc-df8320b19f59", "name": "Espresso Machine", "instruction": "Design a 3D model of an espresso machine. Start with a rectangular base that houses the water tank and drip tray. Add a cylindrical water reservoir on the back. On the front, include a portafilter holder and a steam wand on the side. Finish with a simple control panel featuring buttons for different brew settings.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwater_reservoir_color = bpy.data.materials.new(name=\"WaterReservoirColor\")\nwater_reservoir_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Light gray color\nportafilter_color = bpy.data.materials.new(name=\"PortafilterColor\")\nportafilter_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"ControlPanelColor\")\ncontrol_panel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 0.5)\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Water Reservoir\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, -1, 1.75))\nwater_reservoir = bpy.context.object\nwater_reservoir.name = \"Water Reservoir\"\nwater_reservoir.data.materials.append(water_reservoir_color)\n\n# Step 4: Create the Portafilter Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(0, 1, 1.2))\nportafilter_holder = bpy.context.object\nportafilter_holder.name = \"Portafilter Holder\"\nportafilter_holder.rotation_euler = (math.pi / 2, 0, 0)\nportafilter_holder.data.materials.append(portafilter_color)\n\n# Step 5: Create the Steam Wand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.7, 1, 1.2))\nsteam_wand = bpy.context.object\nsteam_wand.name = \"Steam Wand\"\nsteam_wand.rotation_euler = (0, math.pi / 2, 0)\nsteam_wand.data.materials.append(portafilter_color)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 1.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (0.5, 0.1, 0.2)\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 7: Create Buttons on Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.2 + i * 0.2, 1.15, 1.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.scale = (0.1, 0.05, 0.05)\n    button.data.materials.append(base_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.471897383682494, "unit_n": 8, "param_ratio": 5.875}
{"id": "2d222de5-b1c6-4075-9b41-3bd592102b2d", "name": "Sandwich", "instruction": "Design a sandwich with two slices of bread. Inside, include layers of lettuce, tomato, cheese, and a slice of meat.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Yellow color for cheese\nmeat_color = bpy.data.materials.new(name=\"Meat Color\")\nmeat_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color for meat\n\n# Step 2: Create the bottom slice of bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the lettuce layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the tomato layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the cheese layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the meat layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the top slice of bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "547a6571-05df-4921-8f13-7baf62225bdf", "name": "Dog Leash", "instruction": "Let's create a dog leash. The leash should be about 6 feet long and have a loop at one end for holding. On the other end, add a clasp that can attach to a dog's collar. The leash should be a single solid color.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(0, 0, 0.9))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.8))\nloop = bpy.context.object\nloop.name = \"Loop\"\nloop.data.materials.append(leash_color)\n\n# Step 4: Create the Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp.data.materials.append(leash_color)\n\n# Create a small ring to connect the clasp to the leash\nbpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(0, 0, 0.05))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(leash_color)\n\n# Adjust the position of the ring and clasp\nclasp.location.z = 0.05\nring.location.z = 0.1", "color_brightness": "Dark", "verify": "human", "entropy": 4.36515708661777, "unit_n": 4, "param_ratio": 6.0}
{"id": "5a0b4b0b-ab5b-41a6-83b9-744b12454f3f", "name": "Screwdriver", "instruction": "What are the main features of a screwdriver?", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color for the shaft\ntip_color = bpy.data.materials.new(name=\"TipColor\")\ntip_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the tip\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0, 0, -2.1))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(tip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.066165304888272, "unit_n": 3, "param_ratio": 10.0}
{"id": "16a74cd7-4149-41e3-81bc-3e386eaad6d1", "name": "Scooter", "instruction": "Model a basic scooter with two wheels and a handlebar.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 1.0 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(x, 0, 0.2), rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n\n# Step 3: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 0.35))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale[1] = 0.1\ndeck.scale[2] = 0.05\n\n# Step 4: Create the Handlebar Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 1.0))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Step 5: Create the Handlebar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, 0, 1.5), rotation=(0, 1.5708, 0))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"", "color_brightness": "Dark", "verify": "human", "entropy": 4.204088451324983, "unit_n": 5, "param_ratio": 5.0}
{"id": "6797eb9d-9218-4cc4-aa63-81f79e108b6b", "name": "Microscope", "instruction": "Let's design a microscope. Start with a sturdy base. Add an adjustable stage for holding slides. Attach two eyepieces at the top, connected to the main body. Include focus knobs on the sides. Finally, add an illumination source below the stage. Ensure the microscope looks functional for laboratory use.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(dark_gray)\n\n# Step 3: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1.2, location=(0, 0, 0.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(light_gray)\n\n# Step 4: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=3, location=(0, 0, 2))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(dark_gray)\n\n# Step 5: Create the Eyepieces\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 3.5), rotation=(math.pi/2, 0, 0))\n    eyepiece = bpy.context.object\n    eyepiece.name = f\"Eyepiece {i + 1}\"\n    eyepiece.data.materials.append(light_gray)\n\n# Step 6: Create the Focus Knobs\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 0, 1.5), rotation=(0, math.pi/2, 0))\n    knob = bpy.context.object\n    knob.name = f\"Focus Knob {i + 1}\"\n    knob.data.materials.append(light_gray)\n\n# Step 7: Create the Illumination Source\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, -0.5))\nillumination = bpy.context.object\nillumination.name = \"Illumination Source\"\nillumination.data.materials.append(light_gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7824594661011877, "unit_n": 8, "param_ratio": 5.375}
{"id": "180d6108-15f0-4371-bd38-e6d45a6a0442", "name": "Coffee Grinder", "instruction": "Let's create a coffee grinder with a cylindrical body. It should have a hand crank on top and a small drawer at the bottom to collect the ground coffee. The grinding mechanism should be adjustable for different grind sizes.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.4, 0.2, 0.1, 1)  # Wood color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Hand Crank\n# Crank base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.1))\ncrank_base = bpy.context.object\ncrank_base.name = \"Crank Base\"\ncrank_base.data.materials.append(metal)\n\n# Crank handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0.25, 1.1), rotation=(0, math.pi/2, 0))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(metal)\n\n# Crank knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.25, 0.25, 1.1))\ncrank_knob = bpy.context.object\ncrank_knob.name = \"Crank Knob\"\ncrank_knob.data.materials.append(wood)\n\n# Step 4: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0.7, 0.2))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood)\n\n# Step 5: Create the Grinding Mechanism (simplified as a small cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 1.0))\ngrinding_mechanism = bpy.context.object\ngrinding_mechanism.name = \"Grinding Mechanism\"\ngrinding_mechanism.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 2.162072090053966, "unit_n": 6, "param_ratio": 6.833333333333333}
{"id": "657a883b-0e08-4453-a3fb-2aabc5150efd", "name": "Sandwich", "instruction": "Make a sandwich with two slices of bread. Add lettuce, tomato, cheese, and ham. How would someone feel while eating this sandwich?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.02\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.02\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.02\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.45))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.02\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.119162312519754, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "8264c8df-f878-4514-8ddd-d4729022a386", "name": "Power Transformer", "instruction": "Design a 3D model of a power transformer. The transformer should have a cylindrical body with cooling fins around it. Include the necessary insulators and bushings on top. Make sure the transformer looks functional and realistic.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Transformer Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Transformer Body\"\nbody.data.materials.append(metal_color)\n\n# Step 3: Create the Cooling Fins\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 1))\n    fin = bpy.context.object\n    fin.scale[2] = 2  # Stretch the fin vertically\n    fin.name = f\"Cooling Fin {i + 1}\"\n    fin.data.materials.append(metal_color)\n\n# Step 4: Create the Insulators\nfor i in range(3):\n    x = 0.6 * math.cos(i * 2 * math.pi / 3)\n    y = 0.6 * math.sin(i * 2 * math.pi / 3)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, y, 2.75))\n    insulator = bpy.context.object\n    insulator.name = f\"Insulator {i + 1}\"\n    insulator.data.materials.append(metal_color)\n\n# Step 5: Create the Bushings\nfor i in range(3):\n    x = 0.6 * math.cos(i * 2 * math.pi / 3)\n    y = 0.6 * math.sin(i * 2 * math.pi / 3)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 3.1))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n    bushing.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.485325269907978, "unit_n": 15, "param_ratio": 1.6}
{"id": "636d7884-5b70-461f-ba7f-4f7531cfe478", "name": "Doorstop", "instruction": "Can you create a doorstop? It should be wedge-shaped and small enough to fit under a door.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Wedge Shape\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=0.1, radius2=0.02, depth=0.2, location=(0, 0, 0.1))\nwedge = bpy.context.object\nwedge.name = \"Doorstop\"\n\n# Step 3: Rotate the Wedge to Lay Flat\nwedge.rotation_euler = (0, 1.5708, 0)  # Rotate 90 degrees on the Y-axis\n\n# Step 4: Adjust the Position to Fit Under a Door\nwedge.location = (0, 0, 0.05)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.9061547465398496, "unit_n": 1, "param_ratio": 7.0}
{"id": "2cc519a8-f283-440b-af8b-561b3b7da549", "name": "Canine Comfort", "instruction": "Let's design a dog bed that would be suitable for a medium-sized dog, with raised edges for the dog to rest its head on.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.35, 0.25, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1.5, 0.1)\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.55, 0.25))\nfront_edge = bpy.context.object\nfront_edge.name = \"Front Edge\"\nfront_edge.scale = (1, 0.1, 0.25)\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.55, 0.25))\nback_edge = bpy.context.object\nback_edge.name = \"Back Edge\"\nback_edge.scale = (1, 0.1, 0.25)\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.05, 0, 0.25))\nleft_edge = bpy.context.object\nleft_edge.name = \"Left Edge\"\nleft_edge.scale = (0.1, 1.5, 0.25)\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.05, 0, 0.25))\nright_edge = bpy.context.object\nright_edge.name = \"Right Edge\"\nright_edge.scale = (0.1, 1.5, 0.25)\nright_edge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7751545424252226, "unit_n": 5, "param_ratio": 5.0}
{"id": "913e303c-0b9f-4881-8363-8630ee4331db", "name": "Pencil", "instruction": "Can you design a 3D model of a pencil with an eraser on one end?", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Pink color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(yellow)\n\n# Step 3: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.06, depth=0.2, location=(0, 0, 2.1))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)\n\n# Step 4: Create the Ferrule (metal part holding the eraser)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.1, location=(0, 0, 2))\nferrule = bpy.context.object\nferrule.name = \"Ferrule\"\nferrule.data.materials.append(gray)", "color_brightness": "Bright", "verify": "human", "entropy": 4.416120652389228, "unit_n": 3, "param_ratio": 10.0}
{"id": "153813bf-8483-4191-9e77-cb1bfc0a3b87", "name": "Cargo Truck", "instruction": "Create a 3D model of a cargo truck with a large container.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntruck_color = bpy.data.materials.new(name=\"Truck Color\")\ntruck_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Truck Cabin\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ncabin = bpy.context.object\ncabin.name = \"Cabin\"\ncabin.scale = (1, 2, 1)\ncabin.data.materials.append(truck_color)\n\n# Step 3: Create the Wheels\nfor i in range(4):\n    x = 1.1 * (i % 2) - 0.55\n    y = 2.2 * (i // 2) - 1.1\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(x, y, 0.3), rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(truck_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 2.5, 1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.scale = (1.5, 3, 1.5)\ncontainer.data.materials.append(container_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.018303522109642, "unit_n": 6, "param_ratio": 4.333333333333333}
{"id": "2169e3bb-5910-4d05-ad5e-0cb2778f5354", "name": "Food Processor", "instruction": "Imagine a food processor with a large bowl and a set of interchangeable blades. The base should have control buttons. Create a 3D model showing the food processor with the bowl attached and the blades inside. The lid should be transparent to see the blades.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\nbase_material = bpy.data.materials.new(name=\"BaseMaterial\")\nbase_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nbowl_material = bpy.data.materials.new(name=\"BowlMaterial\")\nbowl_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nblade_material = bpy.data.materials.new(name=\"BladeMaterial\")\nblade_material.diffuse_color = (0.9, 0.9, 0.9, 1)  # Almost white color\n\nlid_material = bpy.data.materials.new(name=\"LidMaterial\")\nlid_material.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_material)\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=1.5, location=(0, 0, 0.75))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_material)\n\n# Step 4: Create the Blades\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0.75))\nblade1 = bpy.context.object\nblade1.name = \"Blade1\"\nblade1.data.materials.append(blade_material)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0.75), rotation=(0, 0, 1.57))\nblade2 = bpy.context.object\nblade2.name = \"Blade2\"\nblade2.data.materials.append(blade_material)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.1, location=(0, 0, 1.5))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_material)\n\n# Step 6: Create Control Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6 - i * 0.4, 1.5, -0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(base_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.051111168285071, "unit_n": 8, "param_ratio": 6.5}
{"id": "54036ec0-1815-4590-bf63-f98da9ce3fcf", "name": "Cat Scratching Post", "instruction": "Please create a 3D model of a cat scratching post. It should have a tall vertical post and a base for stability. Include a small platform at the top for the cat to sit on.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npost_color = bpy.data.materials.new(name=\"PostColor\")\npost_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the post\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the base\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=4, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 3))\ntop_platform = bpy.context.object\ntop_platform.name = \"TopPlatform\"\ntop_platform.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.019889530335162, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "86ea987f-a0e8-47ee-b742-383c001a136b", "name": "Drumstick", "instruction": "Let's create a drumstick. It should have a cylindrical shape, tapering towards one end with a rounded tip. Describe how a drummer might use this drumstick to play a snare drum.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the drumstick\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\n\n# Step 2: Create the main body of the drumstick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Drumstick Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the tapered end\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.02, depth=0.2, location=(0, 0, 0.6))\ntaper = bpy.context.object\ntaper.name = \"Tapered End\"\ntaper.data.materials.append(wood_color)\n\n# Step 4: Create the rounded tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0, 0.7))\ntip = bpy.context.object\ntip.name = \"Rounded Tip\"\ntip.data.materials.append(wood_color)\n\n# Join all parts into a single object\nbpy.ops.object.select_all(action='DESELECT')\nbody.select_set(True)\ntaper.select_set(True)\ntip.select_set(True)\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.007444380374381, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "5a9a8560-e0f3-4e27-bf6b-539f3d8239e1", "name": "Hat", "instruction": "Design a simple hat. It should have a round crown and a brim that extends outward.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.183147163984124, "unit_n": 2, "param_ratio": 4.5}
{"id": "90bed8da-2862-40c7-a0c6-0e73a9a50825", "name": "Laptop", "instruction": "Create a 3D model of a laptop. The laptop should have a thin profile, a screen, a keyboard, and a touchpad.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale = (1.5, 1, 0.05)\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.1))\nscreen = bpy.context.object\nscreen.scale = (1.5, 0.05, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(black)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nkeyboard = bpy.context.object\nkeyboard.scale = (1.4, 0.9, 0.02)\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(black)\n\n# Step 5: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.5, 0.12))\ntouchpad = bpy.context.object\ntouchpad.scale = (0.4, 0.3, 0.01)\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.5338959091292264, "unit_n": 4, "param_ratio": 6.5}
{"id": "704be1e0-13d7-4a76-88ea-3ac0b1645332", "name": "Ruler", "instruction": "Create a 3D model of a ruler. The ruler should be 30 cm long, 3 cm wide, and 0.3 cm thick. Include markings for each centimeter and millimeter along the length.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Ruler Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nruler = bpy.context.object\nruler.scale = (15, 1.5, 0.15)\nruler.name = \"Ruler\"\n\n# Step 3: Create the Centimeter Markings\nfor i in range(31):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-14.5 + i, 1.7, 0))\n    cm_mark = bpy.context.object\n    cm_mark.scale = (0.05, 0.1, 0.15)\n    cm_mark.name = f\"CM_Mark_{i}\"\n\n# Step 4: Create the Millimeter Markings\nfor i in range(301):\n    if i % 10 != 0:  # Skip the centimeter marks\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-14.5 + i * 0.1, 1.6, 0))\n        mm_mark = bpy.context.object\n        mm_mark.scale = (0.02, 0.05, 0.15)\n        mm_mark.name = f\"MM_Mark_{i}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.029464085826519, "unit_n": 333, "param_ratio": 0.036036036036036036}
{"id": "245899ec-31ff-496b-9db2-de93a3f5d131", "name": "Kite", "instruction": "Create a 3D model of a kite. Imagine the joy of flying it on a windy day. Start with a diamond-shaped frame. Add a long, colorful tail and string. Include simple patterns on the kite's surface to give it character. How does it soar and dip in the sky?", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nkite_color = bpy.data.materials.new(name=\"Kite Color\")\nkite_color.diffuse_color = (1, 0, 0, 1)  # Red color\ntail_color = bpy.data.materials.new(name=\"Tail Color\")\ntail_color.diffuse_color = (0, 0, 1, 1)  # Blue color\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Kite Frame\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nkite_frame = bpy.context.object\nkite_frame.name = \"Kite Frame\"\nkite_frame.scale = (1, 1.5, 1)\nkite_frame.data.materials.append(kite_color)\n\n# Step 3: Create the Tail\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.75 - i * 0.2, 0))\n    tail_piece = bpy.context.object\n    tail_piece.name = f\"Tail Piece {i + 1}\"\n    tail_piece.data.materials.append(tail_color)\n\n# Step 4: Create the String\nbpy.ops.curve.primitive_bezier_curve_add(location=(0, 0, 0))\nstring = bpy.context.object\nstring.name = \"String\"\nstring.scale = (0.1, 0.1, 2)\nstring.data.bevel_depth = 0.01\n\n# Step 5: Add Patterns to the Kite\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.2, location=(0, 0.5, 0.01))\npattern1 = bpy.context.object\npattern1.name = \"Pattern 1\"\npattern1.data.materials.append(pattern_color)\n\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.2, location=(0, -0.5, 0.01))\npattern2 = bpy.context.object\npattern2.name = \"Pattern 2\"\npattern2.data.materials.append(pattern_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5529439267604848, "unit_n": 14, "param_ratio": 2.5714285714285716}
{"id": "881a2936-c59e-467f-9cf7-93844f1303b5", "name": "Sofa", "instruction": "Build a 3D model of a sofa. The sofa should be three-seater with straight armrests and a high backrest. Add three seat cushions and three back cushions. Create a simple base and legs to support the sofa.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.5, 0.1)\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Legs\nfor i in range(4):\n    x = 1.1 * (i % 2) - 0.55\n    y = 0.55 * (i // 2) - 0.275\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 0))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, -0.55, 0.75))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1, 0.1, 0.5)\nbackrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 1.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 0.5, 0.5)\n    armrest.data.materials.append(sofa_color)\n\n# Step 6: Create the Seat Cushions\nfor i in range(3):\n    x = 0.7 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    seat_cushion = bpy.context.object\n    seat_cushion.name = f\"Seat Cushion {i + 1}\"\n    seat_cushion.scale = (0.3, 0.5, 0.1)\n    seat_cushion.data.materials.append(sofa_color)\n\n# Step 7: Create the Back Cushions\nfor i in range(3):\n    x = 0.7 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.55, 0.75))\n    back_cushion = bpy.context.object\n    back_cushion.name = f\"Back Cushion {i + 1}\"\n    back_cushion.scale = (0.3, 0.1, 0.4)\n    back_cushion.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3923618172032333, "unit_n": 14, "param_ratio": 2.142857142857143}
{"id": "7108f4f8-3ae5-4323-89f5-d11226039f1a", "name": "Clipboard", "instruction": "How does a clipboard for securing documents compare to a simple flat board without a clip?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Clipboard (Flat Board)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nclipboard = bpy.context.object\nclipboard.name = \"Clipboard\"\nclipboard.scale = (1, 1.5, 0.05)  # Scale to make it flat and rectangular\nclipboard.data.materials.append(board_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.5, 0.1))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale = (0.5, 0.1, 0.1)  # Scale to make it thin and wide\nclip.data.materials.append(board_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "21ce4b98-6c0f-47e2-a70b-f2e7b480f15d", "name": "Pet Grooming Station", "instruction": "Visualize a pet grooming station equipped with a medium-sized platform with a non-slip surface. Include a loop attachment point for a safety harness and an organized set of compartments on one side for grooming tools.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplatform_color = bpy.data.materials.new(name=\"PlatformColor\")\nplatform_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color for non-slip surface\ncompartment_color = bpy.data.materials.new(name=\"CompartmentColor\")\ncompartment_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Darker gray for compartments\n\n# Step 2: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.scale[2] = 0.1  # Make it flat\nplatform.data.materials.append(platform_color)\n\n# Step 3: Create the Loop Attachment Point\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 0.7))\nloop_attachment = bpy.context.object\nloop_attachment.name = \"LoopAttachment\"\nloop_attachment.data.materials.append(platform_color)\n\n# Step 4: Create the Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(-1.1, 0.6 - i * 0.5, 0.3))\n    compartment = bpy.context.object\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.data.materials.append(compartment_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 1.4811022573416655, "unit_n": 5, "param_ratio": 4.6}
{"id": "112297a0-51b3-4674-b366-7d24f5c6a567", "name": "Food Processor", "instruction": "Compare two food processors. The first one should have a simple, compact design with basic functions like chopping and slicing. The second one should be larger with multiple speed settings and additional functions such as grating and blending.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the First Food Processor (Simple, Compact Design)\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(-1, 0, 0.1))\nbase1 = bpy.context.object\nbase1.name = \"Base1\"\nbase1.data.materials.append(gray)\n\n# Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.6, location=(-1, 0, 0.5))\ncontainer1 = bpy.context.object\ncontainer1.name = \"Container1\"\ncontainer1.data.materials.append(gray)\n\n# Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(-1, 0, 0.85))\nlid1 = bpy.context.object\nlid1.name = \"Lid1\"\nlid1.data.materials.append(dark_gray)\n\n# Step 3: Create the Second Food Processor (Larger, Multiple Functions)\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.3, location=(1, 0, 0.15))\nbase2 = bpy.context.object\nbase2.name = \"Base2\"\nbase2.data.materials.append(gray)\n\n# Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.8, location=(1, 0, 0.65))\ncontainer2 = bpy.context.object\ncontainer2.name = \"Container2\"\ncontainer2.data.materials.append(gray)\n\n# Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(1, 0, 1.05))\nlid2 = bpy.context.object\nlid2.name = \"Lid2\"\nlid2.data.materials.append(dark_gray)\n\n# Speed Settings Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(1.5, 0, 0.25))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(dark_gray)\n\n# Additional Functions (Grating and Blending)\n# Grater\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.2, 0.5, 0.65))\ngrater = bpy.context.object\ngrater.name = \"Grater\"\ngrater.data.materials.append(dark_gray)\n\n# Blender\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(1.2, -0.5, 0.65))\nblender = bpy.context.object\nblender.name = \"Blender\"\nblender.data.materials.append(dark_gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.752229148215179, "unit_n": 9, "param_ratio": 6.0}
{"id": "5c472ab5-6ebe-4339-9e0e-8b58a69fdf4d", "name": "Microscope", "instruction": "Create a 3D model of a microscope. The microscope should have an eyepiece, objective lenses, and a stage for placing slides.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.0, location=(0, 0, 1.0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(black)\n\n# Step 4: Create the Objective Lenses\nfor i in range(3):\n    angle = math.radians(120 * i)\n    x = 0.25 * math.cos(angle)\n    y = 0.25 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.8))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(gray)\n\n# Step 5: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(black)\n\n# Step 6: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=0.7, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.280539644170522, "unit_n": 7, "param_ratio": 4.714285714285714}
{"id": "1742ad45-1844-4aa8-80f7-94e2bf68f444", "name": "Logo", "instruction": "Create a simple geometric logo.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create a Blue Cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1, 0, 0))\ncube = bpy.context.object\ncube.name = \"Blue Cube\"\ncube.data.materials.append(blue)\n\n# Step 3: Create a Red Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(1, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Red Sphere\"\nsphere.data.materials.append(red)\n\n# Step 4: Create a Green Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 1, 0))\ncylinder = bpy.context.object\ncylinder.name = \"Green Cylinder\"\ncylinder.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.703615617965953, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "16005a9f-e719-4ef5-bab3-605e2d9659d2", "name": "Grand Piano", "instruction": "Imagine a grand piano with a sleek, curved body and an open lid showcasing its strings. The piano has 88 keys, starting from low notes on the left and ascending to high notes on the right. Three pedals are positioned at the base. The legs are sturdy and slightly curved, adding to its majestic appearance.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Piano Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Piano Body\"\nbody.scale = (2, 1, 0.3)\nbody.data.materials.append(black)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 1, 1.6))\nlid = bpy.context.object\nlid.name = \"Piano Lid\"\nlid.scale = (2, 1, 0.02)\nlid.rotation_euler = (math.radians(45), 0, 0)\nlid.data.materials.append(black)\n\n# Step 4: Create the Keys\nfor i in range(88):\n    x = -1.75 + (i * 0.04)\n    bpy.ops.mesh.primitive_cube_add(size=0.04, location=(x, -0.5, 1.1))\n    key = bpy.context.object\n    key.name = f\"Key {i + 1}\"\n    key.scale = (0.5, 0.1, 0.02)\n    if i % 2 == 0:\n        key.data.materials.append(white)\n    else:\n        key.data.materials.append(black)\n\n# Step 5: Create the Pedals\nfor i in range(3):\n    x = -0.2 + (i * 0.2)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, -1, 0.3))\n    pedal = bpy.context.object\n    pedal.name = f\"Pedal {i + 1}\"\n    pedal.scale = (0.1, 0.05, 0.02)\n    pedal.data.materials.append(black)\n\n# Step 6: Create the Legs\nfor i in range(4):\n    x = 1.8 * (i % 2) - 0.9\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(black)\n    leg.scale = (1, 1, 1.2)\n    leg.rotation_euler = (0, 0, math.radians(10) * (i % 2 * 2 - 1))\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.967331033932974, "unit_n": 97, "param_ratio": 0.31958762886597936}
{"id": "69245825-46c7-4b5b-a457-73bdb462178c", "name": "Shirt", "instruction": "Create a model of a shirt. Include short sleeves, a collar, and a button-down front. Add a single chest pocket on one side.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nshirt_color = bpy.data.materials.new(name=\"ShirtColor\")\nshirt_color.diffuse_color = (0.2, 0.5, 0.8, 1)  # Light blue color\n\n# Step 2: Create the Body of the Shirt\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Shirt Body\"\nbody.scale = (1, 0.5, 1.2)\nbody.data.materials.append(shirt_color)\n\n# Step 3: Create the Sleeves\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(i * 1.5, 0, 1.2))\n    sleeve = bpy.context.object\n    sleeve.name = f\"Sleeve {i}\"\n    sleeve.scale = (0.5, 0.5, 0.5)\n    sleeve.data.materials.append(shirt_color)\n\n# Step 4: Create the Collar\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.6, 2.2))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.scale = (1, 0.2, 0.1)\ncollar.data.materials.append(shirt_color)\n\n# Step 5: Create the Button-down Front\nfor i in range(5):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=(0, 0.55, 1.8 - i * 0.4))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(shirt_color)\n\n# Step 6: Create the Chest Pocket\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.5, 0.55, 1.5))\npocket = bpy.context.object\npocket.name = \"Chest Pocket\"\npocket.scale = (0.3, 0.05, 0.3)\npocket.data.materials.append(shirt_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4964817176736993, "unit_n": 9, "param_ratio": 2.888888888888889}
{"id": "693e19aa-868c-43f8-9987-5a456bee4884", "name": "Juicer", "instruction": "Create a 3D model of a manual juicer. It should have a reamer at the top for squeezing the juice out of fruits. Include a container below the reamer to collect the juice.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nreamer_color = bpy.data.materials.new(name=\"Reamer Color\")\nreamer_color.diffuse_color = (0.8, 0.8, 0.2, 1)  # Light yellow color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Reamer\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, radius2=0, depth=0.4, location=(0, 0, 0.6))\nreamer = bpy.context.object\nreamer.name = \"Reamer\"\nreamer.data.materials.append(reamer_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.6, depth=0.8, location=(0, 0, 0.2))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Container Base\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.65, depth=0.1, location=(0, 0, -0.3))\ncontainer_base = bpy.context.object\ncontainer_base.name = \"Container Base\"\ncontainer_base.data.materials.append(container_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.633657117914684, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "377e0d1b-391b-494f-96f5-435c67656906", "name": "Fedora Hat", "instruction": "Design a 3D model of a fedora hat. The hat should have a wide brim and a creased crown. Add a band around the base of the crown.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cone_add(radius1=0.8, radius2=0.5, depth=1.2, location=(0, 0, 0.6))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Add the Crease to the Crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.2, depth=0.6, location=(0, 0, 0.9))\nbpy.ops.object.mode_set(mode='OBJECT')\ncrease = bpy.context.object\ncrease.select_set(True)\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.join()\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.intersect_boolean(operation='DIFFERENCE')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Band\nbpy.ops.mesh.primitive_torus_add(major_radius=0.85, minor_radius=0.05, location=(0, 0, 0.6))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.288907474250598, "unit_n": 4, "param_ratio": 8.0}
{"id": "6cf3700c-2b92-4b72-9161-f52aba5a827d", "name": "Puzzle Cube", "instruction": "Can you create a puzzle cube with different colored faces?", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = {\n    \"Red\": (1, 0, 0, 1),\n    \"Green\": (0, 1, 0, 1),\n    \"Blue\": (0, 0, 1, 1),\n    \"Yellow\": (1, 1, 0, 1),\n    \"Orange\": (1, 0.5, 0, 1),\n    \"White\": (1, 1, 1, 1)\n}\n\n# Step 2: Create the Cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"Puzzle Cube\"\n\n# Step 3: Assign different colors to each face\nmesh = cube.data\nmesh.materials.clear()\n\nfor color_name, color_value in colors.items():\n    mat = bpy.data.materials.new(name=color_name)\n    mat.diffuse_color = color_value\n    mesh.materials.append(mat)\n\n# Assign materials to faces\nfor i, polygon in enumerate(mesh.polygons):\n    polygon.material_index = i % len(colors)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 4.0}
{"id": "0199bf75-dfce-4e25-8dfd-ee886a53b014", "name": "Reading Chair", "instruction": "Model a basic reading chair with a seat height of 18 inches and a backrest height of 42 inches from the ground.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Seat\nseat_height = 18 * 0.0254  # Convert inches to meters\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, seat_height / 2))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = seat_height\nfor i in range(4):\n    x = 0.2 * (i % 2) - 0.1\n    y = 0.2 * (i // 2) - 0.1\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=leg_height, location=(x, y, leg_height / 2))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 4: Create the Backrest\nbackrest_height = 42 * 0.0254  # Convert inches to meters\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.25, (seat_height + backrest_height) / 2), scale=(1, 0.1, backrest_height / 0.5))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.571284578785262, "unit_n": 6, "param_ratio": 3.3333333333333335}
{"id": "8007f684-fc43-46f1-8155-87c7c66372d9", "name": "Pizza", "instruction": "Can you describe the key components of a pizza, focusing on its structure and layers?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for the crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Yellow color for the cheese\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.679872721561161, "unit_n": 3, "param_ratio": 10.0}
{"id": "7f42d9ef-751e-491b-8fa4-7f672537af2c", "name": "Wallpaper Design", "instruction": "Create a wallpaper design featuring a repeating pattern of geometric shapes. The shapes should be arranged symmetrically and cover the entire surface seamlessly. Use a combination of circles, triangles, and squares in various sizes. Ensure the design is balanced and visually appealing. The background should be a solid color, while the shapes themselves can be in contrasting colors to make them stand out.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Define colors\nbg_color = bpy.data.materials.new(name=\"Background Color\")\nbg_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray background\n\ncircle_color = bpy.data.materials.new(name=\"Circle Color\")\ncircle_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\ntriangle_color = bpy.data.materials.new(name=\"Triangle Color\")\ntriangle_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\nsquare_color = bpy.data.materials.new(name=\"Square Color\")\nsquare_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\n\n# Step 3: Create background plane\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nbg_plane = bpy.context.object\nbg_plane.name = \"Background Plane\"\nbg_plane.data.materials.append(bg_color)\n\n# Step 4: Create shapes\ndef create_circle(x, y):\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, location=(x, y, 0.01))\n    circle = bpy.context.object\n    circle.data.materials.append(circle_color)\n\ndef create_triangle(x, y):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0, location=(x, y, 0.01))\n    triangle = bpy.context.object\n    triangle.data.materials.append(triangle_color)\n\ndef create_square(x, y):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.01))\n    square = bpy.context.object\n    square.data.materials.append(square_color)\n\n# Step 5: Arrange shapes in a repeating pattern\npattern_size = 2\nfor i in range(-5, 5):\n    for j in range(-5, 5):\n        x = i * pattern_size\n        y = j * pattern_size\n        create_circle(x, y)\n        create_triangle(x + 1, y)\n        create_square(x + 0.5, y + 1)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.609605026164472, "unit_n": 4, "param_ratio": 9.5}
{"id": "3de3c125-6ac1-406e-aef9-fd210f9a25d0", "name": "Rolling Suitcase", "instruction": "Craft a 3D rolling suitcase with a telescopic handle and two wheels. The suitcase should have a horizontal zipper compartment on the front.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Black color\n\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsuitcase = bpy.context.object\nsuitcase.name = \"Suitcase\"\nsuitcase.scale = (0.5, 0.3, 1)\nsuitcase.data.materials.append(suitcase_color)\n\n# Step 3: Create the Telescopic Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.4, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale = (0.05, 0.05, 1)\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.4 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.35, 0.1), rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)\n\n# Step 5: Create the Zipper Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.31, 1.2))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.45, 0.01, 0.1)\nzipper.data.materials.append(zipper_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.9710084018137273, "unit_n": 5, "param_ratio": 8.0}
{"id": "1ab0ddbf-49a1-4c85-94a2-e6c93831f850", "name": "Hat", "instruction": "Can you create a hat?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "2b95dd5c-5dcf-4ba5-b95d-99b98aab49e4", "name": "Pet Bed", "instruction": "Design a pet bed featuring a circular shape with a soft, cushioned base. Include a raised edge around the perimeter.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsoft_cushion = bpy.data.materials.new(name=\"Soft Cushion\")\nsoft_cushion.diffuse_color = (0.8, 0.5, 0.5, 1)  # Soft pinkish color\n\nraised_edge = bpy.data.materials.new(name=\"Raised Edge\")\nraised_edge.diffuse_color = (0.6, 0.3, 0.3, 1)  # Slightly darker pinkish color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(soft_cushion)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.2))\nedge = bpy.context.object\nedge.name = \"Edge\"\nedge.data.materials.append(raised_edge)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.544624303372426, "unit_n": 2, "param_ratio": 10.0}
{"id": "54453072-579f-4f35-ad70-4f4a0388d108", "name": "Scarf", "instruction": "Create a scarf that is long and rectangular in shape. The scarf should be wide enough to provide warmth and comfort. Include fringe at both ends for added detail.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the scarf\nscarf_color = bpy.data.materials.new(name=\"Scarf Color\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the main body of the scarf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf_body = bpy.context.object\nscarf_body.scale = (0.1, 2, 0.02)  # Long and rectangular shape\nscarf_body.name = \"Scarf Body\"\nscarf_body.data.materials.append(scarf_color)\n\n# Step 3: Create the fringe at both ends\nfringe_color = bpy.data.materials.new(name=\"Fringe Color\")\nfringe_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Same red color\n\ndef create_fringe(location):\n    for i in range(-5, 6):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(location[0], location[1] + i * 0.02, location[2]))\n        fringe = bpy.context.object\n        fringe.name = f\"Fringe {i}\"\n        fringe.data.materials.append(fringe_color)\n\n# Add fringe to both ends of the scarf\ncreate_fringe((0, 2.02, 0))\ncreate_fringe((0, -2.02, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.112375696441791, "unit_n": 6, "param_ratio": 3.1666666666666665}
{"id": "8259f9cb-a04a-45e3-a38d-1686501573bd", "name": "Circuit Board", "instruction": "I need a 3D model of a circuit board. It should have various small components like resistors, capacitors, and microchips arranged on it.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color for the circuit board\ncomponent_color = bpy.data.materials.new(name=\"Component Color\")\ncomponent_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color for the components\n\n# Step 2: Create the Circuit Board\nbpy.ops.mesh.primitive_plane_add(size=4, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Circuit Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create Resistors\nfor i in range(3):\n    x = -1.5 + i * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, -0.5, 0.05), rotation=(1.57, 0, 0))\n    resistor = bpy.context.object\n    resistor.name = f\"Resistor {i + 1}\"\n    resistor.data.materials.append(component_color)\n\n# Step 4: Create Capacitors\nfor i in range(2):\n    x = -1 + i * 2\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 0.5, 0.1))\n    capacitor = bpy.context.object\n    capacitor.name = f\"Capacitor {i + 1}\"\n    capacitor.data.materials.append(component_color)\n\n# Step 5: Create Microchips\nfor i in range(2):\n    x = -1 + i * 2\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, 0, 0.25))\n    microchip = bpy.context.object\n    microchip.name = f\"Microchip {i + 1}\"\n    microchip.data.materials.append(component_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.0963901618148357, "unit_n": 8, "param_ratio": 3.875}
{"id": "57b1772d-0728-4afc-b6d5-8a7a093ee54f", "name": "Rice Cooker", "instruction": "Model a simple rice cooker with a single switch for operation. It should have a lid with a steam vent and a light indicator for the cooking status.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite_color = bpy.data.materials.new(name=\"White\")\nwhite_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_color = bpy.data.materials.new(name=\"Black\")\nblack_color.diffuse_color = (0, 0, 0, 1)  # Black color\nred_color = bpy.data.materials.new(name=\"Red\")\nred_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Body of the Rice Cooker\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.2, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(white_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 1.3))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(white_color)\n\n# Step 4: Create the Steam Vent\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 1.4))\nsteam_vent = bpy.context.object\nsteam_vent.name = \"Steam Vent\"\nsteam_vent.data.materials.append(black_color)\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.05, 0.3))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(black_color)\n\n# Step 6: Create the Light Indicator\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.3, 1.05, 0.4))\nlight_indicator = bpy.context.object\nlight_indicator.name = \"Light Indicator\"\nlight_indicator.data.materials.append(red_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 1.9205368246993697, "unit_n": 5, "param_ratio": 7.6}
{"id": "000d869b-c903-459e-81ae-e9d0aa447022", "name": "Food Processor", "instruction": "Please generate a 3D model of a food processor. It should have a cylindrical bowl with a lid on top. Inside the bowl, include a blade attachment. The base should be rectangular and house the motor. On the front, place a control panel with a few buttons and a dial for speed settings. The food processor should have a chute on the lid for adding ingredients while in use. Ensure the overall design is compact and functional.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Darker gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.scale = (1, 1, 0.5)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.8, location=(0, 0, 0.4))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.85))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(bowl_color)\n\n# Step 5: Create the Blade\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, 0, 0.2), rotation=(0, math.pi/2, 0))\nblade = bpy.context.object\nblade.name = \"Blade\"\nblade.data.materials.append(blade_color)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, -0.6, -0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.scale = (0.5, 0.1, 0.3)\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 7: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(-0.1 + i * 0.1, -0.65, -0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(control_panel_color)\n\n# Step 8: Create the Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=(0.3, -0.65, -0.25))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.data.materials.append(control_panel_color)\n\n# Step 9: Create the Chute\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0.4, 0, 0.95))\nchute = bpy.context.object\nchute.name = \"Chute\"\nchute.data.materials.append(bowl_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.923805784988258, "unit_n": 10, "param_ratio": 6.0}
{"id": "164b5602-3f43-4cf3-bcfd-d4b10a19c8d8", "name": "Floor Lamp", "instruction": "Create a floor lamp with a tall, slender pole and a round base. The lamp should have a simple, cylindrical lampshade at the top. Add a switch on the pole for turning the lamp on and off. The design should be functional and straightforward.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nshade_color = bpy.data.materials.new(name=\"Shade\")\nshade_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.05))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(metal_color)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, 2.2))\nshade = bpy.context.object\nshade.name = \"Lampshade\"\nshade.data.materials.append(shade_color)\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.075, 0, 1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.271206263593959, "unit_n": 4, "param_ratio": 7.25}
{"id": "0bb7c695-a140-44fa-b106-bc31a403c9de", "name": "Umbrella", "instruction": "Design a simple umbrella with a curved handle and a canopy.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Brown color for the handle\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color for the canopy\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Create the curved part of the handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, -2))\ncurved_handle = bpy.context.object\ncurved_handle.name = \"Curved Handle\"\ncurved_handle.data.materials.append(handle_color)\n\n# Step 3: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=1, location=(0, 0, 0.5))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5771760840555835, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "32975a4b-b319-47c3-a10b-55173081ca5e", "name": "Blender", "instruction": "Can you create a 3D model of a blender? Compare the height of the blender to a standard coffee maker.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nglass_color = bpy.data.materials.new(name=\"Glass Color\")\nglass_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Light gray color with transparency\n\n# Step 2: Create the Blender Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Blender Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Blender Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1.0, location=(0, 0, 0.95))\njar = bpy.context.object\njar.name = \"Blender Jar\"\njar.data.materials.append(glass_color)\n\n# Step 4: Create the Blender Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.42, depth=0.1, location=(0, 0, 1.45))\nlid = bpy.context.object\nlid.name = \"Blender Lid\"\nlid.data.materials.append(base_color)\n\n# Step 5: Create the Blender Blade\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.05, location=(0, 0, 0.3))\nblade = bpy.context.object\nblade.name = \"Blender Blade\"\nblade.data.materials.append(base_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.6300351484475595, "unit_n": 4, "param_ratio": 7.5}
{"id": "792f7d3e-33b7-453e-81eb-94d9496500af", "name": "Envelope", "instruction": "Create a simple envelope.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nenvelope_color = bpy.data.materials.new(name=\"Envelope Color\")\nenvelope_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the main body of the envelope\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Envelope Body\"\nbody.scale[2] = 0.05  # Flatten the cube to make it envelope-like\nbody.data.materials.append(envelope_color)\n\n# Step 3: Create the flap of the envelope\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1.4, radius2=0, depth=0.1, location=(0, 0, 0.05))\nflap = bpy.context.object\nflap.name = \"Envelope Flap\"\nflap.rotation_euler[2] = math.pi / 4  # Rotate to align with the envelope body\nflap.data.materials.append(envelope_color)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.564949357461537, "unit_n": 2, "param_ratio": 8.0}
{"id": "8e8d00d6-8fae-4a6c-a22d-5bbac7c7ae5f", "name": "Screwdriver", "instruction": "Create a screwdriver. It should have a long handle and a metal shaft. Include a flat or Phillips head at the tip. Ensure it is practical for everyday use.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the metal shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(0, 0, 1.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Head (Phillips head)\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.1, location=(0, 0, 2.55))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metal_color)\n\n# Create the cross for Phillips head\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, 2.6))\ncross1 = bpy.context.object\ncross1.scale[2] = 0.1\ncross1.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, 2.6))\ncross2 = bpy.context.object\ncross2.scale[0] = 0.1\ncross2.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.437308525673172, "unit_n": 5, "param_ratio": 6.8}
{"id": "1a78d7c7-72e0-4f0a-ac1d-7df45154b728", "name": "Blender", "instruction": "Create a blender with a base, a clear pitcher, and a lid. The base should house the motor and control buttons, while the pitcher should have measurement markings. Ensure the lid fits securely on the pitcher.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Light gray color with transparency\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1, location=(0, 0, 0.8))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.42, depth=0.1, location=(0, 0, 1.35))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Add Measurement Markings (Simplified as lines)\nbpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.4, 0, 0.6))\nmarking1 = bpy.context.object\nmarking1.name = \"Marking 1\"\nmarking1.scale[1] = 5  # Stretch the plane to form a line\nmarking1.data.materials.append(base_color)\n\nbpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.4, 0, 0.9))\nmarking2 = bpy.context.object\nmarking2.name = \"Marking 2\"\nmarking2.scale[1] = 5  # Stretch the plane to form a line\nmarking2.data.materials.append(base_color)\n\nbpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.4, 0, 1.2))\nmarking3 = bpy.context.object\nmarking3.name = \"Marking 3\"\nmarking3.scale[1] = 5  # Stretch the plane to form a line\nmarking3.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.718221964816054, "unit_n": 6, "param_ratio": 7.0}
{"id": "137196c2-75b7-4910-8d1f-1e3172dbf0b4", "name": "Citrus Juicer", "instruction": "Could you create a 3D model of a simple citrus juicer with a reamer and a container for the juice?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplastic_orange = bpy.data.materials.new(name=\"Plastic Orange\")\nplastic_orange.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(plastic_orange)\n\n# Step 3: Create the Reamer Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.55))\nreamer_base = bpy.context.object\nreamer_base.name = \"Reamer Base\"\nreamer_base.data.materials.append(plastic_orange)\n\n# Step 4: Create the Reamer\nbpy.ops.mesh.primitive_cone_add(radius1=0.8, radius2=0, depth=0.6, location=(0, 0, 0.85))\nreamer = bpy.context.object\nreamer.name = \"Reamer\"\nreamer.data.materials.append(plastic_orange)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.427004542344018, "unit_n": 3, "param_ratio": 7.0}
{"id": "41e182a1-3a7a-438d-9190-8e1b83ab110b", "name": "Fedora Hat", "instruction": "Design a fedora hat. It should have a medium brim and a creased crown. Include a simple band around the base of the crown.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cone_add(radius1=1, radius2=0.5, depth=1.2, location=(0, 0, 0.6))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Crease the Crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\ncrown.data.vertices[0].select = True  # Select the top vertex\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, 0, -0.2))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.6))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.705073134220229, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "3a772426-4c6b-45b9-8b4c-c0d9cdc3e6da", "name": "Power Strip", "instruction": "Create a 3D model of a power strip. It should have a rectangular body with six outlets and a power switch on one end. Include a short cord extending from the other end.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\noutlet_color = bpy.data.materials.new(name=\"Outlet Color\")\noutlet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\ncord_color = bpy.data.materials.new(name=\"Cord Color\")\ncord_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Power Strip Body\"\nbody.scale = (2, 0.5, 0.2)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5 + i * 0.6, 0, 0.15))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(1.8, 0, 0.15))\nswitch = bpy.context.object\nswitch.name = \"Power Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(-2.2, 0, 0))\ncord = bpy.context.object\ncord.name = \"Power Cord\"\ncord.rotation_euler[1] = 1.5708  # Rotate 90 degrees to lay flat\ncord.data.materials.append(cord_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2616353067425488, "unit_n": 9, "param_ratio": 4.111111111111111}
{"id": "105f0e0e-80ec-49af-b126-37e94be06b15", "name": "Laptop vs. Tablet", "instruction": "Create a side-by-side comparison of a laptop and a tablet. Highlight the differences in their shapes, with the laptop having a hinged screen and keyboard, and the tablet being a flat, rectangular touch screen.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Laptop Base (Keyboard)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, 0, 0.5))\nlaptop_base = bpy.context.object\nlaptop_base.scale[2] = 0.05\nlaptop_base.data.materials.append(dark_gray)\n\n# Step 3: Create the Laptop Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, 0, 1.1))\nlaptop_screen = bpy.context.object\nlaptop_screen.scale[2] = 0.05\nlaptop_screen.scale[1] = 0.8\nlaptop_screen.rotation_euler[0] = 1.3  # Slightly open screen\nlaptop_screen.data.materials.append(gray)\n\n# Step 4: Create the Tablet\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, 0, 0.5))\ntablet = bpy.context.object\ntablet.scale[2] = 0.05\ntablet.scale[1] = 0.8\ntablet.data.materials.append(gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "60ee5b4d-cb9b-4315-bfef-b22b04f7e7e4", "name": "Geometric Pattern", "instruction": "Generate a geometric pattern with interlocking hexagons.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Define the hexagon parameters\nradius = 1\nheight = 0.1\n\n# Step 3: Create a single hexagon\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=height, location=(0, 0, 0))\nhexagon = bpy.context.object\nhexagon.name = \"Hexagon\"\n\n# Step 4: Create a material for the hexagons\nhex_material = bpy.data.materials.new(name=\"HexMaterial\")\nhex_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nhexagon.data.materials.append(hex_material)\n\n# Step 5: Duplicate and position hexagons to create the pattern\nfor i in range(-3, 4):\n    for j in range(-3, 4):\n        if (i + j) % 2 == 0:\n            x = i * 1.5 * radius\n            y = j * math.sqrt(3) * radius\n            bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=height, location=(x, y, 0))\n            new_hexagon = bpy.context.object\n            new_hexagon.data.materials.append(hex_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.128773342154911, "unit_n": 10, "param_ratio": 1.3}
{"id": "38bd4caa-86b3-4aa7-a5af-55d21d38f395", "name": "Microscope", "instruction": "Design a microscope with a sturdy base, an adjustable stage, and a rotating nosepiece with multiple objective lenses. Include a focus knob and an eyepiece.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngrey_material = bpy.data.materials.new(name=\"Grey\")\ngrey_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1\nbase.data.materials.append(black_material)\n\n# Step 3: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.scale[2] = 0.05\nstage.data.materials.append(grey_material)\n\n# Step 4: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.8, 0.5))\narm = bpy.context.object\narm.name = \"Arm\"\narm.scale[2] = 3\narm.data.materials.append(black_material)\n\n# Step 5: Create the Nosepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, -0.6, 0.9))\nnosepiece = bpy.context.object\nnosepiece.name = \"Nosepiece\"\nnosepiece.data.materials.append(grey_material)\n\n# Step 6: Create Objective Lenses\nfor i in range(3):\n    angle = i * 120 * (3.14159 / 180)\n    x = 0.2 * math.cos(angle)\n    y = -0.6 + 0.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.85))\n    lens = bpy.context.object\n    lens.name = f\"Lens {i + 1}\"\n    lens.data.materials.append(grey_material)\n\n# Step 7: Create the Focus Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, -0.95, 0.3), rotation=(0, 1.5708, 0))\nfocus_knob = bpy.context.object\nfocus_knob.name = \"Focus Knob\"\nfocus_knob.data.materials.append(grey_material)\n\n# Step 8: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0, -0.8, 1.2))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black_material)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.0559059739120986, "unit_n": 9, "param_ratio": 5.0}
{"id": "6d64fb5f-849d-4908-b008-d81eb5017da2", "name": "Hat", "instruction": "Can you design a 3D model of a hat? It should have a rounded crown and a wide brim.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0.5))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.852478066159039, "unit_n": 2, "param_ratio": 4.5}
{"id": "1a430e64-9fb6-4725-9b8e-478436462dbd", "name": "Desktop Computer", "instruction": "Design a desktop computer that includes a monitor, a central processing unit (CPU) box, a keyboard, and a mouse. The monitor should have a slim profile, and the CPU box should be compact enough to fit under a standard desk.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.5))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nmonitor.scale = (1, 0.1, 0.75)\n\n# Step 3: Create the CPU Box\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, 0, 0.5))\ncpu_box = bpy.context.object\ncpu_box.name = \"CPU Box\"\ncpu_box.scale = (0.5, 0.5, 1)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0.25))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.scale = (1.5, 0.3, 0.1)\n\n# Step 5: Create the Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0.5, -2, 0.2))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nmouse.scale = (1, 1.5, 0.5)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.9915688017643942, "unit_n": 4, "param_ratio": 4.0}
{"id": "7b6ee9c0-15e3-45e5-927b-d0827c5b0c37", "name": "Coffee Grinder", "instruction": "Let's design a coffee grinder. The base should be cylindrical, about 8 inches tall and 4 inches in diameter. On top, include a hopper for the coffee beans. The grinder mechanism should be inside the base, with a handle on the side for manual grinding. At the bottom, there should be a small drawer to collect the ground coffee.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=8, location=(0, 0, 4))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=1.5, radius2=0.5, depth=2, location=(0, 0, 9))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(metal)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=3, location=(2.1, 0, 6), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(3.6, 0, 6))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(wood)\n\n# Step 5: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, -2.1, 1))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5642254912047573, "unit_n": 5, "param_ratio": 7.4}
{"id": "43cb939a-6a95-4233-82df-4fe4126a0086", "name": "Picture Frame", "instruction": "Can you make a picture frame for me? It should be rectangular and have a simple border around the edges.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Picture Plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npicture = bpy.context.object\npicture.name = \"Picture\"\npicture.scale = (1, 1.5, 1)\n\n# Step 3: Create the Frame Border\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, 0.05))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1.1, 1.6, 0.1)\nouter_frame.data.materials.append(frame_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (1, 1.5, 0.1)\ninner_frame.data.materials.append(frame_color)\n\n# Boolean difference to create the border\nmod_bool = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_frame\n\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Dark", "verify": "human", "entropy": 2.4412145291060345, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "7cbab933-5d38-4247-9ca5-8df147c3a789", "name": "Standing Mirror", "instruction": "Construct a standing mirror with a rectangular frame. The mirror should be tall enough to reflect a full body view and have a simple stand at the back for support.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color for the frame\nmirror_color = bpy.data.materials.new(name=\"Mirror Color\")\nmirror_color.diffuse_color = (1, 1, 1, 0.1)  # Light color for the mirror\n\n# Step 2: Create the Mirror Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nframe = bpy.context.object\nframe.scale = (0.1, 1, 2)\nframe.name = \"Mirror Frame\"\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Mirror Surface\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 1))\nmirror = bpy.context.object\nmirror.scale = (0.09, 0.95, 1.9)\nmirror.name = \"Mirror Surface\"\nmirror.data.materials.append(mirror_color)\n\n# Step 4: Create the Stand\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, -0.5, 0.5))\nstand = bpy.context.object\nstand.scale = (0.1, 0.1, 1)\nstand.rotation_euler = (0.5, 0, 0)\nstand.name = \"Stand\"\nstand.data.materials.append(frame_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.9264175554979968, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "4efb937a-98dc-4c4a-a308-10380989ea39", "name": "Bird Cage", "instruction": "Compare a small bird cage with a large bird cage. Both should have a cylindrical shape with a domed top. The small cage should be about half the height and diameter of the large cage. Include a door on the side of each cage.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Function to create a bird cage\ndef create_bird_cage(name, radius, height, location):\n    # Create the cylindrical base\n    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=location)\n    base = bpy.context.object\n    base.name = f\"{name} Base\"\n    \n    # Create the domed top\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=(location[0], location[1], location[2] + height / 2))\n    dome = bpy.context.object\n    dome.name = f\"{name} Dome\"\n    \n    # Create the door\n    bpy.ops.mesh.primitive_cube_add(size=radius / 2, location=(location[0] + radius, location[1], location[2]))\n    door = bpy.context.object\n    door.name = f\"{name} Door\"\n    \n    return base, dome, door\n\n# Step 2: Create the Large Bird Cage\nlarge_cage_radius = 1\nlarge_cage_height = 2\nlarge_cage_location = (0, 0, 1)\ncreate_bird_cage(\"Large Cage\", large_cage_radius, large_cage_height, large_cage_location)\n\n# Step 3: Create the Small Bird Cage\nsmall_cage_radius = large_cage_radius / 2\nsmall_cage_height = large_cage_height / 2\nsmall_cage_location = (3, 0, small_cage_height / 2)\ncreate_bird_cage(\"Small Cage\", small_cage_radius, small_cage_height, small_cage_location)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.056377813146294, "unit_n": 3, "param_ratio": 2.3333333333333335}
{"id": "25af0c6c-f1fe-4e7b-8835-8ab0ea2096f5", "name": "Laundry Basket", "instruction": "Create a laundry basket with a rectangular base and slightly tapered sides. It should have two handles on the shorter sides for easy carrying. Add a perforated pattern on the sides to allow for ventilation. Ensure the basket is deep enough to hold a full load of laundry.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base of the Basket\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbasket_base = bpy.context.object\nbasket_base.name = \"Basket Base\"\nbpy.ops.transform.resize(value=(1, 0.6, 0.1))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 3: Create the Sides of the Basket\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\nbasket_sides = bpy.context.object\nbasket_sides.name = \"Basket Sides\"\nbpy.ops.transform.resize(value=(1, 0.6, 1))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 4: Create the Perforated Pattern (simplified as holes)\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.8, 0, 1.1))\nhole = bpy.context.object\nhole.name = \"Hole\"\nbpy.ops.transform.resize(value=(0.1, 0.05, 0.5))\nbpy.ops.object.transform_apply(scale=True)\n\n# Add holes to the sides\nfor i in range(-4, 5):\n    for j in range(-2, 3):\n        new_hole = hole.copy()\n        new_hole.data = hole.data.copy()\n        new_hole.location = (i * 0.4, j * 0.3, 1.1)\n        bpy.context.collection.objects.link(new_hole)\n        bpy.context.view_layer.objects.active = basket_sides\n        bpy.ops.object.modifier_add(type='BOOLEAN')\n        bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n        bpy.context.object.modifiers[\"Boolean\"].object = new_hole\n        bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n        bpy.data.objects.remove(new_hole)\n\nbpy.data.objects.remove(hole)\n\n# Step 5: Create the Handles\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(i * 1, 0, 1.1))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 2}\"\n\n# Step 6: Join the Base and Sides\nbpy.ops.object.select_all(action='DESELECT')\nbasket_base.select_set(True)\nbasket_sides.select_set(True)\nbpy.context.view_layer.objects.active = basket_base\nbpy.ops.object.join()\n\n# Rename the final object\nbasket_base.name = \"Laundry Basket\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9590967453105, "unit_n": 12, "param_ratio": 1.5}
{"id": "9243a60b-d200-4d4f-872e-1a6b05cfb706", "name": "External Hard Drive", "instruction": "Design an external hard drive with a rectangular shape. The drive should have a USB port on one side and a power indicator light on the front. Include a simple, clean design.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrive_color = bpy.data.materials.new(name=\"Drive Color\")\ndrive_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nusb_port_color = bpy.data.materials.new(name=\"USB Port Color\")\nusb_port_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\nindicator_light_color = bpy.data.materials.new(name=\"Indicator Light Color\")\nindicator_light_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Hard Drive Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ndrive_body = bpy.context.object\ndrive_body.name = \"Drive Body\"\ndrive_body.scale = (1, 0.5, 0.2)\ndrive_body.data.materials.append(drive_color)\n\n# Step 3: Create the USB Port\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.1, 0, -0.1))\nusb_port = bpy.context.object\nusb_port.name = \"USB Port\"\nusb_port.scale = (0.1, 0.3, 0.05)\nusb_port.data.materials.append(usb_port_color)\n\n# Step 4: Create the Power Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-1, 0, 0.15))\nindicator_light = bpy.context.object\nindicator_light.name = \"Indicator Light\"\nindicator_light.data.materials.append(indicator_light_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.930193053709882, "unit_n": 3, "param_ratio": 9.0}
{"id": "1fdab43e-2708-4441-90b4-2152dae53c9a", "name": "Cutting Board", "instruction": "Create a cutting board. It should be rectangular with dimensions of 30cm by 40cm. Include a groove around the edge to catch any liquids.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cutting board\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Light brown wood color\n\n# Step 2: Create the Cutting Board\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncutting_board = bpy.context.object\ncutting_board.scale = (0.3, 0.4, 0.02)  # Scale to 30cm x 40cm x 2cm\ncutting_board.name = \"Cutting Board\"\ncutting_board.data.materials.append(wood_color)\n\n# Step 3: Create the Groove\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.01))\ngroove = bpy.context.object\ngroove.scale = (0.28, 0.38, 0.005)  # Slightly smaller to create the groove effect\ngroove.name = \"Groove\"\ngroove.data.materials.append(wood_color)\n\n# Boolean difference to create the groove\nmod_bool = cutting_board.modifiers.new(name=\"Groove Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = groove\nbpy.context.view_layer.objects.active = cutting_board\nbpy.ops.object.modifier_apply(modifier=\"Groove Boolean\")\n\n# Delete the groove object as it is no longer needed\nbpy.data.objects.remove(groove, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.426015131959808, "unit_n": 2, "param_ratio": 6.5}
{"id": "05758e9d-1e08-4d36-80f2-6178bed15dcc", "name": "Circuit Breaker", "instruction": "Design a 3D model of a circuit breaker. The circuit breaker should have a rectangular body with a switch on the front. Include a label area above the switch.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nlabel_color = bpy.data.materials.new(name=\"Label Color\")\nlabel_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.8, 1.2)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.85, 0))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.3, 0.1, 0.5)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create the Label Area\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.05, 0.6))\nlabel = bpy.context.object\nlabel.name = \"Label\"\nlabel.scale = (0.4, 0.05, 0.2)\nlabel.data.materials.append(label_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 9.0}
{"id": "2d8bf1aa-ffd7-4c16-97d6-bd47ce7a13bb", "name": "Canine Chew Toy", "instruction": "Create a model of a canine chew toy suitable for large breeds. The toy should have a series of ridges and grooves that can assist in dental hygiene. It should be designed with a loop at one end to allow for easy gripping and tug-of-war games.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the toy\ntoy_color = bpy.data.materials.new(name=\"ToyColor\")\ntoy_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Bright red color\n\n# Step 2: Create the main body of the toy with ridges and grooves\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"MainBody\"\nmain_body.data.materials.append(toy_color)\n\n# Add ridges and grooves\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, -0.9 + i * 0.2), major_radius=0.22, minor_radius=0.02, rotation=(0, 0, 0))\n    ridge = bpy.context.object\n    ridge.name = f\"Ridge {i + 1}\"\n    ridge.data.materials.append(toy_color)\n\n# Step 3: Create the loop at one end\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, -1.2), major_radius=0.3, minor_radius=0.05, rotation=(0, math.pi/2, 0))\nloop = bpy.context.object\nloop.name = \"Loop\"\nloop.data.materials.append(toy_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.694018641753161, "unit_n": 12, "param_ratio": 2.3333333333333335}
{"id": "0c07b8c9-546c-41a3-aa35-c9eecb9bbf5e", "name": "Beanie Hat", "instruction": "Create a 3D model of a beanie hat. It should have a snug fit and a fold-over cuff at the bottom.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbeanie_color = bpy.data.materials.new(name=\"Beanie Color\")\nbeanie_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Main Part of the Beanie\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbeanie_main = bpy.context.object\nbeanie_main.name = \"Beanie Main\"\nbeanie_main.scale[2] = 0.8  # Make it snug fit\nbeanie_main.data.materials.append(beanie_color)\n\n# Step 3: Create the Fold-over Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.3))\ncuff = bpy.context.object\ncuff.name = \"Cuff\"\ncuff.data.materials.append(beanie_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.663836940722821, "unit_n": 2, "param_ratio": 7.0}
{"id": "8b568210-8b63-435a-8bd9-d34984ed3c06", "name": "Pizza", "instruction": "Design a 3D model of a pizza. How does it differ from a pie?", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color for the crust\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Yellowish color for the cheese\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.67874346877963, "unit_n": 2, "param_ratio": 10.0}
{"id": "06879fab-50f2-421a-88a6-15097b3262ea", "name": "Blood Pressure Monitor", "instruction": "Create a 3D model of a blood pressure monitor. The device should include a digital display screen, buttons for operation, and a cuff that wraps around the upper arm. The display should show readings for systolic and diastolic pressure, along with a pulse rate. The cuff should be connected to the main unit by a flexible tube. Show the device in use, with the cuff wrapped around an arm and the display showing a reading.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndevice_color = bpy.data.materials.new(name=\"DeviceColor\")\ndevice_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nscreen_color = bpy.data.materials.new(name=\"ScreenColor\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ncuff_color = bpy.data.materials.new(name=\"CuffColor\")\ncuff_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntube_color = bpy.data.materials.new(name=\"TubeColor\")\ntube_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Main Unit\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nmain_unit = bpy.context.object\nmain_unit.scale = (1.5, 1, 0.3)\nmain_unit.name = \"MainUnit\"\nmain_unit.data.materials.append(device_color)\n\n# Step 3: Create the Display Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.6, 0.7))\nscreen = bpy.context.object\nscreen.scale = (1, 0.5, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.5 + i * 0.5, -0.7, 0.6))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(2, 0, 1))\ncuff = bpy.context.object\ncuff.rotation_euler = (math.pi / 2, 0, 0)\ncuff.name = \"Cuff\"\ncuff.data.materials.append(cuff_color)\n\n# Step 6: Create the Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(1, 0, 0.5))\ntube = bpy.context.object\ntube.rotation_euler = (0, math.pi / 2, 0)\ntube.name = \"Tube\"\ntube.data.materials.append(tube_color)\n\n# Step 7: Create the Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.2, location=(2, 0, 1))\narm = bpy.context.object\narm.rotation_euler = (math.pi / 2, 0, 0)\narm.name = \"Arm\"\narm.data.materials.append(device_color)\n\n# Step 8: Position the Cuff on the Arm\ncuff.location = (2, 0, 1.2)\n\n# Step 9: Position the Tube to Connect the Cuff and Main Unit\ntube.location = (1.5, 0, 0.5)\n\n# Step 10: Add Text to the Screen\nbpy.ops.object.text_add(location=(0, 0.6, 0.8))\ntext = bpy.context.object\ntext.data.body = \"120/80\\n75 BPM\"\ntext.scale = (0.2, 0.2, 0.2)\ntext.data.materials.append(screen_color)\ntext.rotation_euler = (math.pi / 2, 0, 0)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.4794913324049315, "unit_n": 9, "param_ratio": 6.111111111111111}
{"id": "5d074e55-5f41-4b37-be6b-5d94ca5e346f", "name": "Dog Leash", "instruction": "Create a dog leash. It should be a long, flexible strap with a loop at one end for holding and a clip at the other end to attach to a dog collar. The leash should be a single, solid color.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Solid color for the leash\n\n# Step 2: Create the Leash Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=5, location=(0, 0, 0))\nleash_strap = bpy.context.object\nleash_strap.name = \"Leash Strap\"\nleash_strap.data.materials.append(leash_color)\n\n# Step 3: Create the Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(0, 0, 2.5))\nloop = bpy.context.object\nloop.name = \"Loop\"\nloop.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -2.5))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.data.materials.append(leash_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0.05, -2.5))\nclip_cylinder = bpy.context.object\nclip_cylinder.name = \"Clip Cylinder\"\nclip_cylinder.data.materials.append(leash_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0.1, -2.5))\nclip_top = bpy.context.object\nclip_top.name = \"Clip Top\"\nclip_top.data.materials.append(leash_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.167862567194214, "unit_n": 5, "param_ratio": 5.6}
{"id": "8d64c7a3-bb5c-4d83-b1a4-e02c55674ec8", "name": "Candle", "instruction": "How does a cylindrical candle look?", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the candle\ncandle_color = bpy.data.materials.new(name=\"Candle Color\")\ncandle_color.diffuse_color = (1, 0.87, 0.68, 1)  # Light beige color\n\n# Step 2: Create the Candle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\ncandle_body = bpy.context.object\ncandle_body.name = \"Candle Body\"\ncandle_body.data.materials.append(candle_color)\n\n# Step 3: Create the Wick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, 0, 1.05))\nwick = bpy.context.object\nwick.name = \"Wick\"\nwick.data.materials.append(bpy.data.materials.new(name=\"Wick Color\"))\nwick.data.materials[\"Wick Color\"].diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color", "color_brightness": "Bright", "verify": "human", "entropy": 3.3771342619088616, "unit_n": 2, "param_ratio": 8.0}
{"id": "21b59712-65a8-4eb9-8b49-0d7c8c661813", "name": "Toy Robot", "instruction": "Can you create a toy robot with articulated arms and legs, a rectangular body, and a round head?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrobot_color = bpy.data.materials.new(name=\"RobotColor\")\nrobot_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.3, 0.7)\nbody.data.materials.append(robot_color)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(robot_color)\n\n# Step 4: Create the Arms\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(x, 0, 1.2), rotation=(0, math.pi/2, 0))\n    arm = bpy.context.object\n    arm.name = f\"Arm {i + 1}\"\n    arm.data.materials.append(robot_color)\n\n# Step 5: Create the Legs\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.7, location=(x, 0, 0.35), rotation=(0, math.pi/2, 0))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(robot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.747442803982041, "unit_n": 6, "param_ratio": 4.833333333333333}
{"id": "540ef1ab-e266-42c1-b5b4-b24041a09464", "name": "Drum Set", "instruction": "Design a drum set with a bass drum, snare drum, two tom-toms, a floor tom, a hi-hat, and two cymbals. Compare the sizes and shapes of each drum and cymbal, ensuring they are proportionate and correctly positioned.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_color = bpy.data.materials.new(name=\"DrumColor\")\ndrum_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for drums\ncymbal_color = bpy.data.materials.new(name=\"CymbalColor\")\ncymbal_color.diffuse_color = (0.8, 0.8, 0.2, 1)  # Yellowish color for cymbals\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.6, location=(0, 0, 0.3))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 1.5, 0.75))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 4: Create the Tom-Toms\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(-0.7, 1.2, 0.9))\ntom_tom1 = bpy.context.object\ntom_tom1.name = \"Tom-Tom 1\"\ntom_tom1.data.materials.append(drum_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0.7, 1.2, 0.9))\ntom_tom2 = bpy.context.object\ntom_tom2.name = \"Tom-Tom 2\"\ntom_tom2.data.materials.append(drum_color)\n\n# Step 5: Create the Floor Tom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.4, location=(1.5, 0, 0.6))\nfloor_tom = bpy.context.object\nfloor_tom.name = \"Floor Tom\"\nfloor_tom.data.materials.append(drum_color)\n\n# Step 6: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(-1.5, 1.5, 1))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(cymbal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(-1.5, 1.5, 1.1))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(cymbal_color)\n\n# Step 7: Create the Cymbals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(1.5, 1.5, 1.2))\ncymbal1 = bpy.context.object\ncymbal1.name = \"Cymbal 1\"\ncymbal1.data.materials.append(cymbal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(-1.5, -1.5, 1.2))\ncymbal2 = bpy.context.object\ncymbal2.name = \"Cymbal 2\"\ncymbal2.data.materials.append(cymbal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.703479801776295, "unit_n": 9, "param_ratio": 6.111111111111111}
{"id": "29c51960-3b44-40da-b613-06140a36933e", "name": "Backpack", "instruction": "Create a backpack. Start with the main compartment, add two shoulder straps, and a front pocket.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\n\n# Step 3: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(x, -1.1, 1.5), rotation=(1.57, 0, 0))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n\n# Step 4: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.25, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.6091973947879556, "unit_n": 4, "param_ratio": 4.0}
{"id": "7f43a3cc-081a-4a8c-b4c2-e7571c385900", "name": "Power Generator", "instruction": "Create a 3D model of a power generator. It should be a compact, rectangular unit with a control panel on one side.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.scale = (1, 0.5, 0.5)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_plane_add(size=0.8, location=(1.01, 0, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (1, 0.5, 0.5)\ncontrol_panel.rotation_euler = (0, 1.5708, 0)  # Rotate 90 degrees to be on the side\ncontrol_panel.data.materials.append(dark_gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "693c81da-ebcd-464c-80e7-cca957fcc31b", "name": "Apple", "instruction": "Could you create a 3D model of an apple? Show it with a bite taken out of it.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\nimport bmesh\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Create a red material for the apple\nred_material = bpy.data.materials.new(name=\"Red\")\nred_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(red_material)\n\n# Step 3: Create the Bite\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0.8, 0, 0))\nbite = bpy.context.object\nbite.name = \"Bite\"\n\n# Boolean modifier to subtract the bite from the apple\nmod_bool = apple.modifiers.new(name=\"Bite Modifier\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bite\n\n# Apply the modifier\nbpy.context.view_layer.objects.active = apple\nbpy.ops.object.modifier_apply(modifier=\"Bite Modifier\")\n\n# Delete the bite object\nbpy.data.objects.remove(bite)\n\n# Step 4: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.1))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Create a brown material for the stem\nbrown_material = bpy.data.materials.new(name=\"Brown\")\nbrown_material.diffuse_color = (0.4, 0.2, 0, 1)  # Brown color\nstem.data.materials.append(brown_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.921319031599502, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "798f229f-a9fe-42c9-87a4-971c5b97f847", "name": "Electrical Transformer", "instruction": "Create a 3D model of an electrical transformer. The transformer should have a central cylindrical core with multiple winding coils around it. Include the primary and secondary terminals on the sides of the core, and position the model to show it mounted on a rectangular base.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncoil_color = bpy.data.materials.new(name=\"Coil Color\")\ncoil_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Copper color\nterminal_color = bpy.data.materials.new(name=\"Terminal Color\")\nterminal_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.0, location=(0, 0, 0.5))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Coils\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0.3 + i * 0.2))\n    coil = bpy.context.object\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(coil_color)\n\n# Step 4: Create the Terminals\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, 0, 1.0))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.data.materials.append(terminal_color)\n\n# Step 5: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.scale[2] = 0.1\nbase.name = \"Base\"\nbase.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.431898413118409, "unit_n": 7, "param_ratio": 5.571428571428571}
{"id": "87d1bbf9-1d50-4f8b-ad38-03b5ea70a46d", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a central container for holding seeds, with small perches around the base. Ensure there's a roof to protect the seeds from the elements. The feeder should be able to hang from a branch or hook.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Central Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perches\nfor i in range(4):\n    angle = math.radians(90 * i)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, -0.4), rotation=(0, 0, angle))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=0.5, location=(0, 0, 0.6))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 5: Create the Hanging Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0, 0.85))\nhanger_base = bpy.context.object\nhanger_base.name = \"Hanger Base\"\n\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 1), major_radius=0.1, minor_radius=0.02)\nhanger_ring = bpy.context.object\nhanger_ring.name = \"Hanger Ring\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.63373012542764, "unit_n": 8, "param_ratio": 3.5}
{"id": "90dd3ba1-ca20-4974-929b-fb4624de89d0", "name": "Guitar", "instruction": "Design a 3D model of a guitar. Compare it with a ukulele in terms of size and string arrangement.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the body\nneck_color = bpy.data.materials.new(name=\"Neck Color\")\nneck_color.diffuse_color = (0.35, 0.16, 0.14, 1)  # Darker brown for the neck\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Guitar Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.2, 0))\nneck = bpy.context.object\nneck.scale[1] = 3  # Scale the neck to be longer\nneck.name = \"Guitar Neck\"\nneck.data.materials.append(neck_color)\n\n# Step 4: Create the Strings\nfor i in range(6):\n    x = -0.15 + i * 0.06\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=3.4, location=(x, 1.2, 0))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = 1.5708  # Rotate the strings to align with the neck\n\n# Step 5: Create the Ukulele for Comparison\n# Ukulele Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.2, location=(2.5, 0, 0))\nukulele_body = bpy.context.object\nukulele_body.name = \"Ukulele Body\"\nukulele_body.data.materials.append(body_color)\n\n# Ukulele Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(2.5, 1, 0))\nukulele_neck = bpy.context.object\nukulele_neck.scale[1] = 2  # Scale the neck to be shorter\nukulele_neck.name = \"Ukulele Neck\"\nukulele_neck.data.materials.append(neck_color)\n\n# Ukulele Strings\nfor i in range(4):\n    x = 2.35 + i * 0.06\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=2.4, location=(x, 1, 0))\n    ukulele_string = bpy.context.object\n    ukulele_string.name = f\"Ukulele String {i + 1}\"\n    ukulele_string.rotation_euler[0] = 1.5708  # Rotate the strings to align with the neck", "color_brightness": "Dark", "verify": "human", "entropy": 3.203878935526793, "unit_n": 14, "param_ratio": 2.7142857142857144}
{"id": "63753f5c-975a-4e70-ba9e-0a9ec7f5fff3", "name": "Blender", "instruction": "Can you create a 3D model of a blender? It should have a base and a container with a lid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.614466703590592, "unit_n": 3, "param_ratio": 5.0}
{"id": "44d2219a-b1fc-4655-858e-b3b7263632bf", "name": "Screwdriver", "instruction": "Create a screwdriver with a simple, straight handle.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.212823471944381, "unit_n": 2, "param_ratio": 10.0}
{"id": "848e542f-2e64-4d2c-840f-7d5fa011defe", "name": "Fedora Hat", "instruction": "Create a 3D model of a fedora hat. It should have a wide brim and a creased crown.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cone_add(radius1=0.75, radius2=0.5, depth=1.2, location=(0, 0, 0.65))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 4: Add Crease to the Crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 1.2))\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.context.object.select_set(True)\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.intersect_boolean(operation='DIFFERENCE')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Smooth the Hat\nbrim.select_set(True)\nbpy.context.view_layer.objects.active = brim\nbpy.ops.object.shade_smooth()\ncrown.select_set(True)\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.shade_smooth()\n\n# Step 6: Join the Brim and Crown\nbpy.ops.object.select_all(action='DESELECT')\nbrim.select_set(True)\ncrown.select_set(True)\nbpy.context.view_layer.objects.active = brim\nbpy.ops.object.join()", "color_brightness": "Dark", "verify": "human", "entropy": 4.1071816754770225, "unit_n": 3, "param_ratio": 5.0}
{"id": "8be328b3-33ef-47d9-a665-7a0430a60774", "name": "Double Bass", "instruction": "Create a double bass for me. It should have a large, hollow body with a curved back, a long neck, and four strings. Include tuning pegs at the top of the neck and an endpin at the bottom for support.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[1] = 0.5  # Flatten the body to make it more like a double bass\nbody.scale[2] = 1.5  # Elongate the body\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=3, location=(0, 0, 2.5))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Strings\nfor i in range(4):\n    x = 0.05 * (i - 1.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=3.5, location=(x, 0, 2.75))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.data.materials.append(wood_color)\n\n# Step 5: Create the Tuning Pegs\nfor i in range(4):\n    x = 0.05 * (i - 1.5)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 4))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(wood_color)\n\n# Step 6: Create the Endpin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, -1.25))\nendpin = bpy.context.object\nendpin.name = \"Endpin\"\nendpin.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.411070198586289, "unit_n": 11, "param_ratio": 2.5454545454545454}
{"id": "6a91f931-3f71-481b-81d8-0474f44e9375", "name": "Pizza Slice", "instruction": "Design a pizza slice. The slice should be triangular with a thin crust. Add a layer of cheese on top.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"CrustColor\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\ncheese_color = bpy.data.materials.new(name=\"CheeseColor\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Yellow color for cheese\n\n# Step 2: Create the Pizza Slice (Crust)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.95, radius2=0, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 12.0}
{"id": "43eac6d0-dfaf-442c-b9e8-4a915d179467", "name": "Ornamental Border", "instruction": "Create an ornamental border that can be used for digital or print designs. The border should have a symmetrical pattern with intricate detailing, suitable for framing documents or artworks.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1.0, 0.84, 0.0, 1)  # Gold color\n\n# Step 2: Create the Border\n# Top and Bottom Borders\nfor y in [1, -1]:\n    for i in range(10):\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(i * 0.2 - 0.9, y, 0))\n        cube = bpy.context.object\n        cube.data.materials.append(gold)\n\n# Left and Right Borders\nfor x in [1, -1]:\n    for i in range(10):\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, i * 0.2 - 0.9, 0))\n        cube = bpy.context.object\n        cube.data.materials.append(gold)\n\n# Add some intricate detailing (simple example with spheres)\nfor y in [1, -1]:\n    for i in range(5):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(i * 0.4 - 0.8, y, 0))\n        sphere = bpy.context.object\n        sphere.data.materials.append(gold)\n\nfor x in [1, -1]:\n    for i in range(5):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, i * 0.4 - 0.8, 0))\n        sphere = bpy.context.object\n        sphere.data.materials.append(gold)", "color_brightness": "Bright", "verify": "human", "entropy": 5.573004866746595, "unit_n": 30, "param_ratio": 0.7}
{"id": "4cae2ab0-b603-48ae-b254-91b0ab664c7a", "name": "Wallpaper Design", "instruction": "Design a wallpaper pattern with repeating geometric shapes. The shapes should be arranged in a regular grid, creating a visually appealing pattern.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the geometric shapes in a grid pattern\nrows = 5\ncols = 5\nspacing = 2.0\n\nfor i in range(rows):\n    for j in range(cols):\n        x = j * spacing\n        y = i * spacing\n        if (i + j) % 2 == 0:\n            bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0))\n            shape = bpy.context.object\n            shape.data.materials.append(blue)\n        else:\n            bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(x, y, 0))\n            shape = bpy.context.object\n            shape.data.materials.append(red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.566802578672062, "unit_n": 2, "param_ratio": 9.0}
{"id": "2a7005d1-1c1c-4190-8c87-0121582b3d80", "name": "Juicer", "instruction": "Create a 3D model of a juicer. It should have a cylindrical body with a conical top for pressing fruits. Include a small spout at the side for pouring the juice.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Conical Top\nbpy.ops.mesh.primitive_cone_add(radius1=1, radius2=0, depth=1, location=(0, 0, 2.5))\ntop = bpy.context.object\ntop.name = \"Top\"\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 1))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.rotation_euler = (0, math.pi / 2, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.59961733628724, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "76486ab8-d2ba-4281-8523-896126dd1fbc", "name": "Pizza", "instruction": "Design a pizza with a thin crust. Add tomato sauce, mozzarella cheese, pepperoni slices, and bell peppers. Create it in a way that it can be easily sliced and served. How would this pizza be used in a family gathering?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for sauce\ncheese_color = bpy.data.materials.new(name=\"Mozzarella Cheese\")\ncheese_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color for bell pepper\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.2, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=4.8, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=4.7, depth=0.05, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(2, 2, 0.2), (-2, -2, 0.2), (2, -2, 0.2), (-2, 2, 0.2), (0, 0, 0.2)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Bell Peppers\nbell_pepper_positions = [(3, 1, 0.2), (-3, -1, 0.2), (1, -3, 0.2), (-1, 3, 0.2)]\nfor i, pos in enumerate(bell_pepper_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=pos)\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.461844070878591, "unit_n": 5, "param_ratio": 8.6}
{"id": "8c495ef4-f69a-4383-8632-6a6f42dddb7e", "name": "Electrical Transformer", "instruction": "Please create a 3D model of an electrical transformer. It should have a rectangular base with cooling fins on the sides. On top, include a cylindrical tank with bushings for high-voltage connections. Add insulators and other necessary components for functionality. The model should be detailed enough to depict a real-world transformer used in electrical distribution.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_grey = bpy.data.materials.new(name=\"Metal Grey\")\nmetal_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal grey color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.5\nbase.data.materials.append(metal_grey)\n\n# Step 3: Create Cooling Fins\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.1, -0.9 + i * 0.3, 1))\n    fin = bpy.context.object\n    fin.name = f\"Fin {i + 1}\"\n    fin.scale[2] = 2\n    fin.data.materials.append(metal_grey)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.1, -0.9 + i * 0.3, 1))\n    fin = bpy.context.object\n    fin.name = f\"Fin {i + 7}\"\n    fin.scale[2] = 2\n    fin.data.materials.append(metal_grey)\n\n# Step 4: Create the Cylindrical Tank\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 2))\ntank = bpy.context.object\ntank.name = \"Tank\"\ntank.data.materials.append(metal_grey)\n\n# Step 5: Create Bushings\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.3 * (i - 1), 0, 2.65))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n    bushing.data.materials.append(metal_grey)\n\n# Step 6: Create Insulators\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(location=(0.3 * (i - 1), 0, 2.5), major_radius=0.1, minor_radius=0.03)\n    insulator = bpy.context.object\n    insulator.name = f\"Insulator {i + 1}\"\n    insulator.data.materials.append(metal_grey)\n\n# Step 7: Create Other Components\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.6, 2.3))\ncomponent = bpy.context.object\ncomponent.name = \"Component\"\ncomponent.data.materials.append(metal_grey)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.731565821197091, "unit_n": 21, "param_ratio": 1.7142857142857142}
{"id": "3e8c692c-4d4a-4c5a-9030-bee3ee637276", "name": "Cake", "instruction": "Construct a 3D model of a cake. It should be round with three layers. Each layer should have a different color: the bottom layer is chocolate, the middle layer is vanilla, and the top layer is strawberry. Add a simple icing on top with a few strawberries as decoration.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate color\nvanilla = bpy.data.materials.new(name=\"Vanilla\")\nvanilla.diffuse_color = (1.0, 0.9, 0.7, 1)  # Vanilla color\nstrawberry = bpy.data.materials.new(name=\"Strawberry\")\nstrawberry.diffuse_color = (1.0, 0.3, 0.3, 1)  # Strawberry color\nicing = bpy.data.materials.new(name=\"Icing\")\nicing.diffuse_color = (1.0, 1.0, 1.0, 1)  # White icing color\nstrawberry_fruit = bpy.data.materials.new(name=\"Strawberry Fruit\")\nstrawberry_fruit.diffuse_color = (0.8, 0.0, 0.0, 1)  # Strawberry fruit color\n\n# Step 2: Create the Bottom Layer (Chocolate)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(chocolate)\n\n# Step 3: Create the Middle Layer (Vanilla)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.4, location=(0, 0, 0.7))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(vanilla)\n\n# Step 4: Create the Top Layer (Strawberry)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.3, location=(0, 0, 1.05))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(strawberry)\n\n# Step 5: Create the Icing on Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.05, location=(0, 0, 1.225))\nicing_layer = bpy.context.object\nicing_layer.name = \"Icing\"\nicing_layer.data.materials.append(icing)\n\n# Step 6: Add Strawberries on Top\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.3))\n    strawberry_obj = bpy.context.object\n    strawberry_obj.name = f\"Strawberry {i + 1}\"\n    strawberry_obj.data.materials.append(strawberry_fruit)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.30772927461137, "unit_n": 12, "param_ratio": 4.083333333333333}
{"id": "62a03d04-dc10-4f69-86ae-be9f82665718", "name": "Bird Feeder", "instruction": "Construct a 3D model of a bird feeder. The feeder should have a cylindrical body with openings for birds to access the food. Include a perch below each opening and a hook on top for hanging. Add a small roof to protect the food from rain.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray metal color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create Openings for Birds\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_circle_add(radius=0.1, location=(x, y, 0.75), rotation=(math.pi/2, 0, 0))\n    opening = bpy.context.object\n    opening.name = f\"Opening {i + 1}\"\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.1)})\n    bpy.ops.object.mode_set(mode='OBJECT')\n    bpy.ops.object.select_all(action='DESELECT')\n    opening.select_set(True)\n    body.select_set(True)\n    bpy.context.view_layer.objects.active = body\n    bpy.ops.object.join()\n\n# Step 4: Create Perches\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 0.5), rotation=(0, angle, 0))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n    perch.data.materials.append(metal_color)\n\n# Step 5: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(0, 0, 1.6), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(metal_color)\n\n# Step 6: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.2, location=(0, 0, 1.7))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.2408646981591875, "unit_n": 11, "param_ratio": 3.909090909090909}
{"id": "3d54ff6c-1344-4856-bddb-e629141bfaba", "name": "Dining Table", "instruction": "Generate a 3D model of a dining table. The table should be rectangular and have four legs. Ensure the table top is smooth and flat. The legs should be straight and evenly spaced.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\n\n# Step 3: Create the Legs\nleg_positions = [(-1.8, -0.9, 0), (1.8, -0.9, 0), (-1.8, 0.9, 0), (1.8, 0.9, 0)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 1  # Height\n    leg.location[2] = 0.5  # Adjust height\n    leg.name = f\"Leg {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1343617096659804, "unit_n": 2, "param_ratio": 2.5}
{"id": "79b3caf6-0777-4b76-ab78-9b9864c72cc2", "name": "Sandwich", "instruction": "Imagine a delicious sandwich. Begin with a slice of bread at the bottom. Add a layer of lettuce, followed by slices of tomato, cheese, and ham. Top it off with another slice of bread. Make sure each ingredient is clearly visible.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nham = bpy.context.object\nham.scale[2] = 0.05\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1344498183675666, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "0c55dc57-90df-4b7d-9070-731423c8ea1d", "name": "Webcam", "instruction": "Create a 3D model of a webcam with a spherical camera and a simple mount.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Camera (Spherical)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.5))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\n\n# Step 3: Create the Mount\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 0.25))\nmount = bpy.context.object\nmount.name = \"Mount\"\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.467424929020406, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "859bd693-8486-435d-a438-cbbbba248d52", "name": "Trash Can", "instruction": "Could you create a 3D model of a trash can? It should have a cylindrical shape with a lid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ntrash_can_body = bpy.context.object\ntrash_can_body.name = \"Trash Can Body\"\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 5.0}
{"id": "864744b8-67b1-4d58-8bad-7b58b82d2e4a", "name": "Guitar Picks", "instruction": "Design a set of guitar picks. They should be small, triangular in shape, and easy to hold.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the guitar picks\npick_color = bpy.data.materials.new(name=\"PickColor\")\npick_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create a single guitar pick\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.1, depth=0.02, location=(0, 0, 0))\npick = bpy.context.object\npick.name = \"Guitar Pick\"\npick.data.materials.append(pick_color)\n\n# Step 3: Duplicate the guitar pick to create a set\nfor i in range(1, 5):\n    new_pick = pick.copy()\n    new_pick.data = pick.data.copy()\n    new_pick.location = (i * 0.3, 0, 0)\n    bpy.context.collection.objects.link(new_pick)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 11.0}
{"id": "29a4f18a-e8e0-4d99-967f-fa10f205147c", "name": "Hat", "instruction": "Design a hat suitable for outdoor use. Ensure it has a wide brim and a snug fit.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Hat Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Hat Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.8, location=(0, 0, 0.45))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.472753664654359, "unit_n": 2, "param_ratio": 7.5}
{"id": "1b2b4edc-22ec-43c7-a185-81a22ee8c821", "name": "Thermometer", "instruction": "Could you help me compare two types of thermometers? One should be a traditional mercury thermometer with a long, thin glass tube, and the other a digital thermometer with a small display screen and a short, flat body.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_color = bpy.data.materials.new(name=\"Glass\")\nglass_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Semi-transparent glass color\nmercury_color = bpy.data.materials.new(name=\"Mercury\")\nmercury_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray mercury color\ndigital_body_color = bpy.data.materials.new(name=\"Digital Body\")\ndigital_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black screen color\n\n# Step 2: Create the Mercury Thermometer\n# Glass tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-1, 0, 1))\nglass_tube = bpy.context.object\nglass_tube.name = \"Glass Tube\"\nglass_tube.data.materials.append(glass_color)\n\n# Mercury inside the tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(-1, 0, 0.1))\nmercury = bpy.context.object\nmercury.name = \"Mercury\"\nmercury.data.materials.append(mercury_color)\n\n# Step 3: Create the Digital Thermometer\n# Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 0, 0.5))\ndigital_body = bpy.context.object\ndigital_body.scale = (0.2, 0.5, 0.1)\ndigital_body.name = \"Digital Body\"\ndigital_body.data.materials.append(digital_body_color)\n\n# Screen\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 0, 0.6))\nscreen = bpy.context.object\nscreen.scale = (0.15, 0.3, 0.05)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4650445710590922, "unit_n": 4, "param_ratio": 9.5}
{"id": "3ea79b76-a06d-4385-8f7f-9f7d64800b1b", "name": "Electrical Transformer", "instruction": "Design a 3D model of an electrical transformer. The transformer has a rectangular housing with multiple cylindrical components on top. It includes several wires and insulators attached to the top components. The sides of the housing have vents for cooling. Ensure to place the transformer on a rectangular base for stability.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_grey = bpy.data.materials.new(name=\"Metal Grey\")\nmetal_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5\nbase.scale[1] = 1\nbase.scale[2] = 0.1\nbase.data.materials.append(metal_grey)\n\n# Step 3: Create the Housing\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nhousing = bpy.context.object\nhousing.name = \"Housing\"\nhousing.scale[0] = 1\nhousing.scale[1] = 0.5\nhousing.scale[2] = 1\nhousing.data.materials.append(metal_grey)\n\n# Step 4: Create the Cylindrical Components on Top\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(-0.5 + i * 0.5, 0, 1.25))\n    component = bpy.context.object\n    component.name = f\"Component {i + 1}\"\n    component.data.materials.append(metal_grey)\n\n# Step 5: Create the Wires and Insulators\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(-0.5 + i * 0.5, 0.2, 1.5))\n    wire = bpy.context.object\n    wire.name = f\"Wire {i + 1}\"\n    wire.rotation_euler[0] = 1.57  # Rotate to horizontal\n    wire.data.materials.append(metal_grey)\n\n# Step 6: Create the Vents on the Sides\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.5 + i * 0.5, 0.55, 0))\n    vent = bpy.context.object\n    vent.name = f\"Vent {i + 1}\"\n    vent.scale[2] = 0.5\n    vent.data.materials.append(metal_grey)\n\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.5 + i * 0.5, -0.55, 0))\n    vent = bpy.context.object\n    vent.name = f\"Vent {i + 4}\"\n    vent.scale[2] = 0.5\n    vent.data.materials.append(metal_grey)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.328580445847022, "unit_n": 14, "param_ratio": 2.2142857142857144}
{"id": "93c69653-04e8-4dc4-a1a6-1a4668b5d2e3", "name": "Picture Frame", "instruction": "Design a rectangular picture frame. It should have a simple border and a transparent front to display the photo.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe_outer = bpy.context.object\nframe_outer.name = \"Frame Outer\"\nframe_outer.scale = (1.1, 1.5, 0.1)\nframe_outer.data.materials.append(frame_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe_inner = bpy.context.object\nframe_inner.name = \"Frame Inner\"\nframe_inner.scale = (1.0, 1.4, 0.1)\nframe_inner.data.materials.append(frame_color)\n\n# Boolean difference to create the border\nmod_bool = frame_outer.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = frame_inner\nbpy.context.view_layer.objects.active = frame_outer\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(frame_inner)\n\n# Step 3: Create the Transparent Front\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.05))\nglass = bpy.context.object\nglass.name = \"Glass\"\nglass.scale = (0.95, 1.35, 1)\n\n# Set transparency\nglass_material = bpy.data.materials.new(name=\"Glass Material\")\nglass_material.use_nodes = True\nnodes = glass_material.node_tree.nodes\nlinks = glass_material.node_tree.links\n\n# Clear default nodes\nfor node in nodes:\n    nodes.remove(node)\n\n# Add Transparent BSDF\nnode_transparent = nodes.new(type='ShaderNodeBsdfTransparent')\nnode_output = nodes.new(type='ShaderNodeOutputMaterial')\nlinks.new(node_transparent.outputs[0], node_output.inputs[0])\n\nglass.data.materials.append(glass_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4412145291060345, "unit_n": 3, "param_ratio": 6.0}
{"id": "43439d77-7558-4def-9fa2-8da4c4f29713", "name": "Dining Table", "instruction": "I need a 3D model of a dining table.\n\n1. The table should be rectangular and large enough to seat six people.\n2. Include four sturdy legs, one at each corner.\n3. Ensure the tabletop is smooth and flat.\n4. Add a small drawer on one side for storage.\n5. Include a decorative edge around the tabletop.\n6. Ensure the table is at a comfortable height for dining.\n7. Add a small shelf underneath the tabletop for additional storage.\n8. Ensure the legs are slightly tapered.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntabletop = bpy.context.object\ntabletop.scale[0] = 2  # Length\ntabletop.scale[1] = 1  # Width\ntabletop.scale[2] = 0.05  # Thickness\ntabletop.name = \"Tabletop\"\ntabletop.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(1.8, 0.9, 0.5), (-1.8, 0.9, 0.5), (1.8, -0.9, 0.5), (-1.8, -0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[0] = 0.8  # Tapered effect\n    leg.scale[1] = 0.8  # Tapered effect\n    leg.data.materials.append(wood_color)\n\n# Step 4: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.05, 0.75))\ndrawer = bpy.context.object\ndrawer.scale[0] = 0.4  # Length\ndrawer.scale[1] = 0.2  # Width\ndrawer.scale[2] = 0.15  # Height\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood_color)\n\n# Step 5: Create the Decorative Edge\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, 1.05))\ndecorative_edge = bpy.context.object\ndecorative_edge.scale[0] = 2.05  # Length\ndecorative_edge.scale[1] = 1.05  # Width\ndecorative_edge.scale[2] = 0.02  # Thickness\ndecorative_edge.name = \"Decorative Edge\"\ndecorative_edge.data.materials.append(wood_color)\n\n# Step 6: Create the Shelf\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.5))\nshelf = bpy.context.object\nshelf.scale[0] = 1.8  # Length\nshelf.scale[1] = 0.8  # Width\nshelf.scale[2] = 0.05  # Thickness\nshelf.name = \"Shelf\"\nshelf.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2486917119785055, "unit_n": 5, "param_ratio": 4.6}
{"id": "31cd42e3-7f18-434d-884e-c649b29999ec", "name": "Eraser Comparison", "instruction": "Compare two erasers. One should be rectangular and flat, while the other should be cylindrical.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Rectangular Eraser\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0))\nrect_eraser = bpy.context.object\nrect_eraser.name = \"Rectangular Eraser\"\nrect_eraser.scale = (1, 0.5, 0.2)\n\n# Step 3: Create the Cylindrical Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(1.5, 0, 0))\ncyl_eraser = bpy.context.object\ncyl_eraser.name = \"Cylindrical Eraser\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6755673254377057, "unit_n": 2, "param_ratio": 4.5}
{"id": "30c4bc09-5547-4f6f-9a77-c1a19db7cb2e", "name": "Apple", "instruction": "Create a basic apple.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Red\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Brown\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 9.5}
{"id": "2784afc2-28e1-4c8b-b2a2-1bd6a737df73", "name": "Light Bulb", "instruction": "Create a light bulb with a round top and a screw base.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbulb_color = bpy.data.materials.new(name=\"BulbColor\")\nbulb_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color for the bulb\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the base\n\n# Step 2: Create the Round Top (Bulb)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(bulb_color)\n\n# Step 3: Create the Screw Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.53415296789408, "unit_n": 2, "param_ratio": 9.5}
{"id": "4b8ca8a0-e5c4-4171-b631-a46d3ab15480", "name": "Wallpaper Pattern", "instruction": "Design a wallpaper pattern with repeating geometric shapes. The shapes should be interconnected and form a continuous, seamless pattern.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the base shape (a hexagon)\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=(0, 0, 0))\nhexagon = bpy.context.object\nhexagon.name = \"Hexagon\"\nhexagon.data.materials.append(color1)\n\n# Step 3: Duplicate and position the hexagons to form a seamless pattern\nfor i in range(-5, 6):\n    for j in range(-5, 6):\n        x_offset = i * 1.5\n        y_offset = j * (1.732 / 2) * 2  # 1.732 is approximately sqrt(3)\n        if i % 2 != 0:\n            y_offset += 1.732 / 2\n        bpy.ops.object.duplicate(linked=False)\n        hexagon_copy = bpy.context.object\n        hexagon_copy.location = (x_offset, y_offset, 0)\n        if (i + j) % 2 == 0:\n            hexagon_copy.data.materials[0] = color1\n        else:\n            hexagon_copy.data.materials[0] = color2\n\n# Step 4: Join all hexagons into one object\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.context.view_layer.objects.active = bpy.context.selected_objects[0]\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.582230309049645, "unit_n": 1, "param_ratio": 16.0}
{"id": "24615314-a5fe-4cae-9e4d-22d0b7c62ffa", "name": "Desktop Computer", "instruction": "Imagine a desktop computer with a large monitor, a separate keyboard, and a mouse. The monitor should have a thin bezel, and the keyboard should have a standard QWERTY layout. The mouse should be ergonomically shaped. The computer tower should be rectangular with a power button on the front.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nmonitor.scale = (2, 0.1, 1.5)\nmonitor.data.materials.append(black)\n\n# Step 3: Create the Monitor Stand\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.8, 0.25))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.scale = (0.1, 0.1, 0.5)\nstand.data.materials.append(black)\n\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.8, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (0.5, 0.1, 0.1)\nbase.data.materials.append(black)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.scale = (1.5, 0.3, 0.05)\nkeyboard.data.materials.append(gray)\n\n# Step 5: Create the Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0.5, -1.5, 0.1))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nmouse.scale = (1, 1.5, 0.5)\nmouse.data.materials.append(gray)\n\n# Step 6: Create the Computer Tower\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, -1, 0.5))\ntower = bpy.context.object\ntower.name = \"Tower\"\ntower.scale = (0.5, 0.5, 1)\ntower.data.materials.append(black)\n\n# Step 7: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(-2, -0.75, 0.75))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\npower_button.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.335854680164669, "unit_n": 7, "param_ratio": 5.571428571428571}
{"id": "4879cf06-9e5c-497c-91b6-c3ce047d47ad", "name": "Umbrella", "instruction": "Design an umbrella with a curved handle. The canopy should be circular when open, with evenly spaced ribs. Add a strap to keep it closed when not in use. Decorate the canopy with a pattern of small dots.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\numbrella_color = bpy.data.materials.new(name=\"Umbrella Color\")\numbrella_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\ndot_color = bpy.data.materials.new(name=\"Dot Color\")\ndot_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=0.1, location=(0, 0, 1))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(umbrella_color)\n\n# Step 3: Create the Ribs\nnum_ribs = 8\nfor i in range(num_ribs):\n    angle = i * (2 * math.pi / num_ribs)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(x / 2, y / 2, 0.5), rotation=(0, angle, 0))\n    rib = bpy.context.object\n    rib.name = f\"Rib {i + 1}\"\n    rib.data.materials.append(umbrella_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(umbrella_color)\n\n# Create the curved part of the handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0.2, -2))\ncurved_handle = bpy.context.object\ncurved_handle.name = \"Curved Handle\"\ncurved_handle.data.materials.append(umbrella_color)\n\n# Step 5: Create the Strap\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.6, -1))\nstrap = bpy.context.object\nstrap.name = \"Strap\"\nstrap.data.materials.append(umbrella_color)\n\n# Step 6: Decorate the Canopy with Dots\nnum_dots = 32\nfor i in range(num_dots):\n    angle = i * (2 * math.pi / num_dots)\n    x = math.cos(angle) * 0.8\n    y = math.sin(angle) * 0.8\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 1.05))\n    dot = bpy.context.object\n    dot.name = f\"Dot {i + 1}\"\n    dot.data.materials.append(dot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.804371000693763, "unit_n": 6, "param_ratio": 7.166666666666667}
{"id": "017b9ba9-63c2-429b-bdbd-b780db25a57f", "name": "Winter Hat", "instruction": "Design a winter hat that fits snugly on the head. It should have a simple, round shape and a small pom-pom on top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the hat\n\npom_pom_color = bpy.data.materials.new(name=\"Pom Pom Color\")\npom_pom_color.diffuse_color = (1, 1, 1, 1)  # White color for the pom-pom\n\n# Step 2: Create the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nhat = bpy.context.object\nhat.name = \"Hat\"\nhat.scale[2] = 0.75  # Flatten the hat a bit\nhat.data.materials.append(hat_color)\n\n# Step 3: Create the Pom-Pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 2))\npom_pom = bpy.context.object\npom_pom.name = \"Pom-Pom\"\npom_pom.data.materials.append(pom_pom_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.475976422302679, "unit_n": 2, "param_ratio": 9.0}
{"id": "313410e2-3d26-46c5-9006-19332876739a", "name": "Birthday Cake", "instruction": "Design a birthday cake. The cake is a round, two-tiered structure. The bottom tier is 10 inches in diameter and 4 inches high, while the top tier is 6 inches in diameter and 4 inches high. Add a few candles on the top tier.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"CakeColor\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown cake color\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow candle color\nflame_color = bpy.data.materials.new(name=\"FlameColor\")\nflame_color.diffuse_color = (1, 0.5, 0, 1)  # Orange flame color\n\n# Step 2: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.127, depth=0.1016, location=(0, 0, 0.0508))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"BottomTier\"\nbottom_tier.data.materials.append(cake_color)\n\n# Step 3: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.0762, depth=0.1016, location=(0, 0, 0.1524))\ntop_tier = bpy.context.object\ntop_tier.name = \"TopTier\"\ntop_tier.data.materials.append(cake_color)\n\n# Step 4: Create the Candles\ncandle_positions = [(0.05, 0.05), (-0.05, 0.05), (0.05, -0.05), (-0.05, -0.05)]\nfor i, (x, y) in enumerate(candle_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.05, location=(x, y, 0.2032))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n    \n    # Create the flame\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.01, location=(x, y, 0.2282))\n    flame = bpy.context.object\n    flame.name = f\"Flame {i + 1}\"\n    flame.data.materials.append(flame_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.281708033986487, "unit_n": 4, "param_ratio": 8.5}
{"id": "244b51e3-1913-445b-a7f2-e49f0bc80fb2", "name": "Cat Bed", "instruction": "Create a cat bed. It should be oval-shaped with raised edges. Include a cushion inside the bed.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the bed\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cushion\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.scale = (1.5, 1, 0.2)\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.1, location=(0, 0, 0.15))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.scale = (1.5, 1, 0.3)\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.9, location=(0, 0, 0.05))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale = (1.4, 0.9, 0.1)\ncushion.data.materials.append(cushion_color)\n\n# Boolean modifier to create the hollow effect for the raised edges\nmod_bool = raised_edges.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bed_base\nbpy.context.view_layer.objects.active = raised_edges\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Move the cushion slightly up to sit inside the bed\ncushion.location.z += 0.05", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.945654319891063, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "0f6bcae9-3169-4e0d-87f1-c0071702477d", "name": "Puzzle Cube", "instruction": "Create a 3D model of a puzzle cube. The cube should be divided into smaller cubes, each capable of rotating independently. Ensure the smaller cubes are arranged in a 3x3x3 grid.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Smaller Cubes\ncube_size = 1.0\ngap = 0.1\nstart = -cube_size - gap\n\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(start + x * (cube_size + gap), start + y * (cube_size + gap), start + z * (cube_size + gap)))\n            cube = bpy.context.object\n            cube.name = f\"Cube_{x}_{y}_{z}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.1111111111111111}
{"id": "8be9da95-3cf3-4ac5-b502-c74f1ea622d7", "name": "Screwdriver", "instruction": "Let's make a 3D model of a screwdriver. It should have a long, cylindrical handle with a textured grip. The shaft should extend from the handle and end in a flathead tip. Ensure the proportions are accurate, and the tip is clearly defined.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Flathead Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\ntip = bpy.context.object\ntip.scale[2] = 0.02  # Flatten the cube to create a flathead tip\ntip.name = \"Flathead Tip\"\ntip.data.materials.append(shaft_color)\n\n# Join the Shaft and Tip\nbpy.ops.object.select_all(action='DESELECT')\nshaft.select_set(True)\ntip.select_set(True)\nbpy.context.view_layer.objects.active = shaft\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.214112114876879, "unit_n": 3, "param_ratio": 8.0}
{"id": "673e438e-bc3e-4fd2-abcd-1c91365eb3bf", "name": "Winter Hat", "instruction": "Create a winter hat with a folded brim and a pom-pom on top. The hat should be plain and without any patterns.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Part of the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nhat = bpy.context.object\nhat.name = \"Hat\"\nhat.scale[2] = 1.2  # Slightly elongate the hat\nhat.data.materials.append(hat_color)\n\n# Step 3: Create the Folded Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.3, location=(0, 0, 0.3))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 4: Create the Pom-Pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2.2))\npom_pom = bpy.context.object\npom_pom.name = \"Pom-Pom\"\npom_pom.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.018012206762714, "unit_n": 3, "param_ratio": 6.0}
{"id": "03566eaf-d3ac-481a-b24e-b2a93aaeda77", "name": "Food Processor", "instruction": "Create a 3D model of a food processor. It should have a cylindrical base with a transparent bowl on top. Include a lid with a feed tube and a set of control buttons on the base.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1, location=(0, 0, 1.25))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 1.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 5: Create the Feed Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0.6, 2.05))\nfeed_tube = bpy.context.object\nfeed_tube.name = \"Feed Tube\"\nfeed_tube.data.materials.append(base_color)\n\n# Step 6: Create the Control Buttons\nbutton_positions = [(-0.5, 0.9, 0.4), (0, 0.9, 0.4), (0.5, 0.9, 0.4)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.836728716645112, "unit_n": 5, "param_ratio": 7.2}
{"id": "6bc8b93a-9d69-4915-84f4-deeda0c8c717", "name": "Toy Car", "instruction": "Design a small toy car with four wheels and a simple body.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-1, 1, 0.5), (1, 1, 0.5), (-1, -1, 0.5), (1, -1, 0.5)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.558289029392079, "unit_n": 2, "param_ratio": 9.5}
{"id": "1bd1acb3-7ddd-4998-be07-1640120c2881", "name": "Geometric Pattern", "instruction": "Create a series of interconnected geometric shapes forming a repeating pattern. Use triangles, squares, and circles in a grid layout. Each shape should be distinct and uniformly spaced.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the grid size and spacing\ngrid_size = 3\nspacing = 2\n\n# Step 2: Create the Shapes\nfor i in range(grid_size):\n    for j in range(grid_size):\n        x = i * spacing\n        y = j * spacing\n        # Create a triangle\n        if (i + j) % 3 == 0:\n            bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(x, y, 0))\n            triangle = bpy.context.object\n            triangle.name = f\"Triangle_{i}_{j}\"\n        # Create a square\n        elif (i + j) % 3 == 1:\n            bpy.ops.mesh.primitive_cube_add(size=1.5, location=(x, y, 0))\n            square = bpy.context.object\n            square.name = f\"Square_{i}_{j}\"\n        # Create a circle\n        else:\n            bpy.ops.mesh.primitive_circle_add(radius=0.75, location=(x, y, 0))\n            circle = bpy.context.object\n            circle.name = f\"Circle_{i}_{j}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9201023280075997, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "2f9c6270-4326-4118-85c9-ed82add8b71d", "name": "Microphone", "instruction": "Design a 3D model of a microphone. It should have a mesh head and a cylindrical body.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metallic)\n\n# Step 3: Create the Mesh Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 1.15))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metallic)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.248964003084472, "unit_n": 2, "param_ratio": 7.0}
{"id": "735be91f-1152-444d-b89b-cf2d4930670f", "name": "Collapsible Water Bottle", "instruction": "Design a collapsible water bottle that can hold up to 500 ml of liquid. It should have a screw-on cap and a loop for easy carrying. When collapsed, it should be compact enough to fit into a pocket.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Bottle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.15, location=(0, 0, 0.075))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(blue)\n\n# Step 3: Create the Collapsible Sections\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.04, minor_radius=0.01, location=(0, 0, 0.05 * (i + 1)))\n    section = bpy.context.object\n    section.name = f\"Section {i + 1}\"\n    section.data.materials.append(blue)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.045, depth=0.02, location=(0, 0, 0.16))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(gray)\n\n# Step 5: Create the Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.06, minor_radius=0.005, location=(0, 0.06, 0.16))\nloop = bpy.context.object\nloop.name = \"Loop\"\nloop.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.413494837845382, "unit_n": 6, "param_ratio": 5.0}
{"id": "19a7a67b-97b1-4467-bf42-3bb247f03f12", "name": "Sofa vs. Loveseat", "instruction": "Compare a sofa and a loveseat. Highlight the differences in their sizes and seating capacities.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\nloveseat_color = bpy.data.materials.new(name=\"Loveseat Color\")\nloveseat_color.diffuse_color = (0.1, 0.1, 0.5, 1)  # Dark blue color\n\n# Step 2: Create the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_base = bpy.context.object\nsofa_base.name = \"Sofa Base\"\nsofa_base.scale = (3, 1, 0.5)\nsofa_base.data.materials.append(sofa_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.25))\nsofa_back = bpy.context.object\nsofa_back.name = \"Sofa Back\"\nsofa_back.scale = (3, 0.1, 0.75)\nsofa_back.data.materials.append(sofa_color)\n\n# Step 3: Create the Loveseat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 3, 0.5))\nloveseat_base = bpy.context.object\nloveseat_base.name = \"Loveseat Base\"\nloveseat_base.scale = (2, 1, 0.5)\nloveseat_base.data.materials.append(loveseat_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 2, 1.25))\nloveseat_back = bpy.context.object\nloveseat_back.name = \"Loveseat Back\"\nloveseat_back.scale = (2, 0.1, 0.75)\nloveseat_back.data.materials.append(loveseat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 6.5}
{"id": "1786b9bf-820c-4a5d-88e6-10cc3af525cc", "name": "Living Room Arrangement", "instruction": "Design a living room arrangement. It should include a sofa, a coffee table, a television stand, and a few decorative items like plants or books. The arrangement should be practical and visually appealing.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\ntable_color = bpy.data.materials.new(name=\"TableColor\")\ntable_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Dark brown color\ntv_stand_color = bpy.data.materials.new(name=\"TVStandColor\")\ntv_stand_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nplant_color = bpy.data.materials.new(name=\"PlantColor\")\nplant_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color\nbook_color = bpy.data.materials.new(name=\"BookColor\")\nbook_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -3, 1))\nsofa_base = bpy.context.object\nsofa_base.name = \"SofaBase\"\nsofa_base.scale = (1.5, 0.5, 0.5)\nsofa_base.data.materials.append(sofa_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -3.75, 1.75))\nsofa_back = bpy.context.object\nsofa_back.name = \"SofaBack\"\nsofa_back.scale = (1.5, 0.1, 0.75)\nsofa_back.data.materials.append(sofa_color)\n\n# Step 3: Create the Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1, 0.5))\ncoffee_table = bpy.context.object\ncoffee_table.name = \"CoffeeTable\"\ncoffee_table.scale = (1, 0.5, 0.1)\ncoffee_table.data.materials.append(table_color)\n\n# Step 4: Create the TV Stand\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1, 0.5))\ntv_stand = bpy.context.object\ntv_stand.name = \"TVStand\"\ntv_stand.scale = (1.5, 0.5, 0.3)\ntv_stand.data.materials.append(tv_stand_color)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1, 1.2))\ntv = bpy.context.object\ntv.name = \"TV\"\ntv.scale = (1, 0.1, 0.6)\ntv.data.materials.append(tv_stand_color)\n\n# Step 5: Create Decorative Items\n# Plant\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(-1, -0.5, 0.25))\nplant_pot = bpy.context.object\nplant_pot.name = \"PlantPot\"\nplant_pot.data.materials.append(table_color)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, depth=0.6, location=(-1, -0.5, 0.75))\nplant = bpy.context.object\nplant.name = \"Plant\"\nplant.data.materials.append(plant_color)\n\n# Books\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, -0.5 + i * 0.2, 0.25))\n    book = bpy.context.object\n    book.name = f\"Book {i + 1}\"\n    book.scale = (0.3, 0.1, 0.05)\n    book.data.materials.append(book_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3810335204045763, "unit_n": 10, "param_ratio": 5.9}
{"id": "19e3a6fa-0763-4bc1-be07-b9f926d32676", "name": "Smartphone", "instruction": "How does a smartphone compare to a traditional landline phone in terms of design and function? Picture a flat, rectangular device with a touch screen that covers most of the front surface.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the smartphone\nsmartphone_color = bpy.data.materials.new(name=\"Smartphone Color\")\nsmartphone_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nsmartphone_body = bpy.context.object\nsmartphone_body.name = \"Smartphone Body\"\nsmartphone_body.scale = (0.3, 0.6, 0.02)  # Flatten the cube to make it rectangular and thin\nsmartphone_body.data.materials.append(smartphone_color)\n\n# Define the color for the screen\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.28, 0.58, 1)  # Slightly smaller than the body to fit within the front surface\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "61707542-cc2b-4581-8159-eafe6778f262", "name": "Picture Frame", "instruction": "Design a simple rectangular picture frame that can hold a standard 4x6 photo. The frame should have a basic stand at the back to allow it to be placed on a flat surface.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brownish color for the frame\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=6.2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.name = \"Outer Frame\"\nouter_frame.data.materials.append(frame_color)\n\nbpy.ops.mesh.primitive_cube_add(size=5.8, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.scale = (1, 0.1, 1.5)\ninner_frame.name = \"Inner Frame\"\ninner_frame.data.materials.append(frame_color)\n\n# Boolean difference to create the frame border\nmod_bool = outer_frame.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_frame\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(inner_frame)\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, -2))\nstand = bpy.context.object\nstand.scale = (0.1, 0.5, 0.3)\nstand.rotation_euler = (0.5, 0, 0)\nstand.name = \"Stand\"\nstand.data.materials.append(frame_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.715955709974649, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "9592a49d-2d0b-4bd8-88f8-2e6a34565ac9", "name": "Sandwich", "instruction": "Hi, I'd like to create a 3D sandwich. Let's start with two slices of bread, each about 6 inches long and 4 inches wide. Inside, add layers of lettuce, tomato slices, and a few slices of cheese. Make sure the ingredients are visible from the sides. For the final touch, place a toothpick with a small olive on top of the sandwich.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.33, 0.42, 0.18, 1)  # Olive green color\ntoothpick_color = bpy.data.materials.new(name=\"Toothpick\")\ntoothpick_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Brown color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale = (3, 2, 0.2)\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nlettuce = bpy.context.object\nlettuce.scale = (3, 2, 0.05)\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.35))\ntomato = bpy.context.object\ntomato.scale = (3, 2, 0.05)\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.45))\ncheese = bpy.context.object\ncheese.scale = (3, 2, 0.05)\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.65))\ntop_bread = bpy.context.object\ntop_bread.scale = (3, 2, 0.2)\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)\n\n# Step 7: Create the Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 1.1))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\ntoothpick.data.materials.append(toothpick_color)\n\n# Step 8: Create the Olive\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 1.55))\nolive = bpy.context.object\nolive.name = \"Olive\"\nolive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.5239131651406486, "unit_n": 7, "param_ratio": 8.428571428571429}
{"id": "2879ec24-1174-45a2-a462-afef118e375e", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. Start with a circular base. Add a layer of tomato sauce. Place evenly spaced slices of pepperoni on top. Add a layer of cheese that covers the entire surface. Finally, add a few leaves of basil as garnish.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown for pizza base\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red for tomato sauce\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.7, 0.2, 0.2, 1)  # Dark red for pepperoni\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 1, 0.8, 1)  # Yellowish for cheese\nbasil_color = bpy.data.materials.new(name=\"Basil Color\")\nbasil_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green for basil\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.15\nfor i in range(num_pepperoni):\n    angle = i * 2 * math.pi / num_pepperoni\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Basil Leaves\nnum_basil = 5\nbasil_radius = 0.1\nfor i in range(num_basil):\n    angle = i * 2 * math.pi / num_basil + math.pi / num_basil  # Offset to avoid overlapping with pepperoni\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=basil_radius, location=(x, y, 0.12))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(1, 0.5, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.077576965774428, "unit_n": 5, "param_ratio": 9.4}
{"id": "c0f56f3b-cb99-4fc8-ba91-19c8eda31f53", "name": "Juicer", "instruction": "Create a cylindrical juicer with a removable top for placing fruits. Include a spout on the side for the juice to flow out.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\njuicer_body_color = bpy.data.materials.new(name=\"Juicer Body Color\")\njuicer_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\njuicer_top_color = bpy.data.materials.new(name=\"Juicer Top Color\")\njuicer_top_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Very light gray color\n\n# Step 2: Create the Juicer Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\njuicer_body = bpy.context.object\njuicer_body.name = \"Juicer Body\"\njuicer_body.data.materials.append(juicer_body_color)\n\n# Step 3: Create the Removable Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 1.15))\njuicer_top = bpy.context.object\njuicer_top.name = \"Juicer Top\"\njuicer_top.data.materials.append(juicer_top_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, -0.5), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(juicer_body_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.200500476453419, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "e529b596-2b31-49c8-a8c8-3ed12f54ec1f", "name": "Tie Clip", "instruction": "Create a 3D model of a tie clip. The tie clip should have a simple, rectangular shape with a smooth surface. Include a small hinge mechanism on the back.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\n\n# Step 2: Create the Main Body of the Tie Clip\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.1, 1, 0.05)  # Scale to make it rectangular\nmain_body.data.materials.append(metal_color)\n\n# Step 3: Create the Hinge Mechanism\n# Hinge Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, -1.1, 0))\nhinge_base = bpy.context.object\nhinge_base.name = \"Hinge Base\"\nhinge_base.data.materials.append(metal_color)\n\n# Hinge Pin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, -1.1, 0.05), rotation=(1.5708, 0, 0))\nhinge_pin = bpy.context.object\nhinge_pin.name = \"Hinge Pin\"\nhinge_pin.data.materials.append(metal_color)\n\n# Hinge Arm\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.1, 0.1))\nhinge_arm = bpy.context.object\nhinge_arm.name = \"Hinge Arm\"\nhinge_arm.scale = (0.05, 0.2, 0.02)  # Scale to make it rectangular\nhinge_arm.data.materials.append(metal_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 2.372555801990429, "unit_n": 4, "param_ratio": 6.5}
{"id": "dfbbe070-b222-4984-a9e7-481115d07f96", "name": "Syringe", "instruction": "Could you create a syringe with a detachable needle?", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsyringe_body_color = bpy.data.materials.new(name=\"Syringe Body Color\")\nsyringe_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Darker gray color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body.data.materials.append(syringe_body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=1.1, location=(0, 0, 0.55))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(syringe_body_color)\n\n# Step 4: Create the Needle Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -0.6))\nneedle_base = bpy.context.object\nneedle_base.name = \"Needle Base\"\nneedle_base.data.materials.append(needle_color)\n\n# Step 5: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, -0.85))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.791377938981543, "unit_n": 4, "param_ratio": 7.5}
{"id": "f8c157a3-d564-4425-8ac5-4af7a6fbd099", "name": "Hat", "instruction": "Design a hat that evokes a sense of adventure. Include a wide brim and a simple band around the base.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nband_color = bpy.data.materials.new(name=\"Band Color\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.1, location=(0, 0, 0.55))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.210130848263957, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "9c1b0267-0be2-4cdf-a044-95d774436129", "name": "Logo Design", "instruction": "Create a simple logo consisting of an intertwined, abstract geometric shape. Use clean lines and balanced proportions.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nlogo_color = bpy.data.materials.new(name=\"LogoColor\")\nlogo_color.diffuse_color = (0.1, 0.5, 0.8, 1)  # Blue color\n\n# Step 2: Create the First Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\nring1 = bpy.context.object\nring1.name = \"Ring1\"\nring1.data.materials.append(logo_color)\n\n# Step 3: Create the Second Ring (Intertwined)\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0), rotation=(math.pi/2, 0, 0))\nring2 = bpy.context.object\nring2.name = \"Ring2\"\nring2.data.materials.append(logo_color)\n\n# Step 4: Create the Third Ring (Intertwined)\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0), rotation=(0, math.pi/2, 0))\nring3 = bpy.context.object\nring3.name = \"Ring3\"\nring3.data.materials.append(logo_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.326484498929199, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "25802dc0-83b1-4132-9446-c38317e87257", "name": "Wallpaper Pattern", "instruction": "Design a wallpaper pattern that includes geometric shapes arranged in a repeating pattern. The shapes should be simple and the pattern should be symmetrical. Use two contrasting colors for the design.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (1, 0, 0, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Function to create a square\ndef create_square(location, color):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    square = bpy.context.object\n    square.data.materials.append(color)\n\n# Function to create a circle\ndef create_circle(location, color):\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, location=location, fill_type='NGON')\n    circle = bpy.context.object\n    circle.data.materials.append(color)\n\n# Step 2: Create the repeating pattern\nfor i in range(5):\n    for j in range(5):\n        x = i * 2\n        y = j * 2\n        if (i + j) % 2 == 0:\n            create_square((x, y, 0), color1)\n        else:\n            create_circle((x, y, 0), color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.086864565991738, "unit_n": 2, "param_ratio": 6.5}
{"id": "97b6a7b7-6383-40fb-8af8-afead45af2e6", "name": "Armchair", "instruction": "Design a 3D model of an armchair. Start with a wide, comfortable seat. Add a backrest that rises up from the seat. Include two armrests on either side. Finally, add four legs to support the chair.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nseat = bpy.context.object\nseat.name = \"Seat\"\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[1] = 0.2  # Make it thinner\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1.5))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2  # Make it thinner\n    armrest.scale[2] = 0.5  # Make it shorter\n\n# Step 5: Create the Legs\nfor i in range(4):\n    x = 0.9 * (i % 2) - 0.45\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.24879753424145, "unit_n": 8, "param_ratio": 2.125}
{"id": "4e0ec3f3-94fe-4f9c-8d72-f5151a2de31a", "name": "Chess Set", "instruction": "Design a 3D model of a chess set. Include all the pieces: king, queen, rooks, knights, bishops, and pawns for both black and white sides. Create a chessboard with alternating light and dark squares. Ensure the pieces are distinguishable in size and shape.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square_material = bpy.data.materials.new(name=\"Dark Square\")\ndark_square_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_square_material = bpy.data.materials.new(name=\"Light Square\")\nlight_square_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square_material)\n        else:\n            square.data.materials.append(dark_square_material)\n\n# Step 3: Create the Chess Pieces\ndef create_piece(name, location, material, scale=(1, 1, 1)):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    piece.scale = scale\n    piece.data.materials.append(material)\n\n# Pawns\nfor i in range(board_size):\n    create_piece(f\"White Pawn {i+1}\", (i * square_size, 1 * square_size, 0.2), white_material)\n    create_piece(f\"Black Pawn {i+1}\", (i * square_size, 6 * square_size, 0.2), black_material)\n\n# Rooks\ncreate_piece(\"White Rook 1\", (0, 0, 0.2), white_material, (1, 1, 2))\ncreate_piece(\"White Rook 2\", (7 * square_size, 0, 0.2), white_material, (1, 1, 2))\ncreate_piece(\"Black Rook 1\", (0, 7 * square_size, 0.2), black_material, (1, 1, 2))\ncreate_piece(\"Black Rook 2\", (7 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 2))\n\n# Knights\ncreate_piece(\"White Knight 1\", (1 * square_size, 0, 0.2), white_material, (1, 1, 1.5))\ncreate_piece(\"White Knight 2\", (6 * square_size, 0, 0.2), white_material, (1, 1, 1.5))\ncreate_piece(\"Black Knight 1\", (1 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 1.5))\ncreate_piece(\"Black Knight 2\", (6 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 1.5))\n\n# Bishops\ncreate_piece(\"White Bishop 1\", (2 * square_size, 0, 0.2), white_material, (1, 1, 1.75))\ncreate_piece(\"White Bishop 2\", (5 * square_size, 0, 0.2), white_material, (1, 1, 1.75))\ncreate_piece(\"Black Bishop 1\", (2 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 1.75))\ncreate_piece(\"Black Bishop 2\", (5 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 1.75))\n\n# Queens\ncreate_piece(\"White Queen\", (3 * square_size, 0, 0.2), white_material, (1, 1, 2.5))\ncreate_piece(\"Black Queen\", (3 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 2.5))\n\n# Kings\ncreate_piece(\"White King\", (4 * square_size, 0, 0.2), white_material, (1, 1, 3))\ncreate_piece(\"Black King\", (4 * square_size, 7 * square_size, 0.2), black_material, (1, 1, 3))", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.518494561821841, "unit_n": 2, "param_ratio": 12.0}
{"id": "71463f9f-9aa6-4e6a-94ba-7a2a78ae6808", "name": "Hammer", "instruction": "Create a hammer with a standard claw and a flat head. The handle should be straight.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood_color)\n\n# Step 3: Create the Hammer Head\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 0.3))\nhead = bpy.context.object\nhead.name = \"Hammer Head\"\nhead.scale[1] = 0.2  # Make it rectangular\nhead.data.materials.append(metal_color)\n\n# Step 4: Create the Claw\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.2, 0, 0.3), rotation=(0, 1.57, 0))\nclaw1 = bpy.context.object\nclaw1.name = \"Claw 1\"\nclaw1.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(-0.2, 0, 0.3), rotation=(0, 1.57, 0))\nclaw2 = bpy.context.object\nclaw2.name = \"Claw 2\"\nclaw2.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.266424997718849, "unit_n": 4, "param_ratio": 8.75}
{"id": "664c9615-0757-4cee-95c7-3ee0786037a9", "name": "Coffee Grinder", "instruction": "Design a coffee grinder with a hopper on top for beans, a grinding mechanism inside, and a container at the bottom for the ground coffee. Include a handle on the side to operate the grinder.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0, depth=0.6, location=(0, 0, 1))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(metal)\n\n# Step 3: Create the Grinding Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.4, location=(0, 0, 0.5))\ngrinding_mechanism = bpy.context.object\ngrinding_mechanism.name = \"Grinding Mechanism\"\ngrinding_mechanism.data.materials.append(metal)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, -0.4))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(wood)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0.4, 0, 0.5), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Create the handle knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.8, 0, 0.5))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.8227622515574913, "unit_n": 5, "param_ratio": 7.4}
{"id": "b2063cf3-41df-4535-b89e-63a27161c653", "name": "Coffee Grinder", "instruction": "Let's design a coffee grinder. Start with a cylindrical base with a detachable hopper on top. The grinder mechanism should be inside, and there's a handle on the side for manual grinding. Add a transparent container at the bottom to collect the ground coffee.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.2)  # Transparent color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=0.8, radius2=0.2, depth=1, location=(0, 0, 2))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(metal)\n\n# Step 4: Create the Grinder Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 1.25))\nmechanism = bpy.context.object\nmechanism.name = \"Mechanism\"\nmechanism.data.materials.append(metal)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.2, 0, 1.25), rotation=(0, 1.5708, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 6: Create the Transparent Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1, location=(0, 0, -0.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(transparent_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.506203457931234, "unit_n": 5, "param_ratio": 7.8}
{"id": "b79aab0b-5792-4582-b331-cb07f7928b1b", "name": "Spice Rack", "instruction": "Design a spice rack with multiple tiers, each capable of holding various sized spice jars, and include a mechanism to easily access the jars at the back.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5\nbase.scale[1] = 0.5\nbase.scale[2] = 0.05\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Tiers\nnum_tiers = 3\ntier_height = 0.3\nfor i in range(num_tiers):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, (i + 1) * tier_height + 0.1))\n    tier = bpy.context.object\n    tier.name = f\"Tier {i + 1}\"\n    tier.scale[0] = 1.5\n    tier.scale[1] = 0.5\n    tier.scale[2] = 0.05\n    tier.data.materials.append(wood_color)\n\n# Step 4: Create the Back Support\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.5, (num_tiers + 1) * tier_height / 2))\nback_support = bpy.context.object\nback_support.name = \"Back Support\"\nback_support.scale[0] = 1.5\nback_support.scale[1] = 0.05\nback_support.scale[2] = (num_tiers + 1) * tier_height / 2\nback_support.data.materials.append(wood_color)\n\n# Step 5: Create the Side Supports\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1) / 2\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, (num_tiers + 1) * tier_height / 2))\n    side_support = bpy.context.object\n    side_support.name = f\"Side Support {i + 1}\"\n    side_support.scale[0] = 0.05\n    side_support.scale[1] = 0.5\n    side_support.scale[2] = (num_tiers + 1) * tier_height / 2\n    side_support.data.materials.append(wood_color)\n\n# Step 6: Create the Mechanism (simple rotating platform for easy access)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, 0.15))\nmechanism = bpy.context.object\nmechanism.name = \"Mechanism\"\nmechanism.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.975762530959213, "unit_n": 6, "param_ratio": 4.333333333333333}
{"id": "9a404a39-ece3-4f33-b6d5-d2b5de8028ab", "name": "Bookshelf", "instruction": "We're going to create a 3D model of a bookshelf. Begin with a rectangular frame that stands upright. Include three shelves evenly spaced within the frame. Make sure the shelves are flat and parallel to the ground. Add a back panel to the bookshelf to provide support.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nframe_width = 1.0\nframe_depth = 0.3\nframe_height = 2.0\nshelf_thickness = 0.05\nnum_shelves = 3\n\n# Step 2: Create the Frame\n# Left side\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-frame_width/2, 0, frame_height/2))\nleft_side = bpy.context.object\nleft_side.scale = (shelf_thickness, frame_depth, frame_height)\nleft_side.name = \"Left Side\"\n\n# Right side\nbpy.ops.mesh.primitive_cube_add(size=1, location=(frame_width/2, 0, frame_height/2))\nright_side = bpy.context.object\nright_side.scale = (shelf_thickness, frame_depth, frame_height)\nright_side.name = \"Right Side\"\n\n# Top side\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, frame_height))\ntop_side = bpy.context.object\ntop_side.scale = (frame_width, frame_depth, shelf_thickness)\ntop_side.name = \"Top Side\"\n\n# Bottom side\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_side = bpy.context.object\nbottom_side.scale = (frame_width, frame_depth, shelf_thickness)\nbottom_side.name = \"Bottom Side\"\n\n# Step 3: Create the Shelves\nfor i in range(1, num_shelves + 1):\n    z = i * (frame_height / (num_shelves + 1))\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (frame_width, frame_depth, shelf_thickness)\n    shelf.name = f\"Shelf {i}\"\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -frame_depth/2, frame_height/2))\nback_panel = bpy.context.object\nback_panel.scale = (frame_width, shelf_thickness, frame_height)\nback_panel.name = \"Back Panel\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.29244910765974, "unit_n": 5, "param_ratio": 4.8}
{"id": "228a1b40-f119-4a36-96ea-dea5074255dc", "name": "Bicycle", "instruction": "Create a 3D model of a bicycle. It should have two wheels connected by a frame. Include a handlebar at the front, a seat at the top, and pedals in the middle connected to the rear wheel by a chain.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(x, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, 0.5), rotation=(0, 0, math.pi/2))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.5, location=(1, 0, 1.25), rotation=(0, math.pi/4, 0))\nframe_part = bpy.context.object\nframe_part.name = \"Frame Part 1\"\nframe_part.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.5, location=(-1, 0, 1.25), rotation=(0, -math.pi/4, 0))\nframe_part = bpy.context.object\nframe_part.name = \"Frame Part 2\"\nframe_part.data.materials.append(gray)\n\n# Step 4: Create the Handlebar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(2, 0, 1.5), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(gray)\n\n# Step 5: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 2))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(gray)\n\n# Step 6: Create the Pedals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 0.5), rotation=(0, 0, math.pi/2))\npedal = bpy.context.object\npedal.name = \"Pedal 1\"\npedal.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 0.5), rotation=(0, math.pi/2, 0))\npedal = bpy.context.object\npedal.name = \"Pedal 2\"\npedal.data.materials.append(gray)\n\n# Step 7: Create the Chain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0.5), rotation=(0, 0, math.pi/2))\nchain = bpy.context.object\nchain.name = \"Chain\"\nchain.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.554826878715961, "unit_n": 10, "param_ratio": 7.5}
{"id": "b5af1ce6-3e38-4ab2-aa17-08c90f64ffcb", "name": "Laundry Basket", "instruction": "Construct a basic laundry basket with a rectangular shape and open sides for ventilation.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base of the Basket\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make it flat\nbase.data.materials.append(basket_color)\n\n# Step 3: Create the Sides of the Basket\n# Front Side\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1, 0.5))\nfront_side = bpy.context.object\nfront_side.name = \"Front Side\"\nfront_side.scale[2] = 0.5  # Make it half height\nfront_side.scale[1] = 0.1  # Make it thin\nfront_side.data.materials.append(basket_color)\n\n# Back Side\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 0.5))\nback_side = bpy.context.object\nback_side.name = \"Back Side\"\nback_side.scale[2] = 0.5  # Make it half height\nback_side.scale[1] = 0.1  # Make it thin\nback_side.data.materials.append(basket_color)\n\n# Left Side\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1, 0, 0.5))\nleft_side = bpy.context.object\nleft_side.name = \"Left Side\"\nleft_side.scale[2] = 0.5  # Make it half height\nleft_side.scale[0] = 0.1  # Make it thin\nleft_side.data.materials.append(basket_color)\n\n# Right Side\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1, 0, 0.5))\nright_side = bpy.context.object\nright_side.name = \"Right Side\"\nright_side.scale[2] = 0.5  # Make it half height\nright_side.scale[0] = 0.1  # Make it thin\nright_side.data.materials.append(basket_color)\n\n# Step 4: Create the Ventilation Holes\n# Front Side Holes\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 1, 0.3 * (i - 1)))\n    hole = bpy.context.object\n    hole.name = f\"Front Hole {i + 1}\"\n    hole.scale[1] = 0.1  # Make it thin\n    hole.data.materials.append(basket_color)\n\n# Back Side Holes\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, -1, 0.3 * (i - 1)))\n    hole = bpy.context.object\n    hole.name = f\"Back Hole {i + 1}\"\n    hole.scale[1] = 0.1  # Make it thin\n    hole.data.materials.append(basket_color)\n\n# Left Side Holes\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(-1, 0, 0.3 * (i - 1)))\n    hole = bpy.context.object\n    hole.name = f\"Left Hole {i + 1}\"\n    hole.scale[0] = 0.1  # Make it thin\n    hole.data.materials.append(basket_color)\n\n# Right Side Holes\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(1, 0, 0.3 * (i - 1)))\n    hole = bpy.context.object\n    hole.name = f\"Right Hole {i + 1}\"\n    hole.scale[0] = 0.1  # Make it thin\n    hole.data.materials.append(basket_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.204118053888915, "unit_n": 17, "param_ratio": 2.411764705882353}
{"id": "8e1f64bd-b2fa-44f9-aad4-7fd5bc1389c8", "name": "Winter Gloves", "instruction": "Design a pair of winter gloves. Each glove should have five fingers and a snug fit around the wrist. \n\nInclude a textured palm area for better grip.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglove_color = bpy.data.materials.new(name=\"Glove Color\")\nglove_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Main Body of the Glove\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\nglove_body = bpy.context.object\nglove_body.name = \"Glove Body\"\nglove_body.data.materials.append(glove_color)\n\n# Step 3: Create the Fingers\nfinger_radius = 0.1\nfinger_length = 0.5\nfinger_positions = [\n    (0.2, 0.4, 0.5),\n    (0.4, 0.2, 0.5),\n    (0.0, 0.5, 0.5),\n    (-0.2, 0.4, 0.5),\n    (-0.4, 0.2, 0.5)\n]\n\nfor i, pos in enumerate(finger_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=finger_radius, depth=finger_length, location=pos, rotation=(1.57, 0, 0))\n    finger = bpy.context.object\n    finger.name = f\"Finger {i + 1}\"\n    finger.data.materials.append(glove_color)\n\n# Step 4: Create the Wrist\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, -0.35))\nwrist = bpy.context.object\nwrist.name = \"Wrist\"\nwrist.data.materials.append(glove_color)\n\n# Step 5: Create the Textured Palm Area\nbpy.ops.mesh.primitive_plane_add(size=0.6, location=(0, 0, 0.25), rotation=(1.57, 0, 0))\npalm = bpy.context.object\npalm.name = \"Palm\"\npalm.data.materials.append(glove_color)\n\n# Duplicate the glove for the pair\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Glove Body'].select_set(True)\nbpy.data.objects['Finger 1'].select_set(True)\nbpy.data.objects['Finger 2'].select_set(True)\nbpy.data.objects['Finger 3'].select_set(True)\nbpy.data.objects['Finger 4'].select_set(True)\nbpy.data.objects['Finger 5'].select_set(True)\nbpy.data.objects['Wrist'].select_set(True)\nbpy.data.objects['Palm'].select_set(True)\nbpy.ops.object.duplicate(linked=False)\nbpy.ops.transform.translate(value=(1.5, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.571043334493356, "unit_n": 4, "param_ratio": 6.0}
{"id": "cb569641-5a89-4f1a-977b-ca7c19ae1535", "name": "Ultrasound Machine", "instruction": "Could you create a 3D model of an ultrasound machine? Please include the main console, display screen, and handheld probe.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nconsole_color = bpy.data.materials.new(name=\"Console Color\")\nconsole_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\nprobe_color = bpy.data.materials.new(name=\"Probe Color\")\nprobe_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Main Console\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nconsole = bpy.context.object\nconsole.name = \"Console\"\nconsole.data.materials.append(console_color)\n\n# Step 3: Create the Display Screen\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(0, 1.1, 2.5))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Handheld Probe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(1.5, 0, 0.5))\nprobe = bpy.context.object\nprobe.name = \"Probe\"\nprobe.data.materials.append(probe_color)\n\n# Create the probe handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(1.5, 0, 1))\nprobe_handle = bpy.context.object\nprobe_handle.name = \"Probe Handle\"\nprobe_handle.data.materials.append(probe_color)\n\n# Create the probe cable\nbpy.ops.curve.primitive_bezier_curve_add(location=(1.5, 0, 0.5))\ncurve = bpy.context.object\ncurve.name = \"Probe Cable\"\ncurve.data.bevel_depth = 0.02\ncurve.data.bevel_resolution = 4\ncurve.data.fill_mode = 'FULL'\ncurve.data.splines[0].bezier_points[0].co = (1.5, 0, 0.5)\ncurve.data.splines[0].bezier_points[1].co = (0.5, 0, 1)\n\n# Assign the probe color to the cable\ncurve.data.materials.append(probe_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.4079295965546614, "unit_n": 5, "param_ratio": 7.0}
{"id": "94b4fe72-2a4a-490a-b7a9-b2cef6ea5bfc", "name": "Coffee Grinder", "instruction": "Create a coffee grinder. It should have a cylindrical body, a hopper on top for beans, and a spout at the bottom for ground coffee. Include a handle on the side for manual grinding.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal_color)\n\n# Step 3: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.2, depth=0.5, location=(0, 0, 1.25))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(metal_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0.6, 0.15), rotation=(math.pi/2, 0, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(metal_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0.7, 0, 0.8), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal_color)\n\n# Create the handle knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1.0, 0, 0.8))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9584491320919946, "unit_n": 5, "param_ratio": 7.2}
{"id": "1a12f1bf-d441-4389-83d0-30df4908dc7e", "name": "Juicer", "instruction": "Design a juicer. It should have a cylindrical body with a spout for pouring juice.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Juicer Body\"\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.1, 0, 1.5), rotation=(0, 1.57, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, 0.25, 0))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Join the Spout to the Body\nbpy.ops.object.select_all(action='DESELECT')\nbody.select_set(True)\nspout.select_set(True)\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.join()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4170822808517824, "unit_n": 2, "param_ratio": 6.5}
{"id": "a725c48c-694c-4bc7-8890-61b3b8a6876a", "name": "Laptop", "instruction": "Create a laptop with a screen, keyboard, and trackpad. Highlight its key features such as portability and processing power.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base (Keyboard part)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05  # Flatten the cube to make it a base\nbase.data.materials.append(gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, -1, 1.1))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.rotation_euler[0] = 1.57  # Rotate the screen to be vertical\nscreen.data.materials.append(black)\n\n# Step 4: Create the Trackpad\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.3, 0.15))\ntrackpad = bpy.context.object\ntrackpad.name = \"Trackpad\"\ntrackpad.scale[2] = 0.02  # Flatten the cube to make it a trackpad\ntrackpad.data.materials.append(black)\n\n# Step 5: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, -0.3, 0.15))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.scale[2] = 0.02  # Flatten the cube to make it a keyboard\nkeyboard.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.7997245137920603, "unit_n": 4, "param_ratio": 6.5}
{"id": "41fe7c1a-f2b3-4fe7-adbd-daaa3ba9e42e", "name": "Sandwich", "instruction": "Create a sandwich. It should have two slices of bread with layers of lettuce, tomato, cheese, and a slice of meat in between.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Lettuce color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Tomato color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Cheese color\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Meat color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "a0f25b72-13e1-4a1b-8455-0f2ddc11cfd4", "name": "Adjustable Wrench", "instruction": "Construct an adjustable wrench. The handle should be about 20 cm long, with a knurled knob for adjusting the jaw size. The jaw should open up to 5 cm wide. Add a small hole at the end of the handle for hanging.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=20, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal_color)\n\n# Step 3: Create the Jaw\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 10.5))\nfixed_jaw = bpy.context.object\nfixed_jaw.scale = (0.5, 2.5, 0.5)\nfixed_jaw.name = \"Fixed Jaw\"\nfixed_jaw.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 2.5, 10.5))\nadjustable_jaw = bpy.context.object\nadjustable_jaw.scale = (0.5, 0.5, 0.5)\nadjustable_jaw.name = \"Adjustable Jaw\"\nadjustable_jaw.data.materials.append(metal_color)\n\n# Step 4: Create the Knurled Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, -2.5, 10.5))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(metal_color)\n\n# Step 5: Create the Hole at the End of the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, -10))\nhole = bpy.context.object\nhole.name = \"Hole\"\nhole.data.materials.append(metal_color)\n\n# Boolean modifier to create the hole\nbool_mod = handle.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = hole\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = handle\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(hole, do_unlink=True)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.674707494979888, "unit_n": 5, "param_ratio": 5.6}
{"id": "2b220ebb-08ad-4319-b693-ae62f37c8261", "name": "Puzzle Cube", "instruction": "Let's design a puzzle cube for kids. The cube should be composed of smaller cubes that can rotate around the central axis. Each face of the cube should be a different color: red, blue, green, yellow, white, and orange.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = {\n    \"Red\": (1, 0, 0, 1),\n    \"Blue\": (0, 0, 1, 1),\n    \"Green\": (0, 1, 0, 1),\n    \"Yellow\": (1, 1, 0, 1),\n    \"White\": (1, 1, 1, 1),\n    \"Orange\": (1, 0.5, 0, 1)\n}\n\n# Create materials\nmaterials = {}\nfor color_name, color_value in colors.items():\n    mat = bpy.data.materials.new(name=color_name)\n    mat.diffuse_color = color_value\n    materials[color_name] = mat\n\n# Step 2: Create the smaller cubes\ncube_size = 0.9\noffset = 1.1\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(x * offset, y * offset, z * offset))\n            small_cube = bpy.context.object\n            small_cube.name = f\"SmallCube_{x}_{y}_{z}\"\n\n# Step 3: Assign colors to each face of the cube\nface_colors = [\n    (\"Red\", (1, 0, 0)),\n    (\"Blue\", (-1, 0, 0)),\n    (\"Green\", (0, 1, 0)),\n    (\"Yellow\", (0, -1, 0)),\n    (\"White\", (0, 0, 1)),\n    (\"Orange\", (0, 0, -1))\n]\n\nfor color_name, normal in face_colors:\n    for x in range(3):\n        for y in range(3):\n            if normal[0] != 0:\n                loc = (normal[0] * offset, x * offset, y * offset)\n            elif normal[1] != 0:\n                loc = (x * offset, normal[1] * offset, y * offset)\n            else:\n                loc = (x * offset, y * offset, normal[2] * offset)\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=loc)\n            face_cube = bpy.context.object\n            face_cube.name = f\"FaceCube_{color_name}_{x}_{y}\"\n            face_cube.data.materials.append(materials[color_name])", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.0210830903825645, "unit_n": 36, "param_ratio": 0.08333333333333333}
{"id": "7f66a071-0c0e-4173-8045-e2316991ab26", "name": "Syringe", "instruction": "What is this? Picture a small, cylindrical syringe with a plunger and a narrow needle at one end.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsyringe_body_color = bpy.data.materials.new(name=\"Syringe Body Color\")\nsyringe_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Very light gray color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body.data.materials.append(syringe_body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.2, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, -0.75))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.274231370687278, "unit_n": 3, "param_ratio": 10.0}
{"id": "12adcedc-2421-4487-a287-5093c9baa8e0", "name": "Wardrobe", "instruction": "Let's design a wardrobe. It should be a tall, rectangular piece of furniture with double doors. Inside, there should be a hanging rod for clothes and several shelves. Add simple handles to the doors.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Wardrobe Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nwardrobe_body = bpy.context.object\nwardrobe_body.name = \"Wardrobe Body\"\nwardrobe_body.scale = (1, 0.5, 2.5)\nwardrobe_body.data.materials.append(wood_color)\n\n# Step 3: Create the Doors\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0.51, 1))\n    door = bpy.context.object\n    door.name = f\"Door {i + 1}\"\n    door.scale = (0.5, 0.05, 2.5)\n    door.data.materials.append(wood_color)\n\n# Step 4: Create the Hanging Rod\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.8, location=(0, -0.4, 1.8), rotation=(0, 1.5708, 0))\nhanging_rod = bpy.context.object\nhanging_rod.name = \"Hanging Rod\"\nhanging_rod.data.materials.append(wood_color)\n\n# Step 5: Create the Shelves\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.4, 0.5 + i * 0.8))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale = (0.9, 0.4, 0.05)\n    shelf.data.materials.append(wood_color)\n\n# Step 6: Create the Door Handles\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.56, 1))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.scale = (0.05, 0.02, 0.1)\n    handle.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2175796255429345, "unit_n": 10, "param_ratio": 2.9}
{"id": "b4483cb4-7693-4391-be84-ba1ac9f29f66", "name": "Pizza", "instruction": "Create a 3D model of a pizza. It should be a round, flat base with a layer of cheese and pepperoni slices on top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.93, 0.76, 0.53, 1)  # Light brown color for dough\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.3, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese Layer\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = 2 * math.pi * i / num_pepperoni\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.07))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.747278828124214, "unit_n": 3, "param_ratio": 10.0}
{"id": "d120d377-4e71-4680-89c1-e867c8c73fb4", "name": "Notebook", "instruction": "Hey there, can you create a 3D model of a notebook for me? The notebook should be rectangular with a spiral binding along one side. Make sure the pages are slightly visible from the side. Add a few lines on the top page to indicate writing lines. The cover should have a simple design with no text or images.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"CoverColor\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\npage_color = bpy.data.materials.new(name=\"PageColor\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nline_color = bpy.data.materials.new(name=\"LineColor\")\nline_color.diffuse_color = (0, 0, 0, 1)  # Black color for the lines\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale = (1, 1.5, 0.05)\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.95, location=(0, 0, -0.05))\npages = bpy.context.object\npages.name = \"Pages\"\npages.scale = (0.95, 1.45, 0.02)\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(location=(-1.05, -0.7 + i * 0.16, 0))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.scale = (0.05, 0.05, 0.05)\n    spiral.rotation_euler = (1.5708, 0, 0)\n\n# Step 5: Add Lines to the Top Page\nfor i in range(5):\n    bpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0.7 - i * 0.3, 0.06))\n    line = bpy.context.object\n    line.name = f\"Line {i + 1}\"\n    line.scale = (0.9, 0.01, 1)\n    line.data.materials.append(line_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.024640161808781, "unit_n": 17, "param_ratio": 1.7647058823529411}
{"id": "0c74eaf3-d077-4074-ba0f-0dfad393d204", "name": "Blender", "instruction": "Describe a blender that is easy to use for making smoothies. It should have a simple control panel with a few buttons and a detachable jug for blending.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray color\njug_color = bpy.data.materials.new(name=\"Jug Color\")\njug_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for buttons\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\njug = bpy.context.object\njug.name = \"Jug\"\njug.data.materials.append(jug_color)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0.9, 0.4))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale[0] = 1.5\npanel.scale[2] = 0.2\npanel.data.materials.append(base_color)\n\n# Step 5: Create the Buttons\nbutton_positions = [(-0.3, 0.9, 0.45), (0, 0.9, 0.45), (0.3, 0.9, 0.45)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.531556055161144, "unit_n": 4, "param_ratio": 7.5}
{"id": "6aea0eb3-66d0-405a-a88c-3c62180a6a83", "name": "Soccer Ball", "instruction": "Craft a 3D model of a soccer ball. It should have a spherical shape with hexagonal and pentagonal patches.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport bmesh\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Soccer Ball Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsoccer_ball = bpy.context.object\nsoccer_ball.name = \"Soccer Ball\"\n\n# Step 3: Create the Patches\n# This step involves creating a UV Sphere and then modifying it to have hexagonal and pentagonal patches\n# For simplicity, we will use a UV Sphere and apply a black and white material to simulate patches\n\n# Define the materials\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Assign materials to the soccer ball\nsoccer_ball.data.materials.append(white)\nsoccer_ball.data.materials.append(black)\n\n# Create a bmesh from the soccer ball\nbm = bmesh.new()\nbm.from_mesh(soccer_ball.data)\n\n# Iterate over the faces and assign materials to create a pattern\nfor face in bm.faces:\n    if len(face.verts) == 5:  # Pentagons\n        face.material_index = 1  # Black\n    else:  # Hexagons\n        face.material_index = 0  # White\n\n# Update the mesh\nbm.to_mesh(soccer_ball.data)\nbm.free()", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 14.0}
{"id": "cefd6601-8e78-4507-9dc9-f396819e37a5", "name": "Sandwich", "instruction": "What does a basic sandwich look like? Include two slices of bread and a filling.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.scale[2] = 0.1  # Make it flat\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "f7dbe16e-6b6a-4934-8ee9-8a9776624298", "name": "Hat", "instruction": "Could you create a hat for me? It should be a simple design with a rounded top and a brim that goes all the way around.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color\n\n# Step 2: Create the Rounded Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ntop = bpy.context.object\ntop.name = \"Hat Top\"\ntop.data.materials.append(hat_color)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.1))\nbrim = bpy.context.object\nbrim.name = \"Hat Brim\"\nbrim.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.183147163984124, "unit_n": 2, "param_ratio": 7.0}
{"id": "1eff03a7-26f6-4258-ad2c-4c9daf1ecf39", "name": "Logo", "instruction": "Design a logo for a tech company. It should incorporate a simple geometric shape and the company name. The logo should be versatile enough to be used on various media, including websites, business cards, and promotional materials.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a simple geometric shape (e.g., a cube)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"LogoCube\"\n\n# Step 3: Create the text for the company name\nbpy.ops.object.text_add(location=(0, 0, 1.5))\ntext = bpy.context.object\ntext.data.body = \"TechCo\"\ntext.name = \"CompanyName\"\n\n# Step 4: Adjust text properties\ntext.data.extrude = 0.1\ntext.data.size = 0.5\ntext.data.align_x = 'CENTER'\ntext.data.align_y = 'CENTER'\n\n# Step 5: Position the text above the cube\ntext.location = (0, 0, 1.5)\n\n# Step 6: Set the material for the cube and text\nmaterial_cube = bpy.data.materials.new(name=\"CubeMaterial\")\nmaterial_cube.diffuse_color = (0.2, 0.6, 0.8, 1)  # Light blue color\ncube.data.materials.append(material_cube)\n\nmaterial_text = bpy.data.materials.new(name=\"TextMaterial\")\nmaterial_text.diffuse_color = (1, 1, 1, 1)  # White color\ntext.data.materials.append(material_text)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 8.5}
{"id": "972851a9-3997-408e-99da-daf670c7f885", "name": "Coffee Grinder", "instruction": "Design a compact coffee grinder with a transparent lid. It should have a simple on/off switch on the side.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.diffuse_color = (1, 1, 1, 0.3)  # Transparent color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.8, location=(0, 0, 0.4))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0.9))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(transparent)\n\n# Step 4: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.55, 0, 0.2))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(black)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.708788067924305, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "0052b522-5e7e-484b-ad2b-87102902b468", "name": "Clarinet", "instruction": "Create a clarinet. It should be long and cylindrical with holes along the body.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body of the Clarinet\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Clarinet Body\"\nbody.data.materials.append(black_material)\n\n# Step 3: Create the Holes\nhole_distance = 0.3\nfor i in range(6):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.02, location=(0, 0.05, 1 + hole_distance * i))\n    hole = bpy.context.object\n    hole.name = f\"Hole {i + 1}\"\n    hole.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the body\n    hole.data.materials.append(black_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.7708541615864135, "unit_n": 7, "param_ratio": 2.142857142857143}
{"id": "eff430fc-163d-4bcf-963e-9185b5303442", "name": "Jump Rope", "instruction": "Design a jump rope. Start with a long, flexible rope. Add handles at each end for grip. Ensure the rope is of a length suitable for skipping.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrope_color = bpy.data.materials.new(name=\"RopeColor\")\nrope_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Rope\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=4, location=(0, 0, 0))\nrope = bpy.context.object\nrope.name = \"Rope\"\nrope.data.materials.append(rope_color)\n\n# Step 3: Create the Handles\n# Handle 1\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, -2.15))\nhandle1 = bpy.context.object\nhandle1.name = \"Handle1\"\nhandle1.data.materials.append(handle_color)\n\n# Handle 2\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 2.15))\nhandle2 = bpy.context.object\nhandle2.name = \"Handle2\"\nhandle2.data.materials.append(handle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.3474573843474715, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "5aadb016-b602-436c-aa19-ec4debbd21f4", "name": "Bird Feeder", "instruction": "Create a 3D model of a bird feeder designed to hang from a tree branch. It should have a cylindrical shape with multiple perches. Include a roof to protect the seeds from rain. The feeder should also have a transparent section to show the seed level.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\ntransparent_material = bpy.data.materials.new(name=\"Transparent\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.3)  # Semi-transparent\n\n# Step 2: Create the Main Cylinder (Feeder Body)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0))\nfeeder_body = bpy.context.object\nfeeder_body.name = \"Feeder Body\"\nfeeder_body.data.materials.append(wood_material)\n\n# Step 3: Create the Transparent Section\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=1, location=(0, 0, 0))\ntransparent_section = bpy.context.object\ntransparent_section.name = \"Transparent Section\"\ntransparent_section.data.materials.append(transparent_material)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 0.75))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_material)\n\n# Step 5: Create the Perches\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, -0.2), rotation=(0, angle, 0))\n    perch = bpy.context.object\n    perch.name = f\"Perch {i + 1}\"\n    perch.data.materials.append(wood_material)\n\n# Step 6: Create the Hanging Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 0.9))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(wood_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.283984209677252, "unit_n": 8, "param_ratio": 4.75}
{"id": "a54df9ba-0b75-4551-92ce-514d861c99c8", "name": "Mechanical Pencil", "instruction": "Create a 3D model of a mechanical pencil. The pencil should have a retractable lead mechanism and an eraser at the top. Include a clip on the side for attaching to a notebook or pocket.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray metal color\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark plastic color\neraser_color = bpy.data.materials.new(name=\"Eraser\")\neraser_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink eraser color\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.75))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(plastic)\n\n# Step 3: Create the Lead\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.2, location=(0, 0, -0.1))\nlead = bpy.context.object\nlead.name = \"Lead\"\nlead.data.materials.append(metal)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 1.55))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(eraser_color)\n\n# Step 5: Create the Clip\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0.05, 0, 0.75))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale = (0.1, 0.01, 0.4)\nclip.rotation_euler = (0, math.radians(90), 0)\nclip.data.materials.append(metal)\n\n# Adjust the clip position\nclip.location.x += 0.05\nclip.location.z += 0.75\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.8743456031308305, "unit_n": 4, "param_ratio": 8.5}
{"id": "8a5a5340-6640-49d6-8c6f-053783ab06de", "name": "Coffee Grinder", "instruction": "Design a 3D model of a coffee grinder. The grinder should have a cylindrical body with a removable lid. Include a handle for manual grinding. The interior should feature grinding blades and a compartment for collecting ground coffee. Ensure the grinder is easy to disassemble for cleaning. The design should be compact for easy storage.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray metal color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.2, 0, 2.3), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 5: Create the Grinding Blades\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 1.5))\nblades = bpy.context.object\nblades.name = \"Blades\"\nblades.data.materials.append(metal)\n\n# Step 6: Create the Compartment\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, 0.25))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.data.materials.append(metal)", "color_brightness": "Bright", "verify": "human", "entropy": 4.246582404100412, "unit_n": 5, "param_ratio": 6.6}
{"id": "df23ca70-6eb2-4803-9ebb-782819697edd", "name": "Toy Car", "instruction": "Create a toy car that is small and fits in the palm of a hand. It should have four wheels and a simple body shape.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nwheel_color = bpy.data.materials.new(name=\"WheelColor\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1.5, 0.75, 0.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-0.75, -0.5, 0), (0.75, -0.5, 0), (-0.75, 0.5, 0), (0.75, 0.5, 0)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=pos, rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.708781722272425, "unit_n": 2, "param_ratio": 9.5}
{"id": "701e274e-7fd4-4f66-8b0e-997e7b69a978", "name": "Coffee Grinder", "instruction": "Create a coffee grinder. It should have a cylindrical body with a crank handle on top. The base should be wide for stability.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 4: Create the Crank Handle\n# Handle base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.1))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal)\n\n# Handle arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.4, location=(0.2, 0, 1.2), rotation=(0, math.pi/2, 0))\nhandle_arm = bpy.context.object\nhandle_arm.name = \"Handle Arm\"\nhandle_arm.data.materials.append(metal)\n\n# Handle knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.4, 0, 1.2))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(metal)", "color_brightness": "Bright", "verify": "human", "entropy": 2.676581652080406, "unit_n": 5, "param_ratio": 6.4}
{"id": "895e80db-2a6b-41f4-8653-84a6a34a9ba5", "name": "Sandwich", "instruction": "Model a sandwich with two slices of bread and visible layers of lettuce, tomato, and cheese in between.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer of lettuce\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make it a layer of tomato\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a layer of cheese\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice of bread\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "8d155ba2-4643-4e33-bb05-bf35ccf19e2b", "name": "Stapler", "instruction": "Could you design a stapler that feels ergonomic and efficient to use?", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base of the Stapler\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1.5, 0.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(dark_gray)\n\n# Step 3: Create the Top Part of the Stapler\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.6))\ntop = bpy.context.object\ntop.scale = (1.5, 0.5, 0.1)\ntop.rotation_euler = (math.radians(10), 0, 0)\ntop.name = \"Top\"\ntop.data.materials.append(light_gray)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, -0.5, 0.25))\nhinge = bpy.context.object\nhinge.rotation_euler = (0, math.radians(90), 0)\nhinge.name = \"Hinge\"\nhinge.data.materials.append(dark_gray)\n\n# Step 5: Create the Staple Ejector\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.45))\nejector = bpy.context.object\nejector.scale = (1.4, 0.4, 0.05)\nejector.name = \"Ejector\"\nejector.data.materials.append(dark_gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.459487272080734, "unit_n": 4, "param_ratio": 6.75}
{"id": "1adc8f1c-c8b5-4963-bd07-f5689dcbfc39", "name": "Geometric Pattern", "instruction": "Design a 3D model of a geometric pattern. The pattern should consist of repeating shapes, such as triangles, squares, or hexagons. Arrange the shapes in a symmetrical and orderly manner. Ensure the pattern is continuous and can be tiled seamlessly.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npattern_color = bpy.data.materials.new(name=\"PatternColor\")\npattern_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the base shape (Hexagon)\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=(0, 0, 0))\nbase_hexagon = bpy.context.object\nbase_hexagon.name = \"BaseHexagon\"\nbase_hexagon.data.materials.append(pattern_color)\n\n# Step 3: Create the pattern by duplicating the base shape\nfor i in range(-2, 3):\n    for j in range(-2, 3):\n        x_offset = i * 1.5\n        y_offset = j * (1.5 * 0.866)  # 0.866 is the approximate height of a hexagon with radius 1\n        if j % 2 != 0:\n            x_offset += 0.75\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (x_offset, y_offset, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.263139955587707, "unit_n": 1, "param_ratio": 11.0}
{"id": "0431596a-70b4-4a1f-9e3c-12475a0ae83e", "name": "Centrifuge", "instruction": "Design a laboratory centrifuge. It should have a rotor with slots for test tubes and a control panel.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n\n# Step 3: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.35))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(dark_gray)\n\n# Step 4: Create the Slots for Test Tubes\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(x, y, 0.45))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(blue)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, 0, 0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.279354013186504, "unit_n": 11, "param_ratio": 3.090909090909091}
{"id": "90cd6408-a643-420e-90c1-0c9fa845ae1a", "name": "Sandwich", "instruction": "Compare two types of sandwiches. One should be a classic ham and cheese sandwich with lettuce and tomato. The other should be a vegetarian option with hummus, cucumber, and avocado.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nham_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\ncheese_color = (0.98, 0.82, 0.22, 1)  # Yellow color for cheese\nlettuce_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\nhummus_color = (0.94, 0.87, 0.73, 1)  # Light beige color for hummus\ncucumber_color = (0.19, 0.55, 0.34, 1)  # Green color for cucumber\navocado_color = (0.36, 0.73, 0.36, 1)  # Light green color for avocado\n\n# Create materials\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\nbread_material = create_material(\"Bread\", bread_color)\nham_material = create_material(\"Ham\", ham_color)\ncheese_material = create_material(\"Cheese\", cheese_color)\nlettuce_material = create_material(\"Lettuce\", lettuce_color)\ntomato_material = create_material(\"Tomato\", tomato_color)\nhummus_material = create_material(\"Hummus\", hummus_color)\ncucumber_material = create_material(\"Cucumber\", cucumber_color)\navocado_material = create_material(\"Avocado\", avocado_color)\n\n# Function to create a sandwich layer\ndef create_layer(location, dimensions, material):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location)\n    layer = bpy.context.object\n    layer.scale = dimensions\n    layer.data.materials.append(material)\n    return layer\n\n# Create Classic Ham and Cheese Sandwich\n# Bread Bottom\ncreate_layer((0, 0, 0), (1, 1, 0.1), bread_material)\n# Ham\ncreate_layer((0, 0, 0.2), (1, 1, 0.1), ham_material)\n# Cheese\ncreate_layer((0, 0, 0.4), (1, 1, 0.1), cheese_material)\n# Lettuce\ncreate_layer((0, 0, 0.6), (1, 1, 0.1), lettuce_material)\n# Tomato\ncreate_layer((0, 0, 0.8), (1, 1, 0.1), tomato_material)\n# Bread Top\ncreate_layer((0, 0, 1), (1, 1, 0.1), bread_material)\n\n# Create Vegetarian Sandwich\n# Bread Bottom\ncreate_layer((2, 0, 0), (1, 1, 0.1), bread_material)\n# Hummus\ncreate_layer((2, 0, 0.2), (1, 1, 0.1), hummus_material)\n# Cucumber\ncreate_layer((2, 0, 0.4), (1, 1, 0.1), cucumber_material)\n# Avocado\ncreate_layer((2, 0, 0.6), (1, 1, 0.1), avocado_material)\n# Bread Top\ncreate_layer((2, 0, 0.8), (1, 1, 0.1), bread_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.07547252763803, "unit_n": 1, "param_ratio": 1.0}
{"id": "d51fa969-1889-491f-a89e-a57bfeaf8cd7", "name": "Thermometer", "instruction": "Create a digital thermometer. It should have a slender body, a small display screen, and a button for turning it on and off. The tip should be slightly pointed for easy use.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\ngrey_material = bpy.data.materials.new(name=\"Grey\")\ngrey_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Thermometer Body\"\nbody.data.materials.append(white_material)\n\n# Step 3: Create the Display Screen\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.05, 0.4))\nscreen = bpy.context.object\nscreen.name = \"Display Screen\"\nscreen.scale = (0.8, 0.1, 0.4)\nscreen.data.materials.append(black_material)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, -0.07, 0.3))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.scale = (1, 0.5, 1)\nbutton.data.materials.append(grey_material)\n\n# Step 5: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0, 0, -0.6))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(white_material)", "color_brightness": "Bright", "verify": "human", "entropy": 4.4329536181205045, "unit_n": 4, "param_ratio": 8.25}
{"id": "f6479600-e746-40a6-8499-500984482c1d", "name": "Solar Panel Array", "instruction": "Let's design a solar panel array. The array should consist of multiple rectangular panels arranged in a grid pattern. Each panel should have a series of parallel lines representing the photovoltaic cells. The panels should be mounted on a frame that tilts them at an angle. The color of the panels is dark with light lines indicating the cells.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_panel = bpy.data.materials.new(name=\"Dark Panel\")\ndark_panel.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the panel\nlight_line = bpy.data.materials.new(name=\"Light Line\")\nlight_line.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light color for the lines\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.rotation_euler = (math.radians(30), 0, 0)  # Tilt the frame\n\n# Step 3: Create the Panels\nrows = 3\ncols = 5\npanel_width = 1.5\npanel_height = 1\nspacing = 0.2\n\nfor i in range(rows):\n    for j in range(cols):\n        x = j * (panel_width + spacing) - (cols - 1) * (panel_width + spacing) / 2\n        y = i * (panel_height + spacing) - (rows - 1) * (panel_height + spacing) / 2\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.05))\n        panel = bpy.context.object\n        panel.scale = (panel_width / 2, panel_height / 2, 1)\n        panel.name = f\"Panel_{i}_{j}\"\n        panel.data.materials.append(dark_panel)\n        panel.parent = frame\n\n        # Step 4: Add Photovoltaic Cells Lines\n        num_lines = 5\n        for k in range(num_lines):\n            line_y = y - panel_height / 2 + (k + 1) * (panel_height / (num_lines + 1))\n            bpy.ops.mesh.primitive_plane_add(size=1, location=(x, line_y, 0.06))\n            line = bpy.context.object\n            line.scale = (panel_width / 2, 0.01, 1)\n            line.name = f\"Line_{i}_{j}_{k}\"\n            line.data.materials.append(light_line)\n            line.parent = frame", "color_brightness": "Dark", "verify": "human", "entropy": 3.8861715802401307, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "383bd46d-be4a-4521-8d49-df9ea4d210e4", "name": "Skateboard", "instruction": "What are the essential features of a skateboard designed for performing tricks? Discuss the shape of the deck, the type of wheels, and the importance of the grip tape.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeck_color = bpy.data.materials.new(name=\"Deck Color\")\ndeck_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale[1] = 0.3  # Make the deck rectangular\ndeck.data.materials.append(deck_color)\n\n# Step 3: Create the Wheels\nwheel_radius = 0.1\nwheel_thickness = 0.05\nwheel_positions = [(-0.8, 0.25, 0), (-0.8, -0.25, 0), (0.8, 0.25, 0), (0.8, -0.25, 0)]\n\nfor pos in wheel_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=wheel_radius, depth=wheel_thickness, location=pos)\n    wheel = bpy.context.object\n    wheel.name = \"Wheel\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate the wheels to be horizontal\n    wheel.data.materials.append(wheel_color)\n\n# Step 4: Create the Grip Tape\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.11))\ngrip_tape = bpy.context.object\ngrip_tape.name = \"Grip Tape\"\ngrip_tape.scale[1] = 0.3  # Make the grip tape rectangular\ngrip_tape.data.materials.append(deck_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.282481228176153, "unit_n": 3, "param_ratio": 6.0}
{"id": "d7daed16-79ad-460c-a3e1-b9c65b485985", "name": "Pet Bowl", "instruction": "Design a pet bowl with a circular shape, about 8 inches in diameter and 3 inches in height. Include a slightly raised rim around the edge.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Clear the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Create the main body of the bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=4, depth=3, location=(0, 0, 1.5))\nbowl_body = bpy.context.object\nbowl_body.name = \"Bowl Body\"\n\n# Create the inner part of the bowl to give it thickness\nbpy.ops.mesh.primitive_cylinder_add(radius=3.8, depth=2.8, location=(0, 0, 1.6))\ninner_part = bpy.context.object\ninner_part.name = \"Inner Part\"\n\n# Use Boolean modifier to subtract the inner part from the bowl body\nmodifier = bowl_body.modifiers.new(name='Boolean', type='BOOLEAN')\nmodifier.operation = 'DIFFERENCE'\nmodifier.object = inner_part\nbpy.context.view_layer.objects.active = bowl_body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner part as it is no longer needed\nbpy.data.objects.remove(inner_part, do_unlink=True)\n\n# Create the raised rim\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 3), major_radius=4.1, minor_radius=0.1)\nrim = bpy.context.object\nrim.name = \"Rim\"\n\n# Optionally, join the rim and the bowl body to form a single object\nbpy.ops.object.select_all(action='DESELECT')\nbowl_body.select_set(True)\nrim.select_set(True)\nbpy.context.view_layer.objects.active = bowl_body\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7784057061401453, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "e80d505d-faa5-486b-926c-e133c4a136bc", "name": "Sandwich", "instruction": "Design a sandwich that includes layers of turkey, lettuce, tomato, and cheese between two slices of whole grain bread.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhole_grain_bread = bpy.data.materials.new(name=\"Whole Grain Bread\")\nwhole_grain_bread.diffuse_color = (0.76, 0.60, 0.42, 1)  # Whole grain bread color\nturkey = bpy.data.materials.new(name=\"Turkey\")\nturkey.diffuse_color = (0.96, 0.87, 0.70, 1)  # Turkey color\nlettuce = bpy.data.materials.new(name=\"Lettuce\")\nlettuce.diffuse_color = (0.36, 0.72, 0.36, 1)  # Lettuce color\ntomato = bpy.data.materials.new(name=\"Tomato\")\ntomato.diffuse_color = (0.80, 0.13, 0.13, 1)  # Tomato color\ncheese = bpy.data.materials.new(name=\"Cheese\")\ncheese.diffuse_color = (0.98, 0.82, 0.22, 1)  # Cheese color\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(whole_grain_bread)\n\n# Step 3: Create the Turkey Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nturkey_layer = bpy.context.object\nturkey_layer.name = \"Turkey\"\nturkey_layer.scale[2] = 0.05\nturkey_layer.data.materials.append(turkey)\n\n# Step 4: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\nlettuce_layer = bpy.context.object\nlettuce_layer.name = \"Lettuce\"\nlettuce_layer.scale[2] = 0.05\nlettuce_layer.data.materials.append(lettuce)\n\n# Step 5: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntomato_layer = bpy.context.object\ntomato_layer.name = \"Tomato\"\ntomato_layer.scale[2] = 0.05\ntomato_layer.data.materials.append(tomato)\n\n# Step 6: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese\"\ncheese_layer.scale[2] = 0.05\ncheese_layer.data.materials.append(cheese)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(whole_grain_bread)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "e4df1368-0483-432e-8ab6-52d3fc4a2f12", "name": "Travel Organizer", "instruction": "How does a travel organizer compare to a regular wallet in terms of compartments and size? Please create a model that shows the differences, focusing on sections for passports, boarding passes, and currencies.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\norganizer_color = bpy.data.materials.new(name=\"OrganizerColor\")\norganizer_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Regular Wallet\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0))\nwallet = bpy.context.object\nwallet.name = \"Regular Wallet\"\nwallet.scale = (1, 0.1, 0.5)\nwallet.data.materials.append(wallet_color)\n\n# Step 3: Create the Travel Organizer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 0))\norganizer = bpy.context.object\norganizer.name = \"Travel Organizer\"\norganizer.scale = (1.5, 0.1, 1)\norganizer.data.materials.append(organizer_color)\n\n# Step 4: Create Compartments for Travel Organizer\n# Passport compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0.2, 0.3))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.scale = (0.4, 0.05, 0.3)\npassport_compartment.data.materials.append(wallet_color)\n\n# Boarding pass compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0.2, -0.1))\nboarding_pass_compartment = bpy.context.object\nboarding_pass_compartment.name = \"Boarding Pass Compartment\"\nboarding_pass_compartment.scale = (0.4, 0.05, 0.2)\nboarding_pass_compartment.data.materials.append(wallet_color)\n\n# Currency compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0.2, -0.5))\ncurrency_compartment = bpy.context.object\ncurrency_compartment.name = \"Currency Compartment\"\ncurrency_compartment.scale = (0.4, 0.05, 0.2)\ncurrency_compartment.data.materials.append(wallet_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.6888794541139363, "unit_n": 5, "param_ratio": 6.0}
{"id": "af91250f-3eab-4117-86d8-c87e70ce15d4", "name": "Chocolate Chip Cookie", "instruction": "Create a 3D model of a chocolate chip cookie. It should be round with a slightly uneven surface. The cookie should have visible chocolate chips scattered across its surface. Compare it to a plain sugar cookie, noting the presence of chocolate chips and a slightly darker color.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie Color\")\ncookie_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Slightly darker color for the cookie\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip Color\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color for chocolate chips\n\n# Step 2: Create the Cookie Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncookie = bpy.context.object\ncookie.name = \"Cookie\"\ncookie.scale[2] = 0.2  # Flatten the sphere to make it look like a cookie\ncookie.data.materials.append(cookie_color)\n\n# Step 3: Add Uneven Surface to Cookie\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=50)\nbpy.ops.object.mode_set(mode='OBJECT')\nfor vertex in cookie.data.vertices:\n    vertex.co.z += random.uniform(-0.05, 0.05)\n\n# Step 4: Create Chocolate Chips\nnum_chips = 30\nfor _ in range(num_chips):\n    x = random.uniform(-0.9, 0.9)\n    y = random.uniform(-0.9, 0.9)\n    z = random.uniform(0.1, 0.2)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n    chip = bpy.context.object\n    chip.name = \"Chocolate Chip\"\n    chip.data.materials.append(chocolate_chip_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.731211839812097, "unit_n": 2, "param_ratio": 9.0}
{"id": "e81c0baf-905b-41e0-a477-dec8c6034f2a", "name": "Picture Frame", "instruction": "Design a picture frame. The frame should be rectangular and able to hold a standard-sized photograph.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1.2, 0.1, 1.6)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (where the photograph will be placed)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (1, 0.05, 1.4)\ninner_frame.location = (0, -0.1, 0)\ninner_frame.data.materials.append(frame_color)\n\n# Step 4: Create the Photograph Area\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nphoto_area = bpy.context.object\nphoto_area.name = \"Photo Area\"\nphoto_area.scale = (0.95, 1.35, 1)\nphoto_area.location = (0, -0.15, 0)\nphoto_area.rotation_euler = (1.5708, 0, 0)\nphoto_area.data.materials.append(frame_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.336564900353125, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "248f9b8f-af71-404c-a0f7-069dccf0fbbe", "name": "Dog Leash", "instruction": "Please create a dog leash. The leash should be 6 feet long with a loop handle and a metal clasp at the other end.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color for the leash\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the metal clasp\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.83, location=(0, 0, 0.915))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.83))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Metal Clasp\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(0, 0, 0.05))\nclasp_body = bpy.context.object\nclasp_body.name = \"ClaspBody\"\nclasp_body.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0, 0))\nclasp_sphere = bpy.context.object\nclasp_sphere.name = \"ClaspSphere\"\nclasp_sphere.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(0, 0, 0.1))\nclasp_pin = bpy.context.object\nclasp_pin.name = \"ClaspPin\"\nclasp_pin.data.materials.append(metal_color)\n\n# Move the clasp to the end of the leash\nfor obj in [clasp_body, clasp_sphere, clasp_pin]:\n    obj.location.z -= 0.915", "color_brightness": "Dark", "verify": "human", "entropy": 3.831803427335174, "unit_n": 5, "param_ratio": 6.8}
{"id": "01d6ccba-d174-46f5-9728-1295fe2266c5", "name": "Backpack", "instruction": "Could you create a 3D model of a backpack? Make sure it has two shoulder straps and a front pocket. Keep it simple and functional.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"Backpack Color\")\nbackpack_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\nstrap_color = bpy.data.materials.new(name=\"Strap Color\")\nstrap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Backpack\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale[0] = 0.6\nmain_body.scale[1] = 0.3\nmain_body.scale[2] = 0.8\nmain_body.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.3))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale[0] = 0.5\nfront_pocket.scale[1] = 0.1\nfront_pocket.scale[2] = 0.4\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.35 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.15, 0.6))\n    strap = bpy.context.object\n    strap.name = f\"Strap {i + 1}\"\n    strap.scale[0] = 0.1\n    strap.scale[1] = 0.05\n    strap.scale[2] = 0.6\n    strap.data.materials.append(strap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8862023141021282, "unit_n": 4, "param_ratio": 5.5}
{"id": "2f66701c-cd59-4d1c-b9ff-bf4d82900364", "name": "Bagel", "instruction": "Generate a 3D model of a bagel. It should have a hole in the center and a slightly uneven surface.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bagel Shape\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\nbagel = bpy.context.object\nbagel.name = \"Bagel\"\n\n# Step 3: Add Subdivision Surface Modifier for a Slightly Uneven Surface\nbpy.ops.object.modifier_add(type='SUBSURF')\nbpy.context.object.modifiers[\"Subdivision\"].levels = 2\nbpy.context.object.modifiers[\"Subdivision\"].render_levels = 2\n\n# Step 4: Apply the Modifier\nbpy.ops.object.modifier_apply(modifier=\"Subdivision\")\n\n# Step 5: Add Displacement Modifier for Uneven Surface\nbpy.ops.object.modifier_add(type='DISPLACE')\ntexture = bpy.data.textures.new(\"DisplaceTexture\", type='CLOUDS')\nbpy.context.object.modifiers[\"Displace\"].texture = texture\nbpy.context.object.modifiers[\"Displace\"].strength = 0.1\n\n# Step 6: Apply the Modifier\nbpy.ops.object.modifier_apply(modifier=\"Displace\")\n\n# Define the color for the bagel\nbagel_color = bpy.data.materials.new(name=\"BagelColor\")\nbagel_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Bagel color\nbagel.data.materials.append(bagel_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.125171537128592, "unit_n": 3, "param_ratio": 4.0}
{"id": "bb8e63eb-75d7-4495-9bbb-fd3ff10613f7", "name": "Drum", "instruction": "Create a 3D model of a drum. It should be cylindrical with a drumhead stretched over the top. Add tuning rods around the sides and a pair of drumsticks.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (1, 1, 1, 1)  # White color\ntuning_rod_color = bpy.data.materials.new(name=\"Tuning Rod Color\")\ntuning_rod_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ndrumstick_color = bpy.data.materials.new(name=\"Drumstick Color\")\ndrumstick_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, 1.525))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tuning Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = (2 * math.pi / num_rods) * i\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(x, y, 0.8))\n    tuning_rod = bpy.context.object\n    tuning_rod.name = f\"Tuning Rod {i + 1}\"\n    tuning_rod.data.materials.append(tuning_rod_color)\n\n# Step 5: Create the Drumsticks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 1), rotation=(0, math.pi/4, 0))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(drumstick_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.076823173362751, "unit_n": 5, "param_ratio": 8.6}
{"id": "4c08bf55-86e5-4819-95fd-4b193db5c6b1", "name": "Table", "instruction": "Can you make a comparison between a rectangular table and a round table in terms of space efficiency?", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntable_color = bpy.data.materials.new(name=\"TableColor\")\ntable_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Medium bright brown color\n\n# Step 2: Create the Rectangular Table\n# Create the top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nrect_table_top = bpy.context.object\nrect_table_top.scale = (1.5, 0.75, 0.1)\nrect_table_top.name = \"RectTableTop\"\nrect_table_top.data.materials.append(table_color)\n\n# Create the legs\nfor i in range(4):\n    x = 1.5 * (i % 2) - 0.75\n    y = 0.75 * (i // 2) - 0.375\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"RectLeg {i + 1}\"\n    leg.data.materials.append(table_color)\n\n# Step 3: Create the Round Table\n# Create the top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(3, 0, 1))\nround_table_top = bpy.context.object\nround_table_top.name = \"RoundTableTop\"\nround_table_top.data.materials.append(table_color)\n\n# Create the legs\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 0.7 * math.cos(angle) + 3\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"RoundLeg {i + 1}\"\n    leg.data.materials.append(table_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.703207472693024, "unit_n": 10, "param_ratio": 2.4}
{"id": "a9b4a43c-0514-4610-8d01-03f45d16593d", "name": "Sofa", "instruction": "Can you model a simple sofa for me?", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.5  # Height\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.2  # Width\nbackrest.scale[2] = 1  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.75  # Height\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "ac9e2693-a249-4e2e-8fbf-37c955422aab", "name": "Exit Sign", "instruction": "Design a 3D model of an exit sign. It should be rectangular with the word \"EXIT\" prominently displayed in bold, uppercase letters. The background should be a contrasting color to ensure high visibility.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport bmesh\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackground_color = bpy.data.materials.new(name=\"Background\")\nbackground_color.diffuse_color = (0, 1, 0, 1)  # Green background\ntext_color = bpy.data.materials.new(name=\"Text\")\ntext_color.diffuse_color = (1, 1, 1, 1)  # White text\n\n# Step 2: Create the Rectangular Background\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbackground = bpy.context.object\nbackground.name = \"Background\"\nbackground.scale = (2, 0.1, 1)\nbackground.data.materials.append(background_color)\n\n# Step 3: Create the Text\nbpy.ops.object.text_add(location=(-1.5, 0, 0.5))\ntext = bpy.context.object\ntext.name = \"Exit Text\"\ntext.data.body = \"EXIT\"\ntext.data.align_x = 'CENTER'\ntext.data.size = 0.5\ntext.data.extrude = 0.1\ntext.data.materials.append(text_color)\n\n# Convert text to mesh\nbpy.ops.object.convert(target='MESH')\n\n# Adjust text position\ntext.location = (0, 0.1, 0)\n\n# Join text to background\nbpy.context.view_layer.objects.active = background\ntext.select_set(True)\nbpy.ops.object.join()", "color_brightness": "Bright", "verify": "human", "entropy": 3.1584999290755356, "unit_n": 2, "param_ratio": 8.5}
{"id": "692f5fe8-76b7-4bf1-a819-fa05e2854f56", "name": "Chess Piece", "instruction": "Design a chess piece for me. The piece should be 3 inches tall and have a detailed, recognizable design as either a king, queen, rook, bishop, knight, or pawn.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the base of the chess piece (king)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the body of the king\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the head of the king\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(0, 0, 1.85))\nhead = bpy.context.object\nhead.name = \"Head\"\n\n# Step 5: Create the cross on top of the king\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 2.2))\ncross_base = bpy.context.object\ncross_base.name = \"Cross Base\"\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 2.3))\ncross_vertical = bpy.context.object\ncross_vertical.scale[2] = 3\ncross_vertical.name = \"Cross Vertical\"\n\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 2.3))\ncross_horizontal = bpy.context.object\ncross_horizontal.scale[0] = 3\ncross_horizontal.rotation_euler[2] = math.pi / 2\ncross_horizontal.name = \"Cross Horizontal\"\n\n# Step 6: Combine all parts into a single object\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\nbody.select_set(True)\nhead.select_set(True)\ncross_base.select_set(True)\ncross_vertical.select_set(True)\ncross_horizontal.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()\ncombined = bpy.context.object\ncombined.name = \"King\"\n\n# Scale the king to 3 inches tall (Blender units default to meters, so scale to 0.0762 meters)\ncombined.scale = (0.0762 / 2.5, 0.0762 / 2.5, 0.0762 / 2.5)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.683226994372097, "unit_n": 6, "param_ratio": 4.333333333333333}
{"id": "1f7acf78-43b9-4ac7-bffd-6f640e80ed43", "name": "Desk Organizer", "instruction": "Could you generate a 3D model of a desk organizer? It should have multiple compartments for holding pens, pencils, and other office supplies. Include a section for sticky notes and a small drawer at the bottom. The overall design should be compact and functional for a standard office desk.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Flatten the cube to make the base\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Pen/Pencil Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.5 + i * 0.5, 0.5, 0.75))\n    compartment = bpy.context.object\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.scale[2] = 1.5  # Tall compartments for pens/pencils\n    compartment.data.materials.append(wood_color)\n\n# Step 4: Create the Sticky Notes Section\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.75, 0.5, 0.55))\nsticky_notes_section = bpy.context.object\nsticky_notes_section.name = \"Sticky Notes Section\"\nsticky_notes_section.scale[2] = 0.3  # Shorter compartment for sticky notes\nsticky_notes_section.data.materials.append(wood_color)\n\n# Step 5: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.75, 0.25))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.scale[2] = 0.25  # Flat drawer at the bottom\ndrawer.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6401519507212425, "unit_n": 6, "param_ratio": 3.5}
{"id": "6685e568-663d-4115-bb1e-26e567405109", "name": "Desktop Computer", "instruction": "Compare a modern desktop computer to an old-fashioned one. The modern version should have a sleek, flat screen, a compact keyboard, and a wireless mouse. The old-fashioned version should include a bulky CRT monitor, a large tower, and a wired keyboard and mouse.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmodern_color = bpy.data.materials.new(name=\"Modern Color\")\nmodern_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for modern components\nold_fashioned_color = bpy.data.materials.new(name=\"Old Fashioned Color\")\nold_fashioned_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for old-fashioned components\n\n# Step 2: Create Modern Desktop Computer\n\n# Modern Flat Screen\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, 0, 1))\nmodern_screen = bpy.context.object\nmodern_screen.scale = (1.5, 0.1, 1)\nmodern_screen.name = \"Modern Screen\"\nmodern_screen.data.materials.append(modern_color)\n\n# Modern Compact Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, -1, 0.2))\nmodern_keyboard = bpy.context.object\nmodern_keyboard.scale = (1, 0.3, 0.05)\nmodern_keyboard.name = \"Modern Keyboard\"\nmodern_keyboard.data.materials.append(modern_color)\n\n# Modern Wireless Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(2.5, -1.2, 0.1))\nmodern_mouse = bpy.context.object\nmodern_mouse.name = \"Modern Mouse\"\nmodern_mouse.data.materials.append(modern_color)\n\n# Step 3: Create Old-Fashioned Desktop Computer\n\n# Old-Fashioned CRT Monitor\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, 0, 1))\ncrt_monitor = bpy.context.object\ncrt_monitor.scale = (1, 1, 0.8)\ncrt_monitor.name = \"CRT Monitor\"\ncrt_monitor.data.materials.append(old_fashioned_color)\n\n# Old-Fashioned Tower\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-3, -1, 0.5))\ntower = bpy.context.object\ntower.scale = (0.5, 1, 1.5)\ntower.name = \"Tower\"\ntower.data.materials.append(old_fashioned_color)\n\n# Old-Fashioned Wired Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, -1, 0.2))\nold_keyboard = bpy.context.object\nold_keyboard.scale = (1.5, 0.5, 0.05)\nold_keyboard.name = \"Old Keyboard\"\nold_keyboard.data.materials.append(old_fashioned_color)\n\n# Old-Fashioned Wired Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-1.5, -1.2, 0.1))\nold_mouse = bpy.context.object\nold_mouse.name = \"Old Mouse\"\nold_mouse.data.materials.append(old_fashioned_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.8419161150113315, "unit_n": 7, "param_ratio": 5.428571428571429}
{"id": "92abb57a-9744-4bfd-b483-34e3cbf3d795", "name": "Coffee Mug", "instruction": "Envision a coffee mug that brings warmth and comfort. It should have a simple cylindrical shape with a handle large enough for three fingers. The mug should be plain with no patterns or decorations.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmug_color = bpy.data.materials.new(name=\"Mug Color\")\nmug_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Mug\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nmug = bpy.context.object\nmug.name = \"Mug\"\nmug.data.materials.append(mug_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.15, location=(1.2, 0, 0.75), rotation=(1.5708, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mug_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.6733018707864415, "unit_n": 2, "param_ratio": 9.0}
{"id": "a1892096-ec40-40d2-b50b-acb4476f25b2", "name": "Violin", "instruction": "Create a 3D model of a violin. The violin should have a hollow wooden body, a neck with four strings, and a scroll at the top. Include the f-holes on the body and a bridge to support the strings. The design should be suitable for a classical music instrument.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden color\n\n# Step 2: Create the Violin Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Violin Body\"\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0.35, 0))\nneck = bpy.context.object\nneck.scale[1] = 4\nneck.name = \"Neck\"\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Scroll\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.75, 0))\nscroll = bpy.context.object\nscroll.name = \"Scroll\"\nscroll.data.materials.append(wood_color)\n\n# Step 5: Create the Strings\nfor i in range(4):\n    x = 0.015 * (i - 1.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.002, depth=1, location=(x, 0.35, 0))\n    string = bpy.context.object\n    string.rotation_euler[0] = math.pi / 2\n    string.name = f\"String {i + 1}\"\n\n# Step 6: Create the Bridge\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0, 0.05))\nbridge = bpy.context.object\nbridge.scale[0] = 0.1\nbridge.scale[1] = 0.02\nbridge.name = \"Bridge\"\nbridge.data.materials.append(wood_color)\n\n# Step 7: Create the F-Holes\nfor i in range(2):\n    x = 0.15 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_plane_add(size=0.05, location=(x, 0, 0.01))\n    f_hole = bpy.context.object\n    f_hole.rotation_euler[0] = math.pi / 2\n    f_hole.name = f\"F-Hole {i + 1}\"\n    f_hole.data.materials.append(wood_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.7692107579165994, "unit_n": 10, "param_ratio": 3.1}
{"id": "d50ac0d7-fdf3-4613-ae1d-4a51dd755ab2", "name": "Geometric Pattern", "instruction": "Develop a geometric pattern. Use triangles, circles, and squares. Arrange them in a repeating sequence that forms a visually appealing design.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the geometric pattern\nspacing = 2\n\nfor i in range(3):\n    # Create a triangle\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(i * spacing, 0, 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(red)\n    \n    # Create a circle\n    bpy.ops.mesh.primitive_circle_add(radius=1, location=(i * spacing, spacing, 0))\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(green)\n    \n    # Create a square\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(i * spacing, 2 * spacing, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7016337271040447, "unit_n": 9, "param_ratio": 3.2222222222222223}
{"id": "5d7cc0ac-73aa-4e29-b286-c5c903dea9be", "name": "Blood Pressure Cuff", "instruction": "Create a blood pressure cuff with a cylindrical shape that can wrap around an arm. Include a small rectangular screen for displaying readings and a tube connecting the cuff to a hand pump.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncuff_color = bpy.data.materials.new(name=\"Cuff Color\")\ncuff_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntube_color = bpy.data.materials.new(name=\"Tube Color\")\ntube_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color\n\n# Step 2: Create the Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0))\ncuff = bpy.context.object\ncuff.name = \"Cuff\"\ncuff.data.materials.append(cuff_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 0.1))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0.5, 0, -0.6), rotation=(math.pi/2, 0, 0))\ntube = bpy.context.object\ntube.name = \"Tube\"\ntube.data.materials.append(tube_color)\n\n# Step 5: Create the Hand Pump\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, -0.5, -0.6))\nhand_pump = bpy.context.object\nhand_pump.name = \"Hand Pump\"\nhand_pump.data.materials.append(tube_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.1274871347949036, "unit_n": 4, "param_ratio": 9.0}
{"id": "8965658c-d708-4502-9f9e-7b2cd4358868", "name": "Power Socket", "instruction": "Create a 3D model of a power socket. It should be a rectangular plate with two or three plug holes.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Rectangular Plate\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nplate = bpy.context.object\nplate.name = \"Plate\"\nplate.scale[2] = 0.1  # Flatten the cube to make it a plate\nplate.data.materials.append(white)\n\n# Step 3: Create Plug Holes\n# First Plug Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(-0.4, 0, 0.05), rotation=(1.5708, 0, 0))\nplug_hole_1 = bpy.context.object\nplug_hole_1.name = \"Plug Hole 1\"\n\n# Second Plug Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 0.05), rotation=(1.5708, 0, 0))\nplug_hole_2 = bpy.context.object\nplug_hole_2.name = \"Plug Hole 2\"\n\n# Third Plug Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.4, 0, 0.05), rotation=(1.5708, 0, 0))\nplug_hole_3 = bpy.context.object\nplug_hole_3.name = \"Plug Hole 3\"\n\n# Step 4: Apply Boolean Modifiers to Create Holes in the Plate\nmod_1 = plate.modifiers.new(name=\"Boolean 1\", type='BOOLEAN')\nmod_1.operation = 'DIFFERENCE'\nmod_1.object = plug_hole_1\n\nmod_2 = plate.modifiers.new(name=\"Boolean 2\", type='BOOLEAN')\nmod_2.operation = 'DIFFERENCE'\nmod_2.object = plug_hole_2\n\nmod_3 = plate.modifiers.new(name=\"Boolean 3\", type='BOOLEAN')\nmod_3.operation = 'DIFFERENCE'\nmod_3.object = plug_hole_3\n\nbpy.context.view_layer.objects.active = plate\nbpy.ops.object.modifier_apply(modifier=\"Boolean 1\")\nbpy.ops.object.modifier_apply(modifier=\"Boolean 2\")\nbpy.ops.object.modifier_apply(modifier=\"Boolean 3\")\n\n# Delete the plug hole objects\nbpy.data.objects.remove(plug_hole_1, do_unlink=True)\nbpy.data.objects.remove(plug_hole_2, do_unlink=True)\nbpy.data.objects.remove(plug_hole_3, do_unlink=True)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.560001331441954, "unit_n": 4, "param_ratio": 8.25}
{"id": "3cc497b6-a816-4b8b-a367-bbf882b2388c", "name": "Patterned Tile", "instruction": "Create a patterned tile with geometric shapes arranged in a repetitive manner.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Tile Base\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ntile_base = bpy.context.object\ntile_base.name = \"Tile Base\"\n\n# Step 3: Create Geometric Shapes\n# Circle\nbpy.ops.mesh.primitive_circle_add(radius=0.3, location=(-0.5, -0.5, 0.01))\ncircle = bpy.context.object\ncircle.name = \"Circle\"\ncircle.data.materials.append(blue)\n\n# Square\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0.5, 0.5, 0.01))\nsquare = bpy.context.object\nsquare.name = \"Square\"\nsquare.data.materials.append(red)\n\n# Triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.3, depth=0.01, location=(0.5, -0.5, 0.01))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(blue)\n\n# Hexagon\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.3, depth=0.01, location=(-0.5, 0.5, 0.01))\nhexagon = bpy.context.object\nhexagon.name = \"Hexagon\"\nhexagon.data.materials.append(red)\n\n# Step 4: Duplicate and Arrange Shapes\nfor i in range(3):\n    for j in range(3):\n        if i == 0 and j == 0:\n            continue\n        bpy.ops.object.select_all(action='DESELECT')\n        bpy.context.view_layer.objects.active = circle\n        circle.select_set(True)\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (-0.5 + i, -0.5 + j, 0.01)\n\n        bpy.context.view_layer.objects.active = square\n        square.select_set(True)\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (0.5 + i, 0.5 + j, 0.01)\n\n        bpy.context.view_layer.objects.active = triangle\n        triangle.select_set(True)\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (0.5 + i, -0.5 + j, 0.01)\n\n        bpy.context.view_layer.objects.active = hexagon\n        hexagon.select_set(True)\n        bpy.ops.object.duplicate(linked=False)\n        bpy.context.object.location = (-0.5 + i, 0.5 + j, 0.01)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.616548006863129, "unit_n": 5, "param_ratio": 6.8}
{"id": "77c4696c-f5bf-453c-84de-e59df71d6ff3", "name": "Decorative Wall Art", "instruction": "Let's design a piece of decorative wall art. The piece should be a rectangular frame with a geometric pattern inside. The pattern should consist of interlocking shapes in various colors. Include a hanging mechanism on the back.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ncolor3 = bpy.data.materials.new(name=\"Color3\")\ncolor3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (1, 0.1, 1.5)\n\n# Step 3: Create the Geometric Pattern\n# Interlocking shapes (cubes for simplicity)\nfor i in range(-1, 2):\n    for j in range(-1, 2):\n        bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i * 0.6, 0, j * 0.6))\n        shape = bpy.context.object\n        shape.name = f\"Shape_{i}_{j}\"\n        if (i + j) % 3 == 0:\n            shape.data.materials.append(color1)\n        elif (i + j) % 3 == 1:\n            shape.data.materials.append(color2)\n        else:\n            shape.data.materials.append(color3)\n\n# Step 4: Create the Hanging Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, -0.15, 1.6))\nhanger = bpy.context.object\nhanger.name = \"Hanger\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3173168761246274, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "53a30339-8f28-457c-8ae3-102defe928cc", "name": "Kitchen Blender", "instruction": "Design a kitchen blender. The base should be cylindrical with a height of 10 inches and a diameter of 7 inches. On top of the base, attach a transparent blending jar with a 6-cup capacity, marked with measurement lines. The jar should have a removable lid and an integrated handle. Include a set of control buttons on the base for different blending speeds and functions.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=3.5, depth=10, location=(0, 0, 5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Blending Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=8, location=(0, 0, 14))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=0.5, location=(0, 0, 18.25))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(3.5, 0, 14))\nhandle = bpy.context.object\nhandle.scale = (0.2, 0.5, 2)\nhandle.name = \"Handle\"\nhandle.data.materials.append(jar_color)\n\n# Step 6: Create the Control Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 2.5, 2 + i))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.481202022500764, "unit_n": 7, "param_ratio": 6.142857142857143}
{"id": "85528530-400d-4c59-84e9-fde01185cef0", "name": "Drum", "instruction": "Create a drum with a cylindrical body and a taut drumhead. Include drumsticks.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\ndrumstick_color = bpy.data.materials.new(name=\"Drumstick Color\")\ndrumstick_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Drumsticks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, 0, 1))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(drumstick_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.572639480690772, "unit_n": 4, "param_ratio": 7.25}
{"id": "21677f5d-07e6-440e-af3d-b8a6c9ff6126", "name": "Laptop", "instruction": "Create a 3D model of a laptop. The laptop should have a thin profile with a hinged screen that can be opened and closed. Include a keyboard with clearly defined keys and a touchpad below the keyboard. ", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlaptop_body_color = bpy.data.materials.new(name=\"Laptop Body\")\nlaptop_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nkeyboard_color = bpy.data.materials.new(name=\"Keyboard\")\nkeyboard_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen\")\nscreen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Base of the Laptop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale = (1.5, 1, 0.05)\nbase.name = \"Base\"\nbase.data.materials.append(laptop_body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.05, 0.6))\nscreen = bpy.context.object\nscreen.scale = (1.5, 0.05, 0.9)\nscreen.rotation_euler = (math.pi / 2, 0, 0)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nkeyboard = bpy.context.object\nkeyboard.scale = (1.4, 0.6, 0.02)\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(keyboard_color)\n\n# Step 5: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.5, 0.15))\ntouchpad = bpy.context.object\ntouchpad.scale = (0.4, 0.3, 0.01)\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(keyboard_color)\n\n# Step 6: Create the Keys\nfor i in range(10):\n    for j in range(4):\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(-1.2 + i * 0.3, -0.3 + j * 0.3, 0.17))\n        key = bpy.context.object\n        key.scale = (0.1, 0.1, 0.01)\n        key.name = f\"Key_{i}_{j}\"\n        key.data.materials.append(keyboard_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.35520446620189, "unit_n": 44, "param_ratio": 0.7954545454545454}
{"id": "7ea91c34-85c0-4e0f-89b9-33103f5d0788", "name": "Light Bulb", "instruction": "Construct a 3D model of a light bulb with a round shape and a screw base.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_material = bpy.data.materials.new(name=\"Glass\")\nglass_material.diffuse_color = (1, 1, 1, 0.5)  # Semi-transparent white for the bulb\n\nmetal_material = bpy.data.materials.new(name=\"Metal\")\nmetal_material.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray for the screw base\n\n# Step 2: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.75))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(glass_material)\n\n# Step 3: Create the Screw Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_material)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.557053611331508, "unit_n": 2, "param_ratio": 9.5}
{"id": "52db5c4b-4fb8-43d9-8a3c-0e02d8d4d75d", "name": "Wallpaper Pattern", "instruction": "Design a wallpaper pattern that incorporates repeating geometric shapes without any gradients or shading. The pattern should convey a sense of rhythm and continuity when applied to a large surface.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the repeating geometric shapes\nfor i in range(5):\n    for j in range(5):\n        # Create a red cube\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(i * 2, j * 2, 0))\n        cube = bpy.context.object\n        cube.name = f\"Cube_{i}_{j}\"\n        cube.data.materials.append(color1)\n        \n        # Create a blue sphere\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(i * 2 + 1, j * 2 + 1, 0))\n        sphere = bpy.context.object\n        sphere.name = f\"Sphere_{i}_{j}\"\n        sphere.data.materials.append(color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.464361155823566, "unit_n": 50, "param_ratio": 0.36}
{"id": "12723e53-af61-4e62-a72f-7d27edd35816", "name": "Bicycle", "instruction": "Design a bicycle. It has a triangular frame with two wheels of equal size. The front wheel is attached to a fork with handlebars for steering. The rear wheel is connected to a chain and pedals for propulsion. There is a seat post with an adjustable saddle. The bicycle has brakes on both wheels.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nrubber_color = bpy.data.materials.new(name=\"Rubber\")\nrubber_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark rubber color\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(x, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(rubber_color)\n\n# Step 3: Create the Frame (Triangular)\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (4, 0.1, 1.5)\nframe.data.materials.append(metal_color)\n\n# Step 4: Create the Fork\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(2, 0, 1))\nfork = bpy.context.object\nfork.name = \"Fork\"\nfork.rotation_euler = (math.pi / 2, 0, 0)\nfork.data.materials.append(metal_color)\n\n# Step 5: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(2, -0.5, 1.5))\nhandlebars = bpy.context.object\nhandlebars.name = \"Handlebars\"\nhandlebars.rotation_euler = (0, math.pi / 2, 0)\nhandlebars.data.materials.append(metal_color)\n\n# Step 6: Create the Seat Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 1.5))\nseat_post = bpy.context.object\nseat_post.name = \"Seat Post\"\nseat_post.rotation_euler = (math.pi / 2, 0, 0)\nseat_post.data.materials.append(metal_color)\n\n# Step 7: Create the Saddle\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 2))\nsaddle = bpy.context.object\nsaddle.name = \"Saddle\"\nsaddle.scale = (1, 0.5, 0.2)\nsaddle.data.materials.append(metal_color)\n\n# Step 8: Create the Pedals\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0))\n    pedal = bpy.context.object\n    pedal.name = f\"Pedal {i + 1}\"\n    pedal.data.materials.append(metal_color)\n\n# Step 9: Create the Chain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(-2, 0, 0.5))\nchain = bpy.context.object\nchain.name = \"Chain\"\nchain.rotation_euler = (0, math.pi / 2, 0)\nchain.data.materials.append(metal_color)\n\n# Step 10: Create the Brakes\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.5, 0.5))\n    brake = bpy.context.object\n    brake.name = f\"Brake {i + 1}\"\n    brake.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8189165556557647, "unit_n": 12, "param_ratio": 4.25}
{"id": "a0273911-c501-42e8-8211-f33af2e5c265", "name": "Ice Cream Scoop", "instruction": "Can you outline the design process for an ice cream scoop that ensures easy release of ice cream without the need for a defrosting mechanism?", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for metal\n\n# Step 2: Create the Scoop\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\nscoop = bpy.context.object\nscoop.name = \"Scoop\"\nscoop.data.materials.append(metal)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, -1.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 4: Create the Release Mechanism\n# Create the release bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -1.25))\nrelease_bar = bpy.context.object\nrelease_bar.name = \"Release Bar\"\nrelease_bar.data.materials.append(metal)\n\n# Create the release lever\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.1, -0.5))\nrelease_lever = bpy.context.object\nrelease_lever.name = \"Release Lever\"\nrelease_lever.data.materials.append(metal)\n\n# Position the release lever\nrelease_lever.rotation_euler[1] = 1.57  # Rotate 90 degrees around Y-axis\n\n# Parent the release bar to the handle\nrelease_bar.parent = handle\n\n# Parent the release lever to the release bar\nrelease_lever.parent = release_bar\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.956294900822382, "unit_n": 4, "param_ratio": 5.75}
{"id": "b5141a0f-867a-4cbb-9b65-2f389ed6677d", "name": "Webcam", "instruction": "Create a small, spherical webcam with a lens in the center. Add a USB cable extending from the back.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Webcam Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\nwebcam_body = bpy.context.object\nwebcam_body.name = \"Webcam Body\"\nwebcam_body.data.materials.append(black)\n\n# Step 3: Create the Lens\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.4, 0))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.data.materials.append(gray)\n\n# Step 4: Create the USB Cable\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, -0.75, 0), rotation=(math.pi/2, 0, 0))\nusb_cable = bpy.context.object\nusb_cable.name = \"USB Cable\"\nusb_cable.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 4.200608917494037, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "01606ef1-0558-42c2-acea-c19009afec11", "name": "Logo Design", "instruction": "Envision a logo for a tech company. It should incorporate elements of innovation and connectivity.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create a Sphere (representing innovation)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Innovation Sphere\"\nsphere.data.materials.append(blue)\n\n# Step 3: Create a Torus (representing connectivity)\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"Connectivity Torus\"\ntorus.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.627564508011673, "unit_n": 2, "param_ratio": 9.5}
{"id": "95cb8924-760d-49bb-9cec-e6425fe7204e", "name": "Fedora Hat", "instruction": "Can you generate a 3D model of a fedora hat? Think about its classic brim and indented crown. It should exude a sense of sophistication and timeless style.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nfedora_color = bpy.data.materials.new(name=\"Fedora Color\")\nfedora_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(fedora_color)\n\n# Step 3: Create the Crown Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.6, location=(0, 0, 0.35))\ncrown_base = bpy.context.object\ncrown_base.name = \"Crown Base\"\ncrown_base.data.materials.append(fedora_color)\n\n# Step 4: Create the Indented Crown\nbpy.ops.mesh.primitive_cone_add(radius1=0.9, radius2=0.6, depth=0.6, location=(0, 0, 0.95))\ncrown_indent = bpy.context.object\ncrown_indent.name = \"Crown Indent\"\ncrown_indent.data.materials.append(fedora_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.351279260809424, "unit_n": 3, "param_ratio": 7.0}
{"id": "71c14810-d77d-4bb8-a4ee-8ecb9848a6f7", "name": "Whiteboard Marker", "instruction": "Create a whiteboard marker and add a simple design on the cap. The body should be cylindrical with a conical tip.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Marker Body\"\nbody.data.materials.append(white)\n\n# Step 3: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.2, location=(0, 0, 1.1))\ntip = bpy.context.object\ntip.name = \"Marker Tip\"\ntip.data.materials.append(black)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, -0.15))\ncap = bpy.context.object\ncap.name = \"Marker Cap\"\ncap.data.materials.append(black)\n\n# Step 5: Add a Simple Design on the Cap\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0.1, -0.15))\ndesign1 = bpy.context.object\ndesign1.name = \"Cap Design 1\"\ndesign1.data.materials.append(white)\n\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, -0.1, -0.15))\ndesign2 = bpy.context.object\ndesign2.name = \"Cap Design 2\"\ndesign2.data.materials.append(white)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.71933818782363, "unit_n": 5, "param_ratio": 6.8}
{"id": "9cb32038-be37-4deb-9068-2d63c069bbd7", "name": "Dog Leash", "instruction": "Design a 3D model of a dog leash. It should have a handle and a clip for attaching to a collar.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, -1))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -2.05))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.data.materials.append(clip_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(0, 0, -2.15), rotation=(1.57, 0, 0))\nclip_ring = bpy.context.object\nclip_ring.name = \"Clip Ring\"\nclip_ring.data.materials.append(clip_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.074803449757757, "unit_n": 4, "param_ratio": 9.25}
{"id": "ecd103a1-b548-47e3-83ed-0e54856e2168", "name": "Paper Clip Holder", "instruction": "Could you create a 3D model of a paper clip holder? Make it a small, round container that can hold a bunch of paper clips.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the holder\nholder_color = bpy.data.materials.new(name=\"Holder Color\")\nholder_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base of the Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(holder_color)\n\n# Step 3: Create the Walls of the Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.2, location=(0, 0, 0.7))\nwalls = bpy.context.object\nwalls.name = \"Walls\"\nwalls.data.materials.append(holder_color)\n\n# Step 4: Hollow out the Walls\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.2, location=(0, 0, 0.7))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Inner Cylinder\"\n\n# Boolean modifier to hollow out the walls\nbool_mod = walls.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_cylinder\n\nbpy.context.view_layer.objects.active = walls\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.441179908450605, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "41d78af9-229a-4558-9686-933edae345fc", "name": "Tablet", "instruction": "Develop a tablet. It has a large screen on the front, a camera on the back, and a thin bezel.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray for the screen\nbezel_color = bpy.data.materials.new(name=\"Bezel Color\")\nbezel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray for the bezel\ncamera_color = bpy.data.materials.new(name=\"Camera Color\")\ncamera_color.diffuse_color = (0, 0, 0, 1)  # Black for the camera\n\n# Step 2: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscreen = bpy.context.object\nscreen.scale = (1, 0.05, 1.5)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 3: Create the Bezel\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, 0))\nbezel = bpy.context.object\nbezel.scale = (1.05, 0.05, 1.55)\nbezel.name = \"Bezel\"\nbezel.data.materials.append(bezel_color)\n\n# Step 4: Create the Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, -0.06, 1.4))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(camera_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.6476586539927203, "unit_n": 3, "param_ratio": 9.0}
{"id": "b196eec4-5837-40c0-88fa-f9048bdda35c", "name": "Smartphone Case", "instruction": "What decorative elements can be added to a smartphone case to enhance its appearance?", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\nlogo_color = bpy.data.materials.new(name=\"Logo Color\")\nlogo_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Smartphone Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncase = bpy.context.object\ncase.name = \"Smartphone Case\"\ncase.scale = (0.5, 1, 0.1)\ncase.data.materials.append(case_color)\n\n# Step 3: Create a Simple Pattern (e.g., a circle)\nbpy.ops.mesh.primitive_circle_add(radius=0.2, location=(0, 0.5, 0.11))\npattern = bpy.context.object\npattern.name = \"Pattern\"\npattern.data.materials.append(pattern_color)\n\n# Step 4: Create a Logo (e.g., a smaller cube)\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.5, 0.11))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.data.materials.append(logo_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.17041007742404, "unit_n": 3, "param_ratio": 9.0}
{"id": "d8d4a43d-ba1d-45d7-9129-2ef0f854de7e", "name": "Logo", "instruction": "Design a logo that features a simple, stylized tree.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the trunk\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the leaves\n\n# Step 2: Create the Trunk\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\ntrunk = bpy.context.object\ntrunk.name = \"Trunk\"\ntrunk.data.materials.append(brown)\n\n# Step 3: Create the Leaves (Stylized as a Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 1.5))\nleaves = bpy.context.object\nleaves.name = \"Leaves\"\nleaves.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.085076152070114, "unit_n": 2, "param_ratio": 9.5}
{"id": "3024b97e-50eb-4b44-acdc-06122735e695", "name": "Wind Turbine", "instruction": "Design a wind turbine with three blades. The tower should be tall and cylindrical, and the nacelle should house the rotor and gearbox.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntower_color = bpy.data.materials.new(name=\"Tower Color\")\ntower_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (1, 1, 1, 1)  # White color\nnacelle_color = bpy.data.materials.new(name=\"Nacelle Color\")\nnacelle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Tower\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=10, location=(0, 0, 5))\ntower = bpy.context.object\ntower.name = \"Tower\"\ntower.data.materials.append(tower_color)\n\n# Step 3: Create the Nacelle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 10.5))\nnacelle = bpy.context.object\nnacelle.name = \"Nacelle\"\nnacelle.data.materials.append(nacelle_color)\n\n# Step 4: Create the Blades\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    bpy.ops.mesh.primitive_plane_add(size=4, location=(math.cos(angle) * 2, math.sin(angle) * 2, 10.5))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.rotation_euler = (0, math.radians(15), angle)\n    blade.data.materials.append(blade_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.7217472740095228, "unit_n": 5, "param_ratio": 5.6}
{"id": "6c0e06e5-cfac-4c90-b212-cc6381ae11b7", "name": "Stethoscope", "instruction": "Create a 3D model of a stethoscope. It should have earpieces connected to a long tube that splits into two at the end, leading to a chest piece.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Earpieces\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 0, 1.8))\n    earpiece = bpy.context.object\n    earpiece.name = f\"Earpiece {i + 1}\"\n    earpiece.data.materials.append(black)\n\n# Step 3: Create the Tubes\n# Upper part of the tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.5, location=(0, 0, 1.05))\nupper_tube = bpy.context.object\nupper_tube.name = \"Upper Tube\"\nupper_tube.data.materials.append(black)\n\n# Split part of the tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, 0.55))\nsplit_tube = bpy.context.object\nsplit_tube.name = \"Split Tube\"\nsplit_tube.data.materials.append(black)\n\n# Lower part of the tube\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(x, 0, 0.05), rotation=(math.pi/4, 0, 0))\n    lower_tube = bpy.context.object\n    lower_tube.name = f\"Lower Tube {i + 1}\"\n    lower_tube.data.materials.append(black)\n\n# Step 4: Create the Chest Piece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0, -0.45))\nchest_piece = bpy.context.object\nchest_piece.name = \"Chest Piece\"\nchest_piece.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.3929063068376655, "unit_n": 7, "param_ratio": 4.571428571428571}
{"id": "69f26239-edae-44da-b69c-e59a63b306b7", "name": "Keyboard", "instruction": "Decorate a keyboard with colorful keycaps.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0, 1, 1),  # Magenta\n    (0, 1, 1, 1),  # Cyan\n    (1, 0.5, 0, 1),  # Orange\n    (0.5, 0, 1, 1)  # Purple\n]\n\n# Step 2: Create the Keyboard Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.1))\nkeyboard_base = bpy.context.object\nkeyboard_base.name = \"Keyboard Base\"\nkeyboard_base.scale = (5, 2, 0.1)\n\n# Step 3: Create the Keycaps\nrows = 5\ncols = 12\nkey_width = 0.4\nkey_height = 0.4\nkey_depth = 0.2\n\nfor row in range(rows):\n    for col in range(cols):\n        x = col * (key_width + 0.05) - (cols * (key_width + 0.05)) / 2 + key_width / 2\n        y = row * (key_height + 0.05) - (rows * (key_height + 0.05)) / 2 + key_height / 2\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.1))\n        keycap = bpy.context.object\n        keycap.name = f\"Keycap {row * cols + col + 1}\"\n        keycap.scale = (key_width / 2, key_height / 2, key_depth / 2)\n        color = colors[(row * cols + col) % len(colors)]\n        mat = bpy.data.materials.new(name=f\"Color {row * cols + col + 1}\")\n        mat.diffuse_color = color\n        keycap.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.29545016042813, "unit_n": 2, "param_ratio": 4.5}
{"id": "1d7c5a63-3afa-4bf9-8e2a-08906b7e6911", "name": "Wall Mural", "instruction": "Design a wall mural with a nature-inspired theme. Include elements like trees, mountains, and a river. Use earthy tones to create a soothing atmosphere.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntree_green = bpy.data.materials.new(name=\"Tree Green\")\ntree_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Earthy green color\nmountain_gray = bpy.data.materials.new(name=\"Mountain Gray\")\nmountain_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for mountains\nriver_blue = bpy.data.materials.new(name=\"River Blue\")\nriver_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for river\nearth_brown = bpy.data.materials.new(name=\"Earth Brown\")\nearth_brown.diffuse_color = (0.36, 0.25, 0.2, 1)  # Brown color for tree trunks\n\n# Step 2: Create the Trees\nfor i in range(3):\n    x = i * 2 - 2\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(x, 0, 0.5))\n    trunk = bpy.context.object\n    trunk.name = f\"Tree Trunk {i + 1}\"\n    trunk.data.materials.append(earth_brown)\n    \n    bpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1, location=(x, 0, 1.5))\n    leaves = bpy.context.object\n    leaves.name = f\"Tree Leaves {i + 1}\"\n    leaves.data.materials.append(tree_green)\n\n# Step 3: Create the Mountains\nfor i in range(2):\n    x = i * 4 - 2\n    bpy.ops.mesh.primitive_cone_add(radius1=2, depth=3, location=(x, -5, 1.5))\n    mountain = bpy.context.object\n    mountain.name = f\"Mountain {i + 1}\"\n    mountain.data.materials.append(mountain_gray)\n\n# Step 4: Create the River\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, -2.5, 0))\nriver = bpy.context.object\nriver.name = \"River\"\nriver.scale[1] = 0.2\nriver.data.materials.append(river_blue)", "color_brightness": "Dark", "verify": "human", "entropy": 3.187141184370285, "unit_n": 9, "param_ratio": 4.333333333333333}
{"id": "c2dda01b-a66c-4566-83ea-7c64d3fd336d", "name": "Geometric Pattern", "instruction": "Create a 3D model of a repeating geometric pattern. Use hexagons arranged in a honeycomb structure. Each hexagon should be 1 unit in diameter. Ensure the pattern tiles seamlessly in all directions.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Function to create a hexagon\ndef create_hexagon(name, location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.5, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.name = name\n\n# Step 2: Create the Honeycomb Pattern\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5\n        y = row * math.sqrt(3)\n        if col % 2 == 1:\n            y += math.sqrt(3) / 2\n        create_hexagon(f\"Hexagon_{row}_{col}\", (x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.300046508744158, "unit_n": 1, "param_ratio": 3.0}
{"id": "08b4ebdd-eebc-400b-863a-1dbd4b171757", "name": "Smartphone", "instruction": "Design a smartphone and describe how it makes you feel when you hold it in your hand. The smartphone should have a rectangular shape, a large touchscreen, and minimal physical buttons.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color for the screen\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the body\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.4, 0.8, 0.02)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Buttons\nbutton_positions = [(0.42, 0, 0), (-0.42, 0, 0), (0, 0.82, 0)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.02, location=(pos[0], pos[1], pos[2]))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.rotation_euler = (1.5708, 0, 0)\n    button.data.materials.append(body_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.9846080155025225, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "fed32194-4db9-43ef-88eb-6289a5354b63", "name": "Hammer", "instruction": "Design a 3D model of a hammer with a claw for nail removal on one side of the head.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood_color)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 0.35))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[0] = 1.5  # Make the head longer\nhead.data.materials.append(metal_color)\n\n# Step 4: Create the Claw\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.225, 0, 0.35), rotation=(math.pi/2, 0, 0))\nclaw1 = bpy.context.object\nclaw1.name = \"Claw 1\"\nclaw1.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.375, 0, 0.35), rotation=(math.pi/2, 0, 0))\nclaw2 = bpy.context.object\nclaw2.name = \"Claw 2\"\nclaw2.data.materials.append(metal_color)\n\n# Adjust the claw orientation\nclaw1.rotation_euler[2] = math.pi / 4\nclaw2.rotation_euler[2] = -math.pi / 4", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4792722019346174, "unit_n": 4, "param_ratio": 8.75}
{"id": "4c802482-6b64-4b6c-ac2c-55c09deba323", "name": "Surge Protector", "instruction": "Design a surge protector with eight outlets and indicator lights for power and surge protection status.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Body of the Surge Protector\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale[0] = 4  # Length\nbody.scale[1] = 1  # Width\nbody.scale[2] = 0.2  # Height\nbody.name = \"Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Outlets\nfor i in range(8):\n    x = -3.5 + i  # Position outlets along the length of the body\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, 0, 0.15))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(black)\n\n# Step 4: Create the Indicator Lights\n# Power indicator light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-3.5, 0.6, 0.2))\npower_light = bpy.context.object\npower_light.name = \"Power Light\"\npower_light.data.materials.append(green)\n\n# Surge protection indicator light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-3.5, -0.6, 0.2))\nsurge_light = bpy.context.object\nsurge_light.name = \"Surge Light\"\nsurge_light.data.materials.append(red)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.045992939732975, "unit_n": 11, "param_ratio": 2.8181818181818183}
{"id": "19c62232-8c1b-4ef2-8515-3e8f6ced74a2", "name": "Blood Pressure Monitor", "instruction": "Create a blood pressure monitor. It should have an arm cuff, a digital display, and a tube connecting the cuff to the display. The display should show systolic and diastolic readings, along with a pulse rate.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Arm Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0))\ncuff = bpy.context.object\ncuff.name = \"Arm Cuff\"\ncuff.data.materials.append(gray)\n\n# Step 3: Create the Digital Display\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(1.5, 0, 0.3))\ndisplay = bpy.context.object\ndisplay.name = \"Digital Display\"\ndisplay.data.materials.append(black)\n\n# Step 4: Add Text to the Display\nbpy.ops.object.text_add(location=(1.5, 0, 0.6))\ntext = bpy.context.object\ntext.data.body = \"120/80\\n75 BPM\"\ntext.data.align_x = 'CENTER'\ntext.data.align_y = 'CENTER'\ntext.data.extrude = 0.02\ntext.rotation_euler = (0, 0, 0)\ntext.scale = (0.1, 0.1, 0.1)\ntext.data.materials.append(blue)\n\n# Step 5: Create the Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0.75, 0, 0.1), rotation=(0, math.pi/4, 0))\ntube = bpy.context.object\ntube.name = \"Tube\"\ntube.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.545453671529104, "unit_n": 4, "param_ratio": 8.75}
{"id": "14ea6b20-b56b-4a60-9660-f9dbb1210602", "name": "Blender", "instruction": "Create a blender for making smoothies. It should have a base with a control panel featuring buttons for different speeds. The jar should be transparent with measurement markings on the side. Make sure the lid fits securely on top of the jar.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the base\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the buttons\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color for the jar\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for the lid\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.75))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale = (1, 0.5, 0.1)\npanel.data.materials.append(base_color)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.2 + i * 0.2, 0, 0.8))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.75))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.73546624186171, "unit_n": 7, "param_ratio": 6.142857142857143}
{"id": "7ea056df-b2ed-441c-9bc8-3a997987d6ed", "name": "Smartphone", "instruction": "Let's compare a modern smartphone to an older model. The modern one should have a large, touch-sensitive screen with minimal buttons, while the older model should have a smaller screen and a physical keypad. Include a front-facing camera on the modern phone and a prominent antenna on the older one.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Modern Smartphone\n# Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0))\nmodern_body = bpy.context.object\nmodern_body.scale = (0.4, 0.8, 0.05)\nmodern_body.name = \"Modern Smartphone Body\"\nmodern_body.data.materials.append(black)\n\n# Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(-1.5, 0, 0.051))\nmodern_screen = bpy.context.object\nmodern_screen.scale = (0.35, 0.75, 1)\nmodern_screen.name = \"Modern Smartphone Screen\"\nmodern_screen.data.materials.append(gray)\n\n# Front-facing Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(-1.5, 0.35, 0.06))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 3: Create the Older Model Phone\n# Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0, 0))\nold_body = bpy.context.object\nold_body.scale = (0.4, 0.6, 0.1)\nold_body.name = \"Old Phone Body\"\nold_body.data.materials.append(black)\n\n# Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(1.5, 0.2, 0.11))\nold_screen = bpy.context.object\nold_screen.scale = (0.3, 0.2, 1)\nold_screen.name = \"Old Phone Screen\"\nold_screen.data.materials.append(gray)\n\n# Keypad\nbpy.ops.mesh.primitive_plane_add(size=1, location=(1.5, -0.2, 0.11))\nkeypad = bpy.context.object\nkeypad.scale = (0.3, 0.3, 1)\nkeypad.name = \"Keypad\"\nkeypad.data.materials.append(gray)\n\n# Antenna\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.5, location=(1.5, 0.35, 0.3))\nantenna = bpy.context.object\nantenna.name = \"Antenna\"\nantenna.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 1.2955907425112472, "unit_n": 7, "param_ratio": 5.571428571428571}
{"id": "f018b480-8fec-473b-befd-13290bf59e3b", "name": "Fountain Pen vs. Ballpoint Pen", "instruction": "Compare a fountain pen and a ballpoint pen, highlighting the differences in the nib and the mechanism by which they dispense ink.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Fountain Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(-1, 0, 0))\nfountain_pen_body = bpy.context.object\nfountain_pen_body.name = \"Fountain Pen Body\"\nfountain_pen_body.data.materials.append(black)\n\n# Step 3: Create the Fountain Pen Nib\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(-1, 0, 0.75))\nfountain_pen_nib = bpy.context.object\nfountain_pen_nib.name = \"Fountain Pen Nib\"\nfountain_pen_nib.data.materials.append(silver)\n\n# Step 4: Create the Ballpoint Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(1, 0, 0))\nballpoint_pen_body = bpy.context.object\nballpoint_pen_body.name = \"Ballpoint Pen Body\"\nballpoint_pen_body.data.materials.append(black)\n\n# Step 5: Create the Ballpoint Pen Tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(1, 0, 0.75))\nballpoint_pen_tip = bpy.context.object\nballpoint_pen_tip.name = \"Ballpoint Pen Tip\"\nballpoint_pen_tip.data.materials.append(silver)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.637473841774412, "unit_n": 4, "param_ratio": 7.5}
{"id": "2d44f91e-9a37-45ee-9ce3-397dd149ae32", "name": "Ottoman", "instruction": "Can you make an ottoman?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nottoman_color = bpy.data.materials.new(name=\"Ottoman Color\")\nottoman_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # A medium brown color\n\n# Step 2: Create the Base of the Ottoman\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Ottoman Base\"\nbase.scale = (1, 1, 0.5)  # Make it more rectangular\nbase.data.materials.append(ottoman_color)\n\n# Step 3: Create the Legs of the Ottoman\nfor i in range(4):\n    x = 0.45 * (i % 2 * 2 - 1)\n    y = 0.45 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.25, location=(x, y, 0.125))\n    leg = bpy.context.object\n    leg.name = f\"Ottoman Leg {i + 1}\"\n    leg.data.materials.append(ottoman_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4170169093750404, "unit_n": 5, "param_ratio": 2.8}
{"id": "d87b12ee-8201-43a0-9241-23727d79c7f8", "name": "Smartphone", "instruction": "Design a 3D model of a smartphone. It should have a rectangular shape with rounded corners. The front should feature a large touch screen with a small front camera at the top. On the back, include a dual-camera setup with a flash.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport bmesh\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.05)\nbody.data.materials.append(black)\n\n# Round the corners\nbpy.ops.object.modifier_add(type='BEVEL')\nbody.modifiers[\"Bevel\"].segments = 10\nbody.modifiers[\"Bevel\"].width = 0.05\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.4, 0.8, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0, 0.75, 0.06))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Dual Camera Setup on the Back\nfor i in range(2):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.15 * (i - 0.5), -0.75, -0.06))\n    back_camera = bpy.context.object\n    back_camera.name = f\"Back Camera {i + 1}\"\n    back_camera.data.materials.append(black)\n\n# Step 6: Create the Flash\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0.3, -0.75, -0.06))\nflash = bpy.context.object\nflash.name = \"Flash\"\nflash.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.638378821808052, "unit_n": 7, "param_ratio": 4.428571428571429}
{"id": "90e7c9cb-2d85-47c8-b645-0da617bd99e1", "name": "Bird Feeder", "instruction": "Create a bird feeder with a cylindrical body and a small perch for birds to stand on. It should have a lid on top for easy refilling.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\nperch_color = bpy.data.materials.new(name=\"PerchColor\")\nperch_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Medium brown color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.1, location=(0, 0, 1.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.55, 0, 0.5), rotation=(0, 1.5708, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(perch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.97270866633796, "unit_n": 3, "param_ratio": 11.0}
{"id": "c79c25e7-cd0d-4457-8398-2a3660b298c0", "name": "Pencil Holder", "instruction": "Let's create a 3D model of a pencil holder. The holder should have a cylindrical shape with an open top. It should be able to hold multiple pencils and pens. The exterior should be smooth and simple.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pencil Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nholder = bpy.context.object\nholder.name = \"Pencil Holder\"\n\n# Step 3: Create the Open Top by Boolean Difference\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2.1, location=(0, 0, 1))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Inner Cylinder\"\n\n# Add Boolean Modifier\nmod_bool = holder.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cylinder\n\n# Apply the Modifier\nbpy.context.view_layer.objects.active = holder\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 5.0}
{"id": "bfa693f9-0343-45d6-b1e4-26b40d2af6ea", "name": "Soap Dispenser", "instruction": "Design a soap dispenser with a pump mechanism at the top.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndispenser_color = bpy.data.materials.new(name=\"DispenserColor\")\ndispenser_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npump_color = bpy.data.materials.new(name=\"PumpColor\")\npump_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Dispenser Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0.6))\ndispenser_body = bpy.context.object\ndispenser_body.name = \"DispenserBody\"\ndispenser_body.data.materials.append(dispenser_color)\n\n# Step 3: Create the Pump Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 1.3))\npump_base = bpy.context.object\npump_base.name = \"PumpBase\"\npump_base.data.materials.append(pump_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, 0, 1.5))\npump_nozzle = bpy.context.object\npump_nozzle.name = \"PumpNozzle\"\npump_nozzle.data.materials.append(pump_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.722115037796975, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "6fc97976-e0a5-43a9-b8a3-a71289d147e1", "name": "Desk Organizer", "instruction": "Let's create a desk organizer. It should include compartments for pens, pencils, and other small office supplies. The organizer should have a rectangular base with dividers of varying heights. Integrate a small drawer for additional storage. The design should be practical and efficient for everyday use. Add a section for holding sticky notes and a slot for a smartphone. Ensure the overall structure is compact and fits neatly on a desk.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmaterial = bpy.data.materials.new(name=\"Material\")\nmaterial.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale = (1, 0.5, 0.05)\nbase.name = \"Base\"\nbase.data.materials.append(material)\n\n# Step 3: Create the Dividers\ndivider_positions = [(-0.5, 0, 0.2), (0, 0, 0.2), (0.5, 0, 0.2)]\ndivider_heights = [0.4, 0.6, 0.5]\nfor i, pos in enumerate(divider_positions):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=pos)\n    divider = bpy.context.object\n    divider.scale = (0.05, 0.5, divider_heights[i])\n    divider.name = f\"Divider {i + 1}\"\n    divider.data.materials.append(material)\n\n# Step 4: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 0.05))\ndrawer = bpy.context.object\ndrawer.scale = (0.5, 0.4, 0.05)\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(material)\n\n# Step 5: Create the Sticky Note Holder\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.75, 0.6, 0.15))\nsticky_note_holder = bpy.context.object\nsticky_note_holder.scale = (0.2, 0.2, 0.1)\nsticky_note_holder.name = \"Sticky Note Holder\"\nsticky_note_holder.data.materials.append(material)\n\n# Step 6: Create the Smartphone Slot\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.75, 0.6, 0.2))\nsmartphone_slot = bpy.context.object\nsmartphone_slot.scale = (0.1, 0.3, 0.2)\nsmartphone_slot.name = \"Smartphone Slot\"\nsmartphone_slot.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.604512331109468, "unit_n": 5, "param_ratio": 4.4}
{"id": "bf32e48d-431c-4a88-9526-b34940279b38", "name": "Router", "instruction": "Design a router with a rectangular shape and three antennas on the back. Include indicator lights on the front and ports on the back for connecting cables.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (2, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = (i - 1) * 0.8\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, -1, 1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the Indicator Lights\nfor i in range(3):\n    x = (i - 1) * 0.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.55))\n    light = bpy.context.object\n    light.name = f\"Light {i + 1}\"\n    light.data.materials.append(green)\n\n# Step 5: Create the Ports\nfor i in range(3):\n    x = (i - 1) * 0.5\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, -1.1, 0.55))\n    port = bpy.context.object\n    port.name = f\"Port {i + 1}\"\n    port.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.499415478285676, "unit_n": 10, "param_ratio": 2.7}
{"id": "b7e0bf7b-b109-472a-af58-72dedef199c6", "name": "Blood Pressure Monitor", "instruction": "Let's design a blood pressure monitor. Compare the size to a standard smartphone, but make it slightly thicker. It should have a digital display screen on the front and a cuff attached to it. The display should show systolic, diastolic, and pulse readings. Can you handle that?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark screen color\ntext_color = bpy.data.materials.new(name=\"Text Color\")\ntext_color.diffuse_color = (1, 1, 1, 1)  # White color for text\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.scale = (1.5, 0.8, 0.2)  # Slightly thicker than a smartphone\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.61))\nscreen = bpy.context.object\nscreen.scale = (1.2, 0.6, 1)\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, -1.2, 0.5))\ncuff = bpy.context.object\ncuff.name = \"Cuff\"\ncuff.data.materials.append(body_color)\n\n# Step 5: Add Text for Readings\ndef create_text(text, location, rotation=(0, 0, 0)):\n    bpy.ops.object.text_add(location=location, rotation=rotation)\n    text_obj = bpy.context.object\n    text_obj.data.body = text\n    text_obj.data.materials.append(text_color)\n    text_obj.scale = (0.1, 0.1, 0.1)\n    return text_obj\n\ncreate_text(\"SYS: 120\", location=(-0.5, 0, 0.62))\ncreate_text(\"DIA: 80\", location=(-0.5, -0.2, 0.62))\ncreate_text(\"PULSE: 75\", location=(-0.5, -0.4, 0.62))\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.591449462319349, "unit_n": 4, "param_ratio": 7.0}
{"id": "50cc05af-aa12-46cb-81ea-00ca905a1984", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. The sandwich should have two slices of bread with visible layers of lettuce, tomato, cheese, and ham in between. Include a toothpick with an olive on top to hold the sandwich together. Show the sandwich on a plate with a few potato chips on the side.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create Materials\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown\n\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green\n\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.26, 0.20, 1)  # Red\n\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.95, 0.64, 0.14, 1)  # Yellow\n\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink\n\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.19, 0.30, 0.08, 1)  # Dark green\n\nplate_color = bpy.data.materials.new(name=\"Plate\")\nplate_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White\n\nchip_color = bpy.data.materials.new(name=\"Chip\")\nchip_color.diffuse_color = (0.95, 0.80, 0.53, 1)  # Light yellow\n\n# Step 3: Create the Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=0.1, location=(0, 0, -0.05))\nplate = bpy.context.object\nplate.name = \"Plate\"\nplate.data.materials.append(plate_color)\n\n# Step 4: Create the Bread Slices\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbread_bottom = bpy.context.object\nbread_bottom.name = \"Bread Bottom\"\nbread_bottom.scale[2] = 0.1\nbread_bottom.data.materials.append(bread_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.5))\nbread_top = bpy.context.object\nbread_top.name = \"Bread Top\"\nbread_top.scale[2] = 0.1\nbread_top.data.materials.append(bread_color)\n\n# Step 5: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.7))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 6: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.9))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 7: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 1.1))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 8: Create the Ham\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 1.3))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05\nham.data.materials.append(ham_color)\n\n# Step 9: Create the Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, 2))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\n\n# Step 10: Create the Olive\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 3))\nolive = bpy.context.object\nolive.name = \"Olive\"\nolive.data.materials.append(olive_color)\n\n# Step 11: Create the Chips\nfor i in range(3):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(2.5 - i * 0.5, 1, 0))\n    chip = bpy.context.object\n    chip.name = f\"Chip {i + 1}\"\n    chip.scale[2] = 0.2\n    chip.data.materials.append(chip_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7920349977735097, "unit_n": 12, "param_ratio": 6.833333333333333}
{"id": "28fa67bb-add6-41da-ba7b-968eb15414c9", "name": "Screwdriver", "instruction": "Please create a 3D model of a screwdriver. The screwdriver should have a flat head and a handle that is easy to grip. The total length should be around 20 cm.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Dark green color for the handle\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the metal part\n\n# Create the handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.12, location=(0, 0, 0.06))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Create the shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.15, location=(0, 0, -0.075))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Create the flat head\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, -0.18))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[1] = 0.01\nhead.scale[2] = 0.05\nhead.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.270275129726423, "unit_n": 3, "param_ratio": 8.0}
{"id": "696f4900-98f1-4278-a594-55aa040427af", "name": "Power Transformer", "instruction": "Could you create a 3D model of a power transformer? It should have a rectangular body with cooling fins on the sides and a set of three cylindrical bushings on top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nfin_color = bpy.data.materials.new(name=\"Fin Color\")\nfin_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Darker gray color\nbushing_color = bpy.data.materials.new(name=\"Bushing Color\")\nbushing_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Transformer Body\"\nbody.scale = (1, 0.5, 1)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Cooling Fins\nfin_count = 6\nfor i in range(fin_count):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.1, -0.5 + i * 0.2, 1))\n    fin = bpy.context.object\n    fin.name = f\"Cooling Fin Right {i + 1}\"\n    fin.scale = (1, 0.05, 0.5)\n    fin.data.materials.append(fin_color)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.1, -0.5 + i * 0.2, 1))\n    fin = bpy.context.object\n    fin.name = f\"Cooling Fin Left {i + 1}\"\n    fin.scale = (1, 0.05, 0.5)\n    fin.data.materials.append(fin_color)\n\n# Step 4: Create the Bushings\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(-0.5 + i * 0.5, 0, 2.25))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n    bushing.data.materials.append(bushing_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.018536703792643, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "fb684311-b826-4bf5-99c5-34650c0190bd", "name": "Dining Table", "instruction": "Let's design a dining table. Start with a rectangular top, ensuring it is spacious enough for a family meal. Add four legs, one at each corner, making sure they are evenly spaced and provide good support.\n\nNext, add a support beam connecting the legs underneath the table. Ensure the table stands firmly on a flat surface. The overall design should be practical and functional for everyday use.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 1.5  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-1.4, -0.9, 0.5), (1.4, -0.9, 0.5), (-1.4, 0.9, 0.5), (1.4, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 2.5  # Height of the leg\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 4: Create the Support Beam\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nsupport_beam = bpy.context.object\nsupport_beam.scale[0] = 1.5  # Length\nsupport_beam.scale[1] = 0.1  # Width\nsupport_beam.scale[2] = 0.1  # Thickness\nsupport_beam.name = \"Support Beam\"\nsupport_beam.data.materials.append(wood_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.409102890534594, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "b949e9d1-a9ab-4075-905f-8eab7a9ef95e", "name": "Power Strip", "instruction": "Create a power strip with five outlets and a switch on one end.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrip_color = bpy.data.materials.new(name=\"StripColor\")\nstrip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\noutlet_color = bpy.data.materials.new(name=\"OutletColor\")\noutlet_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for outlets\n\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color for the switch\n\n# Step 2: Create the Power Strip Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nstrip_base = bpy.context.object\nstrip_base.scale = (2, 0.5, 0.1)\nstrip_base.name = \"PowerStripBase\"\nstrip_base.data.materials.append(strip_color)\n\n# Step 3: Create the Outlets\nfor i in range(5):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(-1.5 + i * 0.75, 0, 0.1))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to lay flat\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.75, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.610051288460136, "unit_n": 7, "param_ratio": 4.0}
{"id": "b34f4c77-2855-442f-9d27-9c53cfa55a14", "name": "Bicycle", "instruction": "Design a bicycle. It should have two wheels connected by a frame, handlebars, a seat, and pedals. The bicycle should be in a standing position with both wheels touching the ground. Include a chain connecting the pedals to the rear wheel.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Wheels\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.05, location=(i, 0, 0.25))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 2}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(0, 0, 0.5), rotation=(0, 0, math.pi/2))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.7, location=(-0.6, 0, 0.75), rotation=(0, math.pi/4, 0))\nframe_part = bpy.context.object\nframe_part.name = \"Frame Part 1\"\nframe_part.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.7, location=(0.6, 0, 0.75), rotation=(0, -math.pi/4, 0))\nframe_part = bpy.context.object\nframe_part.name = \"Frame Part 2\"\nframe_part.data.materials.append(gray)\n\n# Step 4: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.4, location=(-0.6, 0, 1.0), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(gray)\n\n# Step 5: Create the Seat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 1.0))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(gray)\n\n# Step 6: Create the Pedals\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, i * 0.1, 0.5), rotation=(0, math.pi/2, 0))\n    pedal = bpy.context.object\n    pedal.name = f\"Pedal {i + 2}\"\n    pedal.data.materials.append(gray)\n\n# Step 7: Create the Chain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(0, 0, 0.5), rotation=(0, math.pi/2, 0))\nchain = bpy.context.object\nchain.name = \"Chain\"\nchain.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 4.768175844017184, "unit_n": 8, "param_ratio": 8.5}
{"id": "e276b5a1-e98d-4134-8efb-dec5fc944cdf", "name": "Sandwich", "instruction": "Create a sandwich with two slices of bread and a layer of filling in between.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"BreadColor\")\nbread_color.diffuse_color = (0.96, 0.76, 0.53, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"FillingColor\")\nfilling_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.55))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.scale[2] = 0.1  # Make it flat\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.55))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.6287476860138907, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "9cbeef9b-08a5-45d5-9581-078ebec061d7", "name": "Soccer Ball", "instruction": "Design a soccer ball with a unique decoration. The ball should have the traditional pentagon and hexagon pattern, but instead of the usual black and white, use a combination of bright colors and intricate geometric designs.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0, 1, 1),  # Magenta\n    (0, 1, 1, 1),  # Cyan\n]\n\n# Create a Soccer Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, segments=32, ring_count=16, location=(0, 0, 0))\nball = bpy.context.object\nball.name = \"Soccer Ball\"\n\n# Assign materials to the faces\nball_data = ball.data\n\n# Create materials for each color\nmaterials = []\nfor color in colors:\n    mat = bpy.data.materials.new(name=\"Color\")\n    mat.diffuse_color = color\n    materials.append(mat)\n\n# Assign colors to the faces of the ball\nface_material_map = {}\nfor face in ball_data.polygons:\n    face_material_map[face.index] = face.index % len(colors)\n    face.material_index = face_material_map[face.index]\n\nfor i, mat in enumerate(materials):\n    ball_data.materials.append(mat)\n\n# Apply materials to the ball\nfor face in ball_data.polygons:\n    face.material_index = face_material_map[face.index]", "color_brightness": "Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 7.0}
{"id": "2b6520a5-83da-4073-aa2d-df5517b05f5d", "name": "Pet Carrier", "instruction": "Create a pet carrier with a rectangular base and a handle on top. It should have a door on one side and ventilation holes on the other sides.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1.5, 0.5)\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 1.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (0, 1.57, 0)  # Rotate to be horizontal\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, -1.6, 0.5))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (0.5, 0.05, 0.5)\ndoor.data.materials.append(handle_color)\n\n# Step 5: Create the Ventilation Holes\nfor i in range(-2, 3):\n    for j in range(-1, 2):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(i * 0.4, 1.55, j * 0.4 + 0.5))\n        vent = bpy.context.object\n        vent.name = f\"Ventilation Hole {i + 3}-{j + 2}\"\n        vent.rotation_euler = (1.57, 0, 0)  # Rotate to be horizontal\n        vent.data.materials.append(handle_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.089898100940517, "unit_n": 5, "param_ratio": 5.6}
{"id": "117bc4ad-58db-4f89-b1e0-c2fdbded289d", "name": "Power Supply Unit", "instruction": "Design a power supply unit with a rectangular shape. Include a fan on one side, a power switch, and several connectors for various types of cables.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Power Supply Body\"\nbody.scale = (1.5, 1, 0.5)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(1.5, 0, 0))\nfan = bpy.context.object\nfan.name = \"Fan\"\nfan.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face the side\nfan.data.materials.append(black)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5, 0.4, 0))\nswitch = bpy.context.object\nswitch.name = \"Power Switch\"\nswitch.data.materials.append(black)\n\n# Step 5: Create the Connectors\nconnector_positions = [(-1.5, -0.4, 0.2), (-1.5, -0.4, -0.2), (-1.5, -0.4, -0.6)]\nfor i, pos in enumerate(connector_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.921056325671934, "unit_n": 4, "param_ratio": 6.0}
{"id": "5901ca91-34c5-4f03-adc7-bf2b1e61fac8", "name": "Sofa", "instruction": "Can you create a basic sofa with three cushions and a low backrest?", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Sofa Base\"\nbase.scale[0] = 2\nbase.scale[1] = 1\nbase.scale[2] = 0.2\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.3\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale[0] = 1\n    cushion.scale[1] = 0.9\n    cushion.scale[2] = 0.3\n    cushion.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.55, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2\nbackrest.scale[1] = 0.1\nbackrest.scale[2] = 0.6\nbackrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.411620581889958, "unit_n": 5, "param_ratio": 3.4}
{"id": "96711cb9-bda0-4ff7-aae2-355d8ec7c5e4", "name": "Travel Suitcase", "instruction": "Let's create a travel suitcase. Start with a rectangular body with rounded edges. Add four wheels at the base and a telescopic handle on top. Include a zipper that runs along the perimeter of the suitcase. Add a small handle on the side for carrying.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"SuitcaseColor\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color for the suitcase\nwheel_color = bpy.data.materials.new(name=\"WheelColor\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the wheels\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsuitcase_body = bpy.context.object\nsuitcase_body.name = \"SuitcaseBody\"\nbpy.ops.object.modifier_add(type='BEVEL')\nsuitcase_body.modifiers[\"Bevel\"].segments = 10\nsuitcase_body.modifiers[\"Bevel\"].width = 0.2\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")\nsuitcase_body.data.materials.append(suitcase_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-0.8, -0.8, 0.2), (0.8, -0.8, 0.2), (-0.8, 0.8, 0.2), (0.8, 0.8, 0.2)]\nfor pos in wheel_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=pos, rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = \"Wheel\"\n    wheel.data.materials.append(wheel_color)\n\n# Step 4: Create the Telescopic Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.9, 2.5))\nhandle_base = bpy.context.object\nhandle_base.scale[2] = 5\nhandle_base.name = \"HandleBase\"\nhandle_base.data.materials.append(wheel_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.9, 4.5))\nhandle_top = bpy.context.object\nhandle_top.scale[0] = 1.5\nhandle_top.name = \"HandleTop\"\nhandle_top.data.materials.append(wheel_color)\n\n# Step 5: Create the Side Handle\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(1.1, 0, 1.5))\nside_handle = bpy.context.object\nside_handle.scale[1] = 0.3\nside_handle.name = \"SideHandle\"\nside_handle.data.materials.append(wheel_color)\n\n# Step 6: Create the Zipper\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 1), rotation=(0, 0, 0), major_radius=1.1, minor_radius=0.02)\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.061026457138532, "unit_n": 7, "param_ratio": 5.857142857142857}
{"id": "a2ed450e-8073-430f-8cdb-d8db45733ac0", "name": "Broom", "instruction": "Create a 3D model of a broom. The handle is long and cylindrical, with a set of bristles at the bottom.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brown color for the handle\nbristle_color = bpy.data.materials.new(name=\"Bristle Color\")\nbristle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the bristles\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Bristles\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, -0.15))\nbristles = bpy.context.object\nbristles.name = \"Bristles\"\nbristles.data.materials.append(bristle_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.212823471944381, "unit_n": 2, "param_ratio": 10.0}
{"id": "a439c8ad-720e-48ac-9d29-53fc8ec5b343", "name": "Soap Dispenser", "instruction": "Design a soap dispenser with a cylindrical body and a pump at the top. The pump should have a simple, functional design. Add a small window on the side to indicate the soap level.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npump_color = bpy.data.materials.new(name=\"Pump Color\")\npump_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwindow_color = bpy.data.materials.new(name=\"Window Color\")\nwindow_color.diffuse_color = (0.5, 0.5, 0.5, 0.5)  # Semi-transparent gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Pump\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.65))\npump_base = bpy.context.object\npump_base.name = \"Pump Base\"\npump_base.data.materials.append(pump_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.85))\npump = bpy.context.object\npump.name = \"Pump\"\npump.data.materials.append(pump_color)\n\n# Step 4: Create the Window\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0.5, 0, 0.75))\nwindow = bpy.context.object\nwindow.name = \"Window\"\nwindow.data.materials.append(window_color)\n\n# Rotate the window to align with the cylindrical body\nbpy.context.object.rotation_euler[1] = math.radians(90)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.805115196052891, "unit_n": 4, "param_ratio": 8.5}
{"id": "d0ee7fa5-0b3f-4dd8-9cf7-2ca489a1416d", "name": "Blender", "instruction": "Design a 3D model of a blender. The blender should have a cylindrical body with a removable lid on top. Inside, there is a spinning blade attached to the bottom of the container for mixing ingredients.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Blender Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Blender Body\"\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Blender Lid\"\n\n# Step 4: Create the Blade\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, 0.1))\nblade_base = bpy.context.object\nblade_base.name = \"Blade Base\"\n\n# Create the blades\nfor i in range(4):\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0, 0.1))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.rotation_euler = (0, 0, math.pi / 2 * i)\n    blade.select_set(True)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(0.1, 1, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n    blade.select_set(False)\n\n# Combine the blades and blade base\nbpy.ops.object.select_all(action='DESELECT')\nblade_base.select_set(True)\nfor i in range(4):\n    bpy.data.objects[f\"Blade {i + 1}\"].select_set(True)\nbpy.ops.object.join()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8363448460603706, "unit_n": 7, "param_ratio": 2.7142857142857144}
{"id": "34bc95ea-45c9-42cc-8295-9629ba03802f", "name": "Screwdriver", "instruction": "Design a 3D model of a screwdriver. The screwdriver has a handle and a shaft with a tip.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(0, 0, -1.6))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.066165304888272, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "fe282995-de78-4d84-9aa7-1cc1c962b1fd", "name": "Modular Couch", "instruction": "Could you design a modular couch that can be reconfigured into different shapes and has integrated storage compartments under the seats?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncouch_color = bpy.data.materials.new(name=\"Couch Color\")\ncouch_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Seat Modules\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i * 2.2, 0, 1))\n    seat = bpy.context.object\n    seat.name = f\"Seat Module {i + 1}\"\n    seat.data.materials.append(couch_color)\n\n# Step 3: Create the Backrests\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i * 2.2, -1, 2))\n    backrest = bpy.context.object\n    backrest.scale[2] = 0.5\n    backrest.scale[1] = 0.2\n    backrest.name = f\"Backrest {i + 1}\"\n    backrest.data.materials.append(couch_color)\n\n# Step 4: Create the Storage Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1.8, location=(i * 2.2, 0, 0.5))\n    storage = bpy.context.object\n    storage.scale[2] = 0.25\n    storage.name = f\"Storage Compartment {i + 1}\"\n    storage.data.materials.append(couch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9493466170849687, "unit_n": 9, "param_ratio": 1.8888888888888888}
{"id": "2f1761a8-5410-4c06-9bf4-276e8d0c26d6", "name": "Bird Feeder", "instruction": "Please design a 3D model of a bird feeder. Start with a cylindrical container. Add a small perch on the side. Include a roof-like structure on top to protect the feed from rain. Finally, add a hook at the top for hanging.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.5, 0, 0.25), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.15))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 5: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.3), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1596152012626977, "unit_n": 4, "param_ratio": 6.5}
{"id": "abbe5ea8-ea25-4183-b38b-526329ab5e68", "name": "Sushi Roll", "instruction": "Design a 3D model of a sushi roll. Compare two types: one with a filling of fish and vegetables, and another with just vegetables. Both should be cylindrical and sliced into bite-sized pieces.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.05, 0.05, 0.05, 1)  # Dark seaweed color\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (0.9, 0.9, 0.9, 1)  # White rice color\nfish = bpy.data.materials.new(name=\"Fish\")\nfish.diffuse_color = (1, 0.5, 0.5, 1)  # Light pink fish color\nvegetable = bpy.data.materials.new(name=\"Vegetable\")\nvegetable.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green vegetable color\n\n# Function to create a sushi roll\ndef create_sushi(location, with_fish):\n    # Outer seaweed layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=location)\n    outer_layer = bpy.context.object\n    outer_layer.data.materials.append(seaweed)\n    \n    # Inner rice layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.1, location=location)\n    inner_layer = bpy.context.object\n    inner_layer.data.materials.append(rice)\n    \n    # Filling\n    if with_fish:\n        # Fish filling\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.2, location=(location[0] + 0.2, location[1], location[2]))\n        filling_fish = bpy.context.object\n        filling_fish.data.materials.append(fish)\n        \n        # Vegetable filling\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.2, location=(location[0] - 0.2, location[1], location[2]))\n        filling_veg = bpy.context.object\n        filling_veg.data.materials.append(vegetable)\n    else:\n        # Only vegetable filling\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.2, location=location)\n        filling_veg = bpy.context.object\n        filling_veg.data.materials.append(vegetable)\n\n# Create sushi roll with fish and vegetables\ncreate_sushi(location=(0, 0, 0), with_fish=True)\n\n# Create sushi roll with only vegetables\ncreate_sushi(location=(2, 0, 0), with_fish=False)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.824379548612789, "unit_n": 5, "param_ratio": 7.2}
{"id": "50d70437-92bf-4fab-acee-4430b3ccfe9f", "name": "Corner Bookshelf", "instruction": "Design a 3D model of a corner bookshelf with five shelves, each tier progressively larger as it descends.", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Shelves\nshelf_depth = 0.3\nshelf_height = 0.02\ninitial_width = 0.4\nheight_increment = 0.4\n\nfor i in range(5):\n    width = initial_width + i * 0.1\n    z = i * height_increment\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(width / 2, width / 2, z))\n    shelf = bpy.context.object\n    shelf.scale = (width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Back Support\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.1, 0.1, 0.8))\nback_support = bpy.context.object\nback_support.scale = (0.1, 0.1, 2)\nback_support.name = \"Back Support\"\nback_support.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4091028905345944, "unit_n": 6, "param_ratio": 2.1666666666666665}
{"id": "690c3d5c-04e3-41d7-b48c-14bed343d836", "name": "Couch", "instruction": "Could you design a couch that feels inviting and comfortable?", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncouch_color = bpy.data.materials.new(name=\"Couch Color\")\ncouch_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Warm brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.3  # Height\nbase.data.materials.append(couch_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.95, 1.15))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 0.7  # Height\nbackrest.data.materials.append(couch_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.95 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.6  # Height\n    armrest.data.materials.append(couch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9998159059644753, "unit_n": 4, "param_ratio": 4.25}
{"id": "bcfe588f-9f1b-4823-ba45-ea836a5290c9", "name": "Webcam", "instruction": "Design a webcam with a round lens in the center and a rectangular body. Include a built-in microphone above the lens.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1.5, 0.5, 1)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Round Lens\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0.6, 0))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face forward\nlens.data.materials.append(black)\n\n# Step 4: Create the Microphone\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.9, 0))\nmicrophone = bpy.context.object\nmicrophone.name = \"Microphone\"\nmicrophone.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.402882681619919, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "6d515245-1e9c-41cd-93db-8790882ae516", "name": "Dining Table", "instruction": "Compare a round dining table with a square one. Consider the number of people each can seat and the space they occupy. Think about how the shape impacts the room's layout and the interaction among diners.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Round Table\n# Tabletop\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(-2, 0, 0.5))\nround_tabletop = bpy.context.object\nround_tabletop.name = \"Round Tabletop\"\nround_tabletop.data.materials.append(wood_color)\n\n# Table Leg\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(-2, 0, 0))\nround_leg = bpy.context.object\nround_leg.name = \"Round Table Leg\"\nround_leg.data.materials.append(wood_color)\n\n# Step 3: Create the Square Table\n# Tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, 0, 0.5))\nsquare_tabletop = bpy.context.object\nsquare_tabletop.name = \"Square Tabletop\"\nsquare_tabletop.scale.z = 0.05\nsquare_tabletop.data.materials.append(wood_color)\n\n# Table Legs\nleg_positions = [(1, 1, 0), (1, -1, 0), (-1, 1, 0), (-1, -1, 0)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(2 + pos[0], pos[1], pos[2]))\n    square_leg = bpy.context.object\n    square_leg.name = f\"Square Table Leg {i + 1}\"\n    square_leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.950987226769202, "unit_n": 4, "param_ratio": 6.0}
{"id": "c72ad36c-8520-40af-a65a-fd1df12d2bc9", "name": "Light Bulb", "instruction": "Generate a 3D model of a standard light bulb.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bulb (Glass Part)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.75))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\n\n# Define the glass material\nglass = bpy.data.materials.new(name=\"Glass\")\nglass.diffuse_color = (1, 1, 1, 0.1)  # White color with transparency\nbulb.data.materials.append(glass)\n\n# Step 3: Create the Base (Metal Part)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Define the metal material\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbase.data.materials.append(metal)\n\n# Step 4: Create the Screw Part\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(0, 0, 0.1))\nscrew = bpy.context.object\nscrew.name = \"Screw\"\nscrew.data.materials.append(metal)", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.513958041071703, "unit_n": 3, "param_ratio": 8.0}
{"id": "b637783a-0ed7-4104-b274-bbd48ae6287e", "name": "Bookshelf", "instruction": "Design a bookshelf with five evenly spaced shelves and a flat top surface.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Shelves\nnum_shelves = 5\nshelf_height = 0.1\nshelf_width = 2\nshelf_depth = 0.3\nshelf_spacing = 0.5\n\nfor i in range(num_shelves):\n    z = i * shelf_spacing\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.1\npanel_height = (num_shelves - 1) * shelf_spacing + shelf_height\npanel_depth = shelf_depth\n\nfor i in range(2):\n    x = (shelf_width / 2 + panel_thickness / 2) * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, panel_height / 2 - shelf_height / 2))\n    panel = bpy.context.object\n    panel.scale = (panel_thickness / 2, panel_depth / 2, panel_height / 2)\n    panel.name = f\"Side Panel {i + 1}\"\n    panel.data.materials.append(wood_color)\n\n# Step 4: Create the Top Surface\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, panel_height))\ntop_surface = bpy.context.object\ntop_surface.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\ntop_surface.name = \"Top Surface\"\ntop_surface.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7256660955097054, "unit_n": 4, "param_ratio": 4.25}
{"id": "3921df4d-cc62-4770-a472-a55ea1b1cec6", "name": "Chocolate Cake", "instruction": "Let's create a 3D model of a chocolate cake. The cake should be round with multiple layers. Each layer should have a layer of chocolate frosting in between. The top should have a smooth layer of frosting with some decorative elements like swirls or small chocolate pieces. The sides should also be covered in frosting.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.12, 0.08, 1)  # Dark chocolate color\n\n# Step 2: Create the Cake Layers\nnum_layers = 3\nlayer_height = 0.2\nfrosting_height = 0.05\nradius = 1\n\nfor i in range(num_layers):\n    # Cake Layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=layer_height, location=(0, 0, i * (layer_height + frosting_height)))\n    layer = bpy.context.object\n    layer.name = f\"Layer {i + 1}\"\n    layer.data.materials.append(chocolate)\n    \n    # Frosting Layer\n    if i < num_layers - 1:\n        bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=frosting_height, location=(0, 0, i * (layer_height + frosting_height) + layer_height))\n        frosting = bpy.context.object\n        frosting.name = f\"Frosting {i + 1}\"\n        frosting.data.materials.append(chocolate)\n\n# Step 3: Create the Top Frosting\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=frosting_height, location=(0, 0, num_layers * (layer_height + frosting_height) - frosting_height))\ntop_frosting = bpy.context.object\ntop_frosting.name = \"Top Frosting\"\ntop_frosting.data.materials.append(chocolate)\n\n# Step 4: Create Decorative Elements (Swirls)\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = radius * 0.8 * math.cos(angle)\n    y = radius * 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, num_layers * (layer_height + frosting_height)))\n    swirl = bpy.context.object\n    swirl.name = f\"Swirl {i + 1}\"\n    swirl.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.6854507851621285, "unit_n": 11, "param_ratio": 1.6363636363636365}
{"id": "000190b1-1495-4415-98d1-847b90bda73d", "name": "Skateboard", "instruction": "Develop a 3D model of a skateboard. It should have a flat deck with slightly curved ends, mounted on four wheels. The wheels should be attached to the deck with two trucks, allowing for smooth movement and turning.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeck_color = bpy.data.materials.new(name=\"Deck Color\")\ndeck_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ntruck_color = bpy.data.materials.new(name=\"Truck Color\")\ntruck_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.scale[0] = 2.5  # Length\ndeck.scale[1] = 0.5  # Width\ndeck.scale[2] = 0.05  # Thickness\ndeck.name = \"Deck\"\ndeck.data.materials.append(deck_color)\n\n# Create the curved ends of the deck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(2.5, 0, 0.1))\ncurve_end1 = bpy.context.object\ncurve_end1.rotation_euler[1] = 1.57\ncurve_end1.scale[1] = 0.5\ncurve_end1.data.materials.append(deck_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(-2.5, 0, 0.1))\ncurve_end2 = bpy.context.object\ncurve_end2.rotation_euler[1] = -1.57\ncurve_end2.scale[1] = 0.5\ncurve_end2.data.materials.append(deck_color)\n\n# Step 3: Create the Trucks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, 0, -0.1))\n    truck = bpy.context.object\n    truck.scale[0] = 0.5\n    truck.scale[1] = 0.2\n    truck.scale[2] = 0.1\n    truck.name = f\"Truck {i + 1}\"\n    truck.data.materials.append(truck_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    for j in range(2):\n        x = 1.5 * (i * 2 - 1)\n        y = 0.5 * (j * 2 - 1)\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(x, y, -0.25))\n        wheel = bpy.context.object\n        wheel.rotation_euler[0] = 1.57\n        wheel.name = f\"Wheel {i * 2 + j + 1}\"\n        wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.340412271006604, "unit_n": 9, "param_ratio": 4.222222222222222}
{"id": "be964ac7-9118-402b-91d3-4cc29333d35d", "name": "Chocolate Fountain", "instruction": "Design a three-tiered chocolate fountain with a base diameter of 40cm, reducing by 10cm with each ascending tier. Ensure there's a mechanism at the center to pump the liquid chocolate to the top.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate color\n\n# Step 2: Create the Base Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0))\nbase_tier = bpy.context.object\nbase_tier.name = \"Base Tier\"\nbase_tier.data.materials.append(chocolate)\n\n# Step 3: Create the Middle Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.05, location=(0, 0, 0.1))\nmiddle_tier = bpy.context.object\nmiddle_tier.name = \"Middle Tier\"\nmiddle_tier.data.materials.append(chocolate)\n\n# Step 4: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, 0, 0.2))\ntop_tier = bpy.context.object\ntop_tier.name = \"Top Tier\"\ntop_tier.data.materials.append(chocolate)\n\n# Step 5: Create the Pump Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, 0, 0.15))\npump_mechanism = bpy.context.object\npump_mechanism.name = \"Pump Mechanism\"\npump_mechanism.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.791377938981543, "unit_n": 4, "param_ratio": 6.25}
{"id": "e10142f0-a026-4be5-99b6-10f23ca97bf5", "name": "Hat", "instruction": "Create a 3D model of a hat with a wide brim and a rounded crown. Compare it to a baseball cap in terms of shape and structure. The hat should be plain without any decorations or patterns.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0.1))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 4: Join the Crown and Brim\nbpy.ops.object.select_all(action='DESELECT')\ncrown.select_set(True)\nbrim.select_set(True)\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.852478066159039, "unit_n": 2, "param_ratio": 4.5}
{"id": "68f71fc8-2e24-472e-bc12-fb119f8f3212", "name": "Chessboard", "instruction": "I need a 3D model of a chessboard. It should have an 8x8 grid of alternating black and white squares.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsize = 8\nsquare_size = 1\n\nfor i in range(size):\n    for j in range(size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n            \n# Step 3: Move the chessboard to the center\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "21891f16-583d-4a8a-8ae6-a407e9d7243e", "name": "Trumpet", "instruction": "Create a trumpet with three valves and a flared bell at the end.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.8, 0.6, 0.2, 1)  # Brass color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=3, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(brass)\n\n# Step 3: Create the Bell\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.1, depth=0.6, location=(0, 0, 1.8))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.rotation_euler = (math.pi / 2, 0, 0)\nbell.data.materials.append(brass)\n\n# Step 4: Create the Valves\nvalve_distance = 0.6\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.2, location=(-1.2 + i * valve_distance, 0, 0.1))\n    valve = bpy.context.object\n    valve.name = f\"Valve {i + 1}\"\n    valve.rotation_euler = (math.pi / 2, 0, 0)\n    valve.data.materials.append(brass)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.553040117550164, "unit_n": 5, "param_ratio": 4.2}
{"id": "135fb850-6225-40d2-aed7-2964b5917c75", "name": "Pizza", "instruction": "Can you create a 3D model of a pizza for me? Compare a classic Margherita pizza and a pepperoni pizza. The Margherita should have a thin crust, tomato sauce, mozzarella cheese, and basil leaves. The pepperoni pizza should have a thicker crust, tomato sauce, mozzarella cheese, and pepperoni slices. Place both pizzas side by side on a wooden board.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Light yellow color\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Green color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Dark red color\nboard_color = bpy.data.materials.new(name=\"Board\")\nboard_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Wooden board color\n\n# Step 2: Create the Wooden Board\nbpy.ops.mesh.primitive_plane_add(size=4, location=(0, 0, -0.1))\nboard = bpy.context.object\nboard.name = \"Wooden Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Margherita Pizza\n# Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.05, location=(-1, 0, 0))\nmargherita_crust = bpy.context.object\nmargherita_crust.name = \"Margherita Crust\"\nmargherita_crust.data.materials.append(crust_color)\n\n# Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.02, location=(-1, 0, 0.03))\nmargherita_sauce = bpy.context.object\nmargherita_sauce.name = \"Margherita Sauce\"\nmargherita_sauce.data.materials.append(sauce_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.02, location=(-1, 0, 0.05))\nmargherita_cheese = bpy.context.object\nmargherita_cheese.name = \"Margherita Cheese\"\nmargherita_cheese.data.materials.append(cheese_color)\n\n# Basil Leaves\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = -1 + 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.1, location=(x, y, 0.07))\n    basil_leaf = bpy.context.object\n    basil_leaf.name = f\"Basil Leaf {i + 1}\"\n    basil_leaf.data.materials.append(basil_color)\n\n# Step 4: Create the Pepperoni Pizza\n# Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(1, 0, 0))\npepperoni_crust = bpy.context.object\npepperoni_crust.name = \"Pepperoni Crust\"\npepperoni_crust.data.materials.append(crust_color)\n\n# Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.05, location=(1, 0, 0.05))\npepperoni_sauce = bpy.context.object\npepperoni_sauce.name = \"Pepperoni Sauce\"\npepperoni_sauce.data.materials.append(sauce_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.05, location=(1, 0, 0.1))\npepperoni_cheese = bpy.context.object\npepperoni_cheese.name = \"Pepperoni Cheese\"\npepperoni_cheese.data.materials.append(cheese_color)\n\n# Pepperoni Slices\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 1 + 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.12))\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = f\"Pepperoni Slice {i + 1}\"\n    pepperoni_slice.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.888320243111035, "unit_n": 19, "param_ratio": 3.8421052631578947}
{"id": "b56b7b80-37ca-486e-9139-fbdb6dae0e0b", "name": "Table Lamp", "instruction": "Design a table lamp. The lamp should have a circular base, a slender stand, and a simple, conical shade. Ensure it has a switch on the base.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nstand_color = bpy.data.materials.new(name=\"Stand Color\")\nstand_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nshade_color = bpy.data.materials.new(name=\"Shade Color\")\nshade_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.data.materials.append(stand_color)\n\n# Step 4: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.1, depth=0.6, location=(0, 0, 1.3))\nshade = bpy.context.object\nshade.name = \"Shade\"\nshade.data.materials.append(shade_color)\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.4, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.021272248510967, "unit_n": 4, "param_ratio": 10.0}
{"id": "c5f26495-1a01-477b-b880-966e95c0b6c6", "name": "Basketball Hoop", "instruction": "Can you create a 3D model of a basketball hoop? The hoop should be a simple ring with a net hanging from it. Make sure to include a backboard that is rectangular.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\norange = bpy.data.materials.new(name=\"Orange\")\norange.diffuse_color = (1.0, 0.55, 0.0, 1)  # Orange color for the hoop\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color for the net and backboard\n\n# Step 2: Create the Hoop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.45, minor_radius=0.02, location=(0, 0, 2))\nhoop = bpy.context.object\nhoop.name = \"Hoop\"\nhoop.data.materials.append(orange)\n\n# Step 3: Create the Net\nbpy.ops.mesh.primitive_cone_add(vertices=16, radius1=0.45, radius2=0.2, depth=0.5, location=(0, 0, 1.75))\nnet = bpy.context.object\nnet.name = \"Net\"\nnet.data.materials.append(white)\n\n# Step 4: Create the Backboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 2.5))\nbackboard = bpy.context.object\nbackboard.scale[0] = 1.5  # Scale width\nbackboard.scale[1] = 0.1  # Scale depth\nbackboard.scale[2] = 1.0  # Scale height\nbackboard.name = \"Backboard\"\nbackboard.data.materials.append(white)", "color_brightness": "Bright", "verify": "human", "entropy": 2.9861799150480004, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "00e45260-a8d3-4280-a09c-dcf607985ae4", "name": "Motorcycle vs. Scooter", "instruction": "Could you create 3D models of a motorcycle and a scooter for comparison? The motorcycle should have a larger frame, with a prominent fuel tank, two wheels, and handlebars. The scooter should have a smaller frame, a flat platform for the feet, two wheels, and handlebars.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Motorcycle\n\n# Step 2: Create the Motorcycle Frame\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 2, 0.75))\nmotorcycle_frame = bpy.context.object\nmotorcycle_frame.name = \"Motorcycle Frame\"\nmotorcycle_frame.scale = (0.5, 1, 0.25)\nmotorcycle_frame.data.materials.append(gray)\n\n# Step 3: Create the Motorcycle Fuel Tank\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(0, 2.5, 1.1))\nfuel_tank = bpy.context.object\nfuel_tank.name = \"Fuel Tank\"\nfuel_tank.scale = (1, 0.5, 0.5)\nfuel_tank.data.materials.append(gray)\n\n# Step 4: Create the Motorcycle Wheels\nfor i in range(2):\n    y = 1.5 + i\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, y, 0.3), rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Motorcycle Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 5: Create the Motorcycle Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0, 3, 1.2), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Motorcycle Handlebar\"\nhandlebar.data.materials.append(gray)\n\n# Scooter\n\n# Step 6: Create the Scooter Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -2, 0.5))\nscooter_frame = bpy.context.object\nscooter_frame.name = \"Scooter Frame\"\nscooter_frame.scale = (0.3, 1, 0.1)\nscooter_frame.data.materials.append(gray)\n\n# Step 7: Create the Scooter Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -2, 0.3))\nscooter_platform = bpy.context.object\nscooter_platform.name = \"Scooter Platform\"\nscooter_platform.scale = (0.3, 1, 0.05)\nscooter_platform.data.materials.append(gray)\n\n# Step 8: Create the Scooter Wheels\nfor i in range(2):\n    y = -2.5 + i\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.15, location=(0, y, 0.2), rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Scooter Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 9: Create the Scooter Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, -1.5, 0.8), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Scooter Handlebar\"\nhandlebar.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.797303203907009, "unit_n": 10, "param_ratio": 5.8}
{"id": "0667463f-cb61-4701-b636-a99523e47ffd", "name": "Pizza", "instruction": "What does a pizza with a round shape and slices of pepperoni on top look like?", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_crust_color = bpy.data.materials.new(name=\"Pizza Crust\")\npizza_crust_color.diffuse_color = (0.92, 0.64, 0.37, 1)  # Light brown color for crust\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_crust_color)\n\n# Step 3: Create Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0, 0.7), (0, -0.7), (0.7, 0), (-0.7, 0)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.05, location=(pos[0], pos[1], 0.05))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.82417356854668, "unit_n": 2, "param_ratio": 10.0}
{"id": "961673bf-3f58-4b71-a33a-a073423398ac", "name": "Hamster Haven", "instruction": "Please construct a multi-level habitat for a hamster. Include a main enclosure with dimensions of 24 inches long, 12 inches wide, and 12 inches high. Add a second level accessible by a ramp, with an area for bedding. Incorporate a running wheel and a small feeding zone. Ensure there is a clear section for viewing.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (0.8, 0.8, 0.8, 0.2)  # Transparent material\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.6, 0.4, 0.2, 1)  # Wood color\n\n# Step 2: Create the Main Enclosure\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nmain_enclosure = bpy.context.object\nmain_enclosure.scale = (1.0, 0.5, 0.5)  # Dimensions: 24x12x12 inches\nmain_enclosure.name = \"Main Enclosure\"\nmain_enclosure.data.materials.append(clear_material)\n\n# Step 3: Create the Second Level\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.75))\nsecond_level = bpy.context.object\nsecond_level.scale = (0.8, 0.4, 0.01)  # Dimensions: 19.2x9.6 inches\nsecond_level.name = \"Second Level\"\nsecond_level.data.materials.append(wood_material)\n\n# Step 4: Create the Ramp\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.4, 0, 0.5))\nramp = bpy.context.object\nramp.scale = (0.1, 0.4, 0.25)  # Dimensions: 2.4x9.6x6 inches\nramp.rotation_euler = (0, 0.5, 0)  # Tilt the ramp\nramp.name = \"Ramp\"\nramp.data.materials.append(wood_material)\n\n# Step 5: Create the Running Wheel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.05, location=(0.6, 0, 0.3))\nwheel = bpy.context.object\nwheel.rotation_euler = (1.57, 0, 0)  # Rotate to stand vertically\nwheel.name = \"Running Wheel\"\nwheel.data.materials.append(wood_material)\n\n# Step 6: Create the Feeding Zone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.6, 0, 0.1))\nfeeding_zone = bpy.context.object\nfeeding_zone.scale = (0.2, 0.2, 0.05)  # Dimensions: 4.8x4.8x1.2 inches\nfeeding_zone.name = \"Feeding Zone\"\nfeeding_zone.data.materials.append(wood_material)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.444638710497037, "unit_n": 5, "param_ratio": 6.2}
{"id": "dfc8aa6b-61f8-456b-83d8-cf3845e8e6c1", "name": "Dining Table", "instruction": "Compare two dining tables. The first table is rectangular with four legs. The second table is round with a central pedestal base. Highlight the differences in their shapes and support structures.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntable_color = bpy.data.materials.new(name=\"TableColor\")\ntable_color.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color\n\n# Step 2: Create the First Table (Rectangular with Four Legs)\n# Create the tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntabletop1 = bpy.context.object\ntabletop1.name = \"Rectangular Tabletop\"\ntabletop1.scale = (1.5, 1, 0.1)\ntabletop1.data.materials.append(table_color)\n\n# Create the legs\nfor i in range(4):\n    x = 1.3 * (i % 2) - 0.65\n    y = 0.8 * (i // 2) - 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.5))\n    leg = bpy.context.object\n    leg.name = f\"Rectangular Table Leg {i + 1}\"\n    leg.scale = (0.1, 0.1, 1)\n    leg.data.materials.append(table_color)\n\n# Step 3: Create the Second Table (Round with Central Pedestal Base)\n# Create the tabletop\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(3, 0, 1))\ntabletop2 = bpy.context.object\ntabletop2.name = \"Round Tabletop\"\ntabletop2.data.materials.append(table_color)\n\n# Create the pedestal base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(3, 0, 0))\npedestal = bpy.context.object\npedestal.name = \"Pedestal Base\"\npedestal.data.materials.append(table_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.771604359416597, "unit_n": 7, "param_ratio": 3.2857142857142856}
{"id": "8130f4ea-7067-41d2-a1c0-4b438280a9ac", "name": "Whiteboard Marker", "instruction": "Design a whiteboard marker. The body should be cylindrical, with a removable cap on one end. The tip should be chisel-shaped for broad and fine lines. Include a clip on the cap for easy attachment to pockets.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmarker_body_color = bpy.data.materials.new(name=\"Marker Body Color\")\nmarker_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nmarker_cap_color = bpy.data.materials.new(name=\"Marker Cap Color\")\nmarker_cap_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Marker Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.2, location=(0, 0, 0))\nmarker_body = bpy.context.object\nmarker_body.name = \"Marker Body\"\nmarker_body.data.materials.append(marker_body_color)\n\n# Step 3: Create the Marker Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=0.4, location=(0, 0, 0.8))\nmarker_cap = bpy.context.object\nmarker_cap.name = \"Marker Cap\"\nmarker_cap.data.materials.append(marker_cap_color)\n\n# Step 4: Create the Chisel Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.1, depth=0.2, location=(0, 0, -0.6))\nchisel_tip = bpy.context.object\nchisel_tip.name = \"Chisel Tip\"\nchisel_tip.data.materials.append(marker_cap_color)\n\n# Step 5: Create the Clip on the Cap\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.11, 0, 1))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.scale[1] = 0.1\nclip_base.scale[2] = 0.2\nclip_base.data.materials.append(marker_cap_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.11, 0, 1.2))\nclip_top = bpy.context.object\nclip_top.name = \"Clip Top\"\nclip_top.scale[1] = 0.1\nclip_top.scale[2] = 0.1\nclip_top.data.materials.append(marker_cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.790555093414637, "unit_n": 5, "param_ratio": 6.8}
{"id": "9f2ed925-3d21-4ed7-8693-fd0cfa2a03ac", "name": "Cat Scratching Post", "instruction": "Let's design a cat scratching post. Start with a circular base. Attach a vertical post in the center. The post should be tall enough for a cat to stretch fully. Add a platform on top of the post for the cat to sit on. You can also include a dangling toy from the platform.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for the base\npost_color = bpy.data.materials.new(name=\"PostColor\")\npost_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color for the post\nplatform_color = bpy.data.materials.new(name=\"PlatformColor\")\nplatform_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color for the platform\ntoy_color = bpy.data.materials.new(name=\"ToyColor\")\ntoy_color.diffuse_color = (1, 0, 0, 1)  # Red color for the toy\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=2, location=(0, 0, 1.1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 2.15))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.data.materials.append(platform_color)\n\n# Step 5: Create the Toy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, 0, 2.05))\ntoy = bpy.context.object\ntoy.name = \"Toy\"\ntoy.data.materials.append(toy_color)\n\n# Create the string for the toy\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.2, location=(0.25, 0, 2.1))\nstring = bpy.context.object\nstring.name = \"String\"\nstring.data.materials.append(toy_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.6719472234275368, "unit_n": 5, "param_ratio": 8.8}
{"id": "cbbe280b-a76d-4bf2-806c-a9d76575313d", "name": "Decorative Pattern", "instruction": "Compare two decorative patterns: one with floral motifs and another with geometric shapes. Both patterns should be arranged in a repeating grid.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfloral_color = bpy.data.materials.new(name=\"Floral Color\")\nfloral_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for floral motifs\ngeometric_color = bpy.data.materials.new(name=\"Geometric Color\")\ngeometric_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color for geometric shapes\n\n# Step 2: Create the Floral Motif\nfor i in range(3):\n    for j in range(3):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(i * 0.4, j * 0.4, 0))\n        floral = bpy.context.object\n        floral.name = f\"Floral {i * 3 + j + 1}\"\n        floral.data.materials.append(floral_color)\n\n# Step 3: Create the Geometric Shape\nfor i in range(3):\n    for j in range(3):\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.4 + 1.5, j * 0.4, 0))\n        geometric = bpy.context.object\n        geometric.name = f\"Geometric {i * 3 + j + 1}\"\n        geometric.data.materials.append(geometric_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.3521500135340485, "unit_n": 18, "param_ratio": 1.0}
{"id": "5d3616f4-d15a-4668-aa4c-372e8c2fae34", "name": "Pencil Sharpener vs. Eraser", "instruction": "Compare a pencil sharpener and an eraser. The pencil sharpener should have a cylindrical shape with a hole at the top for inserting pencils. The eraser should be a simple rectangular block.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pencil Sharpener\n# Create the main cylindrical body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(0, 0, 0.3))\nsharpener_body = bpy.context.object\nsharpener_body.name = \"Pencil Sharpener Body\"\n\n# Create the hole for inserting pencils\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(0, 0, 0.6))\nhole = bpy.context.object\nhole.name = \"Pencil Hole\"\n\n# Boolean modifier to create the hole\nmod_bool = sharpener_body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = hole\nbpy.context.view_layer.objects.active = sharpener_body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(hole)\n\n# Step 3: Create the Eraser\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 0.25))\neraser = bpy.context.object\neraser.name = \"Eraser\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.074366447342579, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "d41fb879-5d90-43cb-853b-68888d88bfb6", "name": "Coffee Maker", "instruction": "Can you design a coffee maker with a simple on/off switch?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(gray)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(black)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0.7, 0, 1.2), rotation=(0, 1.57, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(gray)\n\n# Step 6: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(-0.8, 0, 1.2), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)\n\n# Step 7: Create the On/Off Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(red)", "color_brightness": "Dark", "verify": "human", "entropy": 4.292360101946858, "unit_n": 6, "param_ratio": 8.333333333333334}
{"id": "3b91c940-6622-4d8c-870a-afa0e648f817", "name": "Blender", "instruction": "Design a blender with a transparent container. Include a lid and a base with controls.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ncontrol_color = bpy.data.materials.new(name=\"Control Color\")\ncontrol_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Controls\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 0.35))\ncontrol1 = bpy.context.object\ncontrol1.name = \"Control 1\"\ncontrol1.data.materials.append(control_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.8, 0, 0.35))\ncontrol2 = bpy.context.object\ncontrol2.name = \"Control 2\"\ncontrol2.data.materials.append(control_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.0, 0, 0.35))\ncontrol3 = bpy.context.object\ncontrol3.name = \"Control 3\"\ncontrol3.data.materials.append(control_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.522960106340221, "unit_n": 6, "param_ratio": 7.833333333333333}
{"id": "c353d637-37ed-4b1c-96c5-62e5349b1f8e", "name": "Chessboard", "instruction": "Create a chessboard with an 8x8 grid of alternating black and white squares. Each square should be 2 inches by 2 inches. Ensure the board is flat and square in shape.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsquare_size = 0.05  # 2 inches in Blender units (assuming 1 unit = 1 meter)\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n            \n# Move the board to be centered at the origin\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-0.175, -0.175, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "c19cc332-103f-44f8-8ce4-613e29aa2411", "name": "Coffee Grinder", "instruction": "Please create a coffee grinder with a manual crank handle.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 2.25))\nbody = bpy.context.object\nbody.name = \"Grinder Body\"\nbody.data.materials.append(metal_color)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 3.05))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(metal_color)\n\n# Step 5: Create the Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.9, 0, 3.1), rotation=(0, math.pi/2, 0))\nhandle_stem = bpy.context.object\nhandle_stem.name = \"Handle Stem\"\nhandle_stem.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1.4, 0, 3.1))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0135236620661154, "unit_n": 5, "param_ratio": 7.2}
{"id": "7e36e404-99b4-413c-b84b-3eed76d0781a", "name": "Coat Rack", "instruction": "Let's design a coat rack. It should have a central pole with multiple hooks extending from the top. Add a circular base for stability. How would you compare the balance of this design to a wall-mounted version?", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Central Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\npole = bpy.context.object\npole.name = \"Central Pole\"\npole.data.materials.append(metal_color)\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 4: Create the Hooks\nfor i in range(6):\n    angle = i * math.pi / 3\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(x, y, 2), rotation=(0, math.pi/2, angle))\n    hook = bpy.context.object\n    hook.name = f\"Hook {i + 1}\"\n    hook.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7888154338492206, "unit_n": 8, "param_ratio": 2.875}
{"id": "9e2d5a83-0ea8-4186-91db-d5857fb674db", "name": "Geometric Pattern", "instruction": "Create a 3D model of a geometric pattern. Compare two versions: one with simple shapes like squares and triangles, and another with more complex shapes like hexagons and octagons. Both versions should be symmetrical and visually balanced. Discuss the differences in visual appeal and complexity between the two patterns.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsimple_color = bpy.data.materials.new(name=\"SimpleColor\")\nsimple_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncomplex_color = bpy.data.materials.new(name=\"ComplexColor\")\ncomplex_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create Simple Shapes (Squares and Triangles)\n# Squares\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(simple_color)\n\n# Triangles\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(x, y, 0.1))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(simple_color)\n\n# Step 3: Create Complex Shapes (Hexagons and Octagons)\n# Hexagons\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.5, depth=0.1, location=(x + 4, y, 0))\n    hexagon = bpy.context.object\n    hexagon.name = f\"Hexagon {i + 1}\"\n    hexagon.data.materials.append(complex_color)\n\n# Octagons\nfor i in range(4):\n    x = 2 * (i % 2) - 1\n    y = 2 * (i // 2) - 1\n    bpy.ops.mesh.primitive_cylinder_add(vertices=8, radius=0.5, depth=0.1, location=(x + 4, y, 0.1))\n    octagon = bpy.context.object\n    octagon.name = f\"Octagon {i + 1}\"\n    octagon.data.materials.append(complex_color)\n\n# Note: The visual appeal and complexity of the patterns can be discussed based on the created objects.\n# Simple shapes (squares and triangles) are easier to create and understand, providing a clean and minimalistic look.\n# Complex shapes (hexagons and octagons) add more visual interest and intricacy, making the pattern appear more sophisticated and detailed.", "color_brightness": "Dark", "verify": "human", "entropy": 4.654480550663739, "unit_n": 16, "param_ratio": 2.0}
{"id": "4c464691-787d-4058-ba41-bea8618eb82c", "name": "Power Line", "instruction": "What's a power line look like?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=5, location=(0, 0, 2.5))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(gray)\n\n# Step 3: Create the Crossbar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 4.5), rotation=(1.5708, 0, 0))\ncrossbar = bpy.context.object\ncrossbar.name = \"Crossbar\"\ncrossbar.data.materials.append(gray)\n\n# Step 4: Create the Power Lines\nfor i in range(3):\n    y = 0.5 * (i - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=5, location=(0, y, 4.5), rotation=(0, 1.5708, 0))\n    line = bpy.context.object\n    line.name = f\"Power Line {i + 1}\"\n    line.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.408488930482214, "unit_n": 5, "param_ratio": 5.2}
{"id": "85092711-fda2-406d-93e1-368c22d8db59", "name": "Glove", "instruction": "Create a pair of gloves with a simple design. Ensure each glove has five fingers and a snug fit around the wrist.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the gloves\nglove_color = bpy.data.materials.new(name=\"Glove Color\")\nglove_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Function to create a simple glove\ndef create_glove(location):\n    # Create the palm\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    palm = bpy.context.object\n    palm.name = \"Palm\"\n    palm.data.materials.append(glove_color)\n    \n    # Create the fingers\n    finger_length = 0.4\n    finger_radius = 0.05\n    finger_positions = [\n        (0.1, 0.2, 0.3),\n        (0.2, 0.1, 0.3),\n        (0, 0.25, 0.3),\n        (-0.2, 0.1, 0.3),\n        (-0.1, 0.2, 0.3)\n    ]\n    \n    for i, pos in enumerate(finger_positions):\n        bpy.ops.mesh.primitive_cylinder_add(radius=finger_radius, depth=finger_length, location=(location[0] + pos[0], location[1] + pos[1], location[2] + pos[2]))\n        finger = bpy.context.object\n        finger.name = f\"Finger {i + 1}\"\n        finger.data.materials.append(glove_color)\n    \n    # Create the wrist\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(location[0], location[1], location[2] - 0.25))\n    wrist = bpy.context.object\n    wrist.name = \"Wrist\"\n    wrist.data.materials.append(glove_color)\n\n# Create left glove\ncreate_glove(location=(-0.5, 0, 0))\n\n# Create right glove\ncreate_glove(location=(0.5, 0, 0))", "color_brightness": "Dark", "verify": "human", "entropy": 5.617141799955651, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "5a0a464e-5451-4b69-9351-50d856ef2fb6", "name": "Notebook", "instruction": "How does a notebook make you feel when you open it? Create a 3D model of a notebook. It should have a rectangular shape with a spiral binding along one side. The cover should be plain with no designs or text. The pages inside should be lined.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0))\npages = bpy.context.object\npages.scale = (0.9, 1.35, 0.04)\npages.name = \"Pages\"\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.02, location=(-1.05, -1.35 + i * 0.3, 0))\n    spiral = bpy.context.object\n    spiral.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees around the X-axis\n    spiral.name = f\"Spiral {i + 1}\"\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.079801928591463, "unit_n": 12, "param_ratio": 1.9166666666666667}
{"id": "aeea4007-8eea-40bc-b53a-1ab6401361b9", "name": "Floral Ornamentation", "instruction": "Design a 3D object that features intricate floral ornamentation. The design should include a variety of flower types, vines, and leaves, arranged in a harmonious and aesthetically pleasing manner.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0, 0, 1)  # Red color for flowers\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 1, 0, 1)  # Green color for leaves\n\n# Step 2: Create a simple flower\ndef create_flower(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    flower = bpy.context.object\n    flower.data.materials.append(flower_color)\n    for i in range(5):\n        angle = i * (2 * 3.14159 / 5)\n        x = location[0] + 0.2 * math.cos(angle)\n        y = location[1] + 0.2 * math.sin(angle)\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, location[2]))\n        petal = bpy.context.object\n        petal.data.materials.append(flower_color)\n\n# Step 3: Create a simple leaf\ndef create_leaf(location, rotation):\n    bpy.ops.mesh.primitive_plane_add(size=0.3, location=location, rotation=rotation)\n    leaf = bpy.context.object\n    leaf.scale[1] = 0.2\n    leaf.data.materials.append(leaf_color)\n\n# Step 4: Create a vine\ndef create_vine(start, end, num_leaves):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=(end[2] - start[2]), location=((start[0] + end[0]) / 2, (start[1] + end[1]) / 2, (start[2] + end[2]) / 2))\n    vine = bpy.context.object\n    vine.data.materials.append(leaf_color)\n    for i in range(num_leaves):\n        t = i / (num_leaves - 1)\n        x = (1 - t) * start[0] + t * end[0]\n        y = (1 - t) * start[1] + t * end[1]\n        z = (1 - t) * start[2] + t * end[2]\n        create_leaf((x, y, z), (0, 0, t * 3.14159))\n\n# Step 5: Arrange flowers, vines, and leaves\ncreate_flower((0, 0, 0))\ncreate_flower((1, 1, 0))\ncreate_flower((-1, -1, 0))\ncreate_vine((0, 0, 0), (1, 1, 0), 5)\ncreate_vine((0, 0, 0), (-1, -1, 0), 5)\ncreate_vine((1, 1, 0), (-1, -1, 0), 10)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.537010329567315, "unit_n": 8, "param_ratio": 2.625}
{"id": "2f23fcf1-da44-41dc-ad32-f0dcb532b025", "name": "Centrifuge", "instruction": "Construct a centrifuge with a cylindrical body and a hinged lid on top. Inside, include a rotor with slots for holding test tubes. Add a control panel on the front with a display and buttons for setting speed and time.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nrotor_color = bpy.data.materials.new(name=\"Rotor Color\")\nrotor_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Centrifuge Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Hinged Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 1.1))\nlid = bpy.context.object\nlid.name = \"Centrifuge Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.5))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 5: Create Slots for Test Tubes\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.55))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1.1, 0.5))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 7: Create the Display\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -1.1, 0.6))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.data.materials.append(display_color)\n\n# Step 8: Create the Buttons\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.15 * (i * 2 - 1), -1.1, 0.4))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.530135002568228, "unit_n": 15, "param_ratio": 4.133333333333334}
{"id": "97cfcb43-0d39-4171-ab65-7cf274739b39", "name": "Power Strip", "instruction": "Create a power strip. It should be a rectangular bar with multiple socket outlets. Include a power switch on one end and a cord extending from the other end. Make sure the outlets are evenly spaced along the bar.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrip_color = bpy.data.materials.new(name=\"Strip Color\")\nstrip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nsocket_color = bpy.data.materials.new(name=\"Socket Color\")\nsocket_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Power Strip Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nstrip_body = bpy.context.object\nstrip_body.scale[0] = 3  # Length\nstrip_body.scale[1] = 0.5  # Width\nstrip_body.scale[2] = 0.1  # Height\nstrip_body.name = \"Power Strip\"\nstrip_body.data.materials.append(strip_color)\n\n# Step 3: Create the Sockets\nnum_sockets = 5\nfor i in range(num_sockets):\n    x = -2.5 + i * 1.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, 0, 0.1))\n    socket = bpy.context.object\n    socket.name = f\"Socket {i + 1}\"\n    socket.data.materials.append(socket_color)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-3.2, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Power Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Cord\nbpy.ops.curve.primitive_bezier_curve_add(location=(3.2, 0, 0))\ncord = bpy.context.object\ncord.name = \"Power Cord\"\ncord.data.bevel_depth = 0.05\ncord.data.bevel_resolution = 4\ncord.data.fill_mode = 'FULL'\ncord.data.materials.append(socket_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.380720091067429, "unit_n": 4, "param_ratio": 7.75}
{"id": "9bb034bd-4a6b-469e-97a4-1ea2e2686553", "name": "Drum Kit", "instruction": "Highlight the features of a drum kit, focusing on the bass drum, snare drum, and cymbals.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbass_drum_color = bpy.data.materials.new(name=\"Bass Drum Color\")\nbass_drum_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nsnare_drum_color = bpy.data.materials.new(name=\"Snare Drum Color\")\nsnare_drum_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncymbal_color = bpy.data.materials.new(name=\"Cymbal Color\")\ncymbal_color.diffuse_color = (0.9, 0.8, 0.1, 1)  # Gold color\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15), rotation=(1.57, 0, 0))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(bass_drum_color)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.15, location=(0.8, 0, 0.3))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(snare_drum_color)\n\n# Step 4: Create the Cymbals\n# Hi-hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(1.2, 0, 0.6))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(cymbal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(1.2, 0, 0.62))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(cymbal_color)\n\n# Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(-0.8, 0, 0.8))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(cymbal_color)\n\n# Ride Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.02, location=(0, 1.2, 0.8))\nride_cymbal = bpy.context.object\nride_cymbal.name = \"Ride Cymbal\"\nride_cymbal.data.materials.append(cymbal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.113509056024676, "unit_n": 6, "param_ratio": 8.0}
{"id": "6ff7ea3f-f06c-47f9-ab4a-ef85cecfb8db", "name": "Travel Wallet", "instruction": "Create a travel wallet that is compact and sleek. It should have multiple compartments for holding passports, tickets, and cards. Include a secure closure mechanism to keep everything in place.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Wallet\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1, 0.1, 0.5)\nmain_body.data.materials.append(wallet_color)\n\n# Step 3: Create Compartments\n# Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.15, 0.2))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.scale = (0.4, 0.02, 0.3)\npassport_compartment.data.materials.append(wallet_color)\n\n# Ticket Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 0.15, 0.2))\nticket_compartment = bpy.context.object\nticket_compartment.name = \"Ticket Compartment\"\nticket_compartment.scale = (0.4, 0.02, 0.3)\nticket_compartment.data.materials.append(wallet_color)\n\n# Card Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.5 + i * 0.5, 0.15, -0.2))\n    card_compartment = bpy.context.object\n    card_compartment.name = f\"Card Compartment {i + 1}\"\n    card_compartment.scale = (0.2, 0.02, 0.1)\n    card_compartment.data.materials.append(wallet_color)\n\n# Step 4: Create the Closure Mechanism\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.25, 0))\nclosure_mechanism = bpy.context.object\nclosure_mechanism.name = \"Closure Mechanism\"\nclosure_mechanism.scale = (1, 0.02, 0.5)\nclosure_mechanism.data.materials.append(wallet_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.8273096391465935, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "a51cc290-2461-4c71-b25e-8943e20cf4ca", "name": "Apple", "instruction": "Create a 3D model of an apple with a stem at the top.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.3, 0.2, 0.1, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "93f1cf21-f643-45d1-bd09-12d964e6503d", "name": "Screwdriver", "instruction": "Let's create a screwdriver. It should have a long, slender handle and a metal shaft with a flat or Phillips head. The handle should be easy to grip, and the shaft should be sturdy enough to turn screws. Include a few different head sizes for versatility. Make sure it's designed for precision and comfort during use.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=2.0, location=(0, 0, -1.0))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Flat Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, -2.05))\nflat_head = bpy.context.object\nflat_head.name = \"FlatHead\"\nflat_head.data.materials.append(shaft_color)\n\n# Step 5: Create the Phillips Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0.2, 0, -2.05))\nphillips_head = bpy.context.object\nphillips_head.name = \"PhillipsHead\"\nphillips_head.data.materials.append(shaft_color)\n\n# Step 6: Create another Flat Head for versatility\nbpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.1, location=(-0.2, 0, -2.05))\nflat_head_small = bpy.context.object\nflat_head_small.name = \"FlatHeadSmall\"\nflat_head_small.data.materials.append(shaft_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.201988051523562, "unit_n": 5, "param_ratio": 7.0}
{"id": "04222f0a-bd28-47e5-871f-53a00d51c955", "name": "Extension Cord", "instruction": "Let's compare two different types of extension cords. The first type should be a simple, single-outlet cord with a length of 6 feet. The second type should be a multi-outlet power strip with a length of 6 feet and 6 outlets. Both cords should have a plug at one end and outlets at the other end.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncord_color = bpy.data.materials.new(name=\"CordColor\")\ncord_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nplug_color = bpy.data.materials.new(name=\"PlugColor\")\nplug_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray\n\noutlet_color = bpy.data.materials.new(name=\"OutletColor\")\noutlet_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Single-Outlet Cord\n# Create the cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(0, 0, 0.9))\ncord = bpy.context.object\ncord.name = \"SingleOutletCord\"\ncord.data.materials.append(cord_color)\n\n# Create the plug\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 1.8))\nplug = bpy.context.object\nplug.name = \"SingleOutletPlug\"\nplug.data.materials.append(plug_color)\n\n# Create the single outlet\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\noutlet = bpy.context.object\noutlet.name = \"SingleOutlet\"\noutlet.data.materials.append(outlet_color)\n\n# Step 3: Create the Multi-Outlet Power Strip\n# Create the cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(2, 0, 0.9))\ncord = bpy.context.object\ncord.name = \"MultiOutletCord\"\ncord.data.materials.append(cord_color)\n\n# Create the plug\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(2, 0, 1.8))\nplug = bpy.context.object\nplug.name = \"MultiOutletPlug\"\nplug.data.materials.append(plug_color)\n\n# Create the power strip body\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(2, 0, 0))\npower_strip = bpy.context.object\npower_strip.scale[1] = 0.5  # Make it longer\npower_strip.name = \"PowerStripBody\"\npower_strip.data.materials.append(outlet_color)\n\n# Create the outlets on the power strip\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(2, 0.15 * (i - 2.5), 0.05))\n    multi_outlet = bpy.context.object\n    multi_outlet.name = f\"MultiOutlet{i + 1}\"\n    multi_outlet.data.materials.append(outlet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.621172735453147, "unit_n": 12, "param_ratio": 3.75}
{"id": "16fc0f67-9d6b-4f16-8204-37e28df6386a", "name": "Bicycle", "instruction": "Design a bicycle with a classic frame, two wheels, handlebars, and a seat. Ensure it looks practical for everyday use.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(x, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\n# Main triangle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.5, location=(0, 0, 0.5), rotation=(0, 0, math.pi/4))\nframe_main = bpy.context.object\nframe_main.name = \"Frame Main\"\nframe_main.data.materials.append(gray)\n\n# Rear triangle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-1, 0, 0.5), rotation=(0, 0, -math.pi/4))\nframe_rear = bpy.context.object\nframe_rear.name = \"Frame Rear\"\nframe_rear.data.materials.append(gray)\n\n# Connecting bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.5), rotation=(0, 0, math.pi/2))\nframe_connect = bpy.context.object\nframe_connect.name = \"Frame Connect\"\nframe_connect.data.materials.append(gray)\n\n# Step 4: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1, 0, 2), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(gray)\n\n# Step 5: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1, 0, 2))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(black)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.449744001060687, "unit_n": 7, "param_ratio": 7.285714285714286}
{"id": "eaf967ce-e8f9-4dfa-bc81-52ee9555dc31", "name": "Circuit Breaker vs. Fuse", "instruction": "Create a 3D model comparing a circuit breaker and a fuse. Place both objects side by side, highlighting their differences in shape and components.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Circuit Breaker\n# Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0.5))\ncircuit_breaker_base = bpy.context.object\ncircuit_breaker_base.name = \"Circuit Breaker Base\"\n\n# Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.5, 0, 1.1))\ncircuit_breaker_switch = bpy.context.object\ncircuit_breaker_switch.name = \"Circuit Breaker Switch\"\n\n# Step 3: Create the Fuse\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.5, location=(1.5, 0, 0.75))\nfuse_base = bpy.context.object\nfuse_base.name = \"Fuse Base\"\n\n# Caps\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(1.5, 0, 0.1))\nfuse_cap1 = bpy.context.object\nfuse_cap1.name = \"Fuse Cap 1\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(1.5, 0, 1.4))\nfuse_cap2 = bpy.context.object\nfuse_cap2.name = \"Fuse Cap 2\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.194185973456352, "unit_n": 5, "param_ratio": 4.6}
{"id": "18857b4e-4c07-4120-84c5-3abfb6792ffe", "name": "Blender", "instruction": "Design a blender with a cylindrical base and a detachable jar. The base should have a control panel with buttons for different speed settings. The jar should have measurement markings and a lid with a removable center cap. Ensure the blades at the bottom of the jar are sharp and capable of blending various ingredients.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.9, 0.4))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.data.materials.append(button_color)\n\n# Step 4: Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 0.9, 0.45))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 7: Create the Removable Center Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 2.6))\ncap = bpy.context.object\ncap.name = \"Center Cap\"\ncap.data.materials.append(base_color)\n\n# Step 8: Create the Blades\nfor i in range(4):\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0, 1.1))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.data.materials.append(blade_color)\n    blade.rotation_euler = (0, 0, math.pi / 4 * i)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.355803417501202, "unit_n": 12, "param_ratio": 4.333333333333333}
{"id": "17441e95-0f08-479a-86ff-9d251a6f3031", "name": "Drum", "instruction": "Create a drum with a cylindrical body and a taut membrane on top.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nmembrane_color = bpy.data.materials.new(name=\"Membrane Color\")\nmembrane_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Membrane\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1))\nmembrane = bpy.context.object\nmembrane.name = \"Membrane\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\nmembrane.data.materials.append(membrane_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "bd300256-edb3-484e-b1e3-586362274bc4", "name": "Drum Set", "instruction": "Design a drum set for a professional drummer. It should include a bass drum, snare drum, toms, hi-hat, and cymbals. Make sure the drums are arranged ergonomically for ease of play. The bass drum should be centrally positioned with the snare drum to the left. The toms should be mounted above the bass drum, and the cymbals should be placed at varying heights around the set. Include a drum throne for the drummer to sit on.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Silver metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.3, location=(0, 0, 0.15))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(wood)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(-0.5, 0.3, 0.3))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(metal)\n\n# Step 4: Create the Toms\nfor i in range(2):\n    x = 0\n    y = 0.4 - i * 0.3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.2, location=(x, y, 0.6))\n    tom = bpy.context.object\n    tom.name = f\"Tom {i + 1}\"\n    tom.data.materials.append(wood)\n\n# Step 5: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(-0.6, -0.3, 0.9))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(metal)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.05, location=(-0.6, -0.3, 0.95))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(metal)\n\n# Step 6: Create the Cymbals\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(x, -0.6, 1 + i * 0.2))\n    cymbal = bpy.context.object\n    cymbal.name = f\"Cymbal {i + 1}\"\n    cymbal.data.materials.append(metal)\n\n# Step 7: Create the Drum Throne\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0.5, 0, 0.45))\nthrone_seat = bpy.context.object\nthrone_seat.name = \"Throne Seat\"\nthrone_seat.data.materials.append(wood)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.5, 0, 0.2))\nthrone_stand = bpy.context.object\nthrone_stand.name = \"Throne Stand\"\nthrone_stand.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.74269173801229, "unit_n": 10, "param_ratio": 5.0}
{"id": "88ee07b2-66af-4c40-89be-6f095877fa4b", "name": "Hat", "instruction": "Design a hat with a wide brim. The crown should be rounded and rise smoothly from the brim. Add a band around the base of the crown.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.75))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_torus_add(major_radius=0.8, minor_radius=0.1, location=(0, 0, 0.4))\nband = bpy.context.object\nband.name = \"Band\"\nband.scale[2] = 0.2\n\n# Step 5: Smooth the Crown\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.shade_smooth()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.78439967431788, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "fd9fefbe-47bd-4841-a99a-fa08918c0f33", "name": "Wall Clock", "instruction": "Can you design a wall clock for me? It should have a minimalist look with a circular shape and simple, clean lines. The numbers should be represented by small dots, and the hands should be thin and streamlined.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclock_color = bpy.data.materials.new(name=\"Clock Color\")\nclock_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhand_color = bpy.data.materials.new(name=\"Hand Color\")\nhand_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for hands\n\n# Step 2: Create the Clock Face\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nclock_face = bpy.context.object\nclock_face.name = \"Clock Face\"\nclock_face.data.materials.append(clock_color)\n\n# Step 3: Create the Dots for Numbers\nfor i in range(12):\n    angle = math.radians(i * 30)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.05))\n    dot = bpy.context.object\n    dot.name = f\"Dot {i + 1}\"\n    dot.data.materials.append(hand_color)\n\n# Step 4: Create the Hour Hand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, 0, 0.1))\nhour_hand = bpy.context.object\nhour_hand.scale = (0.5, 0.05, 0.05)\nhour_hand.name = \"Hour Hand\"\nhour_hand.data.materials.append(hand_color)\n\n# Step 5: Create the Minute Hand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.75, 0, 0.1))\nminute_hand = bpy.context.object\nminute_hand.scale = (0.75, 0.03, 0.03)\nminute_hand.name = \"Minute Hand\"\nminute_hand.data.materials.append(hand_color)\n\n# Step 6: Create the Second Hand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, 0, 0.1))\nsecond_hand = bpy.context.object\nsecond_hand.scale = (0.9, 0.02, 0.02)\nsecond_hand.name = \"Second Hand\"\nsecond_hand.data.materials.append(hand_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.810842554797704, "unit_n": 16, "param_ratio": 1.9375}
{"id": "29733dd0-1b6a-4cd0-b064-b0fd83608fde", "name": "Bookshelf", "instruction": "Create a 3D model of a bookshelf. How would it look in a modern living room?", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Shelves\nshelf_height = 0.2\nshelf_depth = 0.3\nshelf_width = 1.0\nnum_shelves = 5\nspacing = 0.4\n\nfor i in range(num_shelves):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, i * spacing))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.05\npanel_height = (num_shelves - 1) * spacing + shelf_height\n\nfor i in range(2):\n    x = (shelf_width / 2 + panel_thickness / 2) * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, panel_height / 2 - shelf_height / 2))\n    panel = bpy.context.object\n    panel.scale = (panel_thickness, shelf_depth, panel_height)\n    panel.name = f\"Side Panel {i + 1}\"\n    panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2, panel_height / 2 - shelf_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width, panel_thickness, panel_height)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.746903475109131, "unit_n": 4, "param_ratio": 4.25}
{"id": "dc943266-7025-4ed7-a57d-901ee6ed16d9", "name": "Flute", "instruction": "Generate a simple flute with a straight body and finger holes.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nflute_color = bpy.data.materials.new(name=\"Flute Color\")\nflute_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Body of the Flute\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\nflute_body = bpy.context.object\nflute_body.name = \"Flute Body\"\nflute_body.data.materials.append(flute_color)\n\n# Step 3: Create the Finger Holes\nhole_radius = 0.01\nhole_depth = 0.1\nhole_positions = [-0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75]\n\nfor pos in hole_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=hole_radius, depth=hole_depth, location=(0, 0.05, pos), rotation=(1.5708, 0, 0))\n    hole = bpy.context.object\n    hole.name = f\"Hole {pos}\"\n    bpy.ops.object.modifier_add(type='BOOLEAN')\n    hole.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n    hole.modifiers[\"Boolean\"].object = flute_body\n    bpy.context.view_layer.objects.active = flute_body\n    bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n    bpy.data.objects.remove(hole, do_unlink=True)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "732a7513-b55e-4156-8634-ed8f8709b96f", "name": "Dog Bed", "instruction": "Create a dog bed that has a circular shape with a raised edge. The center of the bed should be slightly depressed to form a cozy nest-like area. Add a small bone-shaped pillow as an accessory. Ensure the bed is large enough to accommodate a medium-sized dog comfortably.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.7, 0.5, 0.3, 1)  # Brownish color\npillow_color = bpy.data.materials.new(name=\"Pillow Color\")\npillow_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(0, 0, 0.1))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(bed_color)\n\n# Step 4: Create the Depressed Center\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.1, location=(0, 0, -0.05))\ndepressed_center = bpy.context.object\ndepressed_center.name = \"Depressed Center\"\ndepressed_center.data.materials.append(bed_color)\n\n# Step 5: Create the Bone-shaped Pillow\n# Create the main part of the bone\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0.8, 0.2))\nbone_main = bpy.context.object\nbone_main.name = \"Bone Main\"\nbone_main.scale = (1, 0.3, 0.1)\nbone_main.data.materials.append(pillow_color)\n\n# Create the ends of the bone\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(i * 0.3, 0.8, 0.2))\n    bone_end = bpy.context.object\n    bone_end.name = f\"Bone End {i}\"\n    bone_end.data.materials.append(pillow_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.926334587581229, "unit_n": 5, "param_ratio": 6.6}
{"id": "80c1ee47-bdbc-432f-99c2-f63809fb5955", "name": "Hammer", "instruction": "Construct a 3D model of a hammer. The handle should be long and straight. The head should have one flat side for pounding and one claw side for pulling nails.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the handle\nhead_color = bpy.data.materials.new(name=\"Head Color\")\nhead_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the head\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Head (Flat side for pounding)\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 0.1))\nhead_flat = bpy.context.object\nhead_flat.name = \"Head Flat\"\nhead_flat.scale[1] = 0.3  # Make it rectangular\nhead_flat.data.materials.append(head_color)\n\n# Step 4: Create the Head (Claw side for pulling nails)\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 0.1))\nhead_claw = bpy.context.object\nhead_claw.name = \"Head Claw\"\nhead_claw.scale[1] = 0.3  # Make it rectangular\nhead_claw.data.materials.append(head_color)\n\n# Adjust the position of the claw side\nhead_claw.location.x += 0.15\nhead_claw.location.z += 0.1\n\n# Create the claw shape\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.15, 0, 0.2), rotation=(0, math.pi/2, 0))\nclaw = bpy.context.object\nclaw.name = \"Claw\"\nclaw.data.materials.append(head_color)\n\n# Combine the head parts into one object\nbpy.ops.object.select_all(action='DESELECT')\nhead_flat.select_set(True)\nhead_claw.select_set(True)\nclaw.select_set(True)\nbpy.context.view_layer.objects.active = head_flat\nbpy.ops.object.join()\n\n# Move the head to the correct position on the handle\nhead_flat.location.z += 0.55\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.19182544406626, "unit_n": 4, "param_ratio": 7.75}
{"id": "fb4aba29-4d54-48d5-a72d-ce59f765806b", "name": "Birthday Cake", "instruction": "Design a simple birthday cake. The cake has two tiers, each circular in shape. The top tier is smaller in diameter than the bottom tier. Include frosting and a few candles on top.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"CakeColor\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for the cake\nfrosting_color = bpy.data.materials.new(name=\"FrostingColor\")\nfrosting_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink color for the frosting\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color for the candles\n\n# Step 2: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"BottomTier\"\nbottom_tier.data.materials.append(cake_color)\n\n# Step 3: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.4, location=(0, 0, 0.7))\ntop_tier = bpy.context.object\ntop_tier.name = \"TopTier\"\ntop_tier.data.materials.append(cake_color)\n\n# Step 4: Create the Frosting for Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0.55))\nbottom_frosting = bpy.context.object\nbottom_frosting.name = \"BottomFrosting\"\nbottom_frosting.data.materials.append(frosting_color)\n\n# Step 5: Create the Frosting for Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.1, location=(0, 0, 0.9))\ntop_frosting = bpy.context.object\ntop_frosting.name = \"TopFrosting\"\ntop_frosting.data.materials.append(frosting_color)\n\n# Step 6: Create the Candles\ncandle_locations = [(-0.2, -0.2, 1.1), (0.2, -0.2, 1.1), (-0.2, 0.2, 1.1), (0.2, 0.2, 1.1)]\nfor i, loc in enumerate(candle_locations):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=loc)\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.735626780673084, "unit_n": 5, "param_ratio": 7.4}
{"id": "1a00ee23-b93f-42c7-8e31-df31d57c5aa9", "name": "Decorative Frame", "instruction": "Design a decorative frame. Keep it minimal and elegant.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Frame\n# Create the outer frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.data.materials.append(frame_color)\n\n# Create the inner frame (cutout)\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (0.9, 0.1, 1.35)\n\n# Boolean difference to create the frame cutout\nmod_bool = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.object = inner_frame\nmod_bool.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "8be5cb9b-d286-4ee0-9a86-48d0c41532e0", "name": "Ice Cream Cone", "instruction": "Model an ice cream cone. The cone should be a simple conical shape with a scoop of ice cream on top. The scoop should have a rounded texture.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, radius2=0, depth=1.5, location=(0, 0, 0))\ncone = bpy.context.object\ncone.name = \"Cone\"\n\n# Step 3: Create the Ice Cream Scoop\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(0, 0, 1))\nscoop = bpy.context.object\nscoop.name = \"Ice Cream Scoop\"\n\n# Step 4: Add Subdivision Surface Modifier for Rounded Texture\nbpy.ops.object.modifier_add(type='SUBSURF')\nscoop.modifiers[\"Subdivision\"].levels = 2\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.311557583701118, "unit_n": 3, "param_ratio": 4.0}
{"id": "a23f993b-7672-401f-b8e2-0e751b0104e9", "name": "Pizza Slice vs. Burger", "instruction": "Generate a 3D model of a pizza slice and a burger. The pizza slice should have a triangular shape with visible toppings like pepperoni, cheese, and olives. The burger should have a round bun, lettuce, a patty, cheese, and a slice of tomato. Compare the two items based on their shapes and components.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0, 0, 0, 1)  # Black color for olives\nbun_color = bpy.data.materials.new(name=\"Bun\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Brown color for bun\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\npatty_color = bpy.data.materials.new(name=\"Patty\")\npatty_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for patty\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (1, 0, 0, 1)  # Red color for tomato\n\n# Step 2: Create the Pizza Slice\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(-2, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Add Pepperoni\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(-2 + 0.3 * i, 0.3, 0.05))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Add Olives\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(-2 + 0.5 * i, -0.3, 0.05))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)\n\n# Step 3: Create the Burger\n# Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(2, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(2, 0, 0.2))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(2, 0, 0.35))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(2, 0, 0.4))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(2, 0, 0.45))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(2, 0, 0.6))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.011602221203736, "unit_n": 12, "param_ratio": 6.75}
{"id": "1ec125f3-d72b-4166-81d6-9129e38780da", "name": "Bicycle", "instruction": "Design a bicycle. Add decorative elements like a set of streamers on the handlebars and a colorful pattern on the frame. The bike should have two wheels, a seat, and pedals.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ncolorful_pattern = bpy.data.materials.new(name=\"Colorful Pattern\")\ncolorful_pattern.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for simplicity\nstreamer_color = bpy.data.materials.new(name=\"Streamer Color\")\nstreamer_color.diffuse_color = (0.8, 0.8, 0, 1)  # Yellow color\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(x, 0, 1))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, 1.5), rotation=(0, 0, math.pi/2))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(colorful_pattern)\n\n# Step 4: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 2.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(black)\n\n# Step 5: Create the Pedals\nfor i in range(2):\n    angle = i * math.pi\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0.5 * math.cos(angle), 1), rotation=(0, math.pi/2, 0))\n    pedal = bpy.context.object\n    pedal.name = f\"Pedal {i + 1}\"\n    pedal.data.materials.append(black)\n\n# Step 6: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 1, 2), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(black)\n\n# Step 7: Add Streamers to the Handlebars\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(x, 1, 2.5), rotation=(0, 0, math.pi/2))\n    streamer = bpy.context.object\n    streamer.name = f\"Streamer {i + 1}\"\n    streamer.data.materials.append(streamer_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.395627548969158, "unit_n": 9, "param_ratio": 6.222222222222222}
{"id": "e618a731-8a54-4e3c-a47e-312d64e04478", "name": "Pizza Slice", "instruction": "Generate a 3D model of a pizza slice. The slice should have a triangular shape with a slightly curved crust. Add some toppings like pepperoni slices, olives, and bell pepper pieces. Ensure the cheese is spread evenly, and a few strands are slightly melted and stretching.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport bmesh\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Dark red color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Pizza Slice Base\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.95, radius2=0, depth=0.05, location=(0, 0, 0.05))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Slices\npepperoni_positions = [(0.2, 0.1, 0.1), (-0.2, 0.1, 0.1), (0, -0.2, 0.1)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create the Olive Slices\nolive_positions = [(0.1, 0.3, 0.1), (-0.3, 0, 0.1), (0.2, -0.3, 0.1)]\nfor i, pos in enumerate(olive_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=pos)\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)\n\n# Step 6: Create the Bell Pepper Pieces\nbell_pepper_positions = [(0.3, 0.2, 0.1), (-0.1, -0.3, 0.1), (0.1, -0.1, 0.1)]\nfor i, pos in enumerate(bell_pepper_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Optional: Create melted cheese strands (simplified as small cylinders)\ncheese_strand_positions = [(0.05, 0.05, 0.12), (-0.05, -0.05, 0.12)]\nfor i, pos in enumerate(cheese_strand_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=pos, rotation=(math.pi/4, 0, 0))\n    cheese_strand = bpy.context.object\n    cheese_strand.name = f\"Cheese Strand {i + 1}\"\n    cheese_strand.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6055957533040655, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "53d4b538-a7d5-4c7e-9fb9-f4433465eb50", "name": "Pizza", "instruction": "Can you add some interesting features to a pizza model? Perhaps some toppings like pepperoni and olives?", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\nolive_color = bpy.data.materials.new(name=\"Olive Color\")\nolive_color.diffuse_color = (0, 0, 0, 1)  # Black color for olives\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.05, location=(0, 0, 0.05))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 4: Create Pepperoni Toppings\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0, 0.7), (0.7, 0), (-0.7, 0), (0, -0.7)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create Olive Toppings\nolive_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0.6, 0.6), (-0.6, 0.6), (0.6, -0.6), (-0.6, -0.6)]\nfor i, (x, y) in enumerate(olive_positions):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.1))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.074231290220989, "unit_n": 4, "param_ratio": 9.75}
{"id": "1e39560f-2346-47b4-8e41-7a5f4ae4cd9b", "name": "Wall Clock", "instruction": "Design a wall clock with a circular face and simple hour and minute hands. Include numbers on the clock face for time indication.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Clock Face\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0))\nclock_face = bpy.context.object\nclock_face.name = \"Clock Face\"\nclock_face.data.materials.append(white)\n\n# Step 3: Create the Hour Hand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.5, 0.05))\nhour_hand = bpy.context.object\nhour_hand.scale = (0.05, 0.5, 0.05)\nhour_hand.name = \"Hour Hand\"\nhour_hand.data.materials.append(black)\n\n# Step 4: Create the Minute Hand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.75, 0.05))\nminute_hand = bpy.context.object\nminute_hand.scale = (0.05, 0.75, 0.05)\nminute_hand.name = \"Minute Hand\"\nminute_hand.data.materials.append(black)\n\n# Step 5: Add Numbers to the Clock Face\nfor num in range(1, 13):\n    angle = math.radians((num / 12.0) * 360.0)\n    x = math.sin(angle) * 0.85\n    y = math.cos(angle) * 0.85\n    bpy.ops.object.text_add(location=(x, y, 0.1), rotation=(0, 0, -angle))\n    text = bpy.context.object\n    text.data.body = str(num)\n    text.data.size = 0.2\n    text.name = f\"Number {num}\"\n    text.data.materials.append(black)", "color_brightness": "Bright", "verify": "human", "entropy": 3.966138326337913, "unit_n": 15, "param_ratio": 1.9333333333333333}
{"id": "e274c7f7-de0a-4d73-9e42-2c00238f5aa1", "name": "Carrot", "instruction": "Create a carrot that is about 7 inches long with a tapered shape. The carrot should have a vibrant orange color.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nvibrant_orange = bpy.data.materials.new(name=\"Vibrant Orange\")\nvibrant_orange.diffuse_color = (1.0, 0.55, 0.0, 1)  # Vibrant orange color\n\n# Step 2: Create the Carrot\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.05, depth=7, location=(0, 0, 3.5))\ncarrot = bpy.context.object\ncarrot.name = \"Carrot\"\ncarrot.data.materials.append(vibrant_orange)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.030560671628889, "unit_n": 1, "param_ratio": 11.0}
{"id": "0ca521d7-df28-4f70-9e35-577e3d7ced61", "name": "Screwdriver", "instruction": "Generate a 3D model of a screwdriver. The handle should be long and cylindrical, with a flat tip at the end. The shaft should be straight and narrow.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.5, location=(0, 0, 0.75))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 2.25))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Flat Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 3.25))\ntip = bpy.context.object\ntip.scale[2] = 0.05  # Make it flat\ntip.name = \"Tip\"\ntip.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.270275129726423, "unit_n": 3, "param_ratio": 8.0}
{"id": "c9655d7e-3a38-4ad5-b860-76f567262476", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a cylindrical container for seeds and a perch for birds to stand on while eating.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nperch_color = bpy.data.materials.new(name=\"PerchColor\")\nperch_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.0, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0.3, 0, 0.2), rotation=(0, 1.57, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(perch_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.6803861534038376, "unit_n": 2, "param_ratio": 11.5}
{"id": "c7bf71a7-e9d8-4063-8f7c-82b0af859028", "name": "Travel Mug", "instruction": "Design a travel mug with a cylindrical body and a secure lid. The lid should have a small opening for sipping and a handle on the side for easy carrying. Add a few simple decorative elements on the body.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmug_color = bpy.data.materials.new(name=\"Mug Color\")\nmug_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2.5, location=(0, 0, 1.25))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Sipping Opening\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.8, 0, 2.7))\nsipping_opening = bpy.context.object\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = lid\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(sipping_opening)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(1.5, 0, 1.25), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mug_color)\n\n# Step 6: Add Decorative Elements\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.5, 0.5, 1.25))\ndecor1 = bpy.context.object\ndecor1.name = \"Decorative Element 1\"\ndecor1.data.materials.append(mug_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-0.5, -0.5, 1.25))\ndecor2 = bpy.context.object\ndecor2.name = \"Decorative Element 2\"\ndecor2.data.materials.append(mug_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.7, 1.25))\ndecor3 = bpy.context.object\ndecor3.name = \"Decorative Element 3\"\ndecor3.data.materials.append(mug_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8345632000992915, "unit_n": 8, "param_ratio": 5.75}
{"id": "035e2b6b-f231-4237-9877-7586729a4c7c", "name": "Coffee Shop Sign", "instruction": "Create two versions of a coffee shop sign. One should have a steaming coffee cup icon, and the other should feature a coffee bean. Compare their visual appeal.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Function to create a steaming coffee cup\ndef create_steaming_cup(location):\n    # Create the cup\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.7, location=(location[0], location[1], location[2] + 0.35))\n    cup = bpy.context.object\n    cup.name = \"Cup\"\n    \n    # Create the handle\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(location[0] + 0.5, location[1], location[2] + 0.35))\n    handle = bpy.context.object\n    handle.name = \"Handle\"\n    \n    # Create steam\n    for i in range(3):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(location[0], location[1], location[2] + 0.7 + i * 0.2))\n        steam = bpy.context.object\n        steam.name = f\"Steam {i + 1}\"\n\n# Function to create a coffee bean\ndef create_coffee_bean(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=location)\n    bean = bpy.context.object\n    bean.name = \"Coffee Bean\"\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(1, 0.6, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Clear the scene\nclear_scene()\n\n# Create the first sign with a steaming coffee cup\ncreate_steaming_cup(location=(0, 0, 0))\n\n# Create the second sign with a coffee bean\ncreate_coffee_bean(location=(2, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9811385082003516, "unit_n": 6, "param_ratio": 2.5}
{"id": "1f7c661d-b4d6-475e-9e9e-ef61a3fd0159", "name": "Dish Rack", "instruction": "Let's design a dish rack. The dish rack should have slots for plates and a section for utensils. It should be able to hold a variety of dish sizes and shapes. Include a draining tray underneath to collect water.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray plastic color\n\n# Step 2: Create the Base Tray\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase_tray = bpy.context.object\nbase_tray.scale = (1, 0.8, 0.05)\nbase_tray.name = \"Base Tray\"\nbase_tray.data.materials.append(plastic_color)\n\n# Step 3: Create Plate Slots\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.9 + i * 0.45, 0, 0.25))\n    slot = bpy.context.object\n    slot.scale = (0.05, 0.8, 0.25)\n    slot.name = f\"Plate Slot {i + 1}\"\n    slot.data.materials.append(metal_color)\n\n# Step 4: Create Utensil Section\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.9, 0, 0.25))\nutensil_section = bpy.context.object\nutensil_section.scale = (0.2, 0.8, 0.25)\nutensil_section.name = \"Utensil Section\"\nutensil_section.data.materials.append(metal_color)\n\n# Step 5: Create Draining Tray\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.05))\ndraining_tray = bpy.context.object\ndraining_tray.scale = (1, 0.8, 0.05)\ndraining_tray.name = \"Draining Tray\"\ndraining_tray.data.materials.append(plastic_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.119162312519754, "unit_n": 8, "param_ratio": 3.25}
{"id": "db2e761a-7031-4307-b1d5-42fdf14623ec", "name": "Pet Feeding Mat", "instruction": "I'd like you to create a 3D model of a pet feeding mat. The mat should be rectangular with raised edges to contain spills. It should have a textured surface to prevent bowls from sliding. The overall design should be practical and easy to clean.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmat_color = bpy.data.materials.new(name=\"MatColor\")\nmat_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Mat Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmat_base = bpy.context.object\nmat_base.scale = (1.5, 1, 0.05)\nmat_base.name = \"MatBase\"\nmat_base.data.materials.append(mat_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.05, 0.05))\nfront_edge = bpy.context.object\nfront_edge.scale = (1.5, 0.05, 0.1)\nfront_edge.name = \"FrontEdge\"\nfront_edge.data.materials.append(mat_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.05, 0.05))\nback_edge = bpy.context.object\nback_edge.scale = (1.5, 0.05, 0.1)\nback_edge.name = \"BackEdge\"\nback_edge.data.materials.append(mat_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.55, 0, 0.05))\nleft_edge = bpy.context.object\nleft_edge.scale = (0.05, 1, 0.1)\nleft_edge.name = \"LeftEdge\"\nleft_edge.data.materials.append(mat_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.55, 0, 0.05))\nright_edge = bpy.context.object\nright_edge.scale = (0.05, 1, 0.1)\nright_edge.name = \"RightEdge\"\nright_edge.data.materials.append(mat_color)\n\n# Step 4: Create the Textured Surface\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.1))\ntextured_surface = bpy.context.object\ntextured_surface.scale = (1.45, 0.95, 1)\ntextured_surface.name = \"TexturedSurface\"\ntextured_surface.data.materials.append(mat_color)\n\n# Apply a simple texture (bump map) to the surface\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=50)\nbpy.ops.object.mode_set(mode='OBJECT')\n\nbpy.ops.object.modifier_add(type='DISPLACE')\ntexture = bpy.data.textures.new(\"Texture\", type='CLOUDS')\ntextured_surface.modifiers[\"Displace\"].texture = texture\ntextured_surface.modifiers[\"Displace\"].strength = 0.02", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.562717108488124, "unit_n": 7, "param_ratio": 4.285714285714286}
{"id": "aa3a7c06-d09c-4255-98b7-90ee809a47b3", "name": "Screwdriver", "instruction": "Design a screwdriver. It should have a straight handle and a flat or Phillips head. Compare it to a wrench in terms of usage and versatility.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Head (Flat Head)\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[0] = 0.02\nhead.scale[1] = 0.1\nhead.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.514915311100522, "unit_n": 3, "param_ratio": 8.0}
{"id": "c7f095ac-6c88-44ce-ac38-7098fe9df79f", "name": "Stand Mixer", "instruction": "Let's design a stand mixer. Start with a base that supports the entire unit. Add a mixing bowl that fits into the base. The mixer head should be above the bowl, with a lever to tilt it back. Include a few buttons and a speed dial on the side.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nmixer_head_color = bpy.data.materials.new(name=\"Mixer Head Color\")\nmixer_head_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1, 0.6, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Mixing Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0, 0, 0.4))\nbowl = bpy.context.object\nbowl.name = \"Mixing Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 4: Create the Mixer Head\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.8))\nmixer_head = bpy.context.object\nmixer_head.scale = (0.5, 0.5, 0.2)\nmixer_head.name = \"Mixer Head\"\nmixer_head.data.materials.append(mixer_head_color)\n\n# Step 5: Create the Lever\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.3, 0, 0.8), rotation=(0, math.pi/2, 0))\nlever = bpy.context.object\nlever.name = \"Lever\"\nlever.data.materials.append(base_color)\n\n# Step 6: Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.55, -0.2 + i * 0.1, 0.8))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 7: Create Speed Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0.55, 0.2, 0.8))\ndial = bpy.context.object\ndial.name = \"Speed Dial\"\ndial.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7483121312376806, "unit_n": 8, "param_ratio": 6.25}
{"id": "cf17d8e3-01fb-46f2-97fe-01d1933e2e67", "name": "Pizza Slice", "instruction": "Create a 3D model of a pizza slice. The slice should be triangular with a slightly raised crust. Include toppings like pepperoni, mushrooms, and green peppers. The cheese should cover the entire slice, with the toppings evenly distributed.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.9, 0.9, 0.8, 1)  # Light gray color\npepper_color = bpy.data.materials.new(name=\"Pepper\")\npepper_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\n# Step 2: Create the Pizza Slice Base\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=1.1, depth=0.2, location=(0, 0, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create Pepperoni\nfor i in range(3):\n    angle = i * 2 * math.pi / 3\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create Mushrooms\nfor i in range(2):\n    angle = (i * 2 + 1) * math.pi / 4\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.1))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 6: Create Green Peppers\nfor i in range(2):\n    angle = (i * 2 + 1) * math.pi / 3\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.1))\n    pepper = bpy.context.object\n    pepper.name = f\"Pepper {i + 1}\"\n    pepper.data.materials.append(pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1944412922063536, "unit_n": 9, "param_ratio": 5.666666666666667}
{"id": "bc216fae-556a-4c23-afeb-061876d1f9b0", "name": "Laundry Basket", "instruction": "Envision a 3D model of a laundry basket. It is rectangular and has a perforated design for ventilation. The handles on the sides make it easy to carry. The basket should be large enough to hold a full load of laundry.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Basket Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbasket_base = bpy.context.object\nbasket_base.name = \"Basket Base\"\nbasket_base.scale = (1, 1, 0.1)\nbasket_base.data.materials.append(basket_color)\n\n# Step 3: Create the Basket Walls\nwall_thickness = 0.1\nwall_height = 1\n\n# Front Wall\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1 + wall_thickness / 2, 1 + wall_height / 2))\nfront_wall = bpy.context.object\nfront_wall.name = \"Front Wall\"\nfront_wall.scale = (1, wall_thickness, wall_height)\nfront_wall.data.materials.append(basket_color)\n\n# Back Wall\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1 - wall_thickness / 2, 1 + wall_height / 2))\nback_wall = bpy.context.object\nback_wall.name = \"Back Wall\"\nback_wall.scale = (1, wall_thickness, wall_height)\nback_wall.data.materials.append(basket_color)\n\n# Left Wall\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1 + wall_thickness / 2, 0, 1 + wall_height / 2))\nleft_wall = bpy.context.object\nleft_wall.name = \"Left Wall\"\nleft_wall.scale = (wall_thickness, 1, wall_height)\nleft_wall.data.materials.append(basket_color)\n\n# Right Wall\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1 - wall_thickness / 2, 0, 1 + wall_height / 2))\nright_wall = bpy.context.object\nright_wall.name = \"Right Wall\"\nright_wall.scale = (wall_thickness, 1, wall_height)\nright_wall.data.materials.append(basket_color)\n\n# Step 4: Create the Handles\nhandle_radius = 0.15\nhandle_depth = 0.05\n\n# Left Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=handle_radius, depth=handle_depth, location=(-1, 0, 1.5))\nleft_handle = bpy.context.object\nleft_handle.name = \"Left Handle\"\nleft_handle.rotation_euler = (1.5708, 0, 0)\nleft_handle.data.materials.append(basket_color)\n\n# Right Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=handle_radius, depth=handle_depth, location=(1, 0, 1.5))\nright_handle = bpy.context.object\nright_handle.name = \"Right Handle\"\nright_handle.rotation_euler = (1.5708, 0, 0)\nright_handle.data.materials.append(basket_color)\n\n# Step 5: Create Perforations\nperforation_radius = 0.05\nperforation_spacing = 0.2\n\nfor x in range(-4, 5):\n    for y in range(-4, 5):\n        if x % 2 == 0 and y % 2 == 0:\n            bpy.ops.mesh.primitive_cylinder_add(radius=perforation_radius, depth=wall_thickness + 0.01, location=(x * perforation_spacing, -1 + wall_thickness / 2, y * perforation_spacing + 1))\n            perforation = bpy.context.object\n            perforation.rotation_euler = (1.5708, 0, 0)\n            bpy.context.view_layer.objects.active = front_wall\n            bpy.ops.object.modifier_add(type='BOOLEAN')\n            bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n            bpy.context.object.modifiers[\"Boolean\"].object = perforation\n            bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n            bpy.data.objects.remove(perforation)\n\n            bpy.ops.mesh.primitive_cylinder_add(radius=perforation_radius, depth=wall_thickness + 0.01, location=(x * perforation_spacing, 1 - wall_thickness / 2, y * perforation_spacing + 1))\n            perforation = bpy.context.object\n            perforation.rotation_euler = (1.5708, 0, 0)\n            bpy.context.view_layer.objects.active = back_wall\n            bpy.ops.object.modifier_add(type='BOOLEAN')\n            bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n            bpy.context.object.modifiers[\"Boolean\"].object = perforation\n            bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n            bpy.data.objects.remove(perforation)\n\nfor x in range(-4, 5):\n    for y in range(-4, 5):\n        if x % 2 == 0 and y % 2 == 0:\n            bpy.ops.mesh.primitive_cylinder_add(radius=perforation_radius, depth=wall_thickness + 0.01, location=(-1 + wall_thickness / 2, x * perforation_spacing, y * perforation_spacing + 1))\n            perforation = bpy.context.object\n            perforation.rotation_euler = (0, 1.5708, 0)\n            bpy.context.view_layer.objects.active = left_wall\n            bpy.ops.object.modifier_add(type='BOOLEAN')\n            bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n            bpy.context.object.modifiers[\"Boolean\"].object = perforation\n            bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n            bpy.data.objects.remove(perforation)\n\n            bpy.ops.mesh.primitive_cylinder_add(radius=perforation_radius, depth=wall_thickness + 0.01, location=(1 - wall_thickness / 2, x * perforation_spacing, y * perforation_spacing + 1))\n            perforation = bpy.context.object\n            perforation.rotation_euler = (0, 1.5708, 0)\n            bpy.context.view_layer.objects.active = right_wall\n            bpy.ops.object.modifier_add(type='BOOLEAN')\n            bpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\n            bpy.context.object.modifiers[\"Boolean\"].object = perforation\n            bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n            bpy.data.objects.remove(perforation)", "color_brightness": "Bright", "verify": "human", "entropy": 5.085193044727308, "unit_n": 135, "param_ratio": 0.37777777777777777}
{"id": "655d47fa-5c41-480b-8df8-7f308d049010", "name": "Bookshelf", "instruction": "Create a 3D model of a bookshelf. The bookshelf is a tall rectangular structure with five evenly spaced shelves. Each shelf is supported by vertical side panels.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nshelf_width = 2\nshelf_depth = 0.3\nshelf_height = 0.1\nside_panel_thickness = 0.1\ntotal_height = 5\n\n# Step 2: Create the Side Panels\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-shelf_width/2 - side_panel_thickness/2, 0, total_height/2))\nleft_panel = bpy.context.object\nleft_panel.scale = (side_panel_thickness/2, shelf_depth/2, total_height/2)\nleft_panel.name = \"Left Panel\"\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(shelf_width/2 + side_panel_thickness/2, 0, total_height/2))\nright_panel = bpy.context.object\nright_panel.scale = (side_panel_thickness/2, shelf_depth/2, total_height/2)\nright_panel.name = \"Right Panel\"\n\n# Step 3: Create the Shelves\nfor i in range(5):\n    z = (i + 0.5) * (total_height / 5)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width/2, shelf_depth/2, shelf_height/2)\n    shelf.name = f\"Shelf {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4312255359694817, "unit_n": 7, "param_ratio": 1.7142857142857142}
{"id": "d5740b8c-081e-4b1a-b1e1-296121dffa37", "name": "Bicycle", "instruction": "Design a basic bicycle. Make sure it has two wheels, a frame, handlebars, and a seat.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Wheels\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(x, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, 0.5), rotation=(0, 1.57, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.8, location=(1, 0, 0.5), rotation=(0, 1.57, 0.5))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.8, location=(-1, 0, 0.5), rotation=(0, 1.57, -0.5))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(gray)\n\n# Step 4: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(2, 0, 1), rotation=(0, 0, 1.57))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(gray)\n\n# Step 5: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 1))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 4.784205991597909, "unit_n": 7, "param_ratio": 7.285714285714286}
{"id": "41fc6aa3-0a8b-4c8e-8c15-380ff37d3aef", "name": "Dog Toy", "instruction": "Can you create a 3D model of a dog toy? It should be a simple bone shape.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bone Shape\n# Create the first sphere for one end of the bone\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(-0.5, 0, 0))\nsphere1 = bpy.context.object\nsphere1.name = \"Bone End 1\"\n\n# Create the second sphere for the other end of the bone\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0.5, 0, 0))\nsphere2 = bpy.context.object\nsphere2.name = \"Bone End 2\"\n\n# Create the cylinder for the middle part of the bone\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.0, location=(0, 0, 0), rotation=(1.5708, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = \"Bone Middle\"\n\n# Step 3: Join the parts together\nbpy.ops.object.select_all(action='DESELECT')\nsphere1.select_set(True)\nsphere2.select_set(True)\ncylinder.select_set(True)\nbpy.context.view_layer.objects.active = cylinder\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.379845041171049, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "cdc3ab0d-327a-4db3-a38c-3b691b978d05", "name": "Syringe", "instruction": "Construct a 3D model of a syringe. The syringe should have a cylindrical body, a plunger, and a needle.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"PlungerColor\")\nplunger_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"NeedleColor\")\nneedle_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Silver color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Syringe Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=2.1, location=(0, 0, -0.05))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, 1.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.100944575547292, "unit_n": 3, "param_ratio": 10.0}
{"id": "0efda322-496e-4da0-9ae3-de5fda9b83da", "name": "Dining Table", "instruction": "Imagine a dining table that invites family gatherings. Can you make it large enough to seat six people comfortably?", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-1.8, -0.9, 0.5), (1.8, -0.9, 0.5), (-1.8, 0.9, 0.5), (1.8, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 5  # Height of the legs\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 2, "param_ratio": 5.0}
{"id": "64b306e7-840a-426f-8239-5a3db01a404b", "name": "Toothbrush Holder", "instruction": "Design a toothbrush holder. It should have four slots for toothbrushes and a larger slot for a toothpaste tube.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nplastic_color = bpy.data.materials.new(name=\"Plastic Color\")\nplastic_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make the base thin\nbase.data.materials.append(plastic_color)\n\n# Step 3: Create the Toothbrush Slots\nfor i in range(4):\n    x = (i - 1.5) * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(x, 0.5, 0.3))\n    slot = bpy.context.object\n    slot.name = f\"Toothbrush Slot {i + 1}\"\n    slot.data.materials.append(plastic_color)\n\n# Step 4: Create the Toothpaste Slot\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(0, -0.5, 0.3))\ntoothpaste_slot = bpy.context.object\ntoothpaste_slot.name = \"Toothpaste Slot\"\ntoothpaste_slot.data.materials.append(plastic_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.3914781112409464, "unit_n": 6, "param_ratio": 3.1666666666666665}
{"id": "9e18e268-b66c-4e95-8057-86ec8eba6bb1", "name": "Desktop Computer", "instruction": "Design a 3D model of a desktop computer setup. Include a rectangular tower case, a monitor with a stand, a keyboard, and a mouse. The monitor should be positioned on top of a desk, with the tower case placed beside or underneath the desk. The keyboard and mouse should be placed in front of the monitor.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Desk\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\ndesk = bpy.context.object\ndesk.name = \"Desk\"\ndesk.scale = (2, 1, 0.1)\ndesk.data.materials.append(gray)\n\n# Step 3: Create the Tower Case\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, -0.5, -0.75))\ntower = bpy.context.object\ntower.name = \"Tower Case\"\ntower.scale = (0.3, 0.6, 1.2)\ntower.data.materials.append(black)\n\n# Step 4: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.3))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nmonitor.scale = (1.2, 0.05, 0.8)\nmonitor.data.materials.append(black)\n\n# Step 5: Create the Monitor Stand\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -0.2))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.scale = (0.2, 0.2, 0.4)\nstand.data.materials.append(black)\n\n# Step 6: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.6, -0.45))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.scale = (0.8, 0.3, 0.05)\nkeyboard.data.materials.append(black)\n\n# Step 7: Create the Mouse\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, -0.6, -0.45))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nmouse.scale = (0.2, 0.1, 0.05)\nmouse.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.4091028905345944, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "ac5e7c59-5c66-4007-91e8-e7d98094b0a8", "name": "Decorative Pattern", "instruction": "Create a decorative pattern.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1.0, 0.84, 0.0, 1)  # Gold color\n\n# Step 2: Create the Central Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\ncentral_sphere = bpy.context.object\ncentral_sphere.name = \"Central Sphere\"\ncentral_sphere.data.materials.append(gold)\n\n# Step 3: Create surrounding smaller spheres\nnum_spheres = 8\nradius = 1.5\nfor i in range(num_spheres):\n    angle = i * (2 * math.pi / num_spheres)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0))\n    small_sphere = bpy.context.object\n    small_sphere.name = f\"Small Sphere {i + 1}\"\n    small_sphere.data.materials.append(gold)", "color_brightness": "Bright", "verify": "human", "entropy": 4.851048807390258, "unit_n": 2, "param_ratio": 6.5}
{"id": "a5c17ab5-2a4d-4060-aac1-2310c0ded979", "name": "Laptop", "instruction": "Design a 3D model of a laptop. The screen should be open, and the keyboard should be visible. Include a touchpad below the keyboard.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlaptop_body_color = bpy.data.materials.new(name=\"Laptop Body\")\nlaptop_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen\")\nscreen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Laptop Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale[0] = 1.5\nbase.scale[1] = 1\nbase.scale[2] = 0.05\nbase.name = \"Laptop Base\"\nbase.data.materials.append(laptop_body_color)\n\n# Step 3: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.4, 0.15))\nkeyboard = bpy.context.object\nkeyboard.scale[0] = 1.4\nkeyboard.scale[1] = 0.5\nkeyboard.scale[2] = 0.02\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(laptop_body_color)\n\n# Step 4: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.6, 0.15))\ntouchpad = bpy.context.object\ntouchpad.scale[0] = 0.4\ntouchpad.scale[1] = 0.3\ntouchpad.scale[2] = 0.01\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(laptop_body_color)\n\n# Step 5: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.05, 1.1))\nscreen = bpy.context.object\nscreen.scale[0] = 1.5\nscreen.scale[1] = 0.05\nscreen.scale[2] = 1\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Adjust the screen rotation to make it open\nscreen.rotation_euler[0] = -1.2  # Open the screen\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 4, "param_ratio": 6.5}
{"id": "fa145028-1177-481b-96c8-31eefdf84272", "name": "Hamburger", "instruction": "Let's make a hamburger. Start with the bottom bun, which is a circle with a diameter of 4 inches and a height of 1 inch. On top of the bun, add a patty of the same diameter but 0.5 inches thick. Add a slice of cheese, lettuce, and tomato, each with a diameter of 4 inches and a height of 0.2 inches. Finish with the top bun, identical to the bottom bun.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color\n\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Dark brown color\n\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.84, 0, 1)  # Yellow color\n\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (1, 0.27, 0, 1)  # Red color\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0.5))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.5, location=(0, 0, 1.25))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.2, location=(0, 0, 1.65))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.2, location=(0, 0, 1.85))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 6: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.2, location=(0, 0, 2.05))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 7: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 2.75))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.9970005529270365, "unit_n": 6, "param_ratio": 9.166666666666666}
{"id": "8482e032-4f90-44b9-99c0-ba95c1030928", "name": "Violin", "instruction": "Please create a 3D model of a violin. It should have a curved body, a neck with tuning pegs, and four strings.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\nstring_color = bpy.data.materials.new(name=\"String\")\nstring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray for strings\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[0] = 0.5\nbody.scale[1] = 1.0\nbody.scale[2] = 0.1\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 1.2, 0))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.scale[1] = 2.5\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Tuning Pegs\nfor i in range(4):\n    x = 0.05 * (i - 1.5)\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(x, 2.5, 0))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(wood_color)\n\n# Step 5: Create the Strings\nfor i in range(4):\n    x = 0.03 * (i - 1.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=2.5, location=(x, 1.2, 0))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2\n    string.data.materials.append(string_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.306643792075091, "unit_n": 10, "param_ratio": 2.7}
{"id": "d5895c2a-b029-4096-8422-6d98c676aeef", "name": "Pizza", "instruction": "Can you make a 3D model of a pizza? It should have a circular base with a slightly raised edge. Add a layer of tomato sauce, topped with cheese and pepperoni slices. Make sure the cheese looks melted and the pepperoni is evenly distributed.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough Color\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light dough color\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce Color\")\ntomato_sauce_color.diffuse_color = (0.8, 0.0, 0.0, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.87, 0.0, 1)  # Melted cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.55, 0.07, 0.07, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.5, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=4.8, depth=0.1, location=(0, 0, 0.25))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=4.7, depth=0.15, location=(0, 0, 0.3))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_slices = 12\nfor i in range(num_slices):\n    angle = i * (2 * math.pi / num_slices)\n    x = 3.5 * math.cos(angle)\n    y = 3.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(x, y, 0.375))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.305324621752966, "unit_n": 4, "param_ratio": 10.0}
{"id": "0ba1583a-fcbf-4a0f-98f8-f4adfc89c88d", "name": "Sushi Roll", "instruction": "Create a 3D model of a sushi roll. It should be cylindrical, with visible layers of rice, seaweed, and filling. Include a few slices of the roll arranged on a plate.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark seaweed color\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (0.9, 0.9, 0.9, 1)  # White rice color\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red filling color\n\n# Step 2: Create the Sushi Roll\ndef create_sushi_roll(location):\n    # Seaweed layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=location)\n    seaweed_layer = bpy.context.object\n    seaweed_layer.name = \"Seaweed Layer\"\n    seaweed_layer.data.materials.append(seaweed)\n    \n    # Rice layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.1, location=location)\n    rice_layer = bpy.context.object\n    rice_layer.name = \"Rice Layer\"\n    rice_layer.data.materials.append(rice)\n    \n    # Filling layer\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=location)\n    filling_layer = bpy.context.object\n    filling_layer.name = \"Filling Layer\"\n    filling_layer.data.materials.append(filling)\n\n# Create a few slices of sushi roll\nfor i in range(3):\n    create_sushi_roll(location=(i * 2.5, 0, 0))\n\n# Step 3: Create the Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=4, depth=0.1, location=(2.5, 0, -0.6))\nplate = bpy.context.object\nplate.name = \"Plate\"\nplate.data.materials.append(rice)  # Using rice material for simplicity\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.519066901013833, "unit_n": 4, "param_ratio": 6.5}
{"id": "ce50b39e-7a2e-42c1-b93c-cfbc8c64ee37", "name": "Coffee Grinder", "instruction": "Can you create a coffee grinder? It should have a cylindrical body with a handle on top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Handle Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0, 1.05))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal)\n\n# Step 4: Create the Handle Rod\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, 1.3), rotation=(0, math.pi/2, 0))\nhandle_rod = bpy.context.object\nhandle_rod.name = \"Handle Rod\"\nhandle_rod.data.materials.append(metal)\n\n# Step 5: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.25, 0, 1.3))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.971557447563458, "unit_n": 4, "param_ratio": 6.75}
{"id": "4ae471b9-ad85-4b9d-9609-cb6b94ad522b", "name": "Wall Mural", "instruction": "Design a 3D model of a wall mural. The mural should cover an area of 10 feet by 8 feet and consist of interlocking geometric shapes arranged in a repeating design. It should be suitable for use as a decorative element on walls.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the size of the mural\nwidth = 10\nheight = 8\n\n# Define the size of each geometric shape\nshape_size = 1\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n]\n\n# Step 2: Create the geometric shapes\nfor i in range(int(width / shape_size)):\n    for j in range(int(height / shape_size)):\n        # Alternate between different shapes\n        if (i + j) % 2 == 0:\n            bpy.ops.mesh.primitive_cube_add(size=shape_size, location=(i * shape_size, j * shape_size, 0))\n        else:\n            bpy.ops.mesh.primitive_uv_sphere_add(radius=shape_size / 2, location=(i * shape_size, j * shape_size, 0))\n        \n        shape = bpy.context.object\n        shape.name = f\"Shape_{i}_{j}\"\n        \n        # Assign a color to the shape\n        color = bpy.data.materials.new(name=f\"Color_{i}_{j}\")\n        color.diffuse_color = colors[(i + j) % len(colors)]\n        shape.data.materials.append(color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.363391857350523, "unit_n": 2, "param_ratio": 4.0}
{"id": "621ed41b-6fd7-4a64-8afb-6c0c2fcc3fc1", "name": "Pizza Slice", "instruction": "Imagine a slice of pizza with a crispy crust, gooey cheese, and pepperoni slices. How would it look?", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Crispy crust color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Gooey cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Slice Base (Crust)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.95, radius2=0, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Slices\npepperoni_positions = [(0.2, 0.2, 0.1), (-0.2, 0.2, 0.1), (0, -0.2, 0.1)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2564338078581567, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "b5e4d312-c848-4a02-a68f-cfac348f499f", "name": "Circuit Breaker Panel", "instruction": "Design a circuit breaker panel for residential use, featuring multiple switches and a main control switch.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale = (1, 0.1, 1.5)\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Main Control Switch\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.15, 1.2))\nmain_switch = bpy.context.object\nmain_switch.name = \"MainSwitch\"\nmain_switch.scale = (0.5, 0.1, 0.2)\nmain_switch.data.materials.append(switch_color)\n\n# Step 4: Create Multiple Switches\nnum_switches = 6\nfor i in range(num_switches):\n    y_position = 0.8 - (i * 0.3)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.15, y_position))\n    switch = bpy.context.object\n    switch.name = f\"Switch_{i + 1}\"\n    switch.scale = (0.4, 0.1, 0.1)\n    switch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7256660955097067, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "fe774301-2a1e-43be-8252-6923235eef20", "name": "Backpack", "instruction": "Generate a 3D model of a backpack. It should have two shoulder straps, a main compartment, and a smaller front pocket. Include a zipper on each compartment.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"Backpack Color\")\nbackpack_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Light gray color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.6, 0.3, 0.9)\nmain_compartment.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.4, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.1, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Zippers\n# Main Compartment Zipper\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.31, 1.4))\nmain_zipper = bpy.context.object\nmain_zipper.name = \"Main Zipper\"\nmain_zipper.scale = (0.6, 0.01, 0.05)\nmain_zipper.data.materials.append(zipper_color)\n\n# Front Pocket Zipper\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.51, 0.5))\nfront_zipper = bpy.context.object\nfront_zipper.name = \"Front Zipper\"\nfront_zipper.scale = (0.4, 0.01, 0.05)\nfront_zipper.data.materials.append(zipper_color)\n\n# Step 5: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.3, 1))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n    strap.scale = (0.1, 0.02, 0.8)\n    strap.data.materials.append(backpack_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.178053830347946, "unit_n": 6, "param_ratio": 5.0}
{"id": "ca852f28-8d25-4923-88e8-976898dc0b09", "name": "Power Transformer", "instruction": "Envision a power transformer. It should have a rectangular body with cooling fins on the sides. On top, there should be several cylindrical components called bushings. Include a pair of high-voltage terminals and a pair of low-voltage terminals.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransformer_body_material = bpy.data.materials.new(name=\"Transformer Body\")\ntransformer_body_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncooling_fins_material = bpy.data.materials.new(name=\"Cooling Fins\")\ncooling_fins_material.diffuse_color = (0.15, 0.15, 0.15, 1)  # Darker gray color\nbushings_material = bpy.data.materials.new(name=\"Bushings\")\nbushings_material.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nterminals_material = bpy.data.materials.new(name=\"Terminals\")\nterminals_material.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Transformer Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.scale[0] = 1.5\nbody.scale[1] = 0.6\nbody.scale[2] = 1\nbody.name = \"Transformer Body\"\nbody.data.materials.append(transformer_body_material)\n\n# Step 3: Create Cooling Fins\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.85, 1 + 0.4 * i - 0.8))\n    fin = bpy.context.object\n    fin.scale[0] = 1.5\n    fin.scale[1] = 0.05\n    fin.scale[2] = 0.2\n    fin.name = f\"Cooling Fin {i + 1}\"\n    fin.data.materials.append(cooling_fins_material)\n    \n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.85, 1 + 0.4 * i - 0.8))\n    fin = bpy.context.object\n    fin.scale[0] = 1.5\n    fin.scale[1] = 0.05\n    fin.scale[2] = 0.2\n    fin.name = f\"Cooling Fin {i + 6}\"\n    fin.data.materials.append(cooling_fins_material)\n\n# Step 4: Create Bushings\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.6, location=(0.8 * (i - 1), 0, 2.3))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n    bushing.data.materials.append(bushings_material)\n\n# Step 5: Create High-Voltage Terminals\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.8 * (i * 2 - 1), 0.5, 2.3))\n    terminal = bpy.context.object\n    terminal.name = f\"High-Voltage Terminal {i + 1}\"\n    terminal.data.materials.append(terminals_material)\n\n# Step 6: Create Low-Voltage Terminals\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.8 * (i * 2 - 1), -0.5, 2.3))\n    terminal = bpy.context.object\n    terminal.name = f\"Low-Voltage Terminal {i + 1}\"\n    terminal.data.materials.append(terminals_material)", "color_brightness": "Dark", "verify": "human", "entropy": 3.923972555933669, "unit_n": 18, "param_ratio": 2.611111111111111}
{"id": "5c03f198-5b11-4cff-911d-a22d52e095cc", "name": "Smartphone", "instruction": "Model a smartphone with a rectangular body, a screen that covers most of the front, and a single button below the screen.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Light gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.45, 0.95, 1)\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.01, location=(0, -0.85, 0.051))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.3376102254008877, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "cd7dfb83-f242-4347-a761-2d3597b63e29", "name": "Microscope", "instruction": "Design a 3D microscope with an adjustable eyepiece and a stage for placing slides. Include focusing knobs on the side.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium bright color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5\nbase.scale[1] = 1.5\nbase.scale[2] = 0.2\nbase.data.materials.append(black)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\narm = bpy.context.object\narm.name = \"Arm\"\narm.scale[0] = 0.2\narm.scale[1] = 0.5\narm.scale[2] = 2\narm.data.materials.append(black)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.5, 0.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.scale[0] = 1\nstage.scale[1] = 1\nstage.scale[2] = 0.1\nstage.data.materials.append(gray)\n\n# Step 5: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 2.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 6: Create the Focusing Knobs\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, 0.5, 0.5), rotation=(0, math.pi/2, 0))\n    knob = bpy.context.object\n    knob.name = f\"Knob {i + 1}\"\n    knob.data.materials.append(black)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.1924189735135857, "unit_n": 6, "param_ratio": 5.833333333333333}
{"id": "90548e3d-4692-4362-b1d5-38901c393d42", "name": "Chocolate Bar", "instruction": "Design a chocolate bar that is divided into small, easy-to-break squares.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Dark chocolate color\n\n# Step 2: Create the base of the chocolate bar\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale[2] = 0.1  # Flatten the cube to make it a bar\nbase.name = \"Chocolate Base\"\nbase.data.materials.append(chocolate)\n\n# Step 3: Create the small squares on top of the chocolate bar\nnum_squares_x = 4\nnum_squares_y = 3\nsquare_size = 0.45\ngap = 0.05\n\nfor i in range(num_squares_x):\n    for j in range(num_squares_y):\n        x = (i - (num_squares_x - 1) / 2) * (square_size + gap)\n        y = (j - (num_squares_y - 1) / 2) * (square_size + gap)\n        bpy.ops.mesh.primitive_cube_add(size=square_size, location=(x, y, 0.35))\n        square = bpy.context.object\n        square.name = f\"Square {i + 1}-{j + 1}\"\n        square.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.897924704692201, "unit_n": 2, "param_ratio": 6.0}
{"id": "759a641f-f51c-494f-aecf-1bfdae94862e", "name": "Sandwich", "instruction": "Let's create a sandwich. Start with two slices of bread, each about 10 cm by 10 cm. Add a layer of lettuce on the bottom slice, followed by a slice of tomato. Place a slice of cheese on top of the tomato, then add a few slices of turkey. Top it off with the other slice of bread. Make sure the ingredients are stacked neatly.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (1, 0, 0, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\nturkey_color = bpy.data.materials.new(name=\"Turkey\")\nturkey_color.diffuse_color = (0.9, 0.8, 0.7, 1)  # Light beige color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.05))\nbottom_bread = bpy.context.object\nbottom_bread.scale = (0.5, 0.5, 0.02)\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0, 0, 0.07))\nlettuce = bpy.context.object\nlettuce.scale = (0.45, 0.45, 0.01)\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.045, depth=0.01, location=(0, 0, 0.08))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0, 0, 0.085))\ncheese = bpy.context.object\ncheese.scale = (0.45, 0.45, 0.01)\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Turkey\nfor i in range(3):\n    bpy.ops.mesh.primitive_plane_add(size=0.1, location=(0, 0, 0.09 + i * 0.01))\n    turkey = bpy.context.object\n    turkey.scale = (0.45, 0.45, 0.005)\n    turkey.name = f\"Turkey Slice {i + 1}\"\n    turkey.data.materials.append(turkey_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.13))\ntop_bread = bpy.context.object\ntop_bread.scale = (0.5, 0.5, 0.02)\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.383363088208907, "unit_n": 8, "param_ratio": 6.25}
{"id": "fcc8600b-f00c-4a18-a99f-53e8e49d5302", "name": "Pencil Holder", "instruction": "Design a 3D model of a pencil holder. The pencil holder should be a simple cylindrical container with a diameter of 3 inches and a height of 5 inches. The top edge should be flat, and the interior should be hollow to accommodate pencils.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Outer Cylinder (Pencil Holder)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=5, location=(0, 0, 2.5))\nouter_cylinder = bpy.context.object\nouter_cylinder.name = \"Pencil Holder Outer\"\n\n# Step 3: Create the Inner Cylinder (Hollow Part)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=5, location=(0, 0, 2.5))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Pencil Holder Inner\"\n\n# Step 4: Boolean Modifier to Hollow Out the Pencil Holder\nmod_bool = outer_cylinder.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cylinder\n\n# Apply the modifier\nbpy.context.view_layer.objects.active = outer_cylinder\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 5.0}
{"id": "9080cb12-3ec2-4eea-a6a3-d8532f1a54c2", "name": "Sandwich", "instruction": "Could you design a 3D model of a sandwich? Make sure it has two slices of bread and some visible layers of filling.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.2))\nfilling = bpy.context.object\nfilling.scale[2] = 0.1  # Make it flat\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "912a7fb9-a536-4153-88f2-18df7276b3ce", "name": "Apple", "instruction": "Can you make a 3D model of an apple?", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, 0, 1.2))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.4, 0.2, 0, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.29505123131665, "unit_n": 2, "param_ratio": 9.5}
{"id": "f9c2a674-65e7-4f1c-86d0-3450900dc5e3", "name": "Bookshelf", "instruction": "Let's create a 3D model of a bookshelf. It should have five shelves, each evenly spaced. The shelves should be rectangular and supported by vertical sides. Add a back panel to the bookshelf for additional support.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nshelf_width = 2.0\nshelf_depth = 0.3\nshelf_height = 0.1\nnum_shelves = 5\nside_thickness = 0.1\nback_thickness = 0.05\ntotal_height = 2.5\nshelf_spacing = (total_height - shelf_height) / (num_shelves - 1)\n\n# Step 2: Create the Shelves\nfor i in range(num_shelves):\n    z = i * shelf_spacing\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n\n# Step 3: Create the Vertical Sides\nfor x in [-shelf_width / 2 + side_thickness / 2, shelf_width / 2 - side_thickness / 2]:\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, total_height / 2))\n    side = bpy.context.object\n    side.scale = (side_thickness / 2, shelf_depth / 2, total_height / 2)\n    side.name = f\"Side {'Left' if x < 0 else 'Right'}\"\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2 + back_thickness / 2, total_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, back_thickness / 2, total_height / 2)\nback_panel.name = \"Back Panel\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.639022697939713, "unit_n": 3, "param_ratio": 4.0}
{"id": "b4663b0a-fa71-47c8-ba59-14166206b452", "name": "Wireless Mouse", "instruction": "Design a 3D model of a wireless mouse. It should have a sleek, ergonomic shape with a scroll wheel in the center. Include left and right buttons and a small USB dongle for wireless connectivity.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Mouse Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nmouse_body = bpy.context.object\nmouse_body.name = \"Mouse Body\"\nmouse_body.scale = (1, 1.5, 0.5)\nmouse_body.data.materials.append(black)\n\n# Step 3: Create the Scroll Wheel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 0.6))\nscroll_wheel = bpy.context.object\nscroll_wheel.name = \"Scroll Wheel\"\nscroll_wheel.rotation_euler = (math.pi / 2, 0, 0)\nscroll_wheel.data.materials.append(gray)\n\n# Step 4: Create the Left Button\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.3, 0.75, 0.3))\nleft_button = bpy.context.object\nleft_button.name = \"Left Button\"\nleft_button.scale = (1, 1.5, 0.1)\nleft_button.data.materials.append(black)\n\n# Step 5: Create the Right Button\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.3, 0.75, 0.3))\nright_button = bpy.context.object\nright_button.name = \"Right Button\"\nright_button.scale = (1, 1.5, 0.1)\nright_button.data.materials.append(black)\n\n# Step 6: Create the USB Dongle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -1.5, 0))\nusb_dongle = bpy.context.object\nusb_dongle.name = \"USB Dongle\"\nusb_dongle.scale = (1, 0.5, 0.5)\nusb_dongle.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.312959599664994, "unit_n": 5, "param_ratio": 6.2}
{"id": "bb95d79c-c13a-4136-ac38-09dbecbfe259", "name": "Cat Bed", "instruction": "Create a cat bed that is round with raised edges. Compare it to a typical small pet bed.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.15))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.492526358172097, "unit_n": 2, "param_ratio": 7.5}
{"id": "226137eb-dfa6-47d3-8e0e-02b8b9042eb4", "name": "Drumsticks", "instruction": "Design a 3D model of drumsticks. The drumsticks should be cylindrical and taper towards the tips. Include a pair of drumsticks side by side.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Drumsticks\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    \n    # Create the main cylindrical body of the drumstick\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, 0, 1))\n    drumstick_body = bpy.context.object\n    drumstick_body.name = f\"Drumstick Body {i + 1}\"\n    drumstick_body.data.materials.append(wood_color)\n    \n    # Create the tapered tip of the drumstick\n    bpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(x, 0, 2.1))\n    drumstick_tip = bpy.context.object\n    drumstick_tip.name = f\"Drumstick Tip {i + 1}\"\n    drumstick_tip.data.materials.append(wood_color)\n    \n    # Join the body and tip\n    bpy.ops.object.select_all(action='DESELECT')\n    drumstick_body.select_set(True)\n    drumstick_tip.select_set(True)\n    bpy.context.view_layer.objects.active = drumstick_body\n    bpy.ops.object.join()\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.9996585261617286, "unit_n": 4, "param_ratio": 4.0}
{"id": "a2f3c7b1-7c39-4aba-bc5c-cfbca4c7e289", "name": "Paint Set", "instruction": "Please generate a 3D model of a paint set. It should include a palette with multiple colors, a few paintbrushes, and a small container for water. Arrange them neatly within a compact box.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (0.5, 0, 0.5, 1),  # Purple\n]\n\n# Step 2: Create the Palette\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npalette = bpy.context.object\npalette.name = \"Palette\"\n\n# Add color circles to the palette\nfor i, color in enumerate(colors):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(-0.8 + i * 0.3, 0, 0.05))\n    color_circle = bpy.context.object\n    mat = bpy.data.materials.new(name=f\"Color_{i}\")\n    mat.diffuse_color = color\n    color_circle.data.materials.append(mat)\n\n# Step 3: Create the Paintbrushes\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(0.8, -0.5 + i * 0.3, 0.5))\n    brush_handle = bpy.context.object\n    brush_handle.name = f\"Brush_Handle_{i}\"\n    handle_mat = bpy.data.materials.new(name=\"Handle\")\n    handle_mat.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n    brush_handle.data.materials.append(handle_mat)\n    \n    bpy.ops.mesh.primitive_cone_add(radius1=0.03, radius2=0, depth=0.2, location=(0.8, -0.5 + i * 0.3, 1))\n    brush_tip = bpy.context.object\n    brush_tip.name = f\"Brush_Tip_{i}\"\n    tip_mat = bpy.data.materials.new(name=\"Tip\")\n    tip_mat.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray color\n    brush_tip.data.materials.append(tip_mat)\n\n# Step 4: Create the Water Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.5, location=(-0.8, -0.5, 0.25))\ncontainer = bpy.context.object\ncontainer.name = \"Water_Container\"\ncontainer_mat = bpy.data.materials.new(name=\"Container\")\ncontainer_mat.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ncontainer.data.materials.append(container_mat)\n\n# Step 5: Create the Box\nbpy.ops.mesh.primitive_cube_add(size=3, location=(0, 0, -1.5))\nbox = bpy.context.object\nbox.name = \"Box\"\nbox_mat = bpy.data.materials.new(name=\"Box\")\nbox_mat.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nbox.data.materials.append(box_mat)\n\n# Hollow out the box\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.inset(thickness=0.1)\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -1.5)})\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.287358688507007, "unit_n": 10, "param_ratio": 4.9}
{"id": "f564fec5-7513-4d5a-a1eb-e25fe678810f", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a container for holding birdseed and a small perch for birds to stand on while they eat. Include a hook or loop at the top for hanging.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0.55, 0, 0.2), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 4: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, 1.1))\nhook = bpy.context.object\nhook.name = \"Hook\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.510459424594396, "unit_n": 3, "param_ratio": 6.0}
{"id": "862948fb-1bb4-43ff-b9bf-7a4a065f6a59", "name": "Toy Car", "instruction": "Create a 3D model of a toy car that looks fun and exciting for children. Make sure it has four wheels and a simple body design.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Bright red color\nwheel_color = bpy.data.materials.new(name=\"WheelColor\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Car Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Car Body\"\nbody.scale = (1, 0.5, 0.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-0.8, -0.6, 0.2), (0.8, -0.6, 0.2), (-0.8, 0.6, 0.2), (0.8, 0.6, 0.2)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.259563075777476, "unit_n": 2, "param_ratio": 9.5}
{"id": "3aeb3558-3319-4a99-9267-228b9a910d7c", "name": "Toy Car", "instruction": "Create a toy car with a compact body. It should have four wheels, a simple chassis, and a basic cabin. The wheels should be round and attached to the chassis.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Chassis\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nchassis = bpy.context.object\nchassis.name = \"Chassis\"\n\n# Step 3: Create the Cabin\nbpy.ops.mesh.primitive_cube_add(size=1.2, location=(0, 0, 1.25))\ncabin = bpy.context.object\ncabin.name = \"Cabin\"\n\n# Step 4: Create the Wheels\nwheel_radius = 0.3\nwheel_depth = 0.2\nwheel_positions = [(-0.7, -1, 0.3), (0.7, -1, 0.3), (-0.7, 1, 0.3), (0.7, 1, 0.3)]\n\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=wheel_radius, depth=wheel_depth, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.699974659422147, "unit_n": 3, "param_ratio": 3.6666666666666665}
{"id": "cdc232ef-090b-45fe-bf12-f1f16e0f73de", "name": "Suitcase", "instruction": "Imagine a suitcase. Describe its size and shape. How does it look compared to a backpack?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nsuitcase_color = bpy.data.materials.new(name=\"Suitcase Color\")\nsuitcase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Body of the Suitcase\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale[0] = 1.5  # Length\nmain_body.scale[1] = 0.5  # Width\nmain_body.scale[2] = 1  # Height\nmain_body.data.materials.append(suitcase_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0.75, 2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the suitcase\nhandle.data.materials.append(suitcase_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, -0.6, 0.1))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler[1] = 1.5708  # Rotate 90 degrees to align with the ground\n    wheel.data.materials.append(suitcase_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.365887047354348, "unit_n": 4, "param_ratio": 4.75}
{"id": "9cb0f1f0-9681-4391-9c46-77125186b09f", "name": "Vacuum Cleaner", "instruction": "Let's create a vacuum cleaner and compare its parts. Start with the main body, which should be a rectangular box. Add wheels on the bottom for mobility. Attach a long hose with a nozzle on the end. Include a handle on the top for carrying it around. Finally, add a power cord that extends from the back.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nhose_color = bpy.data.materials.new(name=\"Hose Color\")\nhose_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ncord_color = bpy.data.materials.new(name=\"Cord Color\")\ncord_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.scale = (1, 0.5, 0.5)\nbody.name = \"Main Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Wheels\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.35, 0.1), rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)\n\n# Step 4: Create the Hose\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0.5, 0.5), rotation=(0, math.pi/4, 0))\nhose = bpy.context.object\nhose.name = \"Hose\"\nhose.data.materials.append(hose_color)\n\n# Step 5: Create the Nozzle\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(0, 1.5, 0.5), rotation=(0, math.pi/4, 0))\nnozzle = bpy.context.object\nnozzle.name = \"Nozzle\"\nnozzle.data.materials.append(hose_color)\n\n# Step 6: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.scale = (0.5, 0.05, 0.05)\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 7: Create the Power Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(-0.5, 0, 0.5), rotation=(0, 0, math.pi/2))\ncord = bpy.context.object\ncord.name = \"Power Cord\"\ncord.data.materials.append(cord_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7974198878503698, "unit_n": 7, "param_ratio": 9.285714285714286}
{"id": "f3c1149a-55e8-42b1-bbb2-4e55a5ead76c", "name": "Hammer", "instruction": "Begin by creating the handle of the hammer, which should be long and cylindrical. Attach a rectangular head to one end of the handle. The head should have a flat surface on one side for striking and a claw on the other side for removing nails. Ensure the head is securely attached to the handle.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Hammer Head\n# Create the main rectangular part of the head\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 2.25))\nhead = bpy.context.object\nhead.scale[0] = 0.3\nhead.scale[1] = 0.8\nhead.scale[2] = 0.3\nhead.name = \"Head\"\n\n# Create the flat striking surface\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.4, 2.25))\nstriking_surface = bpy.context.object\nstriking_surface.scale[0] = 0.3\nstriking_surface.scale[1] = 0.1\nstriking_surface.scale[2] = 0.3\nstriking_surface.name = \"Striking Surface\"\n\n# Create the claw\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.4, 2.25))\nclaw = bpy.context.object\nclaw.scale[0] = 0.3\nclaw.scale[1] = 0.1\nclaw.scale[2] = 0.3\nclaw.name = \"Claw\"\n\n# Combine the head parts\nbpy.ops.object.select_all(action='DESELECT')\nhead.select_set(True)\nstriking_surface.select_set(True)\nclaw.select_set(True)\nbpy.context.view_layer.objects.active = head\nbpy.ops.object.join()\n\n# Attach the head to the handle\nbpy.ops.object.select_all(action='DESELECT')\nhandle.select_set(True)\nhead.select_set(True)\nbpy.context.view_layer.objects.active = handle\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6343788672817006, "unit_n": 4, "param_ratio": 4.25}
{"id": "03837f5d-db7d-44ce-9ed8-8fb7413036e4", "name": "Dog Leash", "instruction": "Can you create a simple dog leash?", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=5, location=(0, 0, 2.5))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, 5.1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.279384463626503, "unit_n": 2, "param_ratio": 7.5}
{"id": "ed292a9a-449c-4640-884c-7bce679d5e1f", "name": "Coffee Grinder", "instruction": "Create a compact coffee grinder. It should have a cylindrical shape with a handle on the side for manual grinding. The top should have a removable lid for adding coffee beans.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\ngrinder_body = bpy.context.object\ngrinder_body.name = \"Grinder Body\"\ngrinder_body.data.materials.append(metal)\n\n# Step 3: Create the Removable Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.52, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(black)\n\n# Step 4: Create the Handle Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.55, 0, 0.9))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal)\n\n# Step 5: Create the Handle Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0.75, 0, 0.9), rotation=(0, math.pi/2, 0))\nhandle_arm = bpy.context.object\nhandle_arm.name = \"Handle Arm\"\nhandle_arm.data.materials.append(metal)\n\n# Step 6: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(1.0, 0, 0.9))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.652618047355224, "unit_n": 5, "param_ratio": 7.4}
{"id": "db7609e8-c008-4048-95c0-ee930f97397a", "name": "Blender", "instruction": "Design a blender with a cylindrical container and a lid.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 5.0}
{"id": "47113891-0acd-4bb6-a6ac-b284ba2af1a7", "name": "Drumstick", "instruction": "Describe the features of a drumstick.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Drumstick Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5))\nshaft = bpy.context.object\nshaft.name = \"Drumstick Shaft\"\nshaft.data.materials.append(wood_color)\n\n# Step 3: Create the Drumstick Tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 1.0))\ntip = bpy.context.object\ntip.name = \"Drumstick Tip\"\ntip.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.110744458420877, "unit_n": 2, "param_ratio": 7.0}
{"id": "71aaa0b3-b0b6-40bf-8c80-4542516ba4e5", "name": "Desk Organizer", "instruction": "Create a desk organizer. Compare it to a drawer organizer in terms of functionality and space utilization. The desk organizer should have compartments for pens, sticky notes, and other office supplies. It should be compact and fit neatly on a desk without taking up too much space.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 0.1)\nbase.data.materials.append(gray)\n\n# Step 3: Create the Pen Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.5, 1))\npen_compartment = bpy.context.object\npen_compartment.name = \"Pen Compartment\"\npen_compartment.scale = (0.3, 0.3, 1)\npen_compartment.data.materials.append(gray)\n\n# Step 4: Create the Sticky Notes Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 0.5, 0.75))\nsticky_notes_compartment = bpy.context.object\nsticky_notes_compartment.name = \"Sticky Notes Compartment\"\nsticky_notes_compartment.scale = (0.4, 0.4, 0.5)\nsticky_notes_compartment.data.materials.append(gray)\n\n# Step 5: Create the Other Supplies Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.5, 0.75))\nother_supplies_compartment = bpy.context.object\nother_supplies_compartment.name = \"Other Supplies Compartment\"\nother_supplies_compartment.scale = (0.9, 0.3, 0.5)\nother_supplies_compartment.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 5.25}
{"id": "875c5555-45e0-4a65-a197-f69bb828a0dd", "name": "Ottoman", "instruction": "Generate a 3D model of an ottoman. It should have a square shape and short legs.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nottoman_color = bpy.data.materials.new(name=\"Ottoman Color\")\nottoman_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Ottoman Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nottoman_base = bpy.context.object\nottoman_base.name = \"Ottoman Base\"\nottoman_base.scale = (1, 1, 0.25)\nottoman_base.data.materials.append(ottoman_color)\n\n# Step 3: Create the Legs\nleg_height = 0.1\nleg_radius = 0.05\npositions = [(-0.45, -0.45), (-0.45, 0.45), (0.45, -0.45), (0.45, 0.45)]\n\nfor pos in positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=(pos[0], pos[1], leg_height / 2))\n    leg = bpy.context.object\n    leg.name = \"Leg\"\n    leg.data.materials.append(ottoman_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.4839514834534477, "unit_n": 2, "param_ratio": 6.0}
{"id": "9adb1b9f-40e3-44bf-8606-2ec5233cb3f4", "name": "Corporate Emblem", "instruction": "What feature distinguishes a corporate emblem for a tech company from one for a sports brand? Think of a simple, iconic symbol that represents each brand's identity.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntech_blue = bpy.data.materials.new(name=\"Tech Blue\")\ntech_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Bright blue color\nsports_red = bpy.data.materials.new(name=\"Sports Red\")\nsports_red.diffuse_color = (1.0, 0.0, 0.0, 1)  # Bright red color\n\n# Step 2: Create a simple tech emblem (e.g., a gear)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(-2, 0, 0))\ngear = bpy.context.object\ngear.name = \"Tech Gear\"\ngear.data.materials.append(tech_blue)\n\n# Add gear teeth\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = -2 + 1.2 * math.cos(angle)\n    y = 1.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0))\n    tooth = bpy.context.object\n    tooth.name = f\"Tooth {i + 1}\"\n    tooth.data.materials.append(tech_blue)\n\n# Step 3: Create a simple sports emblem (e.g., a ball)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(2, 0, 0))\nball = bpy.context.object\nball.name = \"Sports Ball\"\nball.data.materials.append(sports_red)", "color_brightness": "Bright", "verify": "human", "entropy": 5.067309160794994, "unit_n": 10, "param_ratio": 2.3}
{"id": "81587b82-98a1-46ce-aa5a-6bea7ec4125b", "name": "Cat Scratching Post", "instruction": "Hi there, I need a 3D model of a cat scratching post. It should have a sturdy base and a vertical post wrapped in sisal rope. On top, add a small platform where a cat can sit. ", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brownish color for the base\nsisal_color = bpy.data.materials.new(name=\"Sisal Color\")\nsisal_color.diffuse_color = (0.8, 0.7, 0.5, 1)  # Sisal rope color\nplatform_color = bpy.data.materials.new(name=\"Platform Color\")\nplatform_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray for the platform\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(sisal_color)\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.5))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.data.materials.append(platform_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.019889530335162, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "8eb3e6a5-77b9-4cd8-9bfe-71341e972a4a", "name": "Carry-On Luggage", "instruction": "I'm looking for a 3D model of a carry-on luggage piece. It should be sized to fit in an overhead bin of a standard airplane. The design must include wheels for easy maneuvering, a retractable handle, and compartments for efficient storage of personal items and electronics. How would you integrate a locking mechanism for security and a tag space for identification?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Main Body of the Luggage\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.4, 0.25, 0.6)\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Wheels\nfor i in range(4):\n    x = 0.35 * (i % 2 * 2 - 1)\n    y = 0.2 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=(x, y, 0.05))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate 90 degrees\n    wheel.data.materials.append(gray)\n\n# Step 4: Create the Retractable Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.25, 2.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale = (0.05, 0.05, 0.5)\nhandle.data.materials.append(gray)\n\n# Step 5: Create the Compartments\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.5))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.scale = (0.35, 0.2, 0.1)\ncompartment.data.materials.append(gray)\n\n# Step 6: Create the Locking Mechanism\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.25, 1.2))\nlock = bpy.context.object\nlock.name = \"Lock\"\nlock.scale = (0.05, 0.05, 0.05)\nlock.data.materials.append(gray)\n\n# Step 7: Create the Tag Space\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.3, 1.2))\ntag_space = bpy.context.object\ntag_space.name = \"Tag Space\"\ntag_space.scale = (0.1, 0.01, 0.05)\ntag_space.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.1506073001598374, "unit_n": 9, "param_ratio": 3.888888888888889}
{"id": "ff2c6e0a-0f92-4946-9a5c-4154b2327b79", "name": "Coffee Table", "instruction": "Can you create a coffee table with a rectangular top and four legs?", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 1.5  # Scale along X-axis\ntable_top.scale[1] = 0.75  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\n\n# Step 3: Create the Legs\nleg_positions = [(1.4, 0.65, -0.45), (-1.4, 0.65, -0.45), (1.4, -0.65, -0.45), (-1.4, -0.65, -0.45)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.350082335296633, "unit_n": 2, "param_ratio": 3.0}
{"id": "2cf88df7-8b66-4584-9673-350f35702d5e", "name": "Vacuum Cleaner", "instruction": "Create a 3D model of a vacuum cleaner. It should have a cylindrical body with a handle on top. There should be a hose attached to the front, ending in a flat, wide nozzle. Include wheels at the bottom for easy movement.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\nhose_color = bpy.data.materials.new(name=\"Hose Color\")\nhose_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 1.1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Hose\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.55, 0, 0.5), rotation=(0, math.pi/2, 0))\nhose = bpy.context.object\nhose.name = \"Hose\"\nhose.data.materials.append(hose_color)\n\n# Step 5: Create the Nozzle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.05, 0, 0.5))\nnozzle = bpy.context.object\nnozzle.name = \"Nozzle\"\nnozzle.scale = (1, 0.1, 0.05)\nnozzle.data.materials.append(hose_color)\n\n# Step 6: Create the Wheels\nfor i in range(4):\n    x = 0.35 * (i % 2) - 0.175\n    y = 0.35 * (i // 2) - 0.175\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, y, 0.05), rotation=(math.pi/2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.144539797788389, "unit_n": 8, "param_ratio": 6.25}
{"id": "8eae01cc-b964-456d-9fa3-27267062a14a", "name": "Smartwatch", "instruction": "Create a 3D model of a smartwatch designed for fitness tracking. It should have a rectangular face with a touchscreen display. Include a wristband and a few buttons on the side for navigation.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Watch Face\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nwatch_face = bpy.context.object\nwatch_face.scale = (1, 0.5, 0.1)\nwatch_face.name = \"Watch Face\"\nwatch_face.data.materials.append(black)\n\n# Step 3: Create the Wristband\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.2))\nwristband = bpy.context.object\nwristband.scale = (1.2, 0.2, 0.05)\nwristband.name = \"Wristband\"\nwristband.data.materials.append(gray)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.8))\nwristband_top = bpy.context.object\nwristband_top.scale = (1.2, 0.2, 0.05)\nwristband_top.name = \"Wristband Top\"\nwristband_top.data.materials.append(gray)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0.6, 0, 0.4 + i * 0.2), rotation=(1.5708, 0, 0))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2996023015350557, "unit_n": 6, "param_ratio": 5.0}
{"id": "cf5d5ccb-7fdb-4a5e-8919-a06b786b8177", "name": "Birdhouse", "instruction": "Create a birdhouse with a rectangular base and a sloped roof. The front should have a circular entrance hole and a small perch below it. Add a small door on the side for cleaning.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 1.5)\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Roof\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 2.5))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.scale = (1.2, 1.2, 0.1)\nroof.rotation_euler = (math.radians(45), 0, 0)\nroof.data.materials.append(wood_color)\n\n# Step 4: Create the Entrance Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 1.01, 1.5))\nentrance = bpy.context.object\nentrance.name = \"Entrance\"\nentrance.rotation_euler = (math.radians(90), 0, 0)\n\n# Step 5: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 1.05, 1.2))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.rotation_euler = (math.radians(90), 0, 0)\nperch.data.materials.append(wood_color)\n\n# Step 6: Create the Side Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.01, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (0.1, 0.5, 0.5)\ndoor.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.565408929353065, "unit_n": 5, "param_ratio": 5.4}
{"id": "d6f81ab8-99f5-4b4b-8dab-ba4c7c2dbc5c", "name": "Thermometer", "instruction": "Please create a digital thermometer. It should have a small rectangular display at one end and a slender probe at the other.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the display\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the body\n\n# Step 2: Create the Display\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 0.1))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale = (1, 0.5, 0.1)\ndisplay.data.materials.append(display_color)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, -0.3))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.5, 2)\nbody.data.materials.append(body_color)\n\n# Step 4: Create the Probe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, -1.3))\nprobe = bpy.context.object\nprobe.name = \"Probe\"\nprobe.data.materials.append(body_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.009290637205681, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "85421938-7e2f-45b1-9a12-17694b8eec08", "name": "Trash Can", "instruction": "Please create a trash can with a simple, cylindrical shape and a foot pedal for opening the lid.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_gray = bpy.data.materials.new(name=\"Metal Gray\")\nmetal_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal gray color\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\ntrash_can_body = bpy.context.object\ntrash_can_body.name = \"Trash Can Body\"\ntrash_can_body.data.materials.append(metal_gray)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.52, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal_gray)\n\n# Step 4: Create the Foot Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 0.1))\nfoot_pedal = bpy.context.object\nfoot_pedal.name = \"Foot Pedal\"\nfoot_pedal.scale = (1, 0.5, 0.2)\nfoot_pedal.data.materials.append(metal_gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9525341047381577, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "2b19b27c-8d7b-43b3-8f42-037a9a6d5913", "name": "Microscope", "instruction": "Create a microscope with an eyepiece, a stage for samples, and a focusing knob.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(black)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(gray)\n\n# Step 5: Create the Focusing Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0.25, 0, 0.75), rotation=(0, math.pi/2, 0))\nknob = bpy.context.object\nknob.name = \"Focusing Knob\"\nknob.data.materials.append(black)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.048416910756986, "unit_n": 4, "param_ratio": 8.0}
{"id": "cd6b30d3-5412-4d49-865d-85ff0c3b88a7", "name": "Travel Mug", "instruction": "Design a 3D model of a travel mug. It should be cylindrical with a lid that has a small opening for drinking.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 4: Create the Drinking Opening\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 1, 2.2))\nopening = bpy.context.object\nopening.name = \"Opening\"\n\n# Boolean modifier to create the opening in the lid\nmod_bool = lid.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = opening\nbpy.context.view_layer.objects.active = lid\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the opening cube\nbpy.data.objects.remove(opening)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9202138729203444, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "9ff0424c-999b-4018-8d11-0a20ee87dbe7", "name": "Sandwich", "instruction": "Let's create a sandwich that looks delicious and ready to eat.\n\nStart with two slices of bread, one on the bottom and one on the top. \n\nBetween the slices, include layers of lettuce, tomato slices, cheese, and a few slices of deli meat. \n\nEnsure the ingredients are slightly visible from the sides, giving the sandwich a well-stacked appearance. \n\nFinally, add a toothpick through the center to hold everything together.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown bread color\n\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green lettuce color\n\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.85, 0.11, 0.11, 1)  # Red tomato color\n\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow cheese color\n\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.77, 0.46, 0.37, 1)  # Brown deli meat color\n\ntoothpick_color = bpy.data.materials.new(name=\"Toothpick\")\ntoothpick_color.diffuse_color = (0.8, 0.8, 0.7, 1)  # Light wood color\n\n# Create Bread Slices\nbpy.ops.mesh.primitive_cube_add(size=1.0, location=(0, 0, 0))\nbread_bottom = bpy.context.object\nbread_bottom.name = \"Bread Bottom\"\nbread_bottom.scale[2] = 0.1\nbread_bottom.data.materials.append(bread_color)\n\nbpy.ops.mesh.primitive_cube_add(size=1.0, location=(0, 0, 1.0))\nbread_top = bpy.context.object\nbread_top.name = \"Bread Top\"\nbread_top.scale[2] = 0.1\nbread_top.data.materials.append(bread_color)\n\n# Create Lettuce\nbpy.ops.mesh.primitive_plane_add(size=1.1, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Create Tomato Slices\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(0, 0, 0.3 + i * 0.1))\n    tomato = bpy.context.object\n    tomato.name = f\"Tomato Slice {i + 1}\"\n    tomato.data.materials.append(tomato_color)\n\n# Create Cheese\nbpy.ops.mesh.primitive_plane_add(size=0.9, location=(0, 0, 0.5))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Create Meat Slices\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.05, location=(0, 0, 0.6 + i * 0.1))\n    meat = bpy.context.object\n    meat.name = f\"Meat Slice {i + 1}\"\n    meat.data.materials.append(meat_color)\n\n# Add Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(0, 0, 1.2))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\ntoothpick.data.materials.append(toothpick_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.7458814335150645, "unit_n": 10, "param_ratio": 6.1}
{"id": "596bd58b-d0c0-4877-bff6-06d21df2ae30", "name": "Wallet", "instruction": "Design a wallet with multiple card slots, a compartment for cash, and a transparent ID window. ", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ncard_slot_color = bpy.data.materials.new(name=\"CardSlotColor\")\ncard_slot_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Slightly lighter gray\n\nid_window_color = bpy.data.materials.new(name=\"IDWindowColor\")\nid_window_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Transparent light gray\n\n# Step 2: Create the Main Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.scale = (1, 0.1, 0.5)\nwallet_body.name = \"WalletBody\"\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create Card Slots\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(-0.8 + i * 0.4, 0.12, 0.2))\n    card_slot = bpy.context.object\n    card_slot.scale = (0.18, 0.02, 0.1)\n    card_slot.name = f\"CardSlot {i + 1}\"\n    card_slot.data.materials.append(card_slot_color)\n\n# Step 4: Create Cash Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.12, 0.2))\ncash_compartment = bpy.context.object\ncash_compartment.scale = (0.9, 0.02, 0.4)\ncash_compartment.name = \"CashCompartment\"\ncash_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create ID Window\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.8, 0.12, -0.2))\nid_window = bpy.context.object\nid_window.scale = (0.3, 0.02, 0.2)\nid_window.name = \"IDWindow\"\nid_window.data.materials.append(id_window_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5523793003697204, "unit_n": 8, "param_ratio": 3.875}
{"id": "f201f21c-79e9-4b36-8607-ac4e4aaa1748", "name": "Sushi Roll", "instruction": "Construct a 3D model of a sushi roll. The roll should be cylindrical and have a cross-section showing the layers of rice, seaweed, and filling.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.0, 0.2, 0.0, 1)  # Dark green color for seaweed\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color for rice\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color for filling\n\n# Step 2: Create the Seaweed Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\nseaweed_layer = bpy.context.object\nseaweed_layer.name = \"Seaweed Layer\"\nseaweed_layer.data.materials.append(seaweed)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.1, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice)\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.2, location=(0, 0, 0))\nfilling_layer = bpy.context.object\nfilling_layer.name = \"Filling Layer\"\nfilling_layer.data.materials.append(filling)", "color_brightness": "Bright", "verify": "human", "entropy": 4.427021655384323, "unit_n": 3, "param_ratio": 10.0}
{"id": "2769c4a4-057b-44bc-b465-353e59a59775", "name": "Birthday Cake", "instruction": "Let's create a birthday cake with three layers. Each layer should be decorated with colorful icing and topped with candles.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlayer_color = bpy.data.materials.new(name=\"Cake Layer\")\nlayer_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown cake color\nicing_color = bpy.data.materials.new(name=\"Icing\")\nicing_color.diffuse_color = (1, 0.5, 0.5, 1)  # Pink icing color\ncandle_color = bpy.data.materials.new(name=\"Candle\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow candle color\nflame_color = bpy.data.materials.new(name=\"Flame\")\nflame_color.diffuse_color = (1, 0.5, 0, 1)  # Orange flame color\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1 - 0.1 * i, depth=0.3, location=(0, 0, 0.3 * i))\n    layer = bpy.context.object\n    layer.name = f\"Layer {i + 1}\"\n    layer.data.materials.append(layer_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=1 - 0.1 * i, depth=0.05, location=(0, 0, 0.3 * i + 0.15))\n    icing = bpy.context.object\n    icing.name = f\"Icing {i + 1}\"\n    icing.data.materials.append(icing_color)\n\n# Step 3: Create the Candles\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = (1 - 0.2) * 0.9 * math.cos(angle)\n    y = (1 - 0.2) * 0.9 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.9))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(x, y, 1.05))\n    flame = bpy.context.object\n    flame.name = f\"Flame {i + 1}\"\n    flame.data.materials.append(flame_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.093585439200975, "unit_n": 22, "param_ratio": 1.7727272727272727}
{"id": "7dc5f939-87fb-4204-83ff-c3aa45f893e8", "name": "Dish Rack", "instruction": "Create a dish rack with a simple rectangular frame and slots for holding plates upright. Include a flat area for drying utensils and small dishes.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the dish rack\nrack_color = bpy.data.materials.new(name=\"RackColor\")\nrack_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (1, 0.5, 0.05)\nframe.data.materials.append(rack_color)\n\n# Step 3: Create the Slots for Plates\nnum_slots = 5\nslot_spacing = 0.4\nfor i in range(num_slots):\n    x = -0.8 + i * slot_spacing\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0.25))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.scale = (0.05, 0.45, 0.5)\n    slot.data.materials.append(rack_color)\n\n# Step 4: Create the Flat Area for Utensils and Small Dishes\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.75, 0.05))\nflat_area = bpy.context.object\nflat_area.name = \"Flat Area\"\nflat_area.scale = (0.9, 0.4, 0.05)\nflat_area.data.materials.append(rack_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.5302465617637595, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "410ead4c-4724-4c36-833c-7055dc8df97e", "name": "Soap Dispenser", "instruction": "Design a soap dispenser with a simple cylindrical body, a pump at the top, and a small window to show the soap level.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nwindow_color = bpy.data.materials.new(name=\"Window Color\")\nwindow_color.diffuse_color = (0.5, 0.5, 1, 0.5)  # Semi-transparent blue color\n\npump_color = bpy.data.materials.new(name=\"Pump Color\")\npump_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=3, location=(0, 0, 1.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Pump\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.5, location=(0, 0, 3.25))\npump = bpy.context.object\npump.name = \"Pump\"\npump.data.materials.append(pump_color)\n\n# Step 4: Create the Window\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.9, 1.5))\nwindow = bpy.context.object\nwindow.name = \"Window\"\nwindow.scale[1] = 0.1\nwindow.scale[2] = 1.2\nwindow.data.materials.append(window_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.339130000713542, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "7754f080-fc29-4264-861e-f13ce9fb81dc", "name": "Geometric Logo", "instruction": "Create a 3D geometric logo.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the first geometric shape (Cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.5, 0, 0))\ncube = bpy.context.object\ncube.name = \"Cube\"\ncube.data.materials.append(blue)\n\n# Step 3: Create the second geometric shape (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\nsphere.data.materials.append(red)\n\n# Step 4: Create the third geometric shape (Cone)\nbpy.ops.mesh.primitive_cone_add(radius1=0.75, depth=1.5, location=(1.5, 0, 0))\ncone = bpy.context.object\ncone.name = \"Cone\"\ncone.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.0720726379581125, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "40c25768-ab58-450d-bddc-f1f9701374d9", "name": "Circuit Breaker", "instruction": "Design a circuit breaker. It should have a rectangular body with a switch on the front. Include labeled slots for electrical connections at the top and bottom. Ensure there are indicator lights on the front panel.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlight_color = bpy.data.materials.new(name=\"LightColor\")\nlight_color.diffuse_color = (1.0, 0, 0, 1)  # Red color for indicator lights\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.3, 1)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.55, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.4, 0.05, 0.2)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create the Top Slots\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.4 - 0.2, 0.45, 1))\n    slot_top = bpy.context.object\n    slot_top.name = f\"Top Slot {i + 1}\"\n    slot_top.scale = (0.1, 0.05, 0.05)\n    slot_top.data.materials.append(switch_color)\n\n# Step 5: Create the Bottom Slots\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.4 - 0.2, 0.45, -1))\n    slot_bottom = bpy.context.object\n    slot_bottom.name = f\"Bottom Slot {i + 1}\"\n    slot_bottom.scale = (0.1, 0.05, 0.05)\n    slot_bottom.data.materials.append(switch_color)\n\n# Step 6: Create the Indicator Lights\nfor i in range(2):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(i * 0.4 - 0.2, 0.6, 0.2))\n    light = bpy.context.object\n    light.name = f\"Indicator Light {i + 1}\"\n    light.data.materials.append(light_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.9553266028884306, "unit_n": 8, "param_ratio": 4.375}
{"id": "dbb987ac-1271-4556-bc80-63dcc4a8acc7", "name": "Toy Blocks", "instruction": "Create toy blocks in various shapes such as cubes, cylinders, and pyramids. Each block should be small enough for a child to grasp easily.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a Cube Block\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1, 0, 0.25))\ncube = bpy.context.object\ncube.name = \"Cube Block\"\n\n# Step 3: Create a Cylinder Block\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(0, 0, 0.25))\ncylinder = bpy.context.object\ncylinder.name = \"Cylinder Block\"\n\n# Step 4: Create a Pyramid Block\nbpy.ops.mesh.primitive_cone_add(radius1=0.35, depth=0.5, location=(1, 0, 0.25))\npyramid = bpy.context.object\npyramid.name = \"Pyramid Block\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.0730369988310935, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "97373afd-724b-4629-9563-eea0cf395df3", "name": "Travel Pillow", "instruction": "Create a travel pillow that is U-shaped and measures 12 inches by 12 inches. The pillow should have a snap closure at the ends to secure it around the neck. Include a small pocket on one side for storing earplugs or other small items.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npillow_color = bpy.data.materials.new(name=\"PillowColor\")\npillow_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the U-shaped Pillow\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(0, 0, 0), rotation=(1.5708, 0, 0))\npillow = bpy.context.object\npillow.name = \"Travel Pillow\"\npillow.scale = (1.2, 1.2, 1.2)\npillow.data.materials.append(pillow_color)\n\n# Step 3: Create the Snap Closure\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0.15, 0, -0.02))\nsnap1 = bpy.context.object\nsnap1.name = \"Snap Closure 1\"\nsnap1.data.materials.append(pillow_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(-0.15, 0, -0.02))\nsnap2 = bpy.context.object\nsnap2.name = \"Snap Closure 2\"\nsnap2.data.materials.append(pillow_color)\n\n# Step 4: Create the Pocket\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.18, 0))\npocket = bpy.context.object\npocket.name = \"Pocket\"\npocket.scale = (0.5, 0.1, 0.05)\npocket.data.materials.append(pillow_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9194559724527407, "unit_n": 4, "param_ratio": 6.25}
{"id": "16f1d20b-2fbc-42e7-827e-7b57b45927f5", "name": "Laptop", "instruction": "Design a 3D model of a laptop with a screen, keyboard, and touchpad. The screen should be open at a 90-degree angle.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base (Keyboard Area)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale[2] = 0.05  # Flatten the cube to make it a rectangular base\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1, 1.1))\nscreen = bpy.context.object\nscreen.scale[2] = 0.05  # Flatten the cube to make it a rectangular screen\nscreen.rotation_euler[0] = math.pi / 2  # Rotate the screen to be vertical\nscreen.name = \"Screen\"\nscreen.data.materials.append(black)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, -0.2, 0.15))\nkeyboard = bpy.context.object\nkeyboard.scale[2] = 0.02  # Flatten the cube to make it a thin keyboard\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(black)\n\n# Step 5: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -0.7, 0.13))\ntouchpad = bpy.context.object\ntouchpad.scale[2] = 0.01  # Flatten the cube to make it a thin touchpad\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.880469499409199, "unit_n": 4, "param_ratio": 6.5}
{"id": "2cb201e4-3bc9-4849-aa60-42255a5addf0", "name": "Bookend", "instruction": "Design a pair of bookends with an L-shaped profile. The vertical part should hold the books upright, and the horizontal base should support them from below.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions for the bookends\nvertical_width = 0.1\nvertical_height = 1.0\nhorizontal_width = 0.1\nhorizontal_length = 1.0\nthickness = 0.05\n\n# Step 2: Create the first bookend\n# Vertical part\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nvertical_part1 = bpy.context.object\nvertical_part1.scale = (vertical_width, thickness, vertical_height)\nvertical_part1.location = (0, -0.5 * thickness, vertical_height / 2)\n\n# Horizontal part\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nhorizontal_part1 = bpy.context.object\nhorizontal_part1.scale = (horizontal_length, thickness, horizontal_width)\nhorizontal_part1.location = (0, -0.5 * thickness, -horizontal_width / 2)\n\n# Step 3: Create the second bookend\n# Vertical part\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, 0, 0))\nvertical_part2 = bpy.context.object\nvertical_part2.scale = (vertical_width, thickness, vertical_height)\nvertical_part2.location = (2, -0.5 * thickness, vertical_height / 2)\n\n# Horizontal part\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, 0, 0))\nhorizontal_part2 = bpy.context.object\nhorizontal_part2.scale = (horizontal_length, thickness, horizontal_width)\nhorizontal_part2.location = (2, -0.5 * thickness, -horizontal_width / 2)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.119162312519754, "unit_n": 4, "param_ratio": 4.0}
{"id": "8c226082-6dae-43fe-b6f8-b1ea492f7aae", "name": "Microscope", "instruction": "Design a microscope with a sturdy base and an adjustable arm. Include an eyepiece, objective lenses, and a stage with clips to hold slides. Add a light source beneath the stage for illumination.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\narm = bpy.context.object\narm.scale[1] = 4  # Make the arm long\narm.scale[2] = 0.1  # Make the arm thin\narm.name = \"Arm\"\narm.data.materials.append(metal)\n\n# Step 4: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 1.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 5: Create the Objective Lenses\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0.2 * (i - 1), 1))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(black)\n\n# Step 6: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nstage = bpy.context.object\nstage.scale[2] = 0.1  # Make the stage thin\nstage.name = \"Stage\"\nstage.data.materials.append(metal)\n\n# Step 7: Create the Clips\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.3 * (i * 2 - 1), 0, 0.3))\n    clip = bpy.context.object\n    clip.scale[1] = 0.5  # Make the clips long\n    clip.name = f\"Clip {i + 1}\"\n    clip.data.materials.append(black)\n\n# Step 8: Create the Light Source\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\nlight = bpy.context.object\nlight.name = \"Light Source\"\nlight.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7791533940794824, "unit_n": 10, "param_ratio": 4.0}
{"id": "fe26cbd5-9076-4198-9d83-a3a3a323acad", "name": "Decorative Wall Panel", "instruction": "Let's design a decorative wall panel. Imagine a rectangular panel with an intricate geometric pattern carved into the surface. The pattern should be symmetrical and cover the entire panel. How would you enhance the visual appeal of this panel for a modern living room?", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Geometric Pattern\n# Adding a simple symmetrical pattern using cubes\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\nfor i in range(-4, 5):\n    for j in range(-4, 5):\n        if (i + j) % 2 == 0:\n            bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.2, j * 0.2, 0.01))\n            cube = bpy.context.object\n            cube.data.materials.append(pattern_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.27066003450882, "unit_n": 17, "param_ratio": 1.0588235294117647}
{"id": "c13c6d9e-de2c-400c-8672-0507d0038df4", "name": "Bookshelf", "instruction": "Create a 3D model of a bookshelf.\n\n1. It should have multiple shelves.\n2. The shelves should be evenly spaced.\n3. Include a back panel for support.\n4. The sides should be solid and straight.\n5. Add a small lip at the front of each shelf to prevent items from falling off.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nshelf_width = 2.0\nshelf_depth = 0.3\nshelf_height = 0.1\nnum_shelves = 5\nshelf_spacing = 0.5\nback_panel_thickness = 0.05\nside_panel_thickness = 0.1\nlip_height = 0.05\n\n# Step 2: Create the Shelves\nfor i in range(num_shelves):\n    z = i * shelf_spacing\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n\n# Step 3: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2 - back_panel_thickness / 2, (num_shelves - 1) * shelf_spacing / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, back_panel_thickness / 2, (num_shelves * shelf_spacing) / 2)\nback_panel.name = \"Back Panel\"\n\n# Step 4: Create the Side Panels\nfor i in range(2):\n    x = (shelf_width / 2 + side_panel_thickness / 2) * (1 if i == 0 else -1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, (num_shelves - 1) * shelf_spacing / 2))\n    side_panel = bpy.context.object\n    side_panel.scale = (side_panel_thickness / 2, shelf_depth / 2, (num_shelves * shelf_spacing) / 2)\n    side_panel.name = f\"Side Panel {i + 1}\"\n\n# Step 5: Create the Lips\nfor i in range(num_shelves):\n    z = i * shelf_spacing + shelf_height / 2 + lip_height / 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, shelf_depth / 2 - lip_height / 2, z))\n    lip = bpy.context.object\n    lip.scale = (shelf_width / 2, lip_height / 2, lip_height / 2)\n    lip.name = f\"Lip {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.011097310808939, "unit_n": 5, "param_ratio": 3.2}
{"id": "86108ecc-0f72-4111-81f1-af79119e53ad", "name": "Dog Leash", "instruction": "For this task, please create a 3D model of a dog leash. The leash should be 6 feet long with a loop handle at one end and a metal clasp at the other end for attaching to a collar. The leash should be a single, continuous piece.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the leash\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Leash\n# Convert 6 feet to meters (1 foot = 0.3048 meters)\nleash_length = 6 * 0.3048\n\n# Create the main part of the leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=leash_length, location=(0, 0, leash_length / 2))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Loop Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.01, location=(0, 0, leash_length + 0.1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Metal Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0, 0, -0.025))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp_material = bpy.data.materials.new(name=\"Metal\")\nclasp_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metal gray color\nclasp.data.materials.append(clasp_material)\n\n# Combine the clasp to the leash\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9297011385966405, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "7d0224be-be38-4457-9814-9e8113c7c8dd", "name": "Syringe", "instruction": "Think about the functionality of a syringe. How would you design it to make it easy to use and efficient for administering medication?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(plastic_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.2, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.3, location=(0, 0, -0.65))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(plunger_color)\n\n# Step 5: Create the Plunger Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 0.6))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(plunger_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.661412842626553, "unit_n": 4, "param_ratio": 7.5}
{"id": "072f32e4-339e-42b2-9f81-87be4bbe5a40", "name": "Dog Grooming Brush", "instruction": "Create a 3D model of a dog grooming brush with a rectangular base and soft bristles covering one side.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the base\nbristle_color = bpy.data.materials.new(name=\"Bristle Color\")\nbristle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the bristles\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Flatten the cube to make it a rectangular base\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Bristles\nfor x in range(-9, 10, 2):\n    for y in range(-4, 5, 2):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x * 0.1, y * 0.1, 0.3))\n        bristle = bpy.context.object\n        bristle.name = f\"Bristle_{x}_{y}\"\n        bristle.data.materials.append(bristle_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.7620544333336685, "unit_n": 2, "param_ratio": 9.5}
{"id": "e43279a1-77dd-466a-92af-f17c48bfb27d", "name": "Microscope", "instruction": "Construct a microscope with a monocular eyepiece, a rotating nosepiece with three objective lenses, and a stage with clips. Include a focus knob and a base.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5))\narm = bpy.context.object\narm.scale[1] = 2\narm.name = \"Arm\"\narm.data.materials.append(black)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 1.5))\nstage = bpy.context.object\nstage.scale[2] = 0.1\nstage.name = \"Stage\"\nstage.data.materials.append(gray)\n\n# Step 5: Create the Clips\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.6, 1.55))\n    clip = bpy.context.object\n    clip.scale[1] = 0.5\n    clip.name = f\"Clip {i + 1}\"\n    clip.data.materials.append(black)\n\n# Step 6: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 2.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 7: Create the Nosepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 2))\nnosepiece = bpy.context.object\nnosepiece.name = \"Nosepiece\"\nnosepiece.data.materials.append(black)\n\n# Step 8: Create the Objective Lenses\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.4 * math.cos(angle)\n    y = 0.4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 1.75))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(black)\n\n# Step 9: Create the Focus Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0.75, 0, 1.5), rotation=(0, math.pi/2, 0))\nfocus_knob = bpy.context.object\nfocus_knob.name = \"Focus Knob\"\nfocus_knob.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.8026833928879435, "unit_n": 11, "param_ratio": 4.454545454545454}
{"id": "c069cc23-6ab0-417c-9799-d7ca525c880b", "name": "Microscope", "instruction": "Let's create a 3D model of a microscope. Start with a sturdy base and a vertical arm. Attach a stage with clips for holding slides. Add an adjustable focus knob on the side. Place an eyepiece at the top and objective lenses below. Ensure the lenses are aligned with the stage. Include a light source under the stage. The microscope should be functional and able to adjust the focus and magnification. The overall design should be practical for laboratory use.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal parts\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for other parts\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Vertical Arm\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.5), scale=(0.5, 0.5, 4))\narm = bpy.context.object\narm.name = \"Arm\"\narm.data.materials.append(metal)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2))\nstage = bpy.context.object\nstage.name = \"Stage\"\nstage.data.materials.append(black)\n\n# Step 5: Create the Clips\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.7, 2.1))\n    clip = bpy.context.object\n    clip.name = f\"Clip {i + 1}\"\n    clip.data.materials.append(metal)\n\n# Step 6: Create the Focus Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0.75, 0, 2))\nfocus_knob = bpy.context.object\nfocus_knob.name = \"Focus Knob\"\nfocus_knob.data.materials.append(metal)\n\n# Step 7: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 4.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 8: Create the Objective Lenses\nfor i in range(3):\n    angle = math.pi / 6 * (i - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0.5 * math.cos(angle), 0.5 * math.sin(angle), 3.5))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(metal)\n\n# Step 9: Create the Light Source\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.5))\nlight_source = bpy.context.object\nlight_source.name = \"Light Source\"\nlight_source.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3327704901591773, "unit_n": 11, "param_ratio": 4.363636363636363}
{"id": "5dd7384d-5fd2-44db-b220-275d9dab170d", "name": "Travel Wallet", "instruction": "Create a travel wallet that is rectangular and can be folded in half. Inside, include slots for credit cards, a section for a passport, and a zippered compartment for coins.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\ncard_slot_color = bpy.data.materials.new(name=\"Card Slot Color\")\ncard_slot_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\npassport_section_color = bpy.data.materials.new(name=\"Passport Section Color\")\npassport_section_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\n\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.scale = (2, 0.1, 1)\nwallet_body.name = \"Wallet Body\"\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create the Credit Card Slots\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1.5 + i * 0.5, 0.12, 0.5))\n    card_slot = bpy.context.object\n    card_slot.scale = (0.2, 0.02, 0.3)\n    card_slot.name = f\"Card Slot {i + 1}\"\n    card_slot.data.materials.append(card_slot_color)\n\n# Step 4: Create the Passport Section\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.5, 0.12, 0))\npassport_section = bpy.context.object\npassport_section.scale = (0.5, 0.02, 0.7)\npassport_section.name = \"Passport Section\"\npassport_section.data.materials.append(passport_section_color)\n\n# Step 5: Create the Zippered Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.12, -0.7))\nzipper_compartment = bpy.context.object\nzipper_compartment.scale = (1.8, 0.02, 0.2)\nzipper_compartment.name = \"Zipper Compartment\"\nzipper_compartment.data.materials.append(zipper_color)\n\n# Step 6: Create the Zipper\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.8, location=(0, 0.15, -0.9), rotation=(0, 1.5708, 0))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.data.materials.append(zipper_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.7626653792912608, "unit_n": 7, "param_ratio": 6.285714285714286}
{"id": "ae89cb79-c1f6-4fcb-84f0-a77b3c2b1e85", "name": "Bookshelf", "instruction": "Describe a bookshelf with three adjustable shelves and a closed back. Ensure the shelves are evenly spaced and can hold a variety of book sizes. Include simple brackets on the sides for shelf adjustment.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Medium wood color\n\n# Step 2: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nback_panel = bpy.context.object\nback_panel.scale = (1, 0.05, 2)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\nfor i in range(2):\n    x = 1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    side_panel = bpy.context.object\n    side_panel.scale = (0.05, 1, 2)\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Shelves\nfor i in range(3):\n    z = 0.5 + i * 1\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (1, 0.25, 0.05)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 5: Create the Brackets\nfor i in range(3):\n    z = 0.5 + i * 1\n    for j in range(2):\n        x = 0.95 * (j * 2 - 1)\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, z))\n        bracket = bpy.context.object\n        bracket.scale = (0.05, 0.05, 0.05)\n        bracket.name = f\"Bracket {i * 2 + j + 1}\"\n        bracket.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5823896856745803, "unit_n": 12, "param_ratio": 1.75}
{"id": "183c8e1c-e9ee-4b1b-be9e-46c8edc9de8c", "name": "Circuit Breaker Panel", "instruction": "Please design a 3D model of a circuit breaker panel. The panel should have a rectangular shape with a hinged door. Inside, include a row of circuit breakers with labeled switches. Add a small indicator light on the front to show the operational status.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbreaker_color = bpy.data.materials.new(name=\"BreakerColor\")\nbreaker_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlight_color = bpy.data.materials.new(name=\"LightColor\")\nlight_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale = (1, 0.1, 1.5)\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.15, 0))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (0.95, 0.05, 1.45)\ndoor.data.materials.append(panel_color)\n\n# Step 4: Create the Circuit Breakers\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.5 + i * 0.25, 0.2, 0.5))\n    breaker = bpy.context.object\n    breaker.name = f\"Breaker {i + 1}\"\n    breaker.scale = (0.1, 0.05, 0.2)\n    breaker.data.materials.append(breaker_color)\n\n    # Add switches to the breakers\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.5 + i * 0.25, 0.25, 0.55))\n    switch = bpy.context.object\n    switch.name = f\"Switch {i + 1}\"\n    switch.scale = (0.05, 0.02, 0.05)\n    switch.data.materials.append(switch_color)\n\n# Step 5: Create the Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.25, 1.3))\nlight = bpy.context.object\nlight.name = \"Indicator Light\"\nlight.data.materials.append(light_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.33839383798749, "unit_n": 13, "param_ratio": 3.076923076923077}
{"id": "6c409c02-a90a-4dc4-bc1e-2f01b506fa86", "name": "Wallet", "instruction": "Make a wallet. It should be rectangular and have multiple card slots inside.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ncard_slot_color = bpy.data.materials.new(name=\"Card Slot Color\")\ncard_slot_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.scale = (1.5, 0.1, 1)\nwallet_body.name = \"Wallet Body\"\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create the Card Slots\nnum_slots = 5\nslot_height = 0.15\nfor i in range(num_slots):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.12, 0.8 - i * slot_height))\n    card_slot = bpy.context.object\n    card_slot.scale = (1.4, 0.02, 0.1)\n    card_slot.name = f\"Card Slot {i + 1}\"\n    card_slot.data.materials.append(card_slot_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.29357836044127, "unit_n": 2, "param_ratio": 9.0}
{"id": "59d38dfe-4a6d-4b8c-b108-e858d1c0a324", "name": "Pizza Slice", "instruction": "Please create a 3D model of a pizza slice. The slice should be triangular, about 6 inches long and 4 inches wide at the crust. Ensure it has a thin crust, with a layer of tomato sauce, cheese, and pepperoni slices.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Slice Base (Crust)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=2, radius2=0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1.9, radius2=0, depth=0.05, location=(0, 0, 0.05))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1.8, radius2=0, depth=0.02, location=(0, 0, 0.07))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create Pepperoni Slices\npepperoni_positions = [(0.5, 0, 0.08), (-0.5, 0.5, 0.08), (-0.5, -0.5, 0.08)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8785762427158774, "unit_n": 4, "param_ratio": 10.75}
{"id": "d1f287fe-a20f-4e96-9f6d-ba7f8be4a740", "name": "Coaster", "instruction": "Design a 3D model of a coaster. It should be a flat, circular object with a simple, smooth surface.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"\n\n# Step 3: Smooth the Surface\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 5.0}
{"id": "d2e6ff35-1955-4128-a49c-5357e9d8f1c9", "name": "Coffee Grinder", "instruction": "Design a 3D model of a coffee grinder with a crank handle on top.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray metal color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.2, location=(0, 0, 2.6))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal_color)\n\n# Step 4: Create the Grinder Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.2, location=(0, 0, 3.3))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(metal_color)\n\n# Step 5: Create the Crank Handle\n# Handle base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0.7, 3.4), rotation=(math.pi/2, 0, 0))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\nhandle_base.data.materials.append(metal_color)\n\n# Handle arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(0.3, 0.7, 3.4), rotation=(0, math.pi/2, 0))\nhandle_arm = bpy.context.object\nhandle_arm.name = \"Handle Arm\"\nhandle_arm.data.materials.append(metal_color)\n\n# Handle knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.6, 0.7, 3.4))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.246197196411422, "unit_n": 6, "param_ratio": 7.333333333333333}
{"id": "bf68ce5a-1585-4017-ad85-6cb97fe99fcc", "name": "Sofa", "instruction": "Create a sofa.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Sofa Base\"\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.5  # Height\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Sofa Backrest\"\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 1  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Sofa Armrest {i + 1}\"\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.75  # Height\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "c71b81bc-1301-4fc0-a356-60011dfb3889", "name": "Bookmark", "instruction": "Design a simple rectangular bookmark with a small hole at the top for a tassel.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bookmark\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbookmark = bpy.context.object\nbookmark.scale[0] = 0.1  # Make it rectangular\nbookmark.scale[1] = 1.5  # Length of the bookmark\nbookmark.scale[2] = 0.01  # Thinness of the bookmark\n\n# Step 3: Create the Hole for the Tassel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, 1.45, 0))\nhole = bpy.context.object\nhole.name = \"Hole\"\n\n# Step 4: Boolean Modifier to Cut the Hole\nmod_bool = bookmark.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = hole\nbpy.context.view_layer.objects.active = bookmark\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(hole, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.759198584694349, "unit_n": 2, "param_ratio": 4.5}
{"id": "b36c2211-685b-4bdd-902e-cb593b6827db", "name": "Chess Board", "instruction": "Design a chess board. The board should be square, with each side measuring 20 inches. The surface should be divided into 64 equal squares, arranged in an 8x8 grid. Alternate the squares in a checkerboard pattern of black and white. Include a 2-inch border around the grid to frame the playing area.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Define the size of the board and squares\nboard_size = 20\nsquare_size = (board_size - 4) / 8  # 2-inch border on each side\n\n# Step 2: Create the Board Base\nbpy.ops.mesh.primitive_plane_add(size=board_size, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Board Base\"\n\n# Step 3: Create the Squares\nfor row in range(8):\n    for col in range(8):\n        x = (col - 3.5) * square_size\n        y = (row - 3.5) * square_size\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(x, y, 0.01))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.3663357198968535, "unit_n": 65, "param_ratio": 0.24615384615384617}
{"id": "a4965941-e5c0-4c66-accf-d7ce6244cd57", "name": "Blender", "instruction": "Let's design a blender. It should have a tall base with a control panel on the front. The jar should be cylindrical and fit snugly on top of the base. Add measurement markings on the jar.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\n\n# Step 4: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=3, location=(0, 0, 3.5))\njar = bpy.context.object\njar.name = \"Jar\"\n\n# Step 5: Add Measurement Markings on the Jar\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0.8, 0, 4.5))\nbpy.ops.transform.resize(value=(1, 0.05, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\nmarking = bpy.context.object\nmarking.name = \"Marking\"\n\n# Duplicate the markings along the height of the jar\nfor i in range(1, 6):\n    new_marking = marking.copy()\n    new_marking.location[2] = 4.5 - i * 0.5\n    bpy.context.collection.objects.link(new_marking)\n\n# Clean up the initial marking\nbpy.data.objects.remove(marking)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.338113528436482, "unit_n": 4, "param_ratio": 4.5}
{"id": "752df5c0-7843-4319-89ec-2009dd309592", "name": "Solar Panel", "instruction": "Let's conceptualize a solar panel. It should be a flat, rectangular grid composed of several smaller solar cells. The edges should be framed with a thin border. Each cell should be a small square or rectangular shape, aligned in a grid pattern across the panel surface.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray\n\ncell_color = bpy.data.materials.new(name=\"CellColor\")\ncell_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray\n\nborder_color = bpy.data.materials.new(name=\"BorderColor\")\nborder_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray\n\n# Step 2: Create the Panel\npanel_width = 2\npanel_height = 1\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\npanel = bpy.context.object\npanel.scale = (panel_width, panel_height, 0.01)\npanel.name = \"SolarPanel\"\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Border\nborder_thickness = 0.05\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.01))\nborder = bpy.context.object\nborder.scale = (panel_width + border_thickness, panel_height + border_thickness, 0.01)\nborder.name = \"Border\"\nborder.data.materials.append(border_color)\n\n# Step 4: Create the Solar Cells\nnum_cells_x = 8\nnum_cells_y = 4\ncell_width = panel_width / num_cells_x\ncell_height = panel_height / num_cells_y\n\nfor i in range(num_cells_x):\n    for j in range(num_cells_y):\n        x = -panel_width/2 + cell_width/2 + i * cell_width\n        y = -panel_height/2 + cell_height/2 + j * cell_height\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.02))\n        cell = bpy.context.object\n        cell.scale = (cell_width * 0.9, cell_height * 0.9, 0.01)\n        cell.name = f\"Cell_{i}_{j}\"\n        cell.data.materials.append(cell_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.038526084392524, "unit_n": 3, "param_ratio": 9.0}
{"id": "7e125543-5dd7-4b70-b2bc-a98a32533ca8", "name": "Sandwich", "instruction": "Let's create a sandwich. Start with two slices of bread, each about 6 inches by 6 inches. Place a layer of lettuce on the bottom slice. Add a slice of tomato and a slice of cheese. Place a piece of ham on top of the cheese. Finish with the top slice of bread.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.84, 0.0, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=6, location=(0, 0, 0.5))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale.z = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_plane_add(size=5.5, location=(0, 0, 1))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale.z = 0.02\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=2.5, depth=0.2, location=(0, 0, 1.2))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Slice\nbpy.ops.mesh.primitive_cube_add(size=5, location=(0, 0, 1.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale.z = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=2.5, depth=0.3, location=(0, 0, 1.6))\nham = bpy.context.object\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=6, location=(0, 0, 2.1))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale.z = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.196056860233279, "unit_n": 6, "param_ratio": 8.5}
{"id": "b0ddea56-c1d0-4293-8eec-10ea2c8785dd", "name": "Maracas", "instruction": "Create a pair of maracas. They should have a rounded body and a handle.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmaraca_body_color = bpy.data.materials.new(name=\"Maraca Body Color\")\nmaraca_body_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nmaraca_handle_color = bpy.data.materials.new(name=\"Maraca Handle Color\")\nmaraca_handle_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\n\n# Step 2: Create the first Maraca\n# Create the body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0.2))\nmaraca_body_1 = bpy.context.object\nmaraca_body_1.name = \"Maraca Body 1\"\nmaraca_body_1.data.materials.append(maraca_body_color)\n\n# Create the handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, 0, -0.2))\nmaraca_handle_1 = bpy.context.object\nmaraca_handle_1.name = \"Maraca Handle 1\"\nmaraca_handle_1.data.materials.append(maraca_handle_color)\n\n# Step 3: Create the second Maraca\n# Create the body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0.5, 0, 0.2))\nmaraca_body_2 = bpy.context.object\nmaraca_body_2.name = \"Maraca Body 2\"\nmaraca_body_2.data.materials.append(maraca_body_color)\n\n# Create the handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.5, 0, -0.2))\nmaraca_handle_2 = bpy.context.object\nmaraca_handle_2.name = \"Maraca Handle 2\"\nmaraca_handle_2.data.materials.append(maraca_handle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.388120064225533, "unit_n": 4, "param_ratio": 7.0}
{"id": "9ffa92a1-e87c-4094-8403-1e22195d5597", "name": "Cat Bowl", "instruction": "Create a 3D model of a cat bowl. Compare it with a dog bowl, but make it smaller and more shallow.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\n\n# Step 2: Create the Cat Bowl (smaller and more shallow compared to a dog bowl)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(0, 0, 0))\ncat_bowl = bpy.context.object\ncat_bowl.name = \"Cat Bowl\"\ncat_bowl.data.materials.append(bowl_color)\n\n# Step 3: Create the inner part of the bowl to make it hollow\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.15, location=(0, 0, 0.025))\ninner_part = bpy.context.object\ninner_part.name = \"Inner Part\"\ninner_part.data.materials.append(bowl_color)\n\n# Step 4: Boolean difference to hollow out the bowl\nmod_bool = cat_bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_part\nbpy.context.view_layer.objects.active = cat_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner part\nbpy.data.objects.remove(inner_part, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 7.5}
{"id": "043a68ce-8c7f-4a96-a0a2-8bb95c16011c", "name": "Microphone", "instruction": "Create a microphone for podcast recordings.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Microphone Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 0.25))\nmic_body = bpy.context.object\nmic_body.name = \"Mic Body\"\n\n# Step 3: Create the Microphone Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.07, location=(0, 0, 0.55))\nmic_head = bpy.context.object\nmic_head.name = \"Mic Head\"\n\n# Step 4: Create the Microphone Stand Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(0, 0, -0.1))\nstand_base = bpy.context.object\nstand_base.name = \"Stand Base\"\n\n# Step 5: Create the Microphone Stand Rod\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, 0, 0.05))\nstand_rod = bpy.context.object\nstand_rod.name = \"Stand Rod\"\n\n# Setting materials\nmic_body_material = bpy.data.materials.new(name=\"MicBodyMaterial\")\nmic_body_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nmic_head_material = bpy.data.materials.new(name=\"MicHeadMaterial\")\nmic_head_material.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color\n\nstand_base_material = bpy.data.materials.new(name=\"StandBaseMaterial\")\nstand_base_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nstand_rod_material = bpy.data.materials.new(name=\"StandRodMaterial\")\nstand_rod_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Applying materials\nmic_body.data.materials.append(mic_body_material)\nmic_head.data.materials.append(mic_head_material)\nstand_base.data.materials.append(stand_base_material)\nstand_rod.data.materials.append(stand_rod_material)", "color_brightness": "Dark", "verify": "human", "entropy": 4.296598275986243, "unit_n": 4, "param_ratio": 9.75}
{"id": "dabd3a41-8a40-4ab5-bdc0-a293864c56fa", "name": "Sunglasses Case", "instruction": "Create a 3D model of a sunglasses case. It should be rectangular with a hinged lid and a clasp for closure.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.5, 0.2)\nbase.data.materials.append(case_color)\n\n# Step 3: Create the Lid of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.scale = (1, 0.5, 0.2)\nlid.data.materials.append(case_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, -0.55, 0.85), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(case_color)\n\n# Step 5: Create the Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.55, 1.1))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp.scale = (0.2, 0.1, 0.1)\nclasp.data.materials.append(case_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.9568016124420415, "unit_n": 4, "param_ratio": 6.25}
{"id": "1df7b850-ee16-423f-8a81-8929bf62ab0d", "name": "Circuit Breaker", "instruction": "Could you generate a 3D model of a circuit breaker? Make sure it has a toggle switch on the front.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbreaker_body_color = bpy.data.materials.new(name=\"Breaker Body Color\")\nbreaker_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ntoggle_switch_color = bpy.data.materials.new(name=\"Toggle Switch Color\")\ntoggle_switch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Circuit Breaker Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbreaker_body = bpy.context.object\nbreaker_body.name = \"Circuit Breaker Body\"\nbreaker_body.scale = (0.5, 0.8, 1.2)\nbreaker_body.data.materials.append(breaker_body_color)\n\n# Step 3: Create the Toggle Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.85, 0.4))\ntoggle_switch = bpy.context.object\ntoggle_switch.name = \"Toggle Switch\"\ntoggle_switch.scale = (0.1, 0.2, 0.3)\ntoggle_switch.data.materials.append(toggle_switch_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "8116bb1b-0f06-44c8-b918-752f3ad581ba", "name": "Chess Piece", "instruction": "Model a 3D chess piece for me. Make it a knight.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nknight_color = bpy.data.materials.new(name=\"KnightColor\")\nknight_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(knight_color)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(knight_color)\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(0, 0, 1.3))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(knight_color)\n\n# Step 5: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.3, location=(0, 0, 1.15))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(knight_color)\n\n# Step 6: Create the Ears\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.2, location=(0.15, 0, 1.45))\near1 = bpy.context.object\near1.name = \"Ear1\"\near1.data.materials.append(knight_color)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.2, location=(-0.15, 0, 1.45))\near2 = bpy.context.object\near2.name = \"Ear2\"\near2.data.materials.append(knight_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.883640217342374, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "1bedcbfd-03f6-460b-9ae1-714ed0a1e195", "name": "Decorative Border", "instruction": "What would a 3D model of a decorative border look like? It should have a repeating pattern along its length.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nborder_color = bpy.data.materials.new(name=\"BorderColor\")\nborder_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Repeating Pattern\npattern_length = 1.0\npattern_count = 10\n\nfor i in range(pattern_count):\n    x = i * pattern_length\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, 0, 0))\n    cube = bpy.context.object\n    cube.name = f\"Pattern {i + 1}\"\n    cube.data.materials.append(border_color)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x + 0.3, 0, 0))\n    sphere = bpy.context.object\n    sphere.name = f\"Pattern Sphere {i + 1}\"\n    sphere.data.materials.append(border_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 6.493628244909393, "unit_n": 2, "param_ratio": 6.5}
{"id": "9cc3fa3e-c995-431a-a414-db53677f31b0", "name": "Sandwich", "instruction": "Design a sandwich. It should have two slices of bread with visible layers of ingredients in between. Include slices of lettuce, tomato, cheese, and a few slices of meat. The sandwich should look appetizing and ready to eat.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.1, 1)  # Yellow color\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.scale[2] = 0.1\nmeat.name = \"Meat\"\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "0a7a934c-6cbf-4f2c-bbbc-506edc311af6", "name": "Thermometer vs. Barometer", "instruction": "Design a 3D model comparing a thermometer and a barometer.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nthermometer_color = bpy.data.materials.new(name=\"ThermometerColor\")\nthermometer_color.diffuse_color = (1, 0, 0, 1)  # Red color for thermometer\n\nbarometer_color = bpy.data.materials.new(name=\"BarometerColor\")\nbarometer_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for barometer\n\n# Step 2: Create the Thermometer\n# Thermometer bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(-1, 0, 0))\nbulb = bpy.context.object\nbulb.name = \"Thermometer Bulb\"\nbulb.data.materials.append(thermometer_color)\n\n# Thermometer tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(-1, 0, 0.75))\ntube = bpy.context.object\ntube.name = \"Thermometer Tube\"\ntube.data.materials.append(thermometer_color)\n\n# Step 3: Create the Barometer\n# Barometer body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(1, 0, 0))\nbody = bpy.context.object\nbody.name = \"Barometer Body\"\nbody.data.materials.append(barometer_color)\n\n# Barometer dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.05, location=(1, 0, 0.1))\ndial = bpy.context.object\ndial.name = \"Barometer Dial\"\ndial.data.materials.append(barometer_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6435225611754363, "unit_n": 4, "param_ratio": 7.25}
{"id": "4e93c610-9cee-43b9-b7a2-976bcb144c33", "name": "Trash Can", "instruction": "Create a 3D model of a trash can. It should be cylindrical and have a lid on top.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ntrash_can_body = bpy.context.object\ntrash_can_body.name = \"Trash Can Body\"\ntrash_can_body.data.materials.append(gray)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 7.5}
{"id": "a53cffe0-7176-4029-be53-cf34460ebbc1", "name": "Laundry Basket", "instruction": "Create a 3D model of a laundry basket. It should be tall and cylindrical with a wide opening at the top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbasket = bpy.context.object\nbasket.name = \"Laundry Basket\"\n\n# Step 3: Create the Opening (Subtracting a Smaller Cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2.1, location=(0, 0, 1))\ninner_cylinder = bpy.context.object\ninner_cylinder.name = \"Inner Cylinder\"\n\n# Step 4: Boolean Modifier to Create the Hollow Basket\nmod_bool = basket.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cylinder\n\nbpy.context.view_layer.objects.active = basket\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 5.0}
{"id": "dafbd4e8-f361-4380-8eb7-406c0606794b", "name": "Sticky Notes", "instruction": "Create a set of sticky notes in different colors. How do they compare in size and shape to standard sticky notes?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Clear the scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Define colors for the sticky notes\ncolors = {\n    'Yellow': (1.0, 1.0, 0.0, 1),\n    'Blue': (0.0, 0.0, 1.0, 1),\n    'Green': (0.0, 1.0, 0.0, 1),\n    'Pink': (1.0, 0.75, 0.8, 1)\n}\n\n# Create sticky notes\nfor i, (color_name, color_value) in enumerate(colors.items()):\n    # Create a new material\n    mat = bpy.data.materials.new(name=color_name)\n    mat.diffuse_color = color_value\n\n    # Create a plane for the sticky note\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(i * 1.1, 0, 0))\n    note = bpy.context.object\n    note.name = f\"Sticky Note {color_name}\"\n    note.scale = (0.75, 0.75, 0.01)  # Scale to match standard sticky note size (3x3 inches)\n    note.data.materials.append(mat)", "color_brightness": "Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 1, "param_ratio": 4.0}
{"id": "d776b05c-76c3-40ad-b907-2e84985aeb7d", "name": "Cookie Jar", "instruction": "Create a cookie jar with a round shape and a secure lid to keep cookies fresh. It should be large enough to hold a dozen cookies.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\njar_color = bpy.data.materials.new(name=\"JarColor\")\njar_color.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color\n\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Darker brown color\n\n# Step 2: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\njar = bpy.context.object\njar.name = \"CookieJar\"\njar.data.materials.append(jar_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Lid Handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 2.3))\nhandle = bpy.context.object\nhandle.name = \"LidHandle\"\nhandle.data.materials.append(lid_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.068266603832517, "unit_n": 3, "param_ratio": 8.0}
{"id": "a8f06d4c-f8e0-4bf1-9913-9046a25084f1", "name": "Decorative Wall Panel", "instruction": "Let's design a decorative wall panel. Imagine it with intricate geometric patterns that flow seamlessly. Make sure the design is captivating and adds a touch of sophistication to any space.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Panel Base\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npanel_base = bpy.context.object\npanel_base.name = \"Panel Base\"\n\n# Step 3: Create Geometric Patterns\n# Example pattern: Circles arranged in a grid\npattern_radius = 0.1\nspacing = 0.3\nrows = 5\ncols = 5\n\nfor i in range(rows):\n    for j in range(cols):\n        x = (j - cols / 2) * spacing\n        y = (i - rows / 2) * spacing\n        bpy.ops.mesh.primitive_circle_add(radius=pattern_radius, location=(x, y, 0.01))\n        circle = bpy.context.object\n        circle.name = f\"Circle {i * cols + j + 1}\"\n\n# Step 4: Set Material for the Panel\nmaterial = bpy.data.materials.new(name=\"Panel Material\")\nmaterial.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\npanel_base.data.materials.append(material)\nfor obj in bpy.context.scene.objects:\n    if obj.name.startswith(\"Circle\"):\n        obj.data.materials.append(material)", "color_brightness": "Bright", "verify": "human", "entropy": 4.1364079272095395, "unit_n": 2, "param_ratio": 6.0}
{"id": "3690f24c-a4ff-40a8-bc65-f55d317654a3", "name": "Cymbals", "instruction": "Can you create a pair of cymbals, please?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (0.83, 0.68, 0.21, 1)  # Gold color\n\n# Step 2: Create the first cymbal\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=1, radius2=0.1, depth=0.1, location=(0, 0, 0))\ncymbal1 = bpy.context.object\ncymbal1.name = \"Cymbal1\"\ncymbal1.data.materials.append(gold)\n\n# Step 3: Create the second cymbal\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=1, radius2=0.1, depth=0.1, location=(0, 0, 0.15))\ncymbal2 = bpy.context.object\ncymbal2.name = \"Cymbal2\"\ncymbal2.data.materials.append(gold)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.735796185670232, "unit_n": 2, "param_ratio": 9.5}
{"id": "1f90e60d-5313-4542-84f5-c08dc218105a", "name": "Travel Pillow", "instruction": "I need a 3D model of a travel pillow. It should be U-shaped to fit around the neck. The thickness should be about 10 cm, and the overall size should be 30 cm wide and 30 cm long.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the U-shaped Pillow\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(0, 0, 0))\npillow = bpy.context.object\npillow.name = \"Travel Pillow\"\n\n# Step 3: Modify the Shape to U-shape\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Select the vertices to delete\nfor vert in pillow.data.vertices:\n    if vert.co.x < 0 and vert.co.y > 0:\n        vert.select = True\n\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.delete(type='VERT')\n\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Scale to the correct dimensions\npillow.scale = (1.5, 1.5, 1)\n\n# Apply the scale\nbpy.ops.object.transform_apply(scale=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.243332386372925, "unit_n": 1, "param_ratio": 5.0}
{"id": "512155c2-bdf8-4d55-863d-1c2ddb37c2a3", "name": "Chess Knight", "instruction": "Please create a 3D model of a chess knight piece. The piece should have the head and neck of a horse, with a mane and a base for stability. How should it be decorated to stand out from the other pieces?", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nknight_color = bpy.data.materials.new(name=\"KnightColor\")\nknight_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(knight_color)\n\n# Step 3: Create the Body (Neck)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(knight_color)\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(0, 0, 1.75))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(knight_color)\n\n# Step 5: Create the Mane\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.3, 1.75))\nmane = bpy.context.object\nmane.name = \"Mane\"\nmane.scale[2] = 0.5\nmane.data.materials.append(knight_color)\n\n# Step 6: Duplicate and position the Mane segments\nfor i in range(1, 5):\n    bpy.ops.object.duplicate(linked=False)\n    new_mane = bpy.context.object\n    new_mane.location[2] = 1.75 - i * 0.2\n\n# Step 7: Create the Ears\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(0.2, 0, 2))\near1 = bpy.context.object\near1.name = \"Ear1\"\near1.data.materials.append(knight_color)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(-0.2, 0, 2))\near2 = bpy.context.object\near2.name = \"Ear2\"\near2.data.materials.append(knight_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.4358309936743385, "unit_n": 6, "param_ratio": 5.5}
{"id": "ef413d58-9662-4f18-bf48-2ac124bda38a", "name": "Apple", "instruction": "Design an apple. Make it round with a small stem at the top.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Define the color for the apple\napple_material = bpy.data.materials.new(name=\"AppleMaterial\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the color for the stem\nstem_material = bpy.data.materials.new(name=\"StemMaterial\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 9.5}
{"id": "323c9bd4-a708-4702-82dd-d36ccbeff006", "name": "Screwdriver", "instruction": "Let's design a 3D model of a screwdriver. The handle should be ergonomic, with a textured grip for easy handling. The shaft should be about 6 inches long and made of durable metal. The tip should be a flat-head design. Additionally, include a hanging hole at the end of the handle for storage purposes.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Metal color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Handle color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.5, location=(0, 0, 0.75))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Textured Grip (simplified as multiple rings)\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 0.5 + i * 0.3))\n    grip = bpy.context.object\n    grip.name = f\"Grip {i + 1}\"\n    grip.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=6, location=(0, 0, 4.5))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal)\n\n# Step 5: Create the Flat-head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 7.5))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.scale[1] = 0.02  # Make it flat-head\ntip.data.materials.append(metal)\n\n# Step 6: Create the Hanging Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 1.45))\nhole = bpy.context.object\nhole.name = \"Hanging Hole\"\nbpy.ops.object.editmode_toggle()\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.1)})\nbpy.ops.object.editmode_toggle()\n\n# Combine the handle and the hole\nbpy.context.view_layer.objects.active = handle\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = hole\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(hole)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.693074669569135, "unit_n": 8, "param_ratio": 4.375}
{"id": "b2269e3b-3b4e-4911-afe1-5ea2346bea31", "name": "Logo Design", "instruction": "Design a 3D model of a logo for a tech company. The logo should incorporate an abstract shape that represents innovation and connectivity. Use a combination of geometric forms, like triangles and circles, to create a dynamic and modern look. Compare two different color schemes: one with bold, contrasting colors and another with a monochromatic palette. Include a version of the logo with a tagline underneath, and another version without the tagline.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete()\n\n# Function to create materials\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\n# Function to create a triangle\ndef create_triangle(name, location, material):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=location)\n    obj = bpy.context.object\n    obj.name = name\n    obj.data.materials.append(material)\n\n# Function to create a circle\ndef create_circle(name, location, material):\n    bpy.ops.mesh.primitive_circle_add(radius=1, location=location)\n    obj = bpy.context.object\n    obj.name = name\n    obj.data.materials.append(material)\n\n# Clear the scene\nclear_scene()\n\n# Define materials\nbold_red = create_material(\"Bold Red\", (1, 0, 0, 1))\nbold_blue = create_material(\"Bold Blue\", (0, 0, 1, 1))\nmono_gray = create_material(\"Mono Gray\", (0.5, 0.5, 0.5, 1))\n\n# Create geometric forms for bold, contrasting colors\ncreate_triangle(\"Triangle Bold\", (0, 0, 0), bold_red)\ncreate_circle(\"Circle Bold\", (2, 0, 0), bold_blue)\n\n# Create geometric forms for monochromatic palette\ncreate_triangle(\"Triangle Mono\", (0, 2, 0), mono_gray)\ncreate_circle(\"Circle Mono\", (2, 2, 0), mono_gray)\n\n# Add tagline text\nbpy.ops.object.text_add(location=(1, -1, 0))\ntagline = bpy.context.object\ntagline.data.body = \"Innovate. Connect. Succeed.\"\ntagline.name = \"Tagline\"\ntagline.scale = (0.5, 0.5, 0.5)\n\n# Duplicate logo without tagline\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Triangle Bold'].select_set(True)\nbpy.data.objects['Circle Bold'].select_set(True)\nbpy.ops.object.duplicate_move(TRANSFORM_OT_translate={\"value\":(0, -3, 0)})\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7736663786734956, "unit_n": 3, "param_ratio": 2.3333333333333335}
{"id": "0c4ec3df-7c6e-4ba4-824a-691ac1353c49", "name": "Ottoman", "instruction": "Can you envision an ottoman that's just the right height to rest your feet on when sitting on a standard sofa?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nottoman_color = bpy.data.materials.new(name=\"Ottoman Color\")\nottoman_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # A medium brown color\n\n# Step 2: Create the Ottoman Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nottoman_base = bpy.context.object\nottoman_base.name = \"Ottoman Base\"\nottoman_base.scale = (1, 1, 0.25)  # Adjust the height to be suitable for an ottoman\nottoman_base.data.materials.append(ottoman_color)\n\n# Step 3: Create the Legs\nfor i in range(4):\n    x = 0.45 * (i % 2 * 2 - 1)\n    y = 0.45 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.25, location=(x, y, 0.125))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(ottoman_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4839514834534477, "unit_n": 5, "param_ratio": 2.8}
{"id": "4b6d6379-9f10-4e12-9863-4d3ed73a9d51", "name": "Dining Table", "instruction": "Design a dining table that can seat six people. The table should have a rectangular top. Include four legs positioned at the corners. Ensure the table is stable and has enough space underneath for comfortable seating.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [\n    (1.9, 0.9, 0.5),\n    (-1.9, 0.9, 0.5),\n    (1.9, -0.9, 0.5),\n    (-1.9, -0.9, 0.5)\n]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 5  # Height of the leg\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 2, "param_ratio": 5.0}
{"id": "528f3e1c-ec06-4ef3-a838-a318ebef3016", "name": "Sofa", "instruction": "Design a simple sofa. It should have a rectangular base, backrest, and armrests. Keep the lines clean and the shape straightforward.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.2  # Height\nbase.name = \"Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.1))\nbackrest = bpy.context.object\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 0.6  # Height\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.5  # Height\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "366946c9-74e2-43f7-9585-121204700da1", "name": "Hat", "instruction": "Create a 3D model of a hat. It should have a wide brim and a rounded crown. Add a decorative band around the base of the crown. The hat should be slightly tilted to one side.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the band\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.8, location=(0, 0, 0.6))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.scale[2] = 1.2  # Make it slightly taller\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 0.4))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)\n\n# Step 5: Tilt the Hat\nhat_objects = [brim, crown, band]\nfor obj in hat_objects:\n    obj.rotation_euler[0] = math.radians(10)  # Tilt 10 degrees on the X-axis\n    obj.rotation_euler[2] = math.radians(15)  # Tilt 15 degrees on the Z-axis", "color_brightness": "Dark", "verify": "human", "entropy": 5.131384283571305, "unit_n": 3, "param_ratio": 8.0}
{"id": "e1e893de-7b0e-4c41-9fc2-20857a162c6b", "name": "Pizza", "instruction": "Let's make a pizza! Start with a circular base. Add a layer of tomato sauce, followed by a layer of cheese. Add pepperoni slices evenly distributed across the top. Finally, add a few sprigs of basil for garnish.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough Color\")\ndough_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light dough color\n\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce Color\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce red\n\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Cheese yellow\n\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Pepperoni dark red\n\nbasil_color = bpy.data.materials.new(name=\"Basil Color\")\nbasil_color.diffuse_color = (0.1, 0.5, 0.1, 1)  # Basil green\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0, 0.4), (0, -0.4)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create Basil Sprigs\nbasil_positions = [(0.5, 0), (-0.5, 0), (0, 0.5)]\nfor i, (x, y) in enumerate(basil_positions):\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(x, y, 0.12))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.335483637167041, "unit_n": 5, "param_ratio": 9.8}
{"id": "7ea16ae5-c710-44cd-8895-04efe5d89c90", "name": "Logo", "instruction": "Create a simple logo with an abstract geometric shape.", "category": "Medical and laboratory equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\n\n# Step 2: Create the base shape (cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbase_shape = bpy.context.object\nbase_shape.name = \"Base Shape\"\nbase_shape.data.materials.append(blue)\n\n# Step 3: Create a smaller intersecting shape (sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0.5, 0.5, 0.5))\nintersecting_shape = bpy.context.object\nintersecting_shape.name = \"Intersecting Shape\"\nintersecting_shape.data.materials.append(blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.866845409015038, "unit_n": 2, "param_ratio": 6.5}
{"id": "c0de4e18-66f3-480e-baa7-bcac395c7895", "name": "Battery Cell", "instruction": "Create a cylindrical battery cell with a positive terminal on one end and a flat negative terminal on the other. The body should be uniform with no additional markings.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbattery_color = bpy.data.materials.new(name=\"BatteryColor\")\nbattery_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Battery Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\nbattery_body = bpy.context.object\nbattery_body.name = \"Battery Body\"\nbattery_body.data.materials.append(battery_color)\n\n# Step 3: Create the Positive Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 1.05))\npositive_terminal = bpy.context.object\npositive_terminal.name = \"Positive Terminal\"\npositive_terminal.data.materials.append(battery_color)\n\n# Step 4: Create the Negative Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, -1.025))\nnegative_terminal = bpy.context.object\nnegative_terminal.name = \"Negative Terminal\"\nnegative_terminal.data.materials.append(battery_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.108764571236915, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "3176ce73-af75-4418-a613-546ff30cf499", "name": "Data Server", "instruction": "What kind of visual elements would you add to a data server to make it more visually appealing?", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Black color\nblue_led = bpy.data.materials.new(name=\"Blue LED\")\nblue_led.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color for LED\ngreen_led = bpy.data.materials.new(name=\"Green LED\")\ngreen_led.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color for LED\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray for screen\n\n# Step 2: Create the Server Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nserver_box = bpy.context.object\nserver_box.name = \"Server Box\"\nserver_box.scale = (1, 0.5, 2)\nserver_box.data.materials.append(black)\n\n# Step 3: Create LED Lights\nfor i in range(5):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-0.8 + i * 0.4, 0.6, 2.8))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(blue_led if i % 2 == 0 else green_led)\n\n# Step 4: Create the Display Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.51, 1))\nscreen = bpy.context.object\nscreen.name = \"Display Screen\"\nscreen.scale = (0.8, 0.01, 0.5)\nscreen.data.materials.append(screen_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.507419040727949, "unit_n": 7, "param_ratio": 4.571428571428571}
{"id": "e1ca5ac1-0bb8-4ccf-a052-d082441df812", "name": "Circuit Breaker", "instruction": "I need a circuit breaker model. It should have a rectangular body with a switch on the front that can be toggled up and down. Include a small label area below the switch.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[0] = 0.5  # Scale along X-axis\nbody.scale[1] = 0.8  # Scale along Y-axis\nbody.scale[2] = 1.2  # Scale along Z-axis\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.85, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale[0] = 0.2  # Scale along X-axis\nswitch.scale[1] = 0.1  # Scale along Y-axis\nswitch.scale[2] = 0.4  # Scale along Z-axis\n\n# Step 4: Create the Label Area\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.85, -0.7))\nlabel = bpy.context.object\nlabel.name = \"Label\"\nlabel.scale[0] = 0.4  # Scale along X-axis\nlabel.scale[1] = 0.02  # Scale along Y-axis\nlabel.scale[2] = 0.1  # Scale along Z-axis\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 4.0}
{"id": "51423351-a5b8-448c-ad4e-772adf9f7ebc", "name": "Circuit Breaker", "instruction": "Design a circuit breaker with a rectangular body. Include a switch on the front that can be toggled between on and off positions. There should be terminals for connecting wires.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nterminal_color = bpy.data.materials.new(name=\"Terminal Color\")\nterminal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.6, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.05, 0.1)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create the Terminals\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, -0.6, -0.5))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.rotation_euler = (1.5708, 0, 0)\n    terminal.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.076200598236178, "unit_n": 4, "param_ratio": 7.0}
{"id": "73a5752d-2835-4559-82f5-3deef31c89a9", "name": "Pizza Slice", "instruction": "Create a 3D model of a pizza slice. It should be triangular.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the pizza slice\npizza_color = bpy.data.materials.new(name=\"Pizza\")\npizza_color.diffuse_color = (0.95, 0.64, 0.37, 1)  # Light brownish color\n\n# Step 2: Create the Pizza Slice\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(pizza_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 12.0}
{"id": "d05427d9-e6ca-425a-a7b0-0c80c3e8cba0", "name": "Patterned Wallpaper", "instruction": "Design a wallpaper pattern featuring floral motifs.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for flowers\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for leaves\n\n# Step 2: Create a Flower\ndef create_flower(location):\n    # Petals\n    for i in range(5):\n        angle = i * (2 * 3.14159 / 5)\n        x = 0.2 * math.cos(angle)\n        y = 0.2 * math.sin(angle)\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(location[0] + x, location[1] + y, location[2]))\n        petal = bpy.context.object\n        petal.data.materials.append(flower_color)\n    \n    # Center\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    center = bpy.context.object\n    center.data.materials.append(flower_color)\n\n# Step 3: Create Leaves\ndef create_leaf(location, rotation):\n    bpy.ops.mesh.primitive_plane_add(size=0.3, location=location, rotation=rotation)\n    leaf = bpy.context.object\n    leaf.data.materials.append(leaf_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(0.5, 1, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Arrange Flowers and Leaves in a Pattern\nfor i in range(-2, 3):\n    for j in range(-2, 3):\n        create_flower((i, j, 0))\n        create_leaf((i + 0.3, j + 0.3, 0), (0, 0, math.radians(45)))\n        create_leaf((i - 0.3, j + 0.3, 0), (0, 0, math.radians(-45)))\n        create_leaf((i + 0.3, j - 0.3, 0), (0, 0, math.radians(-135)))\n        create_leaf((i - 0.3, j - 0.3, 0), (0, 0, math.radians(135)))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.743783354196115, "unit_n": 7, "param_ratio": 2.2857142857142856}
{"id": "0ec2e61a-e7b1-4619-bb09-c1d664f0ed84", "name": "Birthday Cake", "instruction": "Create a 3D model of a birthday cake. It should be round with three layers. There are candles on top, and the sides are decorated with simple icing patterns.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake\")\ncake_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the cake\nicing_color = bpy.data.materials.new(name=\"Icing\")\nicing_color.diffuse_color = (1, 1, 1, 1)  # White color for the icing\ncandle_color = bpy.data.materials.new(name=\"Candle\")\ncandle_color.diffuse_color = (1, 0, 0, 1)  # Red color for the candles\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1 - 0.1 * i, depth=0.3, location=(0, 0, 0.15 + 0.3 * i))\n    layer = bpy.context.object\n    layer.name = f\"Layer {i + 1}\"\n    layer.data.materials.append(cake_color)\n\n# Step 3: Create the Icing Patterns\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=1 - 0.1 * i, minor_radius=0.05, location=(0, 0, 0.3 * (i + 1)))\n    icing = bpy.context.object\n    icing.name = f\"Icing {i + 1}\"\n    icing.data.materials.append(icing_color)\n\n# Step 4: Create the Candles\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 1.05))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.949371715344348, "unit_n": 14, "param_ratio": 2.142857142857143}
{"id": "57b7331e-c943-4920-bd79-3f5d6e1c8b6e", "name": "Power Supply Unit", "instruction": "Create a power supply unit that is rectangular in shape. It should have a vented casing and multiple output connectors. The unit should feature an on/off switch and a power indicator light.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1.5, 1, 0.5)\nmain_body.data.materials.append(gray)\n\n# Step 3: Create the Vented Casing (simplified as small cubes)\nfor i in range(-6, 7, 2):\n    for j in range(-3, 4, 2):\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.2, j * 0.2, 0.5))\n        vent = bpy.context.object\n        vent.name = f\"Vent {i}_{j}\"\n        vent.data.materials.append(black)\n\n# Step 4: Create the Output Connectors\nfor i in range(-2, 3, 2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.6, i * 0.2, -0.2))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i}\"\n    connector.data.materials.append(black)\n\n# Step 5: Create the On/Off Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.6, 0, 0.3))\nswitch = bpy.context.object\nswitch.name = \"On/Off Switch\"\nswitch.data.materials.append(red)\n\n# Step 6: Create the Power Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-1.6, 0.3, 0.3))\nindicator_light = bpy.context.object\nindicator_light.name = \"Power Indicator Light\"\nindicator_light.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7902698459067943, "unit_n": 5, "param_ratio": 8.0}
{"id": "918a09a9-c292-4b28-b912-ee73e1767ff4", "name": "Table Lamp", "instruction": "Create a table lamp with a circular base and a straight stand. The lamp should have a simple shade.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nstand_color = bpy.data.materials.new(name=\"Stand Color\")\nstand_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nshade_color = bpy.data.materials.new(name=\"Shade Color\")\nshade_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nstand = bpy.context.object\nstand.name = \"Stand\"\nstand.data.materials.append(stand_color)\n\n# Step 4: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.2, depth=0.6, location=(0, 0, 1.3))\nshade = bpy.context.object\nshade.name = \"Shade\"\nshade.data.materials.append(shade_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.147805837598859, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "ca28dde9-3b41-4253-8d6a-c996a193fdcf", "name": "Dog Collar", "instruction": "Design a dog collar. The collar should be a simple band with a buckle for fastening. Add a small ring for attaching a leash.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.5, 0.2, 0.1, 1)  # Brown color\n\nbuckle_color = bpy.data.materials.new(name=\"Buckle Color\")\nbuckle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nring_color = bpy.data.materials.new(name=\"Ring Color\")\nring_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Collar Band\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\ncollar_band = bpy.context.object\ncollar_band.name = \"Collar Band\"\ncollar_band.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.data.materials.append(buckle_color)\n\n# Step 4: Create the Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(1.2, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(ring_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.2176818229278545, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "1bf86f5a-9ef1-4106-904c-142da7954665", "name": "Coffee Mug", "instruction": "Design a coffee mug with a 12-ounce capacity and a simple cylindrical shape. Include a handle that loops out from the side.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the mug\nmug_color = bpy.data.materials.new(name=\"Mug Color\")\nmug_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.2, location=(0, 0, 0.6))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Mug Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(1.3, 0, 0.6), major_radius=0.3, minor_radius=0.1, rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Mug Handle\"\nhandle.data.materials.append(mug_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9035264520268753, "unit_n": 2, "param_ratio": 9.5}
{"id": "2a1c7147-0ada-48ee-889f-a187c579bf04", "name": "Syringe", "instruction": "Model a syringe with a cylindrical barrel, a plunger, and a needle at the end.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbarrel_color = bpy.data.materials.new(name=\"Barrel Color\")\nbarrel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(barrel_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=2.2, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.100944575547292, "unit_n": 3, "param_ratio": 10.0}
{"id": "9fcb5e0b-d2a9-445e-b38d-3ce5da08d97b", "name": "Briefcase", "instruction": "Generate a briefcase.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body of the Briefcase\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Briefcase Body\"\nbody.scale = (1.5, 0.3, 1)\nbody.data.materials.append(black)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 2.2), major_radius=0.4, minor_radius=0.05)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (1.5708, 0, 0)\nhandle.data.materials.append(black)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.2427871447995757, "unit_n": 2, "param_ratio": 7.5}
{"id": "12c8e1fa-5424-491f-ba2c-2c84248bf26c", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should be a slim, rectangular device with a touchscreen on the front and a camera on the back.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.02)  # Slim rectangular shape\nbody.data.materials.append(dark_gray)\n\n# Step 3: Create the Touchscreen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Touchscreen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(black)\n\n# Step 4: Create the Camera\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.01, location=(0, 0.35, 0.03))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.0943603778555504, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "4fcdcb98-9dbd-4dcb-9983-6fb23bb07914", "name": "Drum", "instruction": "Create a 3D model of a drum. It should have a cylindrical shape with a flat top.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\n\n# Step 3: Create the Flat Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.5))\ndrum_top = bpy.context.object\ndrum_top.name = \"Drum Top\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 5.0}
{"id": "f3e5a070-f5da-4315-93ba-86d7fee32b01", "name": "Pizza", "instruction": "Create a 3D model of a pizza. It should be circular with a slightly raised crust and topped with cheese and pepperoni slices.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(0, 0, 0.05))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Slices\npepperoni_positions = [\n    (0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), \n    (0.5, 0), (-0.5, 0), (0, 0.5), (0, -0.5)\n]\n\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.1))\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = f\"Pepperoni {i + 1}\"\n    pepperoni_slice.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.089084642047792, "unit_n": 3, "param_ratio": 10.0}
{"id": "38f5c3a1-d078-4425-b556-05b0f6a9a786", "name": "Dog Bed", "instruction": "Design a 3D model of a dog bed. Ensure it's round with raised sides.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Sides\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.15))\nsides = bpy.context.object\nsides.name = \"Sides\"\nsides.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.437814559571418, "unit_n": 2, "param_ratio": 7.5}
{"id": "f04da4f1-9b1a-4f90-ac57-2754fa4b1798", "name": "Scarf", "instruction": "Create a scarf. The scarf should be a long, rectangular piece of fabric that can be worn around the neck.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nscarf_color = bpy.data.materials.new(name=\"Scarf Color\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Scarf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf = bpy.context.object\nscarf.name = \"Scarf\"\nscarf.scale = (0.1, 2, 0.05)  # Long and thin rectangular shape\nscarf.data.materials.append(scarf_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "b0899285-f3ce-422b-a51d-ee615e7cb2c3", "name": "Coffee Grinder", "instruction": "Let's design a 3D model of a coffee grinder. The grinder should have a cylindrical body with a removable top for adding coffee beans. Include a crank handle on the side for manual grinding. Show the ground coffee collecting in a compartment at the bottom. Make sure the grinder has a small window to see the coffee beans inside.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nglass = bpy.data.materials.new(name=\"Glass\")\nglass.diffuse_color = (0.8, 0.9, 1, 0.3)  # Transparent glass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Removable Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 2.1))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(metal)\n\n# Step 4: Create the Crank Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1.1, 0, 2.1), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1.6, 0, 2.1))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"\nhandle_knob.data.materials.append(metal)\n\n# Step 5: Create the Ground Coffee Compartment\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.data.materials.append(metal)\n\n# Step 6: Create the Window\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.05, 1))\nwindow = bpy.context.object\nwindow.name = \"Window\"\nwindow.scale = (0.1, 0.5, 0.5)\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(window)\n\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.05, 1))\nwindow_glass = bpy.context.object\nwindow_glass.name = \"Window Glass\"\nwindow_glass.scale = (0.05, 0.45, 0.45)\nwindow_glass.data.materials.append(glass)", "color_brightness": "Bright", "verify": "human", "entropy": 1.9005465996377688, "unit_n": 8, "param_ratio": 5.75}
{"id": "7df4ce77-d1eb-4155-aeac-c062985455fe", "name": "Dog Bowl", "instruction": "Design a dog bowl. It should be round with a flat bottom. The bowl has a slight lip around the edge to prevent spills.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.05))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\n\n# Step 3: Create the Bowl Wall\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.35))\nbowl_wall = bpy.context.object\nbowl_wall.name = \"Bowl Wall\"\n\n# Step 4: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.5, location=(0, 0, 0.35))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 5: Boolean Difference to Create the Hollow Part\nbpy.context.view_layer.objects.active = bowl_wall\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = bowl_inner\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(bowl_inner)\n\n# Step 6: Create the Lip\nbpy.ops.mesh.primitive_torus_add(major_radius=1.55, minor_radius=0.05, location=(0, 0, 0.6))\nbowl_lip = bpy.context.object\nbowl_lip.name = \"Bowl Lip\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.569846516733234, "unit_n": 5, "param_ratio": 4.2}
{"id": "982c0773-0494-4a12-88c9-1c6eca816b4d", "name": "Wallet", "instruction": "Can you create a simple wallet?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.name = \"Wallet Body\"\nwallet_body.scale[0] = 1.5  # Length\nwallet_body.scale[1] = 0.1  # Thickness\nwallet_body.scale[2] = 1  # Height\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create the Wallet Flap\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.15, 0.5))\nwallet_flap = bpy.context.object\nwallet_flap.name = \"Wallet Flap\"\nwallet_flap.scale[0] = 1.5  # Length\nwallet_flap.scale[1] = 0.05  # Thickness\nwallet_flap.scale[2] = 0.5  # Height\nwallet_flap.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "50fb476c-8d7d-4f55-bda4-03c16cc3d184", "name": "Screwdriver", "instruction": "Let's create a screwdriver. The handle should be cylindrical and 4 inches long. The shaft should be 6 inches long, ending in a flat head. The handle has a simple grip design. ", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=4, location=(0, 0, 2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Add Simple Grip Design to Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.2, location=(0, 0, 3.8))\ngrip1 = bpy.context.object\ngrip1.name = \"Grip1\"\ngrip1.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.2, location=(0, 0, 3.3))\ngrip2 = bpy.context.object\ngrip2.name = \"Grip2\"\ngrip2.data.materials.append(handle_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.2, location=(0, 0, 2.8))\ngrip3 = bpy.context.object\ngrip3.name = \"Grip3\"\ngrip3.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=6, location=(0, 0, -1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 5: Create the Flat Head\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, -4))\nflat_head = bpy.context.object\nflat_head.scale[2] = 0.05  # Make it flat\nflat_head.name = \"FlatHead\"\nflat_head.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.565909644701362, "unit_n": 6, "param_ratio": 6.5}
{"id": "8ef678d6-c70c-45b3-8d45-afe75c585444", "name": "Apple", "instruction": "Design an apple. It should be round with a small stem on top.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Define the color for the apple\napple_material = bpy.data.materials.new(name=\"Apple Red\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the color for the stem\nstem_material = bpy.data.materials.new(name=\"Stem Brown\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "f855ae79-985f-40f7-8a71-8481f22ad0f4", "name": "Syringe Plunger", "instruction": "Model a plunger for a medical syringe, ensuring it fits within a standard 10cc barrel.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Plunger Rod\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=6, location=(0, 0, 3))\nplunger_rod = bpy.context.object\nplunger_rod.name = \"Plunger Rod\"\n\n# Step 3: Create the Plunger Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.3, location=(0, 0, 6.15))\nplunger_head = bpy.context.object\nplunger_head.name = \"Plunger Head\"\n\n# Step 4: Ensure Materials (not specified, assuming default material)\n# Optional step if materials are needed:\n# material = bpy.data.materials.new(name=\"Plunger Material\")\n# material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n# plunger_rod.data.materials.append(material)\n# plunger_head.data.materials.append(material)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 5.0}
{"id": "4a3ae47b-d016-47e9-a414-213e38fa1e52", "name": "Jump Rope", "instruction": "Generate a 3D model of a jump rope. The rope should be long and cylindrical with handles on each end.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrope_color = bpy.data.materials.new(name=\"Rope Color\")\nrope_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray color for the rope\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the handles\n\n# Step 2: Create the Rope\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=3, location=(0, 0, 0))\nrope = bpy.context.object\nrope.name = \"Rope\"\nrope.data.materials.append(rope_color)\n\n# Step 3: Create the Handles\nfor i in [-1.5, 1.5]:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, i))\n    handle = bpy.context.object\n    handle.name = f\"Handle {1 if i < 0 else 2}\"\n    handle.data.materials.append(handle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.311497125290998, "unit_n": 2, "param_ratio": 10.0}
{"id": "298da89c-7cc3-4795-b6ee-a2120d789ca0", "name": "Icon", "instruction": "Create an icon with a simple, geometric shape.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a Simple Geometric Shape (Cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"Icon Cube\"\n\n# Step 3: Assign a Material to the Cube\nmaterial = bpy.data.materials.new(name=\"Icon Material\")\nmaterial.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ncube.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "7b7895ab-df80-4d0a-a87c-9f8f58a98ef5", "name": "Cheese Wheel", "instruction": "Create a 3D model of a cheese wheel. The wheel should be 40 centimeters in diameter and 15 centimeters thick. ", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.1, 1)  # Cheese yellow color\n\n# Step 2: Create the Cheese Wheel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.15, location=(0, 0, 0))\ncheese_wheel = bpy.context.object\ncheese_wheel.name = \"Cheese Wheel\"\ncheese_wheel.data.materials.append(cheese_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "bb001b50-8d70-4cfa-a798-bda18eff0d4a", "name": "Laptop Cooling Pad", "instruction": "Could you model a laptop cooling pad?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.05  # Thickness\nbase.data.materials.append(black)\n\n# Step 3: Create the Fans\nfor i in range(2):\n    x = (i * 1.2) - 0.6\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(x, 0, 0.03))\n    fan = bpy.context.object\n    fan.name = f\"Fan {i + 1}\"\n    fan.data.materials.append(black)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.9848615847899733, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "709b2808-14ce-40c0-96fe-736df03c04cf", "name": "Pet Carrier", "instruction": "Create a pet carrier with a rectangular shape. It should have a mesh window on the front and a handle on top. Add a zippered door for easy access.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors and materials\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nmesh_color = bpy.data.materials.new(name=\"Mesh Color\")\nmesh_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the main body of the carrier\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ncarrier_body = bpy.context.object\ncarrier_body.scale[0] = 1.5\ncarrier_body.scale[1] = 1\ncarrier_body.scale[2] = 1\ncarrier_body.name = \"Carrier Body\"\ncarrier_body.data.materials.append(base_color)\n\n# Step 3: Create the mesh window on the front\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.01, 1))\nmesh_window = bpy.context.object\nmesh_window.scale[0] = 1.4\nmesh_window.scale[1] = 0.02\nmesh_window.scale[2] = 0.8\nmesh_window.name = \"Mesh Window\"\nmesh_window.data.materials.append(mesh_color)\n\n# Step 4: Create the handle on top\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 2.3), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.scale[0] = 0.3\nhandle.scale[1] = 0.5\nhandle.scale[2] = 0.1\nhandle.name = \"Handle\"\nhandle.data.materials.append(base_color)\n\n# Step 5: Create the zippered door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.01, 1))\nzippered_door = bpy.context.object\nzippered_door.scale[0] = 1.4\nzippered_door.scale[1] = 0.02\nzippered_door.scale[2] = 0.8\nzippered_door.name = \"Zippered Door\"\nzippered_door.data.materials.append(base_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.3420603554512525, "unit_n": 4, "param_ratio": 7.0}
{"id": "8279e49c-627b-4388-827b-d0d10cf665e1", "name": "Cat Bed", "instruction": "Create a cat bed that is circular with raised edges. It should have a soft, padded bottom for comfort. Add a small, detachable cushion inside the bed.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.35, 0.25, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.7, 0.6, 1)  # Light beige color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Bed Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.15))\nedges = bpy.context.object\nedges.name = \"Bed Edges\"\nedges.data.materials.append(bed_color)\n\n# Step 4: Create the Padded Bottom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(0, 0, 0.05))\npadded_bottom = bpy.context.object\npadded_bottom.name = \"Padded Bottom\"\npadded_bottom.data.materials.append(cushion_color)\n\n# Step 5: Create the Detachable Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.6645539315536375, "unit_n": 4, "param_ratio": 7.5}
{"id": "fcf04c80-228a-48dd-95c9-f9e9f754fef9", "name": "Picture Frame", "instruction": "Could you generate a 3D model of a picture frame? It should be rectangular and have a simple design.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\n\n# Step 2: Create the Frame\n# Outer frame dimensions\nouter_width = 2.0\nouter_height = 3.0\nouter_depth = 0.1\n\n# Inner frame dimensions (picture area)\ninner_width = 1.6\ninner_height = 2.6\n\n# Create the outer frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (outer_width / 2, outer_height / 2, outer_depth / 2)\nouter_frame.name = \"Outer Frame\"\nouter_frame.data.materials.append(frame_color)\n\n# Create the inner frame (cutout for the picture)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.scale = (inner_width / 2, inner_height / 2, outer_depth / 2 + 0.01)\ninner_frame.name = \"Inner Frame\"\n\n# Boolean modifier to cut out the inner frame from the outer frame\nmod_bool = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_frame\n\n# Apply the boolean modifier\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "02b2d459-ce4f-42aa-bc24-0daa5d854729", "name": "Rug", "instruction": "Design a rectangular rug with dimensions of 6 feet by 4 feet. It should have a simple striped pattern in two alternating colors.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Rug Base\nbpy.ops.mesh.primitive_plane_add(size=6, location=(0, 0, 0))\nrug_base = bpy.context.object\nrug_base.name = \"Rug Base\"\n\n# Step 3: Create the Stripes\nstripe_width = 0.5\nnum_stripes = int(6 / stripe_width)\n\nfor i in range(num_stripes):\n    x = -3 + i * stripe_width + stripe_width / 2\n    bpy.ops.mesh.primitive_plane_add(size=stripe_width, location=(x, 0, 0.01))\n    stripe = bpy.context.object\n    stripe.name = f\"Stripe {i + 1}\"\n    if i % 2 == 0:\n        stripe.data.materials.append(color1)\n    else:\n        stripe.data.materials.append(color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1112086530303715, "unit_n": 2, "param_ratio": 8.5}
{"id": "2d170f07-fd5e-409d-8b9c-fb8d9ed572a7", "name": "Syringe", "instruction": "Can you add a scale marking on the syringe to indicate volume?", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body_material = bpy.data.materials.new(name=\"Syringe Body Material\")\nsyringe_body_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nsyringe_body.data.materials.append(syringe_body_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=2.2, location=(0, 0, 1.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger_material = bpy.data.materials.new(name=\"Plunger Material\")\nplunger_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(0, 0, -0.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle_material = bpy.data.materials.new(name=\"Needle Material\")\nneedle_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nneedle.data.materials.append(needle_material)\n\n# Step 5: Add Scale Markings\nfor i in range(1, 11):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.12, 0, i * 0.2))\n    scale_mark = bpy.context.object\n    scale_mark.name = f\"Scale Mark {i}\"\n    scale_mark_material = bpy.data.materials.new(name=f\"Scale Mark Material {i}\")\n    scale_mark_material.diffuse_color = (0, 0, 0, 1)  # Black color\n    scale_mark.data.materials.append(scale_mark_material)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.414862029650437, "unit_n": 13, "param_ratio": 3.0}
{"id": "f1746bcf-03e6-4485-b52b-64416d5402e9", "name": "Screwdriver", "instruction": "Create a screwdriver. The screwdriver should have a long, cylindrical handle with a flat or Phillips head at the end. Include a grip on the handle for better control.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.3, 0.3, 1)  # Reddish color for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Grip\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.1 * math.cos(angle)\n    y = 0.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(x, y, 0.5))\n    grip = bpy.context.object\n    grip.name = f\"Grip {i + 1}\"\n    grip.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.2, location=(0, 0, 1.6))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 5: Create the Head (Phillips)\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(0, 0, 2.2))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.7535313592126975, "unit_n": 11, "param_ratio": 2.8181818181818183}
{"id": "095c0d8a-a00c-4684-b7dd-55ef6f2d2d5a", "name": "Dog Bed", "instruction": "Design a dog bed. The bed should be oval-shaped and have a padded base. The sides should be slightly raised to form a cozy enclosure.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # A warm brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(vertices=64, radius=1.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Sides of the Bed\nbpy.ops.mesh.primitive_cylinder_add(vertices=64, radius=1.7, depth=0.4, location=(0, 0, 0.2))\nsides = bpy.context.object\nsides.name = \"Sides\"\nsides.data.materials.append(bed_color)\n\n# Step 4: Add a Boolean Modifier to Subtract the Inside\nbpy.ops.mesh.primitive_cylinder_add(vertices=64, radius=1.5, depth=0.4, location=(0, 0, 0.2))\ninside = bpy.context.object\ninside.name = \"Inside\"\n\n# Apply Boolean Modifier\nbool_mod = sides.modifiers.new(type=\"BOOLEAN\", name=\"Boolean\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inside\nbpy.context.view_layer.objects.active = sides\nbpy.ops.object.modifier_apply(modifier=bool_mod.name)\n\n# Remove the inner cylinder\nbpy.data.objects.remove(inside, do_unlink=True)\n\n# Step 5: Smooth Shading for a Cozy Look\nbpy.ops.object.shade_smooth()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.776852495735483, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "4ac5df11-0886-4f39-94fb-c270c36ec2be", "name": "Pizza", "instruction": "I'd like a 3D model of a pizza. The pizza is round and cut into eight slices. The surface is topped with tomato sauce, cheese, and pepperoni slices. The crust is slightly raised around the edges.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [\n    (0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3),\n    (0.6, 0), (-0.6, 0), (0, 0.6), (0, -0.6)\n]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Cut the Pizza into Slices\nbpy.ops.object.select_all(action='DESELECT')\npizza_base.select_set(True)\nbpy.context.view_layer.objects.active = pizza_base\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.primitive_cone_add(vertices=8, radius1=1, radius2=0, depth=0.2, location=(0, 0, 0.1), rotation=(0, 0, math.pi/8))\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.context.object.select_set(True)\nbpy.ops.object.join()\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.intersect_boolean(operation='DIFFERENCE')\nbpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.550736523483945, "unit_n": 5, "param_ratio": 10.0}
{"id": "7c87cc55-c914-42cf-a7e3-c9b14e5966c1", "name": "Company Logo", "instruction": "Create a 3D model of a company logo that features a stylized letter \"A\" with an arrow through it. The logo should be simple and clean.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Letter \"A\"\nbpy.ops.object.text_add(location=(0, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"A\"\ntext_obj.data.extrude = 0.1\ntext_obj.data.size = 2\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.rotation_euler = (math.pi / 2, 0, 0)\n\n# Convert text to mesh\nbpy.ops.object.convert(target='MESH')\n\n# Step 3: Create the Arrow\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(0, 0, 1))\narrow_shaft = bpy.context.object\narrow_shaft.rotation_euler = (0, math.pi / 2, 0)\n\n# Create arrowhead\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(1.5, 0, 1))\narrow_head = bpy.context.object\narrow_head.rotation_euler = (0, math.pi / 2, 0)\n\n# Join arrowhead and shaft\nbpy.ops.object.select_all(action='DESELECT')\narrow_shaft.select_set(True)\narrow_head.select_set(True)\nbpy.context.view_layer.objects.active = arrow_shaft\nbpy.ops.object.join()\n\n# Step 4: Position the Arrow through the \"A\"\nbpy.ops.object.select_all(action='DESELECT')\ntext_obj.select_set(True)\narrow_shaft.select_set(True)\nbpy.context.view_layer.objects.active = text_obj\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)\n\n# Adjust position of the arrow\narrow_shaft.location = (0, 0, 0.5)\narrow_shaft.rotation_euler = (0, 0, math.radians(45))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5158921381335775, "unit_n": 3, "param_ratio": 4.333333333333333}
{"id": "70b602fb-309a-4ae9-951f-37a8011cbb16", "name": "Clarinet", "instruction": "Design a clarinet. It should have a long, straight body with a flared bell at the end. Include a series of keys and holes along the body.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Clarinet Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Bell\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.3, location=(0, 0, 2.15))\nbell = bpy.context.object\nbell.name = \"Clarinet Bell\"\nbell.data.materials.append(black)\n\n# Step 4: Create the Keys and Holes\nfor i in range(6):\n    z = 0.3 * (i + 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.02, location=(0, 0.05, z))\n    key = bpy.context.object\n    key.name = f\"Key {i + 1}\"\n    key.data.materials.append(silver)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.02, location=(0, -0.05, z))\n    hole = bpy.context.object\n    hole.name = f\"Hole {i + 1}\"\n    hole.data.materials.append(silver)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.8577725361639157, "unit_n": 14, "param_ratio": 2.2142857142857144}
{"id": "c8bfafac-b274-4a9b-b4d8-a4adcc10bf25", "name": "USB Flash Drive", "instruction": "Model a USB flash drive with a removable cap. The drive should have a rectangular shape with a USB connector at one end.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nconnector_color = bpy.data.materials.new(name=\"ConnectorColor\")\nconnector_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Body of the USB Drive\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"USB Body\"\nbody.scale = (0.3, 1, 0.1)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.55, 0))\nconnector = bpy.context.object\nconnector.name = \"USB Connector\"\nconnector.scale = (0.15, 0.2, 0.1)\nconnector.data.materials.append(connector_color)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.8, 0))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.scale = (0.3, 0.4, 0.1)\ncap.data.materials.append(body_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "8e964357-b242-4553-817e-d76f8abf6a9b", "name": "Blender", "instruction": "Create a 3D model of a blender. Compare the design to a standard kitchen blender. It should have a clear pitcher, a base with buttons, and a detachable lid.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_glass = bpy.data.materials.new(name=\"Clear Glass\")\nclear_glass.diffuse_color = (0.8, 0.8, 0.8, 0.2)  # Transparent glass color\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark base color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red button color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(clear_glass)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.5 + i * 0.5, 0.9, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.734963444530251, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "9301d572-186e-4225-b9b5-9677c637b4a5", "name": "Notebook", "instruction": "Please create a 3D model of a notebook. The notebook should have a spiral binding on the side, with lined pages inside. The cover should be plain and feature a small label area in the top right corner.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"CoverColor\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\nlabel_color = bpy.data.materials.new(name=\"LabelColor\")\nlabel_color.diffuse_color = (1, 1, 1, 1)  # White color for the label\npage_color = bpy.data.materials.new(name=\"PageColor\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nspiral_color = bpy.data.materials.new(name=\"SpiralColor\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the spiral binding\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.scale[0] = 1.5\ncover.scale[1] = 0.02\ncover.scale[2] = 2\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Label\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(1.1, 0.03, 1.7))\nlabel = bpy.context.object\nlabel.scale[0] = 0.3\nlabel.scale[1] = 0.01\nlabel.scale[2] = 0.2\nlabel.name = \"Label\"\nlabel.data.materials.append(label_color)\n\n# Step 4: Create the Pages\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=1.98, location=(0, -0.02 * (i + 1), 0))\n    page = bpy.context.object\n    page.scale[0] = 1.48\n    page.scale[1] = 0.01\n    page.scale[2] = 1.98\n    page.name = f\"Page {i + 1}\"\n    page.data.materials.append(page_color)\n\n# Step 5: Create the Spiral Binding\nfor i in range(20):\n    bpy.ops.mesh.primitive_torus_add(location=(-1.55, 0, 1.9 - i * 0.2), major_radius=0.05, minor_radius=0.02)\n    spiral = bpy.context.object\n    spiral.rotation_euler[1] = 1.5708  # Rotate 90 degrees on Y-axis\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9285073622825806, "unit_n": 32, "param_ratio": 1.15625}
{"id": "733b988f-a1af-45e7-bf6e-4252571821e2", "name": "Bird Cage", "instruction": "Let's create a 3D model of a bird cage. The cage should be cylindrical with vertical bars and a domed top. Include a door on the side and a perch inside for the bird to sit on.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cage\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Cage Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Vertical Bars\nnum_bars = 16\nfor i in range(num_bars):\n    angle = (2 * math.pi / num_bars) * i\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, y, 1))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n    bar.data.materials.append(metal_color)\n\n# Step 4: Create the Dome Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 2))\ndome = bpy.context.object\ndome.name = \"Dome\"\ndome.scale = (1, 1, 0.5)\nbpy.ops.object.shade_smooth()\ndome.data.materials.append(metal_color)\n\n# Step 5: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.data.materials.append(metal_color)\n\n# Step 6: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0.5), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.781343781836086, "unit_n": 5, "param_ratio": 6.2}
{"id": "e45a6dc0-aa82-499b-87d9-aa5ab524315a", "name": "Solar Panel", "instruction": "Create a solar panel. It should have a rectangular frame with multiple photovoltaic cells arranged in rows and columns. The panel should include a mounting bracket on the back for installation purposes. Add connection terminals at the bottom for electrical wiring.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncell_color = bpy.data.materials.new(name=\"Cell Color\")\ncell_color.diffuse_color = (0.0, 0.0, 0.5, 1)  # Dark blue color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale = (1.1, 0.6, 0.05)\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Photovoltaic Cells\nrows = 4\ncols = 6\ncell_width = 1.8 / cols\ncell_height = 1.0 / rows\n\nfor i in range(rows):\n    for j in range(cols):\n        x = -0.9 + j * cell_width + cell_width / 2\n        y = -0.5 + i * cell_height + cell_height / 2\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.051))\n        cell = bpy.context.object\n        cell.name = f\"Cell_{i}_{j}\"\n        cell.scale = (cell_width / 2, cell_height / 2, 1)\n        cell.data.materials.append(cell_color)\n\n# Step 4: Create the Mounting Bracket\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, -0.15))\nbracket = bpy.context.object\nbracket.name = \"Bracket\"\nbracket.scale = (0.5, 0.1, 0.1)\nbracket.data.materials.append(frame_color)\n\n# Step 5: Create the Connection Terminals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(-0.2, -0.65, -0.05))\nterminal1 = bpy.context.object\nterminal1.name = \"Terminal1\"\nterminal1.data.materials.append(frame_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0.2, -0.65, -0.05))\nterminal2 = bpy.context.object\nterminal2.name = \"Terminal2\"\nterminal2.data.materials.append(frame_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.6750781585497814, "unit_n": 5, "param_ratio": 6.4}
{"id": "c036c666-3357-4b22-a1d0-02f11ea23272", "name": "Chess Pieces", "instruction": "Imagine a set of chess pieces. How would you design them to be both functional and aesthetically pleasing?", "category": "Games, toys, tents and sports goods", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Function to create a pawn\ndef create_pawn(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.2))\n    pawn_head = bpy.context.object\n    pawn_head.name = \"Pawn Head\"\n    pawn_head.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.4, location=(location[0], location[1], location[2] - 0.2))\n    pawn_body = bpy.context.object\n    pawn_body.name = \"Pawn Body\"\n    pawn_body.data.materials.append(material)\n\n# Function to create a rook\ndef create_rook(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(location[0], location[1], location[2] + 0.3))\n    rook_body = bpy.context.object\n    rook_body.name = \"Rook Body\"\n    rook_body.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(location[0], location[1], location[2] + 0.6))\n    rook_top = bpy.context.object\n    rook_top.name = \"Rook Top\"\n    rook_top.data.materials.append(material)\n\n# Function to create a knight\ndef create_knight(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(location[0], location[1], location[2] + 0.3))\n    knight_body = bpy.context.object\n    knight_body.name = \"Knight Body\"\n    knight_body.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.6))\n    knight_head = bpy.context.object\n    knight_head.name = \"Knight Head\"\n    knight_head.data.materials.append(material)\n\n# Function to create a bishop\ndef create_bishop(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(location[0], location[1], location[2] + 0.3))\n    bishop_body = bpy.context.object\n    bishop_body.name = \"Bishop Body\"\n    bishop_body.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.6))\n    bishop_head = bpy.context.object\n    bishop_head.name = \"Bishop Head\"\n    bishop_head.data.materials.append(material)\n\n# Function to create a queen\ndef create_queen(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.8, location=(location[0], location[1], location[2] + 0.4))\n    queen_body = bpy.context.object\n    queen_body.name = \"Queen Body\"\n    queen_body.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(location[0], location[1], location[2] + 0.8))\n    queen_head = bpy.context.object\n    queen_head.name = \"Queen Head\"\n    queen_head.data.materials.append(material)\n\n# Function to create a king\ndef create_king(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.9, location=(location[0], location[1], location[2] + 0.45))\n    king_body = bpy.context.object\n    king_body.name = \"King Body\"\n    king_body.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(location[0], location[1], location[2] + 0.9))\n    king_head = bpy.context.object\n    king_head.name = \"King Head\"\n    king_head.data.materials.append(material)\n\n# Create a set of black pieces\ncreate_pawn((0, 0, 0), black_material)\ncreate_rook((1, 0, 0), black_material)\ncreate_knight((2, 0, 0), black_material)\ncreate_bishop((3, 0, 0), black_material)\ncreate_queen((4, 0, 0), black_material)\ncreate_king((5, 0, 0), black_material)\n\n# Create a set of white pieces\ncreate_pawn((0, 1, 0), white_material)\ncreate_rook((1, 1, 0), white_material)\ncreate_knight((2, 1, 0), white_material)\ncreate_bishop((3, 1, 0), white_material)\ncreate_queen((4, 1, 0), white_material)\ncreate_king((5, 1, 0), white_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.155883087491397, "unit_n": 12, "param_ratio": 5.333333333333333}
{"id": "2440c353-e72a-4c2d-85af-41620e72d65c", "name": "Geometric Wall Art", "instruction": "Create a 3D geometric wall art piece. It should feature interlocking shapes such as triangles, squares, and circles, arranged in an abstract pattern. Use a combination of contrasting colors to make the design visually appealing.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0, 1, 1),  # Magenta\n    (0, 1, 1, 1)   # Cyan\n]\n\n# Function to create a material\ndef create_material(color):\n    mat = bpy.data.materials.new(name=\"Material\")\n    mat.diffuse_color = color\n    return mat\n\n# Step 2: Create Shapes\nshapes = []\n\n# Create Triangles\nfor i in range(3):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(create_material(random.choice(colors)))\n    shapes.append(triangle)\n\n# Create Squares\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.7, location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(create_material(random.choice(colors)))\n    shapes.append(square)\n\n# Create Circles\nfor i in range(3):\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, fill_type='NGON', location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(create_material(random.choice(colors)))\n    shapes.append(circle)\n\n# Step 3: Arrange Shapes in an Abstract Pattern\nfor shape in shapes:\n    shape.location.x += random.uniform(-0.5, 0.5)\n    shape.location.y += random.uniform(-0.5, 0.5)\n    shape.rotation_euler.z = random.uniform(0, 3.14)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8573936254741565, "unit_n": 9, "param_ratio": 1.7777777777777777}
{"id": "ef119f08-a51b-432d-b0fa-23bb065fca65", "name": "Spice Jar", "instruction": "Generate a spice jar. It should be cylindrical, with a height of 4 inches and a diameter of 2 inches.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Spice Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=4, location=(0, 0, 2))\njar = bpy.context.object\njar.name = \"Spice Jar\"\n\n# Step 3: Assign a Material (optional, here we use a simple gray color)\nmaterial = bpy.data.materials.new(name=\"Jar Material\")\nmaterial.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\njar.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "4fd801fc-eae0-4a27-bd40-3c9153db93b0", "name": "Smartphone", "instruction": "How about creating a 3D model of a smartphone with a sleek design?", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.3, 0.6, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Smartphone Screen\"\nscreen.scale = (0.28, 0.58, 1)\nscreen.data.materials.append(gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "e8057e65-000f-4ead-85c6-2eecfd6ee0d8", "name": "LED Bulb", "instruction": "Create a model of an LED bulb. What are its main features?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Bulb (Top part)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(white)\n\n# Step 3: Create the Base (Bottom part)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(gray)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.390756146937895, "unit_n": 2, "param_ratio": 9.5}
{"id": "4f562acc-8cc7-400d-a21d-fd957b29102e", "name": "Travel Pillow", "instruction": "Create a travel pillow that supports the neck. It should be U-shaped and easy to carry. The pillow should be designed for comfort during long journeys.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the pillow\npillow_color = bpy.data.materials.new(name=\"Pillow Color\")\npillow_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the U-shaped Pillow\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\npillow = bpy.context.object\npillow.name = \"Travel Pillow\"\npillow.data.materials.append(pillow_color)\n\n# Modify the torus to make it U-shaped\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\nfor vert in pillow.data.vertices:\n    if vert.co.x > 0.5:\n        vert.select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.delete(type='VERT')\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.314198380970565, "unit_n": 1, "param_ratio": 10.0}
{"id": "a9e25a82-37e9-4ce1-b330-7b6f0a2a3200", "name": "Router", "instruction": "Generate a 3D model of a router. It should have a compact design with antennas for better signal coverage.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1, 0.5, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 1.2))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.9518473296686834, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "1d66c239-3c6e-46f4-bc20-4c467dd864cb", "name": "Umbrella", "instruction": "Create a 3D model of an umbrella. Ensure it is closed and has a pointed tip at the top.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\numbrella_color = bpy.data.materials.new(name=\"Umbrella Color\")\numbrella_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Umbrella Canopy (Closed)\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.1, radius2=0, depth=1.5, location=(0, 0, 0.75))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(umbrella_color)\n\n# Step 3: Create the Umbrella Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(0, 0, -0.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(umbrella_color)\n\n# Step 4: Create the Umbrella Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.05, radius2=0, depth=0.1, location=(0, 0, 1.55))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(umbrella_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.644496677173449, "unit_n": 3, "param_ratio": 8.0}
{"id": "0ebb8f58-b95a-48ed-be7e-a0241c764ddc", "name": "Tambourine", "instruction": "Can you create a tambourine? Compare it to a small drum but with metal jingles around the perimeter.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Light brown wood color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metal color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(wood_color)\n\n# Step 3: Create the Drum Skin\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.125))\ndrum_skin = bpy.context.object\ndrum_skin.name = \"Drum Skin\"\ndrum_skin.data.materials.append(metal_color)\n\n# Step 4: Create the Jingles\nnum_jingles = 8\nangle_step = 2 * math.pi / num_jingles\nfor i in range(num_jingles):\n    angle = i * angle_step\n    x = 0.9 * math.cos(angle)\n    y = 0.9 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0))\n    jingle = bpy.context.object\n    jingle.name = f\"Jingle {i + 1}\"\n    jingle.data.materials.append(metal_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.449030164242231, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "960006db-a0fc-4ec9-9268-a124e0453f61", "name": "Hexagon Tile Pattern", "instruction": "Design a surface pattern consisting of hexagon tiles, each side measuring 3 inches. Alternate the colors between dark gray and light gray.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Hexagon parameters\nside_length = 0.0762  # 3 inches in meters\nradius = side_length / math.sin(math.pi / 3)\n\n# Create a single hexagon\ndef create_hexagon(location, material):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=radius, location=location, fill_type='NGON')\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(material)\n\n# Create a grid of hexagons\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = col * 1.5 * side_length\n        y_offset = row * math.sqrt(3) * side_length + (col % 2) * (math.sqrt(3) / 2 * side_length)\n        location = (x_offset, y_offset, 0)\n        material = dark_gray if (row + col) % 2 == 0 else light_gray\n        create_hexagon(location, material)\n        ", "color_brightness": "Dark", "verify": "human", "entropy": 4.4304763024714635, "unit_n": 1, "param_ratio": 12.0}
{"id": "b975eabb-8814-4368-b071-2aaa8ee6a4f6", "name": "Decorative Wall Panel", "instruction": "Create a decorative wall panel. The panel should have an intricate design with geometric patterns. It should be suitable for mounting on a wall as a piece of art. The design should be visually appealing and add an element of sophistication to any room. Consider incorporating a mix of shapes and lines to create a balanced and harmonious composition. The panel should be lightweight and easy to install, with mounting hardware included. Additionally, the design should be versatile enough to complement various interior styles, from modern to traditional.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the panel\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Main Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Main Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 3: Add Geometric Patterns\n# Circle\nbpy.ops.mesh.primitive_circle_add(radius=0.3, location=(0, 0.5, 0.01))\ncircle = bpy.context.object\ncircle.name = \"Circle\"\ncircle.data.materials.append(panel_color)\n\n# Square\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0.5, -0.5, 0.01))\nsquare = bpy.context.object\nsquare.name = \"Square\"\nsquare.data.materials.append(panel_color)\n\n# Triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.3, depth=0.01, location=(-0.5, -0.5, 0.01))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(panel_color)\n\n# Step 4: Add Lines\n# Horizontal Line\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, 0.01))\nh_line = bpy.context.object\nh_line.scale = (1, 0.02, 1)\nh_line.name = \"Horizontal Line\"\nh_line.data.materials.append(panel_color)\n\n# Vertical Line\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, 0.01))\nv_line = bpy.context.object\nv_line.scale = (0.02, 1, 1)\nv_line.name = \"Vertical Line\"\nv_line.data.materials.append(panel_color)\n\n# Diagonal Line\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0, 0.01))\nd_line = bpy.context.object\nd_line.scale = (1.414, 0.02, 1)\nd_line.rotation_euler = (0, 0, 0.785398)  # 45 degrees in radians\nd_line.name = \"Diagonal Line\"\nd_line.data.materials.append(panel_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.347080299469079, "unit_n": 7, "param_ratio": 5.0}
{"id": "b54cec9b-e57e-40c3-9188-029be001d583", "name": "Cat Scratcher", "instruction": "Design a 3D model of a cat scratcher that includes a vertical post and a base.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Vertical Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 0.5))\npost = bpy.context.object\npost.name = \"Post\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.763180447528589, "unit_n": 2, "param_ratio": 4.5}
{"id": "3611bdd4-1e42-49ef-9477-ded115cc790d", "name": "Dog Bed", "instruction": "Create a 3D model of a dog bed. It should be oval-shaped with raised edges and a flat, cushioned center. The bed should be large enough to accommodate a medium-sized dog.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Flat Cushioned Center\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\ncenter_cushion = bpy.context.object\ncenter_cushion.name = \"Center Cushion\"\ncenter_cushion.scale[0] = 1.5  # Make it oval\ncenter_cushion.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_cylinder_add(radius=1.6, depth=0.4, location=(0, 0, 0.25))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.scale[0] = 1.5  # Make it oval\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Hollow out the Raised Edges\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.4, location=(0, 0, 0.25))\ninner_cylinder = bpy.context.object\ninner_cylinder.scale[0] = 1.5  # Make it oval\n\n# Boolean modifier to hollow out the edges\nbool_mod = raised_edges.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_cylinder\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = raised_edges\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(inner_cylinder, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.441179908450605, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "b37f134e-33e5-477c-81b2-f40a7cdf7c02", "name": "Coffee Table", "instruction": "Design a coffee table with a circular top.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Table Legs\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(x, y, 0))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3753997040165657, "unit_n": 5, "param_ratio": 3.0}
{"id": "64f2ab06-ed38-4eda-87b1-f4daa2c4e1ec", "name": "Sofa", "instruction": "Can you create a sofa? It should have a rectangular seat, a backrest, and two armrests.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_material = bpy.data.materials.new(name=\"SofaMaterial\")\nsofa_material.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium bright color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale = (2, 1, 0.2)\nseat.data.materials.append(sofa_material)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (2, 0.2, 1)\nbackrest.data.materials.append(sofa_material)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.2, 1, 0.7)\n    armrest.data.materials.append(sofa_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.059489109242115, "unit_n": 4, "param_ratio": 4.25}
{"id": "398e8319-bf7d-443b-87f3-f461a06d16eb", "name": "Hat", "instruction": "Craft a hat. It should have a wide brim and a rounded crown. The hat should be suitable for outdoor wear.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.933726087323573, "unit_n": 2, "param_ratio": 7.0}
{"id": "a3c1e2dd-fa5d-410c-bcbc-a0549184fb72", "name": "Smartphone", "instruction": "Make a 3D model of a smartphone. Keep it minimalistic and modern.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (0.3, 0.6, 0.02)\nbody.name = \"Smartphone Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.scale = (0.28, 0.58, 1)\nscreen.name = \"Smartphone Screen\"\nscreen.data.materials.append(gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "a44757dc-c51b-47b3-b7d4-0348856e3e29", "name": "Dining Table", "instruction": "Design a 3D model of a dining table. The table should be rectangular with four legs. It should have a smooth surface and enough space to comfortably seat six people.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the table\ntable_color = bpy.data.materials.new(name=\"TableColor\")\ntable_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(table_color)\n\n# Step 3: Create the Legs\nleg_positions = [(1.8, 0.9, 0.5), (-1.8, 0.9, 0.5), (1.8, -0.9, 0.5), (-1.8, -0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.scale[2] = 5  # Height of the leg\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(table_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 2, "param_ratio": 5.0}
{"id": "1a4da3e9-f6b3-490d-99ab-0e235c577451", "name": "Candle Holder", "instruction": "I would like to see a 3D model of a candle holder. The holder should be designed to hold a single candle and have a circular base with a diameter of 4 inches. The height should be around 3 inches. The design should evoke a sense of calm and simplicity.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncandle_holder_material = bpy.data.materials.new(name=\"CandleHolderMaterial\")\ncandle_holder_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(candle_holder_material)\n\n# Step 3: Create the Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2.8, location=(0, 0, 1.5))\nholder = bpy.context.object\nholder.name = \"Holder\"\nholder.data.materials.append(candle_holder_material)", "color_brightness": "Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "0eacd4ca-0dbf-405d-b92b-61d509978b30", "name": "Test Tube", "instruction": "How does a test tube differ from a beaker in terms of shape and structure? Create a 3D model of a test tube.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Test Tube\n# The test tube will be a simple cylinder with a rounded bottom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2.0, location=(0, 0, 1))\ntest_tube = bpy.context.object\ntest_tube.name = \"Test Tube\"\n\n# Step 3: Create the Rounded Bottom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\nbottom_sphere = bpy.context.object\nbottom_sphere.name = \"Bottom Sphere\"\n\n# Step 4: Join the Cylinder and Sphere\nbpy.ops.object.select_all(action='DESELECT')\ntest_tube.select_set(True)\nbottom_sphere.select_set(True)\nbpy.context.view_layer.objects.active = test_tube\nbpy.ops.object.join()\n\n# Step 5: Smooth the Object\nbpy.ops.object.shade_smooth()", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.487793837414274, "unit_n": 2, "param_ratio": 4.5}
{"id": "c0c2bdf7-82f4-43f6-825b-8d6a0d306dff", "name": "Drum", "instruction": "Generate a 3D model of a drum with a cylindrical body and taut drumhead.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body\")\ndrum_body_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.05))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "9db118e7-0661-47f4-8688-5e8e5ac2171b", "name": "Pet Feeder", "instruction": "How would a pet feeder designed for easy cleaning look?", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(light_gray)\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.4, location=(0, 0, 0.25))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(light_gray)\n\n# Step 4: Create the Inner Part of the Bowl (to make it hollow)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.35, location=(0, 0, 0.45))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\ninner_bowl.data.materials.append(light_gray)\n\n# Boolean modifier to make the bowl hollow\nmod_bool = bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(inner_bowl)\n\n# Step 5: Create the Water Dispenser (a simple cylinder representing a bottle)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1.2, location=(0, -1.2, 0.6))\nwater_dispenser = bpy.context.object\nwater_dispenser.name = \"Water Dispenser\"\nwater_dispenser.data.materials.append(light_gray)\n\n# Step 6: Create the Water Tray\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, -1.2, 0.05))\nwater_tray = bpy.context.object\nwater_tray.name = \"Water Tray\"\nwater_tray.data.materials.append(light_gray)\n\n# Step 7: Create the Inner Part of the Water Tray (to make it hollow)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.05, location=(0, -1.2, 0.1))\ninner_tray = bpy.context.object\ninner_tray.name = \"Inner Tray\"\ninner_tray.data.materials.append(light_gray)\n\n# Boolean modifier to make the tray hollow\nmod_bool = water_tray.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_tray\nbpy.context.view_layer.objects.active = water_tray\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(inner_tray)", "color_brightness": "Bright", "verify": "human", "entropy": 4.568922055631616, "unit_n": 6, "param_ratio": 5.833333333333333}
{"id": "94ce298e-b52b-4e66-8dcf-d5edb13f8069", "name": "Chess Board", "instruction": "Could you generate a 3D chess board? Make sure the squares are alternating colors.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nsquare_size = 1\nboard_size = 8\n\nfor i in range(board_size):\n    for j in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Adjust the Board Position\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "c100a11c-4417-4318-afc9-4ed00047a1d5", "name": "Geometric Tile", "instruction": "Design a tile with a hexagonal shape.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Hexagonal Tile\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=1, depth=0.1, location=(0, 0, 0))\nhex_tile = bpy.context.object\nhex_tile.name = \"Hexagonal Tile\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.484906649788001, "unit_n": 1, "param_ratio": 6.0}
{"id": "c4c5bfab-b4cf-4e4d-a39e-e672d0438df9", "name": "Blender", "instruction": "Create a 3D model of a blender. Start with the base, which should have a control panel with buttons for various speed settings. Attach a transparent container on top of the base. The container should have measurement markings on the side and a lid with a removable cap for adding ingredients while blending. Inside the container, place a set of blades at the bottom.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\n\nblade_color = bpy.data.materials.new(name=\"Blade Color\")\nblade_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel with Buttons\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0.8, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(base_color)\n\n# Create Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 0.8, 0.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Blades\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.1, location=(0, 0, 0.5))\nblade_base = bpy.context.object\nblade_base.name = \"Blade Base\"\nblade_base.data.materials.append(blade_color)\n\nfor i in range(4):\n    bpy.ops.mesh.primitive_plane_add(size=0.4, location=(0, 0, 0.55))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.rotation_euler = (0, 0, i * (3.14159 / 2))\n    blade.data.materials.append(blade_color)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 7: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 2.65))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.5783548971039565, "unit_n": 13, "param_ratio": 4.846153846153846}
{"id": "6764a3ee-c9cf-48e6-bc03-b4587ec95cc7", "name": "Cozy Sofa", "instruction": "Imagine a cozy sofa that invites you to relax. It should have a wide, comfortable seat and a supportive backrest. The armrests should be at a height that allows you to rest your arms comfortably. How does this sofa make you feel?", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Cozy brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale = (1.5, 1, 0.2)\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1.5, 0.2, 0.6)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.2, 1, 0.4)\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "3db46213-e8d8-403c-a464-42e778e5cfdc", "name": "Candle Holder", "instruction": "Make a candle holder that can hold three candles.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray metal color\nwax = bpy.data.materials.new(name=\"Wax\")\nwax.diffuse_color = (1, 1, 0.8, 1)  # Light yellow wax color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Candle Holders\nfor i in range(3):\n    angle = i * 2 * math.pi / 3\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, y, 0.25))\n    holder = bpy.context.object\n    holder.name = f\"Holder {i + 1}\"\n    holder.data.materials.append(metal)\n\n# Step 4: Create the Candles\nfor i in range(3):\n    angle = i * 2 * math.pi / 3\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.4, location=(x, y, 0.55))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(wax)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.084686469817771, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "13e2fd58-768a-4f16-96fe-0e3a5e3135e1", "name": "Puzzle Cube", "instruction": "Create a 3D model of a puzzle cube with six faces, each divided into smaller squares. Ensure it looks like it can be twisted and turned.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Puzzle Cube\n# Define the size of the small cubes\ncube_size = 0.3\ngap = 0.02\noffset = cube_size + gap\n\n# Create the 3x3x3 grid of small cubes\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=cube_size, location=(x * offset, y * offset, z * offset))\n\n# Center the entire puzzle cube\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\nbpy.ops.transform.translate(value=(-offset, -offset, -offset))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.1111111111111111}
{"id": "6188a50b-7ad5-4f90-a4ca-d1279898b907", "name": "Table Lamp", "instruction": "Can we create a table lamp? It should have a circular base, a slender stem, and a conical lampshade. The lamp should be suitable for a bedside table.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nstem_color = bpy.data.materials.new(name=\"Stem Color\")\nstem_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nshade_color = bpy.data.materials.new(name=\"Shade Color\")\nshade_color.diffuse_color = (0.9, 0.9, 0.7, 1)  # Light yellow color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_color)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.1, depth=0.6, location=(0, 0, 1.2))\nshade = bpy.context.object\nshade.name = \"Lampshade\"\nshade.data.materials.append(shade_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9904528072833783, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "7a2f1e78-c06f-412f-ade1-0989e94b9281", "name": "Sandwich", "instruction": "Create a sandwich.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\n\n# Step 2: Create the Bottom Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.2  # Flatten the cube to make it look like a slice of bread\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it look like a layer of lettuce\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.1  # Flatten the cube to make it look like a layer of tomato\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Top Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.2  # Flatten the cube to make it look like a slice of bread\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.945875517379767, "unit_n": 4, "param_ratio": 7.75}
{"id": "ad208dec-7c33-4a8a-becd-f24df0ae5854", "name": "Sun Hat", "instruction": "Create a 3D model of a sun hat. The hat should have a wide brim to provide shade from the sun. Include a simple band around the base of the crown for added detail. Ensure the hat is practical for outdoor use.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, -0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 4: Create the Band around the Crown\nbpy.ops.mesh.primitive_torus_add(major_radius=1.05, minor_radius=0.05, location=(0, 0, 0.45))\nband = bpy.context.object\nband.name = \"Band\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1148611589096245, "unit_n": 3, "param_ratio": 5.0}
{"id": "135b964b-9924-4768-8ef1-3f7ae3348ca0", "name": "Hat Comparison", "instruction": "Create 3D models of two different hats. One should be a baseball cap, and the other should be a fedora. Place them side by side for comparison.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Baseball Cap\n# Cap Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.1, location=(-1, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Baseball Cap Brim\"\n\n# Cap Dome\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0.3))\ndome = bpy.context.object\ndome.name = \"Baseball Cap Dome\"\n\n# Step 3: Create the Fedora\n# Fedora Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(1, 0, 0))\nfedora_brim = bpy.context.object\nfedora_brim.name = \"Fedora Brim\"\n\n# Fedora Dome\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0.3, depth=0.6, location=(1, 0, 0.3))\nfedora_dome = bpy.context.object\nfedora_dome.name = \"Fedora Dome\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.09918060865941, "unit_n": 4, "param_ratio": 5.0}
{"id": "0c09dc29-9afa-4b1f-81ac-ad778d9d2cb3", "name": "Chocolate Chip Cookies", "instruction": "What about crafting a 3D model of a chocolate chip cookie? It should look freshly baked with visible chocolate chips. How would you make it appear as if it's just come out of the oven?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie\")\ncookie_color.diffuse_color = (0.72, 0.53, 0.04, 1)  # Cookie color\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\n\n# Step 2: Create the Cookie Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\ncookie = bpy.context.object\ncookie.name = \"Cookie\"\ncookie.scale[2] = 0.2  # Flatten the sphere to make it look like a cookie\ncookie.data.materials.append(cookie_color)\n\n# Step 3: Create the Chocolate Chips\nnum_chips = 20\nfor _ in range(num_chips):\n    x = random.uniform(-0.8, 0.8)\n    y = random.uniform(-0.8, 0.8)\n    z = random.uniform(0.1, 0.2)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, z))\n    chip = bpy.context.object\n    chip.name = \"Chocolate Chip\"\n    chip.data.materials.append(chocolate_chip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.261810961866086, "unit_n": 2, "param_ratio": 9.0}
{"id": "22cb84c7-c288-4244-bb40-dd92e1f551c8", "name": "Kitchen Shelf", "instruction": "Create two versions of a kitchen shelf. One should be a single-tiered shelf, and the other should be a multi-tiered shelf. Compare their functionality and space utilization.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Function to create a single-tiered shelf\ndef create_single_tiered_shelf(location=(0, 0, 0)):\n    # Create the base\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1], location[2] + 0.5))\n    base = bpy.context.object\n    base.name = \"Single Tier Base\"\n    \n    # Create the back\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1] - 0.5, location[2] + 1.5), scale=(1, 0.1, 1))\n    back = bpy.context.object\n    back.name = \"Single Tier Back\"\n    \n    # Create the sides\n    for i in [-0.9, 0.9]:\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0] + i, location[1], location[2] + 1.5), scale=(0.1, 1, 1))\n        side = bpy.context.object\n        side.name = f\"Single Tier Side {i}\"\n\n# Function to create a multi-tiered shelf\ndef create_multi_tiered_shelf(location=(0, 0, 0)):\n    # Create the base\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1], location[2] + 0.5))\n    base = bpy.context.object\n    base.name = \"Multi Tier Base\"\n    \n    # Create the back\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1] - 0.5, location[2] + 2.5), scale=(1, 0.1, 3))\n    back = bpy.context.object\n    back.name = \"Multi Tier Back\"\n    \n    # Create the sides\n    for i in [-0.9, 0.9]:\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0] + i, location[1], location[2] + 2.5), scale=(0.1, 1, 3))\n        side = bpy.context.object\n        side.name = f\"Multi Tier Side {i}\"\n    \n    # Create the shelves\n    for j in range(1, 4):\n        bpy.ops.mesh.primitive_cube_add(size=2, location=(location[0], location[1], location[2] + j * 1.5), scale=(1, 1, 0.1))\n        shelf = bpy.context.object\n        shelf.name = f\"Multi Tier Shelf {j}\"\n\n# Clear the scene\nclear_scene()\n\n# Create the single-tiered shelf\ncreate_single_tiered_shelf(location=(-3, 0, 0))\n\n# Create the multi-tiered shelf\ncreate_multi_tiered_shelf(location=(3, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8626483809505654, "unit_n": 9, "param_ratio": 4.777777777777778}
{"id": "99121861-04b1-4809-89ee-d6f94a375abe", "name": "Pizza", "instruction": "Model a pizza with pepperoni slices on top.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_dough = bpy.data.materials.new(name=\"Pizza Dough\")\npizza_dough.diffuse_color = (0.93, 0.76, 0.49, 1)  # Light brown color for dough\npepperoni = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_dough)\n\n# Step 3: Create Pepperoni Slices\npepperoni_locations = [\n    (0.5, 0.5, 0.05),\n    (-0.5, 0.5, 0.05),\n    (0.5, -0.5, 0.05),\n    (-0.5, -0.5, 0.05),\n    (0, 0.7, 0.05),\n    (0, -0.7, 0.05),\n    (0.7, 0, 0.05),\n    (-0.7, 0, 0.05)\n]\n\nfor loc in pepperoni_locations:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=loc)\n    slice = bpy.context.object\n    slice.name = \"Pepperoni Slice\"\n    slice.data.materials.append(pepperoni)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.76808889077649, "unit_n": 2, "param_ratio": 8.5}
{"id": "3f9e49cb-d3b2-45b3-aff8-e5a9d7d69f75", "name": "Hat", "instruction": "How would a 3D model of a sun hat compare to a winter hat?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstraw_color = bpy.data.materials.new(name=\"Straw Color\")\nstraw_color.diffuse_color = (0.94, 0.87, 0.54, 1)  # Straw color\n\nwool_color = bpy.data.materials.new(name=\"Wool Color\")\nwool_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red wool color\n\n# Step 2: Create the Sun Hat\n# Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(2, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Sun Hat Brim\"\nbrim.data.materials.append(straw_color)\n\n# Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.6, location=(2, 0, 0.35))\ncrown = bpy.context.object\ncrown.name = \"Sun Hat Crown\"\ncrown.data.materials.append(straw_color)\n\n# Step 3: Create the Winter Hat\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.6, location=(-2, 0, 0.3))\nbase = bpy.context.object\nbase.name = \"Winter Hat Base\"\nbase.data.materials.append(wool_color)\n\n# Pom-pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(-2, 0, 0.8))\npom_pom = bpy.context.object\npom_pom.name = \"Winter Hat Pom-pom\"\npom_pom.data.materials.append(wool_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.616424782394678, "unit_n": 4, "param_ratio": 7.25}
{"id": "713a6d2b-024e-485f-b524-8e5919311093", "name": "Hat", "instruction": "Alright, let's create a hat. It should have a cylindrical crown that's about 4 inches tall and a brim that's 2 inches wide. The color should be a deep shade of green. Add a simple band around the base of the crown in a contrasting color like black. That's it!", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_green = bpy.data.materials.new(name=\"Deep Green\")\ndeep_green.diffuse_color = (0.0, 0.5, 0.0, 1)  # Deep green color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=4, location=(0, 0, 2))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(deep_green)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(deep_green)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 0.1))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 4.067873719599965, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "d16cb378-a956-424e-aa89-8914b46b1971", "name": "Birthday Cake", "instruction": "Design a birthday cake with three layers. The top should have a \"Happy Birthday\" message and some decorative elements like small flowers or stars.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"CakeColor\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for the cake\ndecoration_color = bpy.data.materials.new(name=\"DecorationColor\")\ndecoration_color.diffuse_color = (1, 0.5, 0.5, 1)  # Pink color for decorations\n\n# Step 2: Create the Bottom Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(cake_color)\n\n# Step 3: Create the Middle Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, 0.75))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(cake_color)\n\n# Step 4: Create the Top Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, 1.25))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(cake_color)\n\n# Step 5: Add \"Happy Birthday\" Text\nbpy.ops.object.text_add(location=(0, 0, 1.75))\ntext = bpy.context.object\ntext.name = \"Happy Birthday Text\"\ntext.data.body = \"Happy Birthday\"\ntext.data.materials.append(decoration_color)\ntext.rotation_euler = (1.5708, 0, 0)\ntext.scale = (0.2, 0.2, 0.2)\n\n# Step 6: Add Decorative Elements (Flowers or Stars)\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.5))\n    decoration = bpy.context.object\n    decoration.name = f\"Decoration {i + 1}\"\n    decoration.data.materials.append(decoration_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.2842824750615005, "unit_n": 12, "param_ratio": 2.6666666666666665}
{"id": "f5fec72e-e4e8-434d-a36d-6c98c4ee0055", "name": "Sunglasses Case", "instruction": "Please create a simple 3D model of a sunglasses case with a hinged lid and a clasp for secure closure.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncase_color = bpy.data.materials.new(name=\"Case Color\")\ncase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Main Body of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (1, 0.5, 0.25)\nmain_body.data.materials.append(case_color)\n\n# Step 3: Create the Lid of the Case\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.scale = (1, 0.5, 0.25)\nlid.data.materials.append(case_color)\n\n# Step 4: Create the Hinge\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, -0.55, 0.25), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(case_color)\n\n# Step 5: Create the Clasp\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.55, 0.25))\nclasp = bpy.context.object\nclasp.name = \"Clasp\"\nclasp.scale = (0.5, 0.5, 0.5)\nclasp.data.materials.append(case_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.3785686193914004, "unit_n": 4, "param_ratio": 6.25}
{"id": "86f10bab-8dbc-4bc9-85d1-fa686b396c63", "name": "Dog Bed", "instruction": "Can you make a dog bed with raised edges?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the bed\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.15, location=(0, 0, 0.1))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.530579697574575, "unit_n": 2, "param_ratio": 7.5}
{"id": "e2e0e169-4216-47ad-9085-04e6aa4e4cdf", "name": "Vegan Burger Patty", "instruction": "Think about crafting a vegan burger patty that aims to satisfy even the most discerning palates. Consider the texture and how it should hold together well during cooking. The patty should be versatile enough to be the star of a classic burger or a gourmet creation with exotic toppings.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the vegan patty\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brownish color for the patty\n\n# Step 2: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\npatty = bpy.context.object\npatty.name = \"Vegan Patty\"\npatty.data.materials.append(patty_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "acc388e3-d03a-4b4f-9320-73edd27764c6", "name": "Electric Switch", "instruction": "Model a simple electric switch intended for turning a circuit on and off.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nswitch_body_color = bpy.data.materials.new(name=\"Switch Body Color\")\nswitch_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nswitch_toggle_color = bpy.data.materials.new(name=\"Switch Toggle Color\")\nswitch_toggle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Switch Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nswitch_body = bpy.context.object\nswitch_body.name = \"Switch Body\"\nswitch_body.scale = (0.5, 0.8, 0.1)\nswitch_body.data.materials.append(switch_body_color)\n\n# Step 3: Create the Switch Toggle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.15))\nswitch_toggle = bpy.context.object\nswitch_toggle.name = \"Switch Toggle\"\nswitch_toggle.scale = (0.2, 0.4, 0.05)\nswitch_toggle.data.materials.append(switch_toggle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "74bfff07-06ea-43ef-bd2e-c86ddf4fdd25", "name": "Notepad", "instruction": "How does it feel to bring to life a simple notepad with a spiral binding at the top?", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npaper_color = bpy.data.materials.new(name=\"Paper\")\npaper_color.diffuse_color = (1, 1, 1, 1)  # White color for the paper\nspiral_color = bpy.data.materials.new(name=\"Spiral\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the spiral\n\n# Step 2: Create the Notepad\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nnotepad = bpy.context.object\nnotepad.name = \"Notepad\"\nnotepad.scale[2] = 0.05  # Make it flat\nnotepad.data.materials.append(paper_color)\n\n# Step 3: Create the Spiral Binding\nnum_spirals = 10\nspiral_radius = 0.05\nspiral_spacing = 0.2\nfor i in range(num_spirals):\n    x = -1 + spiral_spacing * i\n    bpy.ops.mesh.primitive_torus_add(major_radius=spiral_radius, minor_radius=0.02, location=(x, 1.05, 0.05))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.603974039414028, "unit_n": 2, "param_ratio": 9.0}
{"id": "4fd3c1d2-6aad-4f2d-9716-4ea1e8cab074", "name": "Sushi Roll", "instruction": "What does a classic sushi roll look like? Model a sushi roll with seaweed on the outside and rice and fillings visible at the ends.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.0, 0.2, 0.0, 1)  # Dark green color for seaweed\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color for rice\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for filling\n\n# Step 2: Create the Seaweed Outer Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nseaweed_outer = bpy.context.object\nseaweed_outer.name = \"Seaweed Outer\"\nseaweed_outer.data.materials.append(seaweed)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2.1, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice)\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2.2, location=(0, 0, 0))\nfilling_core = bpy.context.object\nfilling_core.name = \"Filling Core\"\nfilling_core.data.materials.append(filling)", "color_brightness": "Dark", "verify": "human", "entropy": 4.600308450524309, "unit_n": 3, "param_ratio": 10.0}
{"id": "f22c8371-cf00-4307-b67f-50c7eb6c1d4f", "name": "Sofa", "instruction": "Let's create a sofa that can seat three people. The sofa should have a rectangular shape with a backrest and armrests. Include a few square cushions on the seat.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Brownish color\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Sofa Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_base = bpy.context.object\nsofa_base.scale = (2, 1, 0.5)\nsofa_base.name = \"SofaBase\"\nsofa_base.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.1, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 1, 0.75)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1.1))\n    cushion = bpy.context.object\n    cushion.scale = (0.6, 0.9, 0.2)\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.690913745940562, "unit_n": 7, "param_ratio": 3.7142857142857144}
{"id": "2bb99b0c-305a-4616-b999-9bfa230c3349", "name": "Passport Cover", "instruction": "Design a simple passport cover with a plain surface and a single color.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # A simple blue color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Passport Cover\"\ncover.scale = (1.5, 0.1, 2)  # Scale to resemble a passport cover\ncover.data.materials.append(cover_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "e04d5286-7141-4706-869b-0255dccaf99a", "name": "Pizza Slice", "instruction": "Imagine a slice of pizza. The base should be a triangle with a slightly curved crust. Add a layer of tomato sauce, then sprinkle cheese on top. Place a few pepperoni slices and some olives.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"CrustColor\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nsauce_color = bpy.data.materials.new(name=\"SauceColor\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato red color\ncheese_color = bpy.data.materials.new(name=\"CheeseColor\")\ncheese_color.diffuse_color = (1, 0.9, 0.4, 1)  # Cheese yellow color\npepperoni_color = bpy.data.materials.new(name=\"PepperoniColor\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\nolive_color = bpy.data.materials.new(name=\"OliveColor\")\nolive_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Pizza Base (Triangle with curved crust)\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"PizzaBase\"\nbase.data.materials.append(crust_color)\n\n# Step 3: Add Tomato Sauce Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.95, radius2=0, depth=0.02, location=(0, 0, 0.05))\nsauce = bpy.context.object\nsauce.name = \"TomatoSauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Add Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.9, radius2=0, depth=0.02, location=(0, 0, 0.07))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Slices\npepperoni_positions = [(0.3, 0.1, 0.09), (-0.3, 0.1, 0.09), (0, -0.3, 0.09)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni_{i+1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Add Olives\nolive_positions = [(0.2, 0.3, 0.09), (-0.2, -0.2, 0.09), (0.1, -0.1, 0.09)]\nfor i, pos in enumerate(olive_positions):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=pos)\n    olive = bpy.context.object\n    olive.name = f\"Olive_{i+1}\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.706414863081569, "unit_n": 5, "param_ratio": 9.8}
{"id": "09d56320-e116-4396-98c6-23c97b838379", "name": "Pizza", "instruction": "Design a pizza with a round shape. The pizza should have a crust around the edges and be topped with tomato sauce, cheese, pepperoni slices, and green bell peppers. Make sure the toppings are evenly spread out.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.3, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbell_pepper_color = bpy.data.materials.new(name=\"Green Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.1, 0.7, 0.1, 1)  # Green color for bell pepper\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.06))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Tomato Sauce\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.02, location=(0, 0, 0.08))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0.5, 0), (-0.5, 0)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Green Bell Peppers\nbell_pepper_positions = [(0.2, 0.5), (-0.2, 0.5), (0.5, -0.2), (-0.5, -0.2), (0, 0.6), (0, -0.6)]\nfor i, (x, y) in enumerate(bell_pepper_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.1))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.375496304769293, "unit_n": 5, "param_ratio": 9.8}
{"id": "e8f9d031-1252-49b0-988b-67920ada9ed7", "name": "Juicer", "instruction": "Construct a juicer that has a cylindrical body and a spout for pouring the juice.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Juicer Body\"\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 1.5), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.495988334582963, "unit_n": 2, "param_ratio": 6.5}
{"id": "7482fc13-3cdc-4942-a054-d33dc770d433", "name": "Birthday Cake", "instruction": "Design a round birthday cake with three layers.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown cake color\n\n# Step 2: Create the Bottom Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(cake_color)\n\n# Step 3: Create the Middle Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, 0.75))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(cake_color)\n\n# Step 4: Create the Top Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, 1.25))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(cake_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.957783043799375, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "574be2b3-5fdc-4068-a972-29c564abad0b", "name": "Company Emblem", "instruction": "Can you propose a simple emblem for a company named 'TechSphere'?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\nsphere.data.materials.append(blue)\n\n# Step 3: Create the Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(0, 0, 0), rotation=(1.57, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.317776245421921, "unit_n": 2, "param_ratio": 11.0}
{"id": "704d4679-fc5b-4daf-b695-bdcb2cac9335", "name": "Bird Feeder", "instruction": "Create a bird feeder with a cylindrical container and a small perch at the bottom for birds to stand on while eating.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0.5, 0, 0.1), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.429488712321353, "unit_n": 2, "param_ratio": 6.5}
{"id": "e90d4994-d2b3-4b0d-8e93-090586ab14e7", "name": "Burger vs. Pizza", "instruction": "Create two separate 3D models: one of a burger and one of a pizza. Make them identical in size for comparison.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.8, 0, 1)  # Yellow color\npizza_crust_color = bpy.data.materials.new(name=\"Pizza Crust Color\")\npizza_crust_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\npizza_sauce_color = bpy.data.materials.new(name=\"Pizza Sauce Color\")\npizza_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\npizza_cheese_color = bpy.data.materials.new(name=\"Pizza Cheese Color\")\npizza_cheese_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\n\n# Step 2: Create the Burger\n# Bottom bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(-2, 0, 0.15))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(-2, 0, 0.5))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(-2, 0, 0.7))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(-2, 0, 0.85))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Top bun\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-2, 0, 1.15))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\nbpy.ops.transform.resize(value=(1, 1, 0.3))\ntop_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Pizza\n# Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(2, 0, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(pizza_crust_color)\n\n# Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(2, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(pizza_sauce_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.05, location=(2, 0, 0.15))\npizza_cheese = bpy.context.object\npizza_cheese.name = \"Pizza Cheese\"\npizza_cheese.data.materials.append(pizza_cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.224206449122806, "unit_n": 8, "param_ratio": 9.25}
{"id": "c76a0b0a-8024-48db-942e-0a7eb325bebf", "name": "Decorative Border", "instruction": "Design a decorative border. It should be a continuous line with alternating geometric shapes, such as triangles and circles, repeating along its length.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the spacing and number of shapes\nspacing = 1.0\nnum_shapes = 10\n\n# Step 2: Create the alternating shapes\nfor i in range(num_shapes):\n    x = i * spacing\n    if i % 2 == 0:\n        # Create a triangle\n        bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(x, 0, 0))\n        shape = bpy.context.object\n        shape.name = f\"Triangle {i // 2 + 1}\"\n    else:\n        # Create a circle\n        bpy.ops.mesh.primitive_circle_add(radius=0.5, location=(x, 0, 0))\n        shape = bpy.context.object\n        shape.name = f\"Circle {i // 2 + 1}\"\n        # Extrude the circle to give it some depth\n        bpy.ops.object.mode_set(mode='EDIT')\n        bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.1)})\n        bpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.702500995010958, "unit_n": 2, "param_ratio": 5.0}
{"id": "4179827b-5712-4b5c-9639-67967f977487", "name": "Lamp", "instruction": "Could you create a 3D model of a lamp? It should have a round base, a straight stand, and a conical shade.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nstand = bpy.context.object\nstand.name = \"Stand\"\n\n# Step 4: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0, depth=0.6, location=(0, 0, 1.3))\nshade = bpy.context.object\nshade.name = \"Shade\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9088162391622463, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "795f9351-a09c-46df-9d50-e75720c99463", "name": "Dinner Plate", "instruction": "Compare a dinner plate with a diameter of 10 inches to one with a diameter of 12 inches. Describe the differences in size and potential uses.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplate_color = bpy.data.materials.new(name=\"Plate Color\")\nplate_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the 10-inch Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=0.127, depth=0.02, location=(-0.15, 0, 0))  # 10 inches = 0.254 meters, radius = 0.127 meters\nplate_10 = bpy.context.object\nplate_10.name = \"10-inch Plate\"\nplate_10.data.materials.append(plate_color)\n\n# Step 3: Create the 12-inch Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.02, location=(0.15, 0, 0))  # 12 inches = 0.3048 meters, radius = 0.1524 meters\nplate_12 = bpy.context.object\nplate_12.name = \"12-inch Plate\"\nplate_12.data.materials.append(plate_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.3971524266771524, "unit_n": 2, "param_ratio": 7.5}
{"id": "1ffab862-4089-4972-a3be-a68612aa9e0e", "name": "Burger", "instruction": "Can you make a 3D model of a burger? It should have a bun, patty, lettuce, and a slice of cheese.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the bun\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color for the patty\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for the lettuce\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0, 1)  # Yellow color for the cheese\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(0, 0, 0.25))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.45))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a slice\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.55))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 6: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.75))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.11385098277302, "unit_n": 5, "param_ratio": 8.8}
{"id": "984e79ed-3c31-4921-ac9f-afe25b9fde39", "name": "Pizza", "instruction": "Show me a 3D model of a pizza. The pizza should be round, with a visible crust, and topped with slices of pepperoni and melted cheese.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brownish color for crust\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Light yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.15\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.02, location=(x, y, 0.07))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.740962039643822, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "dbad2bd0-c11a-404a-b85f-05500d23bf92", "name": "Chess Set", "instruction": "Let's compare two different chess sets. The first set should have traditional Staunton-style pieces with a simple, classic design. The second set should feature modern, abstract pieces with sleek lines. Both sets should include a board with alternating light and dark squares. Arrange the pieces on their respective boards in the starting positions.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n# Function to create a chessboard\ndef create_chessboard(name, location):\n    board_size = 8\n    square_size = 1\n    light_color = (1, 1, 1, 1)  # White color\n    dark_color = (0, 0, 0, 1)  # Black color\n\n    for row in range(board_size):\n        for col in range(board_size):\n            bpy.ops.mesh.primitive_plane_add(size=square_size, location=(location[0] + col, location[1] + row, location[2]))\n            square = bpy.context.object\n            square.name = f\"{name}_Square_{row}_{col}\"\n            mat = bpy.data.materials.new(name=f\"{name}_Material_{row}_{col}\")\n            if (row + col) % 2 == 0:\n                mat.diffuse_color = light_color\n            else:\n                mat.diffuse_color = dark_color\n            square.data.materials.append(mat)\n\n# Function to create a simple Staunton-style piece\ndef create_staunton_piece(name, location, color):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    mat = bpy.data.materials.new(name=f\"{name}_Material\")\n    mat.diffuse_color = color\n    piece.data.materials.append(mat)\n\n# Function to create a modern abstract piece\ndef create_modern_piece(name, location, color):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.5, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    mat = bpy.data.materials.new(name=f\"{name}_Material\")\n    mat.diffuse_color = color\n    piece.data.materials.append(mat)\n\n# Clear the scene\nclear_scene()\n\n# Create the first chessboard\ncreate_chessboard(\"Staunton\", (-5, 0, 0))\n\n# Create the second chessboard\ncreate_chessboard(\"Modern\", (5, 0, 0))\n\n# Define colors\nwhite_color = (1, 1, 1, 1)\nblack_color = (0, 0, 0, 1)\n\n# Place Staunton pieces\nfor i in range(8):\n    create_staunton_piece(f\"Staunton_Pawn_White_{i+1}\", (-4.5 + i, 1.5, 0.25), white_color)\n    create_staunton_piece(f\"Staunton_Pawn_Black_{i+1}\", (-4.5 + i, 6.5, 0.25), black_color)\n\n# Place Modern pieces\nfor i in range(8):\n    create_modern_piece(f\"Modern_Pawn_White_{i+1}\", (5.5 + i, 1.5, 0.25), white_color)\n    create_modern_piece(f\"Modern_Pawn_Black_{i+1}\", (5.5 + i, 6.5, 0.25), black_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.999097989839915, "unit_n": 3, "param_ratio": 3.3333333333333335}
{"id": "565bfdc3-6e5a-47a4-b626-c64daf93c2f5", "name": "Blender", "instruction": "Create a blender with a cylindrical base and a transparent container that fits on top. The container should have measurement markings.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ncontainer_material = bpy.data.materials.new(name=\"Container Material\")\ncontainer_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_material)\n\n# Step 4: Create Measurement Markings\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = container\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0.8, 0, 0.75))\nbpy.ops.object.mode_set(mode='OBJECT')\nmarking = bpy.context.object\nmarking.name = \"Marking\"\nmarking.data.materials.append(base_color)\n\n# Duplicate markings along the height of the container\nfor i in range(1, 10):\n    new_marking = marking.copy()\n    new_marking.data = marking.data.copy()\n    new_marking.location[2] = 0.75 + i * 0.15\n    bpy.context.collection.objects.link(new_marking)\n\n# Remove the original marking\nbpy.data.objects.remove(marking)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.4797227713191905, "unit_n": 3, "param_ratio": 8.0}
{"id": "26da94fd-de49-43b9-843e-b9fb7a5298ae", "name": "Dog Bed", "instruction": "Design a dog bed with a circular shape and a raised edge.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Bed Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.2))\nedge = bpy.context.object\nedge.name = \"Bed Edge\"\nedge.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.544624303372426, "unit_n": 2, "param_ratio": 7.5}
{"id": "ffe3b4c0-f284-4731-990b-42dac7c01df8", "name": "Fountain Pen", "instruction": "Design a fountain pen with a cap that can be posted on the back when in use.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0.6))\npen_body = bpy.context.object\npen_body.name = \"Pen Body\"\npen_body.data.materials.append(black)\n\n# Step 3: Create the Pen Nib\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(0, 0, 1.2))\npen_nib = bpy.context.object\npen_nib.name = \"Pen Nib\"\npen_nib.data.materials.append(silver)\n\n# Step 4: Create the Pen Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.7, location=(0, 0, 0.35))\npen_cap = bpy.context.object\npen_cap.name = \"Pen Cap\"\npen_cap.data.materials.append(black)\n\n# Step 5: Create the Posted Cap (Cap on the back of the pen)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.7, location=(0, 0, -0.35))\nposted_cap = bpy.context.object\nposted_cap.name = \"Posted Cap\"\nposted_cap.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.780825340218975, "unit_n": 4, "param_ratio": 7.75}
{"id": "c89df54f-fadf-4dd2-b4f6-b71b36099c1a", "name": "Apple", "instruction": "An apple, please.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 1.25))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358552484385678, "unit_n": 2, "param_ratio": 9.5}
{"id": "b48bd01f-cdc6-42b4-bf62-9d1054d110e2", "name": "Pizza", "instruction": "Create a 3D model of a pizza. The pizza should be round with a thin crust. Divide it into several slices and add some toppings like pepperoni, cheese, and vegetables. Make sure the toppings are evenly distributed across the pizza.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellow color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nvegetable_color = bpy.data.materials.new(name=\"Vegetable\")\nvegetable_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 4: Create Pepperoni Slices\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.08))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create Vegetable Toppings\nfor i in range(8):\n    angle = i * math.pi / 4 + math.pi / 8\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.08))\n    vegetable = bpy.context.object\n    vegetable.name = f\"Vegetable {i + 1}\"\n    vegetable.data.materials.append(vegetable_color)\n\n# Step 6: Slice the Pizza\nfor i in range(8):\n    angle = i * math.pi / 4\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.1), rotation=(0, 0, angle))\n    slice_plane = bpy.context.object\n    slice_plane.name = f\"Slice Plane {i + 1}\"\n    bpy.context.view_layer.objects.active = pizza_base\n    bpy.ops.object.modifier_add(type='BOOLEAN')\n    bpy.context.object.modifiers[\"Boolean\"].operation = 'INTERSECT'\n    bpy.context.object.modifiers[\"Boolean\"].object = slice_plane\n    bpy.ops.object.modifier_apply(modifier=\"Boolean\")\n    bpy.data.objects.remove(slice_plane, do_unlink=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.661274239226179, "unit_n": 34, "param_ratio": 1.3823529411764706}
{"id": "6abbfebb-b952-4221-a45f-b7aa571d5b38", "name": "Decorative Wall Panel", "instruction": "Design a wall panel with an abstract geometric pattern.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wall Panel\nbpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Wall Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Abstract Geometric Pattern\n# Example pattern: A series of cubes and cylinders\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i - 2, 0, 0.25))\n    cube = bpy.context.object\n    cube.data.materials.append(pattern_color)\n\nfor i in range(5):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(i - 2, 1, 0.25))\n    cylinder = bpy.context.object\n    cylinder.data.materials.append(pattern_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.065630326255132, "unit_n": 11, "param_ratio": 2.090909090909091}
{"id": "9c4510c2-7a78-4046-91dc-c3661468e9d3", "name": "Chocolate Bar", "instruction": "Can you generate a 3D model of a chocolate bar? The bar should be rectangular with small square segments that can be broken off. The wrapper should be partially open, revealing part of the chocolate.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate_color = bpy.data.materials.new(name=\"Chocolate\")\nchocolate_color.diffuse_color = (0.24, 0.12, 0.06, 1)  # Dark chocolate color\nwrapper_color = bpy.data.materials.new(name=\"Wrapper\")\nwrapper_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red wrapper color\n\n# Step 2: Create the Chocolate Bar\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nchocolate_bar = bpy.context.object\nchocolate_bar.name = \"Chocolate Bar\"\nchocolate_bar.scale = (1, 0.5, 0.1)\nchocolate_bar.data.materials.append(chocolate_color)\n\n# Step 3: Create the Segments\nfor i in range(4):\n    for j in range(2):\n        bpy.ops.mesh.primitive_cube_add(size=0.4, location=(i * 0.5 - 0.75, j * 0.5 - 0.25, 0.55))\n        segment = bpy.context.object\n        segment.name = f\"Segment_{i}_{j}\"\n        segment.data.materials.append(chocolate_color)\n\n# Step 4: Create the Wrapper\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, -0.6, 0.5))\nwrapper = bpy.context.object\nwrapper.name = \"Wrapper\"\nwrapper.scale = (1.1, 0.6, 0.12)\nwrapper.data.materials.append(wrapper_color)\n\n# Step 5: Partially Open the Wrapper\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, -0.6, 0.8))\nwrapper_top = bpy.context.object\nwrapper_top.name = \"Wrapper Top\"\nwrapper_top.scale = (1.1, 0.6, 0.02)\nwrapper_top.data.materials.append(wrapper_color)\nwrapper_top.rotation_euler[0] = 0.5  # Partially open the wrapper", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.225283294274591, "unit_n": 11, "param_ratio": 2.3636363636363638}
{"id": "1c745c77-51ca-47eb-b3c1-ff4d99a1ba6f", "name": "Pasta", "instruction": "Create a simple, straight pasta shape, like spaghetti, approximately 25cm long and 2mm in diameter.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Spaghetti\nbpy.ops.mesh.primitive_cylinder_add(radius=0.001, depth=0.25, location=(0, 0, 0.125))\nspaghetti = bpy.context.object\nspaghetti.name = \"Spaghetti\"\n\n# Define the color (light yellow for pasta)\npasta_color = bpy.data.materials.new(name=\"Pasta Color\")\npasta_color.diffuse_color = (1.0, 0.9, 0.6, 1)  # Light yellow color\nspaghetti.data.materials.append(pasta_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "c2863be1-47ae-41bd-aecd-73f8ad8a0b28", "name": "Geometric Badge", "instruction": "Create a 3D geometric badge. It should be a hexagon with a smaller hexagon inset. The outer hexagon should be a solid color, while the inner hexagon should be a contrasting color.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport bmesh\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nouter_color = bpy.data.materials.new(name=\"Outer Color\")\nouter_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ninner_color = bpy.data.materials.new(name=\"Inner Color\")\ninner_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the Outer Hexagon\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=(0, 0, 0))\nouter_hexagon = bpy.context.object\nouter_hexagon.name = \"Outer Hexagon\"\nouter_hexagon.data.materials.append(outer_color)\n\n# Step 3: Create the Inner Hexagon\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.5, fill_type='NGON', location=(0, 0, 0.01))\ninner_hexagon = bpy.context.object\ninner_hexagon.name = \"Inner Hexagon\"\ninner_hexagon.data.materials.append(inner_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 11.0}
{"id": "2f4d2ff6-7ac6-4ae3-b99f-36abd72a695f", "name": "Picture Frame", "instruction": "Could you create a 3D model of a picture frame? The frame should be rectangular and able to hold a 5x7 inch photograph.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nframe_width = 7 * 0.0254  # 7 inches to meters\nframe_height = 5 * 0.0254  # 5 inches to meters\nframe_depth = 0.02  # 2 cm depth\nborder_thickness = 0.02  # 2 cm border thickness\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (frame_width / 2 + border_thickness, frame_height / 2 + border_thickness, frame_depth / 2)\nouter_frame.name = \"Outer Frame\"\n\n# Step 3: Create the Inner Cutout\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ninner_cutout = bpy.context.object\ninner_cutout.scale = (frame_width / 2, frame_height / 2, frame_depth / 2 + 0.01)\ninner_cutout.name = \"Inner Cutout\"\n\n# Step 4: Boolean Modifier to Cut the Inner Part\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_cutout\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner cutout object\nbpy.data.objects.remove(inner_cutout, do_unlink=True)\n\n# Step 5: Create the Photograph Placeholder\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, -frame_depth / 2 - 0.001))\nphoto_placeholder = bpy.context.object\nphoto_placeholder.scale = (frame_width / 2, frame_height / 2, 1)\nphoto_placeholder.name = \"Photo Placeholder\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4412145291060345, "unit_n": 3, "param_ratio": 4.0}
{"id": "b148b32f-5976-4c0b-b7e2-41772554a4da", "name": "Decorative Wall Panel", "instruction": "Compare two decorative wall panels. The first panel should have a geometric pattern with clean lines and sharp angles. The second panel should feature a more organic design with flowing curves and natural shapes. Describe how the two panels differ in terms of visual impact and style.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngeometric_color = bpy.data.materials.new(name=\"GeometricColor\")\ngeometric_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\norganic_color = bpy.data.materials.new(name=\"OrganicColor\")\norganic_color.diffuse_color = (0.2, 0.5, 0.2, 1)  # Green color\n\n# Step 2: Create the Geometric Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(-2.5, 0, 0))\ngeo_panel = bpy.context.object\ngeo_panel.name = \"Geometric Panel\"\ngeo_panel.data.materials.append(geometric_color)\n\n# Add geometric pattern\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-2.5, 0.5, 0.1))\ncube1 = bpy.context.object\ncube1.data.materials.append(geometric_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-2.5, -0.5, 0.1))\ncube2 = bpy.context.object\ncube2.data.materials.append(geometric_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-2.0, 0.0, 0.1))\ncube3 = bpy.context.object\ncube3.data.materials.append(geometric_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-3.0, 0.0, 0.1))\ncube4 = bpy.context.object\ncube4.data.materials.append(geometric_color)\n\n# Step 3: Create the Organic Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(2.5, 0, 0))\norganic_panel = bpy.context.object\norganic_panel.name = \"Organic Panel\"\norganic_panel.data.materials.append(organic_color)\n\n# Add organic pattern\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(2.5, 0.5, 0.1))\nsphere1 = bpy.context.object\nsphere1.data.materials.append(organic_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(2.5, -0.5, 0.1))\nsphere2 = bpy.context.object\nsphere2.data.materials.append(organic_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(2.0, 0.0, 0.1))\nsphere3 = bpy.context.object\nsphere3.data.materials.append(organic_color)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(3.0, 0.0, 0.1))\nsphere4 = bpy.context.object\nsphere4.data.materials.append(organic_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.740669074714088, "unit_n": 10, "param_ratio": 5.0}
{"id": "99282a98-c6bb-45ac-9ba0-903aa09fa4f5", "name": "Coffee Grinder", "instruction": "How does a coffee grinder compare to a blender in terms of design? The coffee grinder should have a cylindrical body, a lid on top, and a handle on the side for manual grinding.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Darker gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Very dark gray color\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.52, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0.6, 0, 1.0), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Create the handle grip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.9, 0, 1.0))\nhandle_grip = bpy.context.object\nhandle_grip.name = \"Handle Grip\"\nhandle_grip.data.materials.append(handle_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.8423602779711588, "unit_n": 4, "param_ratio": 9.25}
{"id": "c384e030-3826-414c-8e1b-68024914d489", "name": "Geometric Pattern", "instruction": "Create a 3D geometric pattern composed of interlocking hexagons and triangles. Arrange the shapes in a repeating sequence to form a continuous surface. Compare the pattern with a similar one made of only hexagons.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhexagon_color = bpy.data.materials.new(name=\"HexagonColor\")\nhexagon_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntriangle_color = bpy.data.materials.new(name=\"TriangleColor\")\ntriangle_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Dark blue color\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hexagon_color)\n    return hexagon\n\n# Function to create a triangle\ndef create_triangle(location, rotation):\n    bpy.ops.mesh.primitive_circle_add(vertices=3, radius=1, fill_type='NGON', location=location, rotation=rotation)\n    triangle = bpy.context.object\n    triangle.data.materials.append(triangle_color)\n    return triangle\n\n# Create the pattern with interlocking hexagons and triangles\nfor i in range(5):\n    for j in range(5):\n        x_offset = i * 1.5\n        y_offset = j * math.sqrt(3)\n        if (i + j) % 2 == 0:\n            create_hexagon((x_offset, y_offset, 0))\n        else:\n            create_triangle((x_offset, y_offset, 0), (0, 0, math.radians(30)))\n\n# Create the pattern with only hexagons\nfor i in range(5):\n    for j in range(5):\n        x_offset = i * 1.5 + 10  # Offset to separate the two patterns\n        y_offset = j * math.sqrt(3)\n        create_hexagon((x_offset, y_offset, 0))", "color_brightness": "Dark", "verify": "human", "entropy": 4.498000141394131, "unit_n": 2, "param_ratio": 8.0}
{"id": "ace9cdf3-37b5-45fe-a145-7e1278bdd4dd", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should have a large touchscreen, a front-facing camera, and a single button at the bottom center. The back should feature a single camera lens and a flash.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.3, 0.6, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Touchscreen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Touchscreen\"\nscreen.scale = (0.28, 0.58, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front-facing Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0, 0.55, 0.051))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, -0.55, 0.051), rotation=(1.5708, 0, 0))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(black)\n\n# Step 6: Create the Back Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.55, -0.051))\nback_camera = bpy.context.object\nback_camera.name = \"Back Camera\"\nback_camera.data.materials.append(black)\n\n# Step 7: Create the Flash\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0.1, 0.55, -0.051))\nflash = bpy.context.object\nflash.name = \"Flash\"\nflash.data.materials.append(white)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.106841739239612, "unit_n": 6, "param_ratio": 7.166666666666667}
{"id": "836ba6ab-4544-4d2b-b64e-0670b811be5f", "name": "Candle Holder", "instruction": "Picture a candle holder that could be placed on a dining table. It should be designed to safely contain a candle and collect wax drippings. The model should include a base, a stem, and a cup to hold the candle.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Step 4: Create the Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.5, location=(0, 0, 2.5))\ncup = bpy.context.object\ncup.name = \"Cup\"\n\n# Step 5: Hollow out the Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.45, location=(0, 0, 2.5))\ninner_cup = bpy.context.object\ninner_cup.name = \"Inner Cup\"\n\n# Boolean difference to hollow out the cup\nmod_bool = cup.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cup\nbpy.context.view_layer.objects.active = cup\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(inner_cup, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.125200952713951, "unit_n": 4, "param_ratio": 5.0}
{"id": "0c59ef87-1818-4148-aad2-27375d8f1690", "name": "Coaster", "instruction": "Create a coaster.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"\n\n# Define the color\ncoaster_material = bpy.data.materials.new(name=\"Coaster Material\")\ncoaster_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncoaster.data.materials.append(coaster_material)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "25447634-d246-4ff4-920b-ed27b06c2cc5", "name": "Frisbee", "instruction": "Create a frisbee. It should be a flat, circular disc with a slightly raised edge.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base Disc\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase_disc = bpy.context.object\nbase_disc.name = \"Base Disc\"\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0.05))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\n\n# Join the base disc and raised edge into a single object\nbpy.ops.object.select_all(action='DESELECT')\nbase_disc.select_set(True)\nraised_edge.select_set(True)\nbpy.context.view_layer.objects.active = base_disc\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.193352554679778, "unit_n": 2, "param_ratio": 5.0}
{"id": "56ba3173-fb42-4687-b140-7a1fa1b943bb", "name": "Table Lamp", "instruction": "Design a table lamp with a round base and a cylindrical lampshade. The lampshade should be slightly tapered at the top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Lamp Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.6))\nlamp_post = bpy.context.object\nlamp_post.name = \"Lamp Post\"\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.3, depth=0.6, location=(0, 0, 1.3))\nlampshade = bpy.context.object\nlampshade.name = \"Lampshade\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.216469105640615, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "c5a82cf5-e51b-4e7d-aee3-29364bc7381c", "name": "Coffee Mug", "instruction": "How is a coffee mug typically used in a 3D model?", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\nmug_body.data.materials.append(white)\n\n# Step 3: Hollow out the Mug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.4, location=(0, 0, 0.8))\nmug_inner = bpy.context.object\nmug_inner.name = \"Mug Inner\"\n\n# Boolean modifier to hollow out the mug\nbool_mod = mug_body.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = mug_inner\nbpy.context.view_layer.objects.active = mug_body\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(mug_inner)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(1.5, 0, 0.75), major_radius=0.5, minor_radius=0.1, rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(white)\n\n# Boolean modifier to attach the handle\nbool_mod = mug_body.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod_handle\")\nbool_mod.operation = 'UNION'\nbool_mod.object = handle\nbpy.context.view_layer.objects.active = mug_body\nbpy.ops.object.modifier_apply(modifier=\"bool_mod_handle\")\nbpy.data.objects.remove(handle)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.344037696508167, "unit_n": 3, "param_ratio": 8.0}
{"id": "a941a69a-c57a-4302-9627-4340fdef83e9", "name": "Bird Feeder", "instruction": "Create a 3D model of a bird feeder. It should have a cylindrical container for seeds, a perch for birds to stand on, and a hook for hanging. The top should be removable for easy refilling.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncontainer_color = bpy.data.materials.new(name=\"ContainerColor\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nperch_color = bpy.data.materials.new(name=\"PerchColor\")\nperch_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\nhook_color = bpy.data.materials.new(name=\"HookColor\")\nhook_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.0, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0.3, 0, 0.2), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(perch_color)\n\n# Step 4: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.1), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(hook_color)\n\n# Step 5: Create the Top (Removable)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.1, location=(0, 0, 1.05))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(container_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.446450020373629, "unit_n": 4, "param_ratio": 10.25}
{"id": "9326071c-431f-48d9-a2af-9676bddd47a2", "name": "Pen", "instruction": "Create a 3D model of a pen. It should be cylindrical with a cap on one end.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npen_body_color = bpy.data.materials.new(name=\"Pen Body Color\")\npen_body_color.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\ncap_color = bpy.data.materials.new(name=\"Cap Color\")\ncap_color.diffuse_color = (0.0, 0.0, 0.5, 1)  # Darker blue color\n\n# Step 2: Create the Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0))\npen_body = bpy.context.object\npen_body.name = \"Pen Body\"\npen_body.data.materials.append(pen_body_color)\n\n# Step 3: Create the Pen Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.06, depth=0.4, location=(0, 0, 0.95))\npen_cap = bpy.context.object\npen_cap.name = \"Pen Cap\"\npen_cap.data.materials.append(cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.548778372424641, "unit_n": 2, "param_ratio": 10.0}
{"id": "cbcdcde4-9aac-444e-bc1c-de7904495bb7", "name": "Coasters", "instruction": "Design a set of 3 coasters. Each should be a simple round shape with a diameter of 10 cm. The top surface should have a geometric pattern.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the coaster material\ncoaster_material = bpy.data.materials.new(name=\"CoasterMaterial\")\ncoaster_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Coasters\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.2, location=(i * 12, 0, 0))\n    coaster = bpy.context.object\n    coaster.name = f\"Coaster {i + 1}\"\n    coaster.data.materials.append(coaster_material)\n\n    # Create a geometric pattern on top surface\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(i * 12, 0, 0.1), rotation=(0, 0, 0), major_radius=4, minor_radius=0.1)\n    torus = bpy.context.object\n    torus.data.materials.append(coaster_material)\n\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(i * 12, 0, 0.1), rotation=(0, 0, 0), major_radius=2.5, minor_radius=0.1)\n    torus = bpy.context.object\n    torus.data.materials.append(coaster_material)\n\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(i * 12, 0, 0.1), rotation=(0, 0, 0), major_radius=1, minor_radius=0.1)\n    torus = bpy.context.object\n    torus.data.materials.append(coaster_material)", "color_brightness": "Bright", "verify": "human", "entropy": 5.762154725906255, "unit_n": 12, "param_ratio": 3.0833333333333335}
{"id": "213c011a-7643-4557-8fb1-6370a77a7e4c", "name": "Modular Sofa", "instruction": "Envision a modular sofa that provides a versatile seating solution. Each section is a self-contained seat with its own backrest and armrests, allowing for multiple configurations. The sections can be easily connected or separated, depending on the desired layout. The overall look is clean and unobtrusive, making it suitable for various interior designs.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create a single modular section\ndef create_section(x, y):\n    # Create the seat\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.25))\n    seat = bpy.context.object\n    seat.name = \"Seat\"\n    seat.scale[0] = 1.5\n    seat.scale[1] = 1.5\n    seat.scale[2] = 0.25\n    seat.data.materials.append(sofa_color)\n    \n    # Create the backrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y - 0.75, 0.75))\n    backrest = bpy.context.object\n    backrest.name = \"Backrest\"\n    backrest.scale[0] = 1.5\n    backrest.scale[1] = 0.25\n    backrest.scale[2] = 0.75\n    backrest.data.materials.append(sofa_color)\n    \n    # Create the left armrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x - 0.75, y, 0.5))\n    left_armrest = bpy.context.object\n    left_armrest.name = \"Left Armrest\"\n    left_armrest.scale[0] = 0.25\n    left_armrest.scale[1] = 1.5\n    left_armrest.scale[2] = 0.5\n    left_armrest.data.materials.append(sofa_color)\n    \n    # Create the right armrest\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x + 0.75, y, 0.5))\n    right_armrest = bpy.context.object\n    right_armrest.name = \"Right Armrest\"\n    right_armrest.scale[0] = 0.25\n    right_armrest.scale[1] = 1.5\n    right_armrest.scale[2] = 0.5\n    right_armrest.data.materials.append(sofa_color)\n\n# Step 3: Create multiple sections\ncreate_section(0, 0)\ncreate_section(3, 0)\ncreate_section(6, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.304417998757858, "unit_n": 4, "param_ratio": 5.25}
{"id": "ec560d58-72ef-4168-b315-02cbee050cb8", "name": "Sofa", "instruction": "Create a basic 3-seater sofa with simple, straight lines.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium dark red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 3  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.2  # Height\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 3  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 1  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.8  # Height\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Seats\nfor i in range(3):\n    x = 2 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.7))\n    seat = bpy.context.object\n    seat.name = f\"Seat {i + 1}\"\n    seat.scale[0] = 0.9  # Length\n    seat.scale[1] = 1  # Width\n    seat.scale[2] = 0.2  # Height\n    seat.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.561069640955022, "unit_n": 7, "param_ratio": 3.0}
{"id": "25210b0d-65f2-4a51-a6d5-ec6c49916a22", "name": "Dog Bowl", "instruction": "Create a 3D model of a dog bowl. The bowl should be circular with a diameter of 10 inches and a depth of 3 inches. It should have a non-slip base.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nbowl_diameter = 10 / 2  # Radius in Blender units (assuming 1 unit = 1 inch)\nbowl_depth = 3\nbase_thickness = 0.2\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=bowl_diameter, depth=bowl_depth, location=(0, 0, bowl_depth / 2))\nbowl = bpy.context.object\nbowl.name = \"Dog Bowl\"\n\n# Step 3: Hollow out the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=bowl_diameter - 0.2, depth=bowl_depth - 0.2, location=(0, 0, bowl_depth / 2 + 0.1))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Boolean modifier to hollow out the bowl\nmod_bool = bowl.modifiers.new(type=\"BOOLEAN\", name=\"Bowl Hollow\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl\nbpy.ops.object.modifier_apply(modifier=\"Bowl Hollow\")\n\n# Remove the inner bowl mesh\nbpy.data.objects.remove(inner_bowl, do_unlink=True)\n\n# Step 4: Create the Non-Slip Base\nbpy.ops.mesh.primitive_cylinder_add(radius=bowl_diameter + 0.5, depth=base_thickness, location=(0, 0, base_thickness / 2))\nbase = bpy.context.object\nbase.name = \"Non-Slip Base\"\n\n# Parent the bowl to the base\nbowl.select_set(True)\nbase.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.parent_set(type='OBJECT', keep_transform=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.0444878060478775, "unit_n": 3, "param_ratio": 4.0}
{"id": "15d066e4-4f6f-48bc-929c-441eb651bc09", "name": "Birthday Cake", "instruction": "Hey there, let's design a 3D model of a birthday cake.\n\nStart with a round base layer of cake.\n\nAdd a second layer on top, slightly smaller in diameter than the base layer.\n\nOn the top layer, add a \"Happy Birthday\" message.\n\nInclude some candles on the top layer. \n\nMake sure the cake looks celebratory and inviting.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown cake color\ncandle_color = bpy.data.materials.new(name=\"Candle Color\")\ncandle_color.diffuse_color = (1, 0.8, 0, 1)  # Yellow candle color\n\n# Step 2: Create the Base Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase_layer = bpy.context.object\nbase_layer.name = \"Base Layer\"\nbase_layer.data.materials.append(cake_color)\n\n# Step 3: Create the Second Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.3, location=(0, 0, 0.65))\nsecond_layer = bpy.context.object\nsecond_layer.name = \"Second Layer\"\nsecond_layer.data.materials.append(cake_color)\n\n# Step 4: Add \"Happy Birthday\" Message\nbpy.ops.object.text_add(location=(0, 0, 1))\ntext = bpy.context.object\ntext.name = \"Happy Birthday Text\"\ntext.data.body = \"Happy Birthday\"\ntext.data.align_x = 'CENTER'\ntext.data.align_y = 'CENTER'\ntext.rotation_euler = (math.pi/2, 0, 0)\ntext.scale = (0.2, 0.2, 0.2)\n\n# Step 5: Add Candles\nnum_candles = 6\nfor i in range(num_candles):\n    angle = i * (2 * math.pi / num_candles)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 0.8))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.065564206017935, "unit_n": 4, "param_ratio": 7.0}
{"id": "041cee41-614e-47d6-a27d-9354e9629e9a", "name": "Scented Candle", "instruction": "How would you design a scented candle that can be a centerpiece for a dining table and also effectively diffuse fragrance in an open-concept living space?", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 0.85, 0.7, 1)  # Light beige color for the candle\n\nwick_color = bpy.data.materials.new(name=\"WickColor\")\nwick_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for the wick\n\n# Step 2: Create the Candle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncandle_body = bpy.context.object\ncandle_body.name = \"CandleBody\"\ncandle_body.data.materials.append(candle_color)\n\n# Step 3: Create the Wick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 2.25))\nwick = bpy.context.object\nwick.name = \"Wick\"\nwick.data.materials.append(wick_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.723707852188834, "unit_n": 2, "param_ratio": 10.0}
{"id": "3d7ea584-844f-4f2d-8bd1-76485078c729", "name": "Circuit Breaker", "instruction": "Could you model a circuit breaker and compare it to a fuse?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Circuit Breaker Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbreaker_body = bpy.context.object\nbreaker_body.name = \"Circuit Breaker Body\"\nbreaker_body.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 1.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(black)\n\n# Step 4: Create the Fuse Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(2, 0, 0.5))\nfuse_body = bpy.context.object\nfuse_body.name = \"Fuse Body\"\nfuse_body.data.materials.append(gray)\n\n# Step 5: Create the Fuse Caps\nfor i in [-0.5, 0.5]:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(2, 0, i + 0.5))\n    cap = bpy.context.object\n    cap.name = f\"Fuse Cap {i + 1.5}\"\n    cap.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.548017052303233, "unit_n": 4, "param_ratio": 7.0}
{"id": "1c1b5a80-9a96-4587-b7f4-1648c234c4fe", "name": "Bookshelf", "instruction": "Could you create a bookshelf for me? It should have five shelves and be tall and narrow. The shelves need to be evenly spaced.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Shelves\nshelf_height = 0.1\nshelf_width = 1.0\nshelf_depth = 0.3\nnum_shelves = 5\ntotal_height = 2.0\nspacing = total_height / (num_shelves + 1)\n\nfor i in range(num_shelves):\n    z = (i + 1) * spacing\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.05\npanel_height = total_height + 2 * shelf_height\npanel_depth = shelf_depth + 2 * panel_thickness\n\n# Left Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-shelf_width / 2 - panel_thickness / 2, 0, total_height / 2))\nleft_panel = bpy.context.object\nleft_panel.scale = (panel_thickness, panel_depth, panel_height)\nleft_panel.name = \"Left Panel\"\nleft_panel.data.materials.append(wood_color)\n\n# Right Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(shelf_width / 2 + panel_thickness / 2, 0, total_height / 2))\nright_panel = bpy.context.object\nright_panel.scale = (panel_thickness, panel_depth, panel_height)\nright_panel.name = \"Right Panel\"\nright_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2 - panel_thickness / 2, total_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width + 2 * panel_thickness, panel_thickness, panel_height)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.812309493079699, "unit_n": 4, "param_ratio": 5.25}
{"id": "0e87ecff-11ef-41e6-8d2c-484ce6473bef", "name": "Hat", "instruction": "Could you create a hat with a wide brim and a rounded crown?", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_material = bpy.data.materials.new(name=\"HatMaterial\")\nhat_material.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_material)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.933726087323573, "unit_n": 2, "param_ratio": 7.0}
{"id": "9cd4e859-d60f-4683-b8da-8dab4c5e2d41", "name": "Chess Timer", "instruction": "I would like to create a 3D model of a chess timer. This timer should have two clock faces and two buttons, one for each player. The model should include a base that allows it to sit steadily on a flat surface.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\nclock_color = bpy.data.materials.new(name=\"ClockColor\")\nclock_color.diffuse_color = (1, 1, 1, 1)  # White color\n\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.scale[0] = 2\nbase.scale[1] = 1\nbase.scale[2] = 0.2\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Clock Faces\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(x, 0, 0.5))\n    clock = bpy.context.object\n    clock.name = f\"Clock {i + 1}\"\n    clock.data.materials.append(clock_color)\n\n# Step 4: Create the Buttons\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 0, 1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.156043830699245, "unit_n": 5, "param_ratio": 5.8}
{"id": "e559e19a-2859-4995-89f6-f35df8468845", "name": "Dog Bed", "instruction": "Create a 3D model of a dog bed. Compare two types: one with raised edges and one without. Show the differences in their shapes.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Bed without Raised Edges\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(-1.5, 0, 0))\nbed_without_edges = bpy.context.object\nbed_without_edges.name = \"Bed Without Raised Edges\"\nbed_without_edges.data.materials.append(bed_color)\n\n# Step 3: Create the Bed with Raised Edges\n# Create the base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(1.5, 0, 0))\nbed_with_edges_base = bpy.context.object\nbed_with_edges_base.name = \"Bed With Raised Edges Base\"\nbed_with_edges_base.data.materials.append(bed_color)\n\n# Create the raised edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(1.5, 0, 0.2))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.219379591129606, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "8d105cac-3b0a-4157-9dba-c3d240dbf74e", "name": "Keychain", "instruction": "Design a keychain with a simple ring and a small rectangular tag attached.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.05, location=(0, 0, 0))\nring = bpy.context.object\nring.name = \"Keychain Ring\"\n\n# Step 3: Create the Tag\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.65, 0, 0))\ntag = bpy.context.object\ntag.name = \"Keychain Tag\"\ntag.scale[0] = 2  # Scale the cube to make it rectangular\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.918805312936847, "unit_n": 2, "param_ratio": 4.5}
{"id": "ab24810f-f2e8-4dbe-ac0c-95097c9ac04a", "name": "Travel Wallet", "instruction": "Design a travel wallet with a slim profile and multiple card slots.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\ncard_slot_color = bpy.data.materials.new(name=\"Card Slot Color\")\ncard_slot_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.scale = (1, 0.1, 0.5)  # Slim profile\nwallet_body.name = \"Wallet Body\"\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create Card Slots\nnum_slots = 5\nslot_height = 0.1\nfor i in range(num_slots):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.11, 0.4 - i * slot_height))\n    card_slot = bpy.context.object\n    card_slot.scale = (0.9, 0.01, 0.05)  # Thin card slot\n    card_slot.name = f\"Card Slot {i + 1}\"\n    card_slot.data.materials.append(card_slot_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.524627420627919, "unit_n": 2, "param_ratio": 9.0}
{"id": "2c0de46d-06a8-428a-9ab0-d7775fda2e68", "name": "Hammer", "instruction": "Can you create a 3D model of a hammer? It should have a solid head and a handle.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the hammer head\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the handle\n\n# Step 2: Create the Hammer Head\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.25))\nhead = bpy.context.object\nhead.name = \"Hammer Head\"\nhead.scale[0] = 1.5  # Make the head longer\nhead.data.materials.append(metal)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.400416890344758, "unit_n": 2, "param_ratio": 9.5}
{"id": "27d8815c-1d8e-40ba-b78e-a154d1f634a0", "name": "Pizza", "instruction": "Could you create a 3D model of a pizza? It should be round with a slightly raised crust. Add toppings such as pepperoni slices, green bell peppers, and black olives.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.95, 0.87, 0.70, 1)  # Light brown color for dough\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.80, 0.20, 0.20, 1)  # Red color for pepperoni\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for bell pepper\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color for olives\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(dough_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.1, location=(0, 0, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(dough_color)\n\n# Step 4: Add Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.06))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Add Bell Pepper Slices\nbell_pepper_positions = [(0.5, 0), (-0.5, 0), (0, 0.5), (0, -0.5)]\nfor i, pos in enumerate(bell_pepper_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(pos[0], pos[1], 0.06))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Step 6: Add Black Olives\nolive_positions = [(0.2, 0.2), (-0.2, 0.2), (0.2, -0.2), (-0.2, -0.2)]\nfor i, pos in enumerate(olive_positions):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(pos[0], pos[1], 0.07))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.068219568370289, "unit_n": 5, "param_ratio": 8.8}
{"id": "8bc57f21-1a5e-4385-bb4e-5048b505d023", "name": "Water Bottle", "instruction": "Let's design a water bottle. Begin with a cylindrical body, 9 inches in height and 3 inches in diameter. Add a screw-top lid that is 1 inch in height. Include a carrying loop attached to the lid. The bottle should have measurement markings along one side.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbottle_color = bpy.data.materials.new(name=\"BottleColor\")\nbottle_color.diffuse_color = (0.1, 0.5, 0.8, 1)  # Blue color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Bottle Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=9, location=(0, 0, 4.5))\nbottle_body = bpy.context.object\nbottle_body.name = \"BottleBody\"\nbottle_body.data.materials.append(bottle_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.6, depth=1, location=(0, 0, 9.5))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Carrying Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(0, 1.6, 10))\nloop = bpy.context.object\nloop.name = \"CarryingLoop\"\nloop.data.materials.append(lid_color)\n\n# Step 5: Add Measurement Markings\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_plane_add(size=0.1, location=(1.6, 0, i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.rotation_euler[1] = 1.5708  # Rotate 90 degrees to align with the bottle\n    marking.data.materials.append(lid_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3423428478390846, "unit_n": 12, "param_ratio": 2.4166666666666665}
{"id": "dadc601b-f80a-43aa-ac76-1283188151de", "name": "Pet Water Fountain", "instruction": "How does a pet water fountain with multiple levels compare to a single-level one in terms of water flow and accessibility for different pet sizes? Create a 3D model for both versions.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwater_color = bpy.data.materials.new(name=\"Water\")\nwater_color.diffuse_color = (0.2, 0.4, 0.8, 0.5)  # Light blue water color\nfountain_color = bpy.data.materials.new(name=\"Fountain\")\nfountain_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray fountain color\n\n# Step 2: Create Single-Level Fountain\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(-2, 0, 0))\nbase_single = bpy.context.object\nbase_single.name = \"Base Single\"\nbase_single.data.materials.append(fountain_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(-2, 0, 0.15))\nwater_single = bpy.context.object\nwater_single.name = \"Water Single\"\nwater_single.data.materials.append(water_color)\n\n# Step 3: Create Multi-Level Fountain\n# Base level\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(2, 0, 0))\nbase_multi = bpy.context.object\nbase_multi.name = \"Base Multi\"\nbase_multi.data.materials.append(fountain_color)\n\n# Second level\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.15, location=(2, 0, 0.25))\nsecond_level = bpy.context.object\nsecond_level.name = \"Second Level\"\nsecond_level.data.materials.append(fountain_color)\n\n# Top level\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(2, 0, 0.45))\ntop_level = bpy.context.object\ntop_level.name = \"Top Level\"\ntop_level.data.materials.append(fountain_color)\n\n# Water in each level\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(2, 0, 0.15))\nwater_base_multi = bpy.context.object\nwater_base_multi.name = \"Water Base Multi\"\nwater_base_multi.data.materials.append(water_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(2, 0, 0.35))\nwater_second_multi = bpy.context.object\nwater_second_multi.name = \"Water Second Multi\"\nwater_second_multi.data.materials.append(water_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(2, 0, 0.5))\nwater_top_multi = bpy.context.object\nwater_top_multi.name = \"Water Top Multi\"\nwater_top_multi.data.materials.append(water_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.015109722347818, "unit_n": 8, "param_ratio": 6.25}
{"id": "bc352596-7d09-4679-8097-1c102b07691a", "name": "Spice Rack", "instruction": "Could you design a spice rack?", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05  # Make it flat\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.95, 0.6))\nback_panel = bpy.context.object\nback_panel.name = \"Back Panel\"\nback_panel.scale[2] = 0.6  # Make it tall\nback_panel.scale[1] = 0.05  # Make it thin\nback_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Shelves\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3 + i * 0.3))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale[2] = 0.05  # Make it flat\n    shelf.data.materials.append(wood_color)\n\n# Step 5: Create the Side Panels\nfor i in range(2):\n    x = 0.95 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.6))\n    side_panel = bpy.context.object\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.scale[0] = 0.05  # Make it thin\n    side_panel.scale[2] = 0.6  # Make it tall\n    side_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4312255359694817, "unit_n": 7, "param_ratio": 3.0}
{"id": "edef74a7-0762-4547-9cbd-474b5e12b3b6", "name": "Transformer", "instruction": "Design a transformer. It should have a cylindrical core with copper wire windings. Include input and output terminals and ensure the windings are evenly spaced.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncopper = bpy.data.materials.new(name=\"Copper\")\ncopper.diffuse_color = (0.72, 0.45, 0.20, 1)  # Copper color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(gray)\n\n# Step 3: Create the Windings\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.02, location=(0, 0, -0.4 + i * 0.1))\n    winding = bpy.context.object\n    winding.name = f\"Winding {i + 1}\"\n    winding.data.materials.append(copper)\n\n# Step 4: Create the Input Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(-0.3, 0, 0.5))\ninput_terminal = bpy.context.object\ninput_terminal.name = \"Input Terminal\"\ninput_terminal.data.materials.append(gray)\n\n# Step 5: Create the Output Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.3, 0, 0.5))\noutput_terminal = bpy.context.object\noutput_terminal.name = \"Output Terminal\"\noutput_terminal.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.745829164830337, "unit_n": 13, "param_ratio": 2.3076923076923075}
{"id": "ec925ad7-fda9-4442-99a2-bfd95cbea044", "name": "Toy Car", "instruction": "Make a toy car.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Car Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-1, -1, 0.5), (1, -1, 0.5), (-1, 1, 0.5), (1, 1, 0.5)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.558289029392079, "unit_n": 2, "param_ratio": 9.5}
{"id": "8042b910-0ab7-4543-a015-adb334cccad1", "name": "Circuit Breaker Panel", "instruction": "Create a circuit breaker panel with a rectangular shape. Include multiple switches for different circuits and a door that closes over the panel. The switches should be labeled with numbers.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ndoor_color = bpy.data.materials.new(name=\"Door Color\")\ndoor_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale = (1, 0.1, 2)\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Switches\nnum_switches = 6\nfor i in range(num_switches):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.4 + i * 0.2, 0.2, 0))\n    switch = bpy.context.object\n    switch.name = f\"Switch {i + 1}\"\n    switch.scale = (0.5, 0.5, 0.1)\n    switch.data.materials.append(switch_color)\n\n# Step 4: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.2, 0))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale = (1, 0.05, 2)\ndoor.data.materials.append(door_color)\n\n# Step 5: Add Labels to Switches\nfor i in range(num_switches):\n    bpy.ops.object.text_add(location=(-0.4 + i * 0.2, 0.3, 0))\n    label = bpy.context.object\n    label.name = f\"Label {i + 1}\"\n    label.data.body = str(i + 1)\n    label.scale = (0.2, 0.2, 0.2)\n    label.rotation_euler = (0, 0, 0)\n    label.location.z -= 0.1  # Adjust the height of the label\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.7256660955097067, "unit_n": 4, "param_ratio": 7.5}
{"id": "a85b689d-6c0e-4280-893f-43801c816740", "name": "Winter Hat", "instruction": "Design a winter hat. The hat should have a round, snug-fitting base that wraps around the head, with a height of about 8 inches. Add a fold-over cuff at the bottom, about 2 inches wide. The top of the hat should be rounded, with a small pom-pom attached.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\npom_pom_color = bpy.data.materials.new(name=\"PomPomColor\")\npom_pom_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Base of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.6, location=(0, 0, 0.3))\nbase = bpy.context.object\nbase.name = \"HatBase\"\nbase.data.materials.append(hat_color)\n\n# Step 3: Create the Fold-over Cuff\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 0.1))\ncuff = bpy.context.object\ncuff.name = \"Cuff\"\ncuff.data.materials.append(hat_color)\n\n# Step 4: Create the Top of the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.6))\ntop = bpy.context.object\ntop.name = \"HatTop\"\ntop.scale[2] = 0.5  # Flatten the sphere to make it rounded\ntop.data.materials.append(hat_color)\n\n# Step 5: Create the Pom-pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.1))\npom_pom = bpy.context.object\npom_pom.name = \"PomPom\"\npom_pom.data.materials.append(pom_pom_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.893103527935773, "unit_n": 4, "param_ratio": 7.0}
{"id": "2ac05abd-fda2-40c8-8a56-f971fd6b8e9c", "name": "Bird Feeder", "instruction": "Could you create a 3D model of a bird feeder? It should have a cylindrical main body with a roof on top to shield it from rain. Add a perch for birds to stand on while they eat.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 3: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.15))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0.5, 0, 0.3), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8220498133032224, "unit_n": 3, "param_ratio": 6.0}
{"id": "76aef47d-9dcf-445b-a099-1d3adeaf8e3e", "name": "Baguette vs. Bread Loaf", "instruction": "Compare a baguette to a bread loaf in your model by size and shape.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Baguette\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2.0, location=(-1, 0, 0))\nbaguette = bpy.context.object\nbaguette.name = \"Baguette\"\nbaguette.data.materials.append(bread_color)\n\n# Step 3: Create the Bread Loaf\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 0, 0))\nbread_loaf = bpy.context.object\nbread_loaf.name = \"Bread Loaf\"\nbread_loaf.scale = (1, 0.5, 0.5)\nbread_loaf.data.materials.append(bread_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0181043920591075, "unit_n": 2, "param_ratio": 7.0}
{"id": "1ebe741e-fb5b-4a61-823d-5a259a3f90ad", "name": "Pizza", "instruction": "Let's create a pizza. The pizza should be round with a slightly raised crust. It should have a layer of tomato sauce, topped with cheese and pepperoni slices evenly distributed across the surface.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.2, 0.2, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.845547245496428, "unit_n": 4, "param_ratio": 10.0}
{"id": "92dc7ff0-4d74-48ac-b61c-863c4ddb1bfa", "name": "Orange", "instruction": "Can you model an orange for me?", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\norange_color = bpy.data.materials.new(name=\"Orange Color\")\norange_color.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color\n\n# Step 2: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 9.0}
{"id": "93d9df01-c1fb-47f8-b1d1-f444a54f2ada", "name": "Thermometer", "instruction": "Hi! Can you design a 3D model of a thermometer? It should be a simple, straight tube with a bulb at one end and a scale along the side.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_color = bpy.data.materials.new(name=\"Glass\")\nglass_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Semi-transparent glass color\n\n# Step 2: Create the Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\ntube = bpy.context.object\ntube.name = \"Tube\"\ntube.data.materials.append(glass_color)\n\n# Step 3: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(glass_color)\n\n# Step 4: Create the Scale\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(0.1, 0, 1))\nscale = bpy.context.object\nscale.name = \"Scale\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(0.1, 1, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Set the scale to be white for visibility\nscale_color = bpy.data.materials.new(name=\"ScaleColor\")\nscale_color.diffuse_color = (1, 1, 1, 1)  # White color\nscale.data.materials.append(scale_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.504966093864046, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "5fd77021-5a10-4771-8845-c7886927eae8", "name": "Pet Food Bowl", "instruction": "Create a pet food bowl. It should be circular with a slightly raised edge.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.15, location=(0, 0, 0.025))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Difference to Create the Raised Edge\nmod_bool = bowl_base.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner bowl mesh as it's no longer needed\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071983, "unit_n": 2, "param_ratio": 5.0}
{"id": "0f6b2b60-71dd-4400-808f-ec3884693c81", "name": "Hat", "instruction": "Create a hat. The hat should have a wide brim and a rounded top. The brim should be about 3 inches wide.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the hat\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Create the Rounded Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.75))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale[2] = 0.75  # Flattening the sphere to give a rounded top shape\ntop.data.materials.append(hat_color)\n\n# Position the Top on the Brim\ntop.location.z = 0.5  # Slightly raised to sit on the brim", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.264395185148658, "unit_n": 2, "param_ratio": 7.0}
{"id": "2c40d3d0-c36c-409e-8dba-caacf340b84b", "name": "Pizza", "instruction": "Create a 3D model of a pizza. It should be a perfect circle with a slightly raised edge. Add visible slices of pepperoni and a scattering of green bell pepper pieces on top.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_crust_color = bpy.data.materials.new(name=\"Pizza Crust\")\npizza_crust_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_crust_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.05))\npizza_edge = bpy.context.object\npizza_edge.name = \"Pizza Edge\"\npizza_edge.data.materials.append(pizza_crust_color)\n\n# Step 4: Add Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.06))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Add Bell Pepper Pieces\nnum_bell_pepper = 12\nfor i in range(num_bell_pepper):\n    angle = i * (2 * math.pi / num_bell_pepper)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(x, y, 0.07))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.4428500936202235, "unit_n": 4, "param_ratio": 8.5}
{"id": "36964ee0-36f1-4399-8eed-c78fe3f7c64e", "name": "Coffee Grinder", "instruction": "Please design a 3D model of a coffee grinder. It should have a hopper on top for beans and a container at the bottom for ground coffee.", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray metal color\nplastic_color = bpy.data.materials.new(name=\"Plastic\")\nplastic_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark plastic color\n\n# Step 2: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, radius2=0.1, depth=0.6, location=(0, 0, 1))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(plastic_color)\n\n# Step 3: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.3))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.data.materials.append(metal_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.5, location=(0, 0, -0.75))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(plastic_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.928901911276045, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "282a1dae-10d5-4447-b74b-4bed85a2bcf0", "name": "Sofa", "instruction": "Design a sofa that can comfortably seat three people. It should have a backrest and armrests on both sides. The seat should be cushioned and wide enough for three people to sit side by side. Include legs underneath to elevate the sofa off the ground.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale[0] = 2.0  # Width\nseat.scale[1] = 1.0  # Depth\nseat.scale[2] = 0.2  # Height\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, -1.0, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2.0  # Width\nbackrest.scale[1] = 0.2  # Depth\nbackrest.scale[2] = 0.8  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2.0 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2.5, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2  # Width\n    armrest.scale[1] = 1.0  # Depth\n    armrest.scale[2] = 0.6  # Height\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Legs\nfor i in range(4):\n    x = 1.8 * (i % 2) - 0.9\n    y = 0.8 * (i // 2) - 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, 0.2))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.5726793001395225, "unit_n": 8, "param_ratio": 2.75}
{"id": "c750e732-5ed0-46aa-8b0b-130b65127538", "name": "Umbrella", "instruction": "Design an umbrella. It should have a collapsible canopy and a straight handle.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.1, 0.1, 0.7, 1)  # Blue color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=0.5, location=(0, 0, 1))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.1429574603893564, "unit_n": 2, "param_ratio": 11.0}
{"id": "4809237d-6bb2-4045-a1aa-dd0127c72d9b", "name": "Board Game Piece", "instruction": "Create a game piece for a board game. It should be a small, pawn-like figure with a round base.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.0))\nhead = bpy.context.object\nhead.name = \"Head\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.955701066249697, "unit_n": 3, "param_ratio": 4.333333333333333}
{"id": "6ff76445-4c55-4ef5-a554-b8e284fca22d", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker. It should be a rectangular box with a switch on the front. The switch should be positioned in the center and easily accessible.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbox_color = bpy.data.materials.new(name=\"BoxColor\")\nbox_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Rectangular Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbox = bpy.context.object\nbox.name = \"CircuitBreakerBox\"\nbox.scale = (1, 0.5, 1.5)\nbox.data.materials.append(box_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.55, 0))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.05, 0.4)\nswitch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "f3a940ed-9f04-4cf0-9c84-d9a9b31bd0bc", "name": "Syringe", "instruction": "Generate a model of a syringe, complete with a plunger and a needle. The scale should be accurate to a typical medical syringe.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Barrel of the Syringe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0, 0, 0.4))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel_material = bpy.data.materials.new(name=\"BarrelMaterial\")\nbarrel_material.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray with some transparency\nbarrel.data.materials.append(barrel_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.7, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger_material = bpy.data.materials.new(name=\"PlungerMaterial\")\nplunger_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray\nplunger.data.materials.append(plunger_material)\n\n# Create the Plunger Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=(0, 0, -0.3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(plunger_material)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.5, location=(0, 0, 0.85))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle_material = bpy.data.materials.new(name=\"NeedleMaterial\")\nneedle_material.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray\nneedle.data.materials.append(needle_material)\n\n# Create the Needle Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.005, depth=0.1, location=(0, 0, 1.1))\nneedle_tip = bpy.context.object\nneedle_tip.name = \"NeedleTip\"\nneedle_tip.data.materials.append(needle_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.538696849152386, "unit_n": 5, "param_ratio": 8.0}
{"id": "4bae6538-145f-445b-9ee0-adc28c9c0ad8", "name": "Sandwich", "instruction": "Make a simple sandwich model. It should have two slices of bread, a slice of cheese, and a layer of lettuce.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.35, 1)  # Cheese color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Lettuce color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Cheese Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a slice\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer\nlettuce.data.materials.append(lettuce_color)\n\n# Step 5: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.8804694994091986, "unit_n": 4, "param_ratio": 7.75}
{"id": "fc60ee28-f6bc-401e-87d1-8a3c12afcc55", "name": "Sandwich", "instruction": "Design a sandwich. It should have two slices of bread. Add layers of lettuce, tomato, cheese, and a slice of meat. Include a toothpick on top to hold it together.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ntoothpick_color = bpy.data.materials.new(name=\"Toothpick\")\ntoothpick_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light wood color\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.scale[2] = 0.1\nmeat.name = \"Meat\"\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)\n\n# Step 8: Create the Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 1.2))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\ntoothpick.data.materials.append(toothpick_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.094549598808184, "unit_n": 7, "param_ratio": 8.428571428571429}
{"id": "9285295d-0663-4955-869e-953b20fb744f", "name": "Blender Jar", "instruction": "Create a blender jar with a clear body and measurement markings on the side. It should have a secure lid with a removable cap for adding ingredients while blending. The base should be designed to fit snugly onto a blender motor.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_glass = bpy.data.materials.new(name=\"Clear Glass\")\nclear_glass.diffuse_color = (1, 1, 1, 0.1)  # Clear glass color with transparency\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the lid\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for the base\n\n# Step 2: Create the Jar Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=3, location=(0, 0, 1.5))\njar_body = bpy.context.object\njar_body.name = \"Jar Body\"\njar_body.data.materials.append(clear_glass)\n\n# Step 3: Create the Measurement Markings\nfor i in range(1, 6):\n    bpy.ops.mesh.primitive_plane_add(size=0.1, location=(1.05, 0, i * 0.5))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.rotation_euler = (0, 0, 1.5708)  # Rotate to align with the jar\n    marking.data.materials.append(clear_glass)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 3.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, 3.8))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(lid_color)\n\n# Step 6: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.955396496592704, "unit_n": 9, "param_ratio": 4.333333333333333}
{"id": "81be387f-d408-4cce-8874-cc0bfdcf9090", "name": "Geometric Mural", "instruction": "Please create a 3D representation of a geometric mural. It should feature a large hexagon surrounded by a series of triangles, rectangles, and more hexagons in a tessellated pattern. Ensure the shapes connect seamlessly and cover an expansive surface area, resembling a modern art installation.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhexagon_color = bpy.data.materials.new(name=\"Hexagon Color\")\nhexagon_color.diffuse_color = (0.1, 0.5, 0.8, 1)  # Light blue color\ntriangle_color = bpy.data.materials.new(name=\"Triangle Color\")\ntriangle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nrectangle_color = bpy.data.materials.new(name=\"Rectangle Color\")\nrectangle_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Function to create a hexagon\ndef create_hexagon(location, size):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=size, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hexagon_color)\n\n# Function to create a triangle\ndef create_triangle(location, size):\n    bpy.ops.mesh.primitive_circle_add(vertices=3, radius=size, fill_type='NGON', location=location)\n    triangle = bpy.context.object\n    triangle.data.materials.append(triangle_color)\n\n# Function to create a rectangle\ndef create_rectangle(location, size_x, size_y):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    rectangle = bpy.context.object\n    rectangle.scale = (size_x, size_y, 1)\n    rectangle.data.materials.append(rectangle_color)\n\n# Step 2: Create the central hexagon\ncreate_hexagon((0, 0, 0), 2)\n\n# Step 3: Create surrounding shapes\n# Hexagons\nfor i in range(6):\n    angle = math.radians(60 * i)\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    create_hexagon((x, y, 0), 2)\n\n# Triangles\nfor i in range(6):\n    angle = math.radians(60 * i + 30)\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    create_triangle((x, y, 0), 1.5)\n\n# Rectangles\nfor i in range(6):\n    angle = math.radians(60 * i + 15)\n    x = 6 * math.cos(angle)\n    y = 6 * math.sin(angle)\n    create_rectangle((x, y, 0), 1, 2)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9933126130926526, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "2cf25f5e-57de-440f-99fc-6da2e32e5643", "name": "Notebook", "instruction": "Create a notebook. It should be rectangular with a spiral binding on the side. Include lined pages inside. Add a small elastic band to keep it closed when not in use. The cover should have a simple design with a space for writing a title.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0, 0, 0, 1)  # Black color\nelastic_color = bpy.data.materials.new(name=\"Elastic Color\")\nelastic_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npages = bpy.context.object\npages.scale = (0.9, 1.4, 0.04)\npages.name = \"Pages\"\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(location=(-1.05, -1.4 + i * 0.3, 0.1), rotation=(math.pi / 2, 0, 0), major_radius=0.05, minor_radius=0.02)\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)\n\n# Step 5: Create the Elastic Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=3.2, location=(1.1, 0, 0.1), rotation=(0, math.pi / 2, 0))\nelastic = bpy.context.object\nelastic.name = \"Elastic Band\"\nelastic.data.materials.append(elastic_color)\n\n# Step 6: Create the Title Space\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.3, 0.15))\ntitle_space = bpy.context.object\ntitle_space.scale = (0.8, 0.2, 0.01)\ntitle_space.name = \"Title Space\"\ntitle_space.data.materials.append(page_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.530236047070166, "unit_n": 14, "param_ratio": 3.4285714285714284}
{"id": "bc6dd043-c6f3-4942-a7c5-48ac063e6b3d", "name": "Maracas", "instruction": "Please create a 3D model of a pair of maracas, each with a handle and an oval-shaped body.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmaraca_color = bpy.data.materials.new(name=\"MaracaColor\")\nmaraca_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the body\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color for the handle\n\n# Function to create a maraca\ndef create_maraca(location):\n    # Create the body (oval shape)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    body = bpy.context.object\n    body.name = \"MaracaBody\"\n    body.scale[2] = 1.5  # Make it oval\n    body.data.materials.append(maraca_color)\n    \n    # Create the handle\n    handle_location = (location[0], location[1], location[2] - 0.6)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=handle_location)\n    handle = bpy.context.object\n    handle.name = \"MaracaHandle\"\n    handle.data.materials.append(handle_color)\n\n# Create two maracas\ncreate_maraca(location=(0.5, 0, 0))\ncreate_maraca(location=(-0.5, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.493098355529256, "unit_n": 2, "param_ratio": 6.5}
{"id": "e7118606-c7bb-4fbb-ad62-3ef78a4abb4e", "name": "Bird Feeder", "instruction": "Create a bird feeder with a cylindrical reservoir for seeds and a tray at the bottom for birds to perch and eat. Add a hook at the top for hanging. Keep the design simple and functional for easy refilling.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Seed Reservoir\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 1))\nreservoir = bpy.context.object\nreservoir.name = \"Seed Reservoir\"\n\n# Step 3: Create the Tray\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.1, location=(0, 0, 0))\ntray = bpy.context.object\ntray.name = \"Tray\"\n\n# Step 4: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, 2.5), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5069117198293096, "unit_n": 3, "param_ratio": 6.0}
{"id": "82c1d13c-3ca6-4e75-a874-ea65dcaf40de", "name": "Checkered Pattern", "instruction": "Design a checkered pattern with alternating black and white squares.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Checkered Pattern\nsize = 8  # Define the size of the checkered pattern (8x8)\nsquare_size = 1  # Define the size of each square\n\nfor i in range(size):\n    for j in range(size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(black)\n        else:\n            square.data.materials.append(white)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "de7b0eb6-b6f4-44b1-a744-1f375b949bfd", "name": "Logo Design", "instruction": "Design a logo for a tech company. The logo should be simple and modern, incorporating the company's initials. The logo should be suitable for use on business cards, websites, and promotional materials.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ntech_blue = bpy.data.materials.new(name=\"Tech Blue\")\ntech_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Tech blue color\n\n# Step 2: Create the first initial (T)\nbpy.ops.object.text_add(location=(-1, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"T\"\ntext_obj.data.size = 1\ntext_obj.data.extrude = 0.1\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.data.materials.append(tech_blue)\n\n# Step 3: Create the second initial (C)\nbpy.ops.object.text_add(location=(1, 0, 0))\ntext_obj = bpy.context.object\ntext_obj.data.body = \"C\"\ntext_obj.data.size = 1\ntext_obj.data.extrude = 0.1\ntext_obj.data.align_x = 'CENTER'\ntext_obj.data.align_y = 'CENTER'\ntext_obj.data.materials.append(tech_blue)\n\n# Step 4: Adjust the rotation and positioning\nfor obj in bpy.context.scene.objects:\n    if obj.type == 'FONT':\n        obj.rotation_euler = (0, 0, 0)\n        obj.location.z = 0", "color_brightness": "Medium Bright", "verify": "human", "entropy": 0.0, "unit_n": 2, "param_ratio": 5.5}
{"id": "308ad31a-1693-46a3-8527-8a9a0e171bad", "name": "Drumstick", "instruction": "Hey there, can you make a 3D model of a drumstick? The drumstick should have a tapered shape, thicker at one end and gradually thinning out towards the tip.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drumstick\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.05, radius2=0.01, depth=1.0, location=(0, 0, 0.5))\ndrumstick = bpy.context.object\ndrumstick.name = \"Drumstick\"\n\n# Step 3: Add Material to Drumstick\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ndrumstick.data.materials.append(wood_material)", "color_brightness": "Dark", "verify": "human", "entropy": 3.030560671628889, "unit_n": 1, "param_ratio": 12.0}
{"id": "ad8d48b4-c910-4afe-ac69-30c058500d1d", "name": "Scarf", "instruction": "Create a scarf with a simple, rectangular shape.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Scarf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf = bpy.context.object\nscarf.name = \"Scarf\"\n\n# Scale the cube to make it rectangular like a scarf\nscarf.scale[0] = 0.1  # width\nscarf.scale[1] = 5.0  # length\nscarf.scale[2] = 0.05  # thickness\n\n# Define the color for the scarf\nscarf_material = bpy.data.materials.new(name=\"ScarfMaterial\")\nscarf_material.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nscarf.data.materials.append(scarf_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "a0e18e8d-3559-45d9-b879-f7c4ecc1dad1", "name": "Apple vs. Orange", "instruction": "Compare an apple and an orange. The apple should be round and smooth, while the orange should be spherical with a textured surface. Place them side by side.", "category": "Games, toys, tents and sports goods", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-1.5, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple_material = bpy.data.materials.new(name=\"AppleMaterial\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(1.5, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange_material = bpy.data.materials.new(name=\"OrangeMaterial\")\norange_material.diffuse_color = (1, 0.5, 0, 1)  # Orange color\norange.data.materials.append(orange_material)\n\n# Step 4: Add Texture to the Orange\nbpy.ops.object.modifier_add(type='DISPLACE')\ntexture = bpy.data.textures.new(\"OrangeTexture\", type='CLOUDS')\norange.modifiers[\"Displace\"].texture = texture\norange.modifiers[\"Displace\"].strength = 0.1", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.7155778021869885, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "17561272-3919-40b4-b47f-2b8169af51d9", "name": "Chocolate Chip Cookies", "instruction": "Could you generate a batch of chocolate chip cookies that appear freshly baked, with visible chocolate chips on the top?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie\")\ncookie_color.diffuse_color = (0.82, 0.71, 0.55, 1)  # Cookie color\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown chocolate chip color\n\n# Step 2: Create the Cookies\nfor i in range(5):\n    x = random.uniform(-2, 2)\n    y = random.uniform(-2, 2)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(x, y, 0))\n    cookie = bpy.context.object\n    cookie.name = f\"Cookie {i + 1}\"\n    cookie.scale[2] = 0.2  # Flatten the sphere to make it look like a cookie\n    cookie.data.materials.append(cookie_color)\n    \n    # Step 3: Add Chocolate Chips\n    for _ in range(10):\n        chip_x = random.uniform(-0.4, 0.4)\n        chip_y = random.uniform(-0.4, 0.4)\n        chip_z = 0.2  # Place the chips on top of the cookie\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x + chip_x, y + chip_y, chip_z))\n        chip = bpy.context.object\n        chip.name = f\"Chocolate Chip {i + 1}\"\n        chip.data.materials.append(chocolate_chip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.790663608717038, "unit_n": 55, "param_ratio": 0.32727272727272727}
{"id": "096b4578-3629-4e68-b58b-ffc53ecd74c1", "name": "Geometric Pattern", "instruction": "Generate a geometric pattern consisting of interlocking hexagons.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nradius = 1\ndepth = 0.1\nrows = 5\ncols = 5\nhex_height = math.sqrt(3) * radius\n\n# Step 2: Create the Hexagons\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * radius\n        y = row * hex_height\n        if col % 2 == 1:\n            y += hex_height / 2\n        bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=depth, location=(x, y, 0))\n        hexagon = bpy.context.object\n        hexagon.name = f\"Hexagon_{row}_{col}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 4.0}
{"id": "1146fc0d-8b60-4723-bac3-39270edfc15c", "name": "Sandwich", "instruction": "Please design a sandwich. It should have two slices of bread with visible layers of lettuce, tomato, and deli meat.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color for tomato\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.72, 0.45, 0.20, 1)  # Brown color for deli meat\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.8))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make it a layer\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Deli Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.9))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.05  # Flatten the cube to make it a layer\nmeat.data.materials.append(meat_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.1))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "da71bdc9-877f-4e23-a567-e87a4b8d900d", "name": "Paintbrush Set", "instruction": "Let's design a set of paintbrushes. Include various types of brushes: flat, round, and angled. Each brush should have a wooden handle and a metal ferrule holding the bristles. Arrange the brushes neatly in a canvas roll-up case.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden handle color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal ferrule color\nbristle_color = bpy.data.materials.new(name=\"Bristle\")\nbristle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Bristle color\n\n# Function to create a brush\ndef create_brush(location, handle_length, handle_radius, ferrule_length, ferrule_radius, bristle_length, bristle_shape):\n    # Create handle\n    bpy.ops.mesh.primitive_cylinder_add(radius=handle_radius, depth=handle_length, location=(location[0], location[1], location[2] + handle_length / 2))\n    handle = bpy.context.object\n    handle.data.materials.append(wood_color)\n    \n    # Create ferrule\n    bpy.ops.mesh.primitive_cylinder_add(radius=ferrule_radius, depth=ferrule_length, location=(location[0], location[1], location[2] + handle_length + ferrule_length / 2))\n    ferrule = bpy.context.object\n    ferrule.data.materials.append(metal_color)\n    \n    # Create bristles\n    if bristle_shape == 'flat':\n        bpy.ops.mesh.primitive_cube_add(size=bristle_length, location=(location[0], location[1], location[2] + handle_length + ferrule_length + bristle_length / 2))\n    elif bristle_shape == 'round':\n        bpy.ops.mesh.primitive_cylinder_add(radius=ferrule_radius, depth=bristle_length, location=(location[0], location[1], location[2] + handle_length + ferrule_length + bristle_length / 2))\n    elif bristle_shape == 'angled':\n        bpy.ops.mesh.primitive_cone_add(radius1=ferrule_radius, radius2=0, depth=bristle_length, location=(location[0], location[1], location[2] + handle_length + ferrule_length + bristle_length / 2))\n    bristles = bpy.context.object\n    bristles.data.materials.append(bristle_color)\n\n# Create brushes\nbrush_types = ['flat', 'round', 'angled']\nfor i, brush_type in enumerate(brush_types):\n    create_brush(location=(i * 0.3, 0, 0), handle_length=1, handle_radius=0.05, ferrule_length=0.2, ferrule_radius=0.06, bristle_length=0.3, bristle_shape=brush_type)\n\n# Create canvas roll-up case\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0.3, 0, -0.1))\ncanvas = bpy.context.object\ncanvas.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.290750419774936, "unit_n": 6, "param_ratio": 5.833333333333333}
{"id": "ca213008-ce12-4c02-a291-e553f447c415", "name": "Juicer", "instruction": "Let's design a 3D model of a juicer. Start with a cylindrical base that houses the motor. Add a conical reamer on top for extracting juice. Include a spout on the side for pouring the juice into a glass.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nreamer_color = bpy.data.materials.new(name=\"Reamer Color\")\nreamer_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\nspout_color = bpy.data.materials.new(name=\"Spout Color\")\nspout_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Reamer\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=0.5, location=(0, 0, 1.25))\nreamer = bpy.context.object\nreamer.name = \"Reamer\"\nreamer.data.materials.append(reamer_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1, 0, 0.75), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(spout_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.016363621029454, "unit_n": 3, "param_ratio": 11.0}
{"id": "bf88bcc4-52da-4709-a262-eed6ceb689ed", "name": "Apple", "instruction": "Create a 3D model of an apple. It should be round with a small stem at the top.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the colors\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.4, 0.2, 0, 1)  # Brown color for the stem\n\n# Apply the materials\napple.data.materials.append(apple_material)\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "def85562-6fab-4e88-b15b-d683a19ec98e", "name": "Puzzle Game", "instruction": "Please create a 3D model of a puzzle game consisting of a 3x3 sliding tile grid with one tile missing to allow movement.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the tiles\ntile_color = bpy.data.materials.new(name=\"Tile Color\")\ntile_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Tiles\ntile_size = 1\ngap = 0.1\nfor row in range(3):\n    for col in range(3):\n        if not (row == 2 and col == 2):  # Leave one tile missing\n            x = col * (tile_size + gap)\n            y = row * (tile_size + gap)\n            bpy.ops.mesh.primitive_cube_add(size=tile_size, location=(x, y, 0))\n            tile = bpy.context.object\n            tile.name = f\"Tile {row * 3 + col + 1}\"\n            tile.data.materials.append(tile_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.2760976031670985, "unit_n": 9, "param_ratio": 0.8888888888888888}
{"id": "7538622c-b65e-48ff-8937-4444e9abf659", "name": "Chessboard", "instruction": "Make a 3D chessboard. It should have alternating black and white squares.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsize = 8  # 8x8 chessboard\nsquare_size = 1  # Each square is 1x1 unit\n\nfor row in range(size):\n    for col in range(size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n            \n# Move the chessboard to be centered at the origin\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "0e9ddcfd-20a6-4b35-9e49-03552242213e", "name": "Notebook", "instruction": "Create a 3D model of a notebook. It should have a rectangular cover with a spiral binding along one side.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the spiral\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.scale = (1, 0.1, 1.5)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Spiral Binding\nnum_spirals = 10\nspiral_radius = 0.05\nspiral_spacing = 0.3\n\nfor i in range(num_spirals):\n    bpy.ops.mesh.primitive_torus_add(major_radius=spiral_radius, minor_radius=spiral_radius/4, location=(-1.1, 0, -1.35 + i * spiral_spacing))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)\n    spiral.rotation_euler = (1.5708, 0, 0)  # Rotate to align with the cover\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.124966342244176, "unit_n": 2, "param_ratio": 9.0}
{"id": "391c39ae-d160-410d-83a6-bf0cda01514c", "name": "Dining Table", "instruction": "Design a 3D model of a dining table. It should be rectangular with four legs, and large enough to seat six people comfortably. Make sure the legs are positioned at the corners and the tabletop is flat and even.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntabletop = bpy.context.object\ntabletop.scale = (2, 1, 0.1)\ntabletop.name = \"Tabletop\"\ntabletop.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = 0.75\nleg_radius = 0.05\npositions = [(1.9, 0.9, leg_height / 2), (-1.9, 0.9, leg_height / 2), (1.9, -0.9, leg_height / 2), (-1.9, -0.9, leg_height / 2)]\n\nfor i, pos in enumerate(positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.21523550043143, "unit_n": 2, "param_ratio": 4.5}
{"id": "6301dcf8-83e7-489e-9a2f-0336b0c7683c", "name": "Pet Feeder", "instruction": "Design a 3D model of a pet feeder with two sections, one for food and the other for water, suitable for a small to medium-sized pet.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfood_bowl_color = bpy.data.materials.new(name=\"Food Bowl Color\")\nfood_bowl_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brownish color for food bowl\nwater_bowl_color = bpy.data.materials.new(name=\"Water Bowl Color\")\nwater_bowl_color.diffuse_color = (0.2, 0.5, 0.8, 1)  # Blueish color for water bowl\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make the base thin\n\n# Step 3: Create the Food Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.2, location=(-0.6, 0, 0))\nfood_bowl = bpy.context.object\nfood_bowl.name = \"Food Bowl\"\nfood_bowl.data.materials.append(food_bowl_color)\n\n# Step 4: Create the Water Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.2, location=(0.6, 0, 0))\nwater_bowl = bpy.context.object\nwater_bowl.name = \"Water Bowl\"\nwater_bowl.data.materials.append(water_bowl_color)\n\n# Step 5: Hollow out the Bowls\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(-0.6, 0, 0))\nfood_bowl_inner = bpy.context.object\nfood_bowl_inner.name = \"Food Bowl Inner\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.15)})\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = food_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(food_bowl_inner)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.2, location=(0.6, 0, 0))\nwater_bowl_inner = bpy.context.object\nwater_bowl_inner.name = \"Water Bowl Inner\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.15)})\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = water_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(water_bowl_inner)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.086396433890602, "unit_n": 7, "param_ratio": 5.142857142857143}
{"id": "41b4bbf7-0818-4a12-902d-39b8459e392e", "name": "Test Tube Holder", "instruction": "Create a 3D model of a test tube holder. It should have a rectangular base with multiple circular slots to hold test tubes upright. The holder should have a simple, clean design with evenly spaced slots. Ensure the slots are deep enough to securely hold the test tubes without them tipping over.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nholder_color = bpy.data.materials.new(name=\"HolderColor\")\nholder_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make the base thinner\nbase.data.materials.append(holder_color)\n\n# Step 3: Create the Slots\nslot_radius = 0.1\nslot_depth = 0.2\nrows = 3\ncols = 5\nspacing = 0.4\n\nfor i in range(rows):\n    for j in range(cols):\n        x = (j - (cols - 1) / 2) * spacing\n        y = (i - (rows - 1) / 2) * spacing\n        bpy.ops.mesh.primitive_cylinder_add(radius=slot_radius, depth=slot_depth, location=(x, y, 0))\n        slot = bpy.context.object\n        slot.name = f\"Slot_{i}_{j}\"\n        slot.data.materials.append(holder_color)\n        # Boolean modifier to create holes in the base\n        bool_mod = base.modifiers.new(name=f\"Boolean_{i}_{j}\", type='BOOLEAN')\n        bool_mod.operation = 'DIFFERENCE'\n        bool_mod.object = slot\n        bpy.context.view_layer.objects.active = base\n        bpy.ops.object.modifier_apply(modifier=bool_mod.name)\n        bpy.data.objects.remove(slot)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.80866513632489, "unit_n": 2, "param_ratio": 6.0}
{"id": "92f272df-6926-4a0c-ae6c-4f27318d3528", "name": "Sandwich", "instruction": "Design a sandwich. It should have two slices of bread with lettuce, tomato, and cheese in between.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Bread color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Lettuce color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Tomato color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Cheese color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "b1191abd-28fa-4e7a-af12-05a4fae04907", "name": "Cat Bed", "instruction": "Create a 3D model of a cat bed. It should be round and have raised edges. Compare the height of the edges to the diameter of the bed to ensure it is proportional. The bed should be large enough for a cat to curl up comfortably.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brownish color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.2, location=(0, 0, 0.15))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.492526358172097, "unit_n": 2, "param_ratio": 7.5}
{"id": "be875369-9f03-4d16-9ce8-619b8381a640", "name": "External Hard Drive", "instruction": "Create an external hard drive.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the main body of the hard drive\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Hard Drive Body\"\nbody.scale = (1.5, 1, 0.2)  # Scale to make it look like a hard drive\nbody.data.materials.append(black)\n\n# Step 3: Create the USB port\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.6, 0, -0.15))\nusb_port = bpy.context.object\nusb_port.name = \"USB Port\"\nusb_port.scale = (0.2, 0.1, 0.05)  # Scale to make it look like a USB port\nusb_port.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 6.5}
{"id": "d755d10b-2139-42be-bd1f-1958f066d25d", "name": "Sofa", "instruction": "Could you design a sofa with three seats, armrests on both sides, and a backrest? The sofa should also have cushions on each seat and a simple base. Make sure it looks comfortable and inviting for a living room setting.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale[0] = 1.5  # Length\nbase.scale[1] = 0.5  # Width\nbase.scale[2] = 0.25  # Height\nbase.name = \"Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 0.75))\nbackrest = bpy.context.object\nbackrest.scale[0] = 1.5  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 0.5  # Height\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.5))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 0.5  # Width\n    armrest.scale[2] = 0.5  # Height\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.55))\n    cushion = bpy.context.object\n    cushion.scale[0] = 0.45  # Length\n    cushion.scale[1] = 0.45  # Width\n    cushion.scale[2] = 0.15  # Height\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.641403233043423, "unit_n": 7, "param_ratio": 3.7142857142857144}
{"id": "f9c73caf-a95d-466e-958a-db61b3fa1a8f", "name": "Apple", "instruction": "Could you create a 3D model of an apple? Make it a typical round shape with a small stem at the top.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "95ef1181-0018-42ac-aea3-22b2d0d16092", "name": "Sandwich", "instruction": "Design a sandwich. The sandwich should have two slices of bread with visible layers of filling in between.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.80, 0.20, 0.20, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.scale[2] = 0.05  # Make it thinner than bread\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.6287476860138907, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "382513e8-a1de-4a48-9882-415fa5dbc1ec", "name": "Skateboard", "instruction": "Design a skateboard.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeck_color = bpy.data.materials.new(name=\"Deck Color\")\ndeck_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.scale[0] = 2.5\ndeck.scale[1] = 0.5\ndeck.scale[2] = 0.1\ndeck.name = \"Deck\"\ndeck.data.materials.append(deck_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(-2, 0.6, -0.1), (2, 0.6, -0.1), (-2, -0.6, -0.1), (2, -0.6, -0.1)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=pos, rotation=(1.5708, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.793224989482931, "unit_n": 2, "param_ratio": 9.5}
{"id": "722532fb-4a45-4057-af48-eb2a2da8b5fd", "name": "Logo", "instruction": "Can you create a 3D model of a logo? Imagine it as a combination of geometric shapes forming an abstract design. It should be symmetrical and have a balanced composition. The logo should be simple yet recognizable from different angles.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Central Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Central Sphere\"\nsphere.data.materials.append(blue)\n\n# Step 3: Create the Surrounding Cylinders\nfor i in range(4):\n    angle = i * (math.pi / 2)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(x, y, 0))\n    cylinder = bpy.context.object\n    cylinder.name = f\"Cylinder {i + 1}\"\n    cylinder.data.materials.append(red)\n\n# Step 4: Create the Connecting Cubes\nfor i in range(4):\n    angle = i * (math.pi / 2) + (math.pi / 4)\n    x = 1.06 * math.cos(angle)\n    y = 1.06 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, y, 0))\n    cube = bpy.context.object\n    cube.name = f\"Cube {i + 1}\"\n    cube.data.materials.append(blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.640850264343408, "unit_n": 9, "param_ratio": 2.5555555555555554}
{"id": "f08983a8-d3d8-43e4-8530-24258acd6f7c", "name": "Sandwich", "instruction": "Please generate a 3D model of a sandwich with layers of bread, meat, cheese, and vegetables.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.8, 0.7, 0.5, 1)  # Light brown color for bread\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color for meat\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.1, 1)  # Yellow color for cheese\nvegetable_color = bpy.data.materials.new(name=\"Vegetable\")\nvegetable_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for vegetables\n\n# Step 2: Create the Bottom Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.2))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1\nmeat.data.materials.append(meat_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Vegetable Layer\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.5))\nvegetable = bpy.context.object\nvegetable.name = \"Vegetable\"\nvegetable.scale[2] = 0.05\nvegetable.data.materials.append(vegetable_color)\n\n# Step 6: Create the Top Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0297120809130704, "unit_n": 5, "param_ratio": 8.0}
{"id": "17131b71-bd05-480b-b57d-f4f235d4393c", "name": "Pizza", "instruction": "How would you describe the appearance of a classic pepperoni pizza?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for the crust\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for the cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for the pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.02, location=(0, 0, 0.05))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.07))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0.5, 0), (-0.5, 0), (0, 0.5), (0, -0.5)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.09))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.593870249279332, "unit_n": 4, "param_ratio": 10.0}
{"id": "9344d6cd-0227-43f5-a3b3-4bcf13b9d0e5", "name": "Modem", "instruction": "Create a 3D model of a modem. It should be rectangular with indicator lights on the front.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Modem Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmodem_body = bpy.context.object\nmodem_body.name = \"Modem Body\"\nmodem_body.scale = (1.5, 0.5, 0.2)\nmodem_body.data.materials.append(black)\n\n# Step 3: Create the Indicator Lights\nfor i in range(5):\n    x = -0.6 + i * 0.3\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 0.55, 0.6))\n    light = bpy.context.object\n    light.name = f\"Indicator Light {i + 1}\"\n    light.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.874854483535711, "unit_n": 6, "param_ratio": 3.0}
{"id": "90b875cb-7a8c-431d-9da5-05aa56dd7dbb", "name": "Wall Mirror", "instruction": "Please create a basic round wall mirror with a thin frame, suitable for everyday use.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the frame\n\nmirror_color = bpy.data.materials.new(name=\"Mirror Color\")\nmirror_color.diffuse_color = (1, 1, 1, 1)  # White color for the mirror\n\n# Step 2: Create the Mirror\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nmirror = bpy.context.object\nmirror.name = \"Mirror\"\nmirror.data.materials.append(mirror_color)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(frame_color)\n\n# Step 4: Boolean Difference to create the thin frame\nbool_mod = frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = mirror\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner mirror mesh used for boolean operation\nbpy.data.objects.remove(mirror, do_unlink=True)\n\n# Create the actual mirror inside the frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(0, 0, 0))\ninner_mirror = bpy.context.object\ninner_mirror.name = \"Inner Mirror\"\ninner_mirror.data.materials.append(mirror_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.144724830293389, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "8aec3438-1915-4085-a430-c9023626f7e7", "name": "Hammer", "instruction": "Create a hammer with a wooden handle and a metal head. The handle should be 14 inches long, and the head should be 5 inches long.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=14, location=(0, 0, 7))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood_color)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 14.5))\nhead = bpy.context.object\nhead.scale = (2.5, 0.5, 0.5)  # Adjusting the dimensions to make it 5 inches long\nhead.name = \"Head\"\nhead.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.525380255815605, "unit_n": 2, "param_ratio": 9.5}
{"id": "6b5fc7b9-31d4-4fdd-9f01-ffc97c395cbd", "name": "Tambourine", "instruction": "Design a tambourine with a circular frame and several pairs of small metal jingles around its edge.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"FrameColor\")\nframe_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the frame\njingle_color = bpy.data.materials.new(name=\"JingleColor\")\njingle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the jingles\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Jingles\nnum_jingles = 8\nfor i in range(num_jingles):\n    angle = i * (2 * math.pi / num_jingles)\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.05), rotation=(math.pi/2, 0, 0))\n    jingle = bpy.context.object\n    jingle.name = f\"Jingle {i + 1}\"\n    jingle.data.materials.append(jingle_color)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, -0.05), rotation=(math.pi/2, 0, 0))\n    jingle = bpy.context.object\n    jingle.name = f\"Jingle {i + 1} Bottom\"\n    jingle.data.materials.append(jingle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.9704470173262205, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "2e9c6fd3-8a43-4090-b86c-ac031fd0fada", "name": "Light Bulb", "instruction": "Construct a standard light bulb with a screw base and a round bulbous top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_material = bpy.data.materials.new(name=\"Glass\")\nglass_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent white for the bulb\n\nmetal_material = bpy.data.materials.new(name=\"Metal\")\nmetal_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray for the screw base\n\n# Step 2: Create the Bulbous Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.75))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(glass_material)\n\n# Step 3: Create the Screw Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_material)\n\n# Step 4: Create the Screw Threads\nbpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.05, location=(0, 0, 0))\nthread1 = bpy.context.object\nthread1.name = \"Thread 1\"\nthread1.data.materials.append(metal_material)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.05, location=(0, 0, 0.1))\nthread2 = bpy.context.object\nthread2.name = \"Thread 2\"\nthread2.data.materials.append(metal_material)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.05, location=(0, 0, 0.2))\nthread3 = bpy.context.object\nthread3.name = \"Thread 3\"\nthread3.data.materials.append(metal_material)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.05, location=(0, 0, 0.3))\nthread4 = bpy.context.object\nthread4.name = \"Thread 4\"\nthread4.data.materials.append(metal_material)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.25, minor_radius=0.05, location=(0, 0, 0.4))\nthread5 = bpy.context.object\nthread5.name = \"Thread 5\"\nthread5.data.materials.append(metal_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.129565773998323, "unit_n": 7, "param_ratio": 6.285714285714286}
{"id": "9fbe617e-5d8d-4116-b181-b634100602e6", "name": "Cake", "instruction": "Start with a round, three-layer cake. Each layer should be the same size and evenly stacked. Cover the entire cake with a smooth layer of frosting. Add decorative piping around the edges of each layer. Place a few edible flowers on top for decoration. Ensure the cake looks visually appealing and ready for a celebration.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfrosting = bpy.data.materials.new(name=\"Frosting\")\nfrosting.diffuse_color = (1, 0.9, 0.8, 1)  # Light frosting color\npiping = bpy.data.materials.new(name=\"Piping\")\npiping.diffuse_color = (1, 0.8, 0.8, 1)  # Slightly darker piping color\nflower = bpy.data.materials.new(name=\"Flower\")\nflower.diffuse_color = (1, 0.5, 0.5, 1)  # Pink flower color\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, i * 0.3))\n    layer = bpy.context.object\n    layer.name = f\"Layer {i + 1}\"\n    layer.data.materials.append(frosting)\n\n# Step 3: Create the Decorative Piping\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=1.05, minor_radius=0.05, location=(0, 0, i * 0.3 + 0.15))\n    pipe = bpy.context.object\n    pipe.name = f\"Piping {i + 1}\"\n    pipe.data.materials.append(piping)\n\n# Step 4: Add Edible Flowers on Top\nfor i in range(5):\n    angle = i * (2 * 3.14159 / 5)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.9))\n    flower_obj = bpy.context.object\n    flower_obj.name = f\"Flower {i + 1}\"\n    flower_obj.data.materials.append(flower)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.801166487694697, "unit_n": 11, "param_ratio": 2.6363636363636362}
{"id": "6bd8b774-3b56-4de1-a9e4-daf6563560a5", "name": "Coffee Table", "instruction": "Create a rectangular coffee table with four straight legs and a flat top.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.scale[0] = 1.5  # Scale along X-axis\ntable_top.scale[1] = 0.75  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\ntable_top.name = \"Table Top\"\n\n# Step 3: Create the Legs\nleg_height = 0.5\nleg_radius = 0.05\npositions = [(-1.4, -0.7, leg_height / 2), (1.4, -0.7, leg_height / 2), (-1.4, 0.7, leg_height / 2), (1.4, 0.7, leg_height / 2)]\n\nfor i, pos in enumerate(positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.21523550043143, "unit_n": 2, "param_ratio": 2.0}
{"id": "7a9588c5-fcde-447f-b72e-3c1e82063823", "name": "Bird Feeder", "instruction": "Design a 3D bird feeder for me.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Pillar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\npillar = bpy.context.object\npillar.name = \"Pillar\"\npillar.data.materials.append(wood_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=1.2, depth=0.8, location=(0, 0, 2.4))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)\n\n# Step 5: Create the Feeding Tray\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.5))\ntray = bpy.context.object\ntray.name = \"Tray\"\ntray.data.materials.append(wood_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.50311275513413, "unit_n": 4, "param_ratio": 6.25}
{"id": "0d91fd98-70c1-46f4-bcd8-655c17d6e87d", "name": "Citrus Juicer", "instruction": "I need a 3D model of a citrus juicer. It should have a conical reamer at the top for extracting juice. Below the reamer, there should be a container to collect the juice. The container should have a spout for easy pouring. Ensure the juicer is easy to grip and use.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplastic_orange = bpy.data.materials.new(name=\"Plastic Orange\")\nplastic_orange.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color\nplastic_white = bpy.data.materials.new(name=\"Plastic White\")\nplastic_white.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color\n\n# Step 2: Create the Conical Reamer\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, radius2=0, depth=0.6, location=(0, 0, 0.3))\nreamer = bpy.context.object\nreamer.name = \"Reamer\"\nreamer.data.materials.append(plastic_orange)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=1.0, depth=1.0, location=(0, 0, -0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(plastic_white)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=0.4, location=(1.0, 0, -0.3), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(plastic_white)\n\n# Step 5: Create the Grip\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=1.0, location=(-1.2, 0, -0.5), rotation=(0, math.pi/2, 0))\ngrip = bpy.context.object\ngrip.name = \"Grip\"\ngrip.data.materials.append(plastic_orange)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9998776943137355, "unit_n": 4, "param_ratio": 10.25}
{"id": "c596de41-8d14-4757-8228-e051aad8e91c", "name": "Geometric Pattern", "instruction": "Create a 3D model of a geometric pattern. The pattern should consist of interconnected hexagons forming a continuous, repeating grid. Ensure the hexagons are evenly spaced and of the same size.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Function to create a single hexagon\ndef create_hexagon(radius, location):\n    verts = []\n    edges = []\n    faces = [[0, 1, 2, 3, 4, 5]]\n    \n    for i in range(6):\n        angle = math.radians(i * 60)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        verts.append((x, y, 0))\n        \n    mesh = bpy.data.meshes.new(\"Hexagon\")\n    hexagon = bpy.data.objects.new(\"Hexagon\", mesh)\n    bpy.context.collection.objects.link(hexagon)\n    mesh.from_pydata(verts, edges, faces)\n    hexagon.location = location\n\n# Parameters\nradius = 1\nspacing = radius * 1.5\nrows = 5\ncols = 5\n\n# Step 2: Create the grid of hexagons\nfor row in range(rows):\n    for col in range(cols):\n        x = col * spacing\n        y = row * spacing * math.sqrt(3) / 2\n        if col % 2 == 1:\n            y += spacing * math.sqrt(3) / 4\n        create_hexagon(radius, (x, y, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.7917594692280547, "unit_n": 25, "param_ratio": 1.6}
{"id": "214ef6dc-be34-4ae4-b6ef-637a48caa4ff", "name": "Cat Scratcher", "instruction": "Create a 3D model of a cat scratcher. It should have a base, a vertical post, and a platform on top. The base is rectangular, providing stability. The vertical post is cylindrical and extends upwards, offering a surface for cats to scratch. The platform on top is also rectangular, giving cats a place to sit or lie down. The design is simple and functional, focusing on providing a scratching surface and a resting area for cats. The base and platform are connected securely to the vertical post, ensuring the structure is sturdy. The overall design is practical, aiming to fulfill the basic needs of a cat's scratching and resting behavior. The dimensions are moderate, making it suitable for various spaces within a home. This cat scratcher is a straightforward solution for pet owners looking to provide their cats with a designated scratching area.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 0.1)  # Make it rectangular\n\n# Step 3: Create the Vertical Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 1.1))\npost = bpy.context.object\npost.name = \"Vertical Post\"\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2.2))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.scale = (0.75, 0.75, 0.1)  # Make it rectangular\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.950574812279168, "unit_n": 3, "param_ratio": 4.333333333333333}
{"id": "1c16736c-aeb5-44a4-8eeb-a6eab19531af", "name": "Blender", "instruction": "How does a blender compare to a food processor? Design a blender with a jug, a base with buttons, and a removable lid.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\njug_color = bpy.data.materials.new(name=\"Jug Color\")\njug_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Darker gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njug = bpy.context.object\njug.name = \"Jug\"\njug.data.materials.append(jug_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.5 - i * 0.3, 0.9, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.710543996197238, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "ef5867f9-4746-4831-93a0-9e6c60c9b870", "name": "Modular Spice Containers", "instruction": "Craft a set of modular spice containers that can be easily stacked on top of each other. Each container should have a clear section to view the contents and a standardized lid that fits all modules. The design should be space-saving and efficient for kitchen use.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_section = bpy.data.materials.new(name=\"Clear Section\")\nclear_section.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Semi-transparent clear section\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the lid\n\n# Step 2: Create the Container Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ncontainer_body = bpy.context.object\ncontainer_body.scale = (0.5, 0.5, 1)\ncontainer_body.name = \"Container Body\"\ncontainer_body.data.materials.append(clear_section)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.25))\nlid = bpy.context.object\nlid.scale = (0.55, 0.55, 0.1)\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Bottom Section for Stacking\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.05))\nbottom_section = bpy.context.object\nbottom_section.scale = (0.55, 0.55, 0.1)\nbottom_section.name = \"Bottom Section\"\nbottom_section.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "40a5a60d-e15c-429c-8382-f746a857d998", "name": "Coffee Cup", "instruction": "Make a coffee cup with a handle.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ncup = bpy.context.object\ncup.name = \"Cup\"\n\n# Step 3: Hollow out the Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.4, location=(0, 0, 1.05))\ninner_cup = bpy.context.object\ninner_cup.name = \"Inner Cup\"\n\n# Boolean modifier to hollow out the cup\nmod_bool = cup.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cup\nbpy.context.view_layer.objects.active = cup\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(inner_cup, do_unlink=True)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(1.4, 0, 1), major_radius=0.4, minor_radius=0.1, rotation=(1.5708, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Join the handle to the cup\nbpy.context.view_layer.objects.active = cup\nhandle.select_set(True)\ncup.select_set(True)\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.254187573115053, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "c9299125-c268-4961-b8be-3c0411f4f4a1", "name": "Dog Bowl", "instruction": "Compare a shallow dog bowl to a deep dog bowl. The shallow bowl has a wide opening and low sides, while the deep bowl has a narrower opening and high sides. Both bowls are circular and have flat bases.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbowl_color = bpy.data.materials.new(name=\"BowlColor\")\nbowl_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Shallow Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(-2, 0, 0))\nshallow_bowl = bpy.context.object\nshallow_bowl.name = \"Shallow Bowl\"\nshallow_bowl.data.materials.append(bowl_color)\n\n# Step 3: Create the Deep Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(2, 0, 0))\ndeep_bowl = bpy.context.object\ndeep_bowl.name = \"Deep Bowl\"\ndeep_bowl.data.materials.append(bowl_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.299466869514374, "unit_n": 2, "param_ratio": 7.5}
{"id": "e789cae9-5bb8-4f1d-beb2-82ea41230f45", "name": "Cheeseburger", "instruction": "Imagine a delicious cheeseburger. Start with a sesame seed bun, then add a juicy beef patty. Place a slice of cheddar cheese on top of the patty, followed by a few slices of tomato, lettuce, and pickles. Finish with the top half of the bun. Make sure all layers are clearly visible.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the bun\npatty_color = bpy.data.materials.new(name=\"Patty\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color for the patty\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.8, 0, 1)  # Yellow color for the cheese\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (1, 0, 0, 1)  # Red color for the tomato\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0, 1, 0, 1)  # Green color for the lettuce\npickle_color = bpy.data.materials.new(name=\"Pickle\")\npickle_color.diffuse_color = (0.5, 1, 0.5, 1)  # Light green color for the pickles\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.3, location=(0, 0, 0.3))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=1.45, depth=0.1, location=(0, 0, 0.5))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.1, location=(0, 0, 0.6))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.7))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 7: Create the Pickles\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.1, location=(0, 0, 0.8))\npickles = bpy.context.object\npickles.name = \"Pickles\"\npickles.data.materials.append(pickle_color)\n\n# Step 8: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 1.1))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.287869769612193, "unit_n": 7, "param_ratio": 9.285714285714286}
{"id": "fd00960b-21a1-45f8-803b-e9615b097138", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. The sandwich should have two slices of bread with layers of lettuce, tomato, cheese, and ham in between. The top slice of bread should have a toothpick with a small flag stuck in it.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.84, 0, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color\ntoothpick_color = bpy.data.materials.new(name=\"Toothpick\")\ntoothpick_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light wood color\nflag_color = bpy.data.materials.new(name=\"Flag\")\nflag_color.diffuse_color = (0.1, 0.1, 0.9, 1)  # Blue color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.45))\nham = bpy.context.object\nham.scale[2] = 0.05\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.55))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)\n\n# Step 8: Create the Toothpick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.8, location=(0, 0, 0.95))\ntoothpick = bpy.context.object\ntoothpick.name = \"Toothpick\"\ntoothpick.data.materials.append(toothpick_color)\n\n# Step 9: Create the Flag\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0.1, 1.2))\nflag = bpy.context.object\nflag.name = \"Flag\"\nflag.data.materials.append(flag_color)\nflag.rotation_euler[1] = 1.5708  # Rotate the flag to be vertical\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.203682208835022, "unit_n": 8, "param_ratio": 8.5}
{"id": "f40d985c-c8c5-4a81-81d2-f2af26e70e12", "name": "Syringe", "instruction": "Make a 3D model of a syringe used for injections.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 0.75))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(white)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=1.6, location=(0, 0, 0.8))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(gray)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 1.75))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(gray)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.4475181658272644, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "a72c30a8-774e-4dca-b643-ac9c2422c2e4", "name": "Cat Scratcher", "instruction": "Create a simple 3D model of a cat scratcher. It should have a vertical post and a base for stability. Should the post be tall or short? Consider the needs of different cats.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.763180447528589, "unit_n": 2, "param_ratio": 7.0}
{"id": "f862acc0-7aa6-4a37-ad45-9580544920cd", "name": "Smartphone", "instruction": "Design a smartphone with a rectangular touch screen and a single physical button below the screen.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the button\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbpy.ops.transform.resize(value=(0.5, 1, 0.05))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nbpy.ops.transform.resize(value=(0.45, 0.9, 1))\nbpy.ops.object.transform_apply(scale=True)\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, -0.8, 0.051))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.6653018803944484, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "43f948a9-88b1-40f4-a02e-35f1c5c72e7c", "name": "Chess Set", "instruction": "Design a 3D model of a chess set. The board should be a square grid of alternating colors. Include all the chess pieces: king, queen, bishops, knights, rooks, and pawns in their respective positions.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Function to create materials\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\n# Function to create a square with material\ndef create_square(location, size, material):\n    bpy.ops.mesh.primitive_plane_add(size=size, location=location)\n    square = bpy.context.object\n    square.data.materials.append(material)\n\n# Function to create a pawn\ndef create_pawn(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    pawn = bpy.context.object\n    pawn.data.materials.append(material)\n\n# Clear the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\nwhite = create_material(\"White\", (1, 1, 1, 1))\nblack = create_material(\"Black\", (0, 0, 0, 1))\n\n# Create chess board\nboard_size = 8\nsquare_size = 1\nfor i in range(board_size):\n    for j in range(board_size):\n        color = white if (i + j) % 2 == 0 else black\n        create_square((i * square_size, j * square_size, 0), square_size, color)\n\n# Create pawns\nfor i in range(board_size):\n    create_pawn((i * square_size + 0.5, 1.5, 0.2), black)\n    create_pawn((i * square_size + 0.5, 6.5, 0.2), white)\n\n# Add other pieces using the same method (for simplicity, only pawns are fully detailed here)\n# You should replace the following functions with the appropriate modeling for other pieces\ndef create_king(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    king = bpy.context.object\n    king.data.materials.append(material)\n\ndef create_queen(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.28, location=location)\n    queen = bpy.context.object\n    queen.data.materials.append(material)\n\ndef create_bishop(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=location)\n    bishop = bpy.context.object\n    bishop.data.materials.append(material)\n\ndef create_knight(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.22, location=location)\n    knight = bpy.context.object\n    knight.data.materials.append(material)\n\ndef create_rook(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=location)\n    rook = bpy.context.object\n    rook.data.materials.append(material)\n\n# Create kings\ncreate_king((4.5, 0.5, 0.3), black)\ncreate_king((4.5, 7.5, 0.3), white)\n\n# Create queens\ncreate_queen((3.5, 0.5, 0.3), black)\ncreate_queen((3.5, 7.5, 0.3), white)\n\n# Create bishops\ncreate_bishop((2.5, 0.5, 0.3), black)\ncreate_bishop((5.5, 0.5, 0.3), black)\ncreate_bishop((2.5, 7.5, 0.3), white)\ncreate_bishop((5.5, 7.5, 0.3), white)\n\n# Create knights\ncreate_knight((1.5, 0.5, 0.3), black)\ncreate_knight((6.5, 0.5, 0.3), black)\ncreate_knight((1.5, 7.5, 0.3), white)\ncreate_knight((6.5, 7.5, 0.3), white)\n\n# Create rooks\ncreate_rook((0.5, 0.5, 0.3), black)\ncreate_rook((7.5, 0.5, 0.3), black)\ncreate_rook((0.5, 7.5, 0.3), white)\ncreate_rook((7.5, 7.5, 0.3), white)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.697626355916685, "unit_n": 7, "param_ratio": 0.8571428571428571}
{"id": "8a3030ac-db6c-4696-a119-b1b2940821a7", "name": "Notebook", "instruction": "Create a 3D model of a notebook. It should have a rectangular shape with lined pages inside.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale = (1, 1.5, 0.05)\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, 0.05))\npages = bpy.context.object\npages.name = \"Pages\"\npages.scale = (0.95, 1.45, 0.04)\npages.data.materials.append(page_color)\n\n# Step 4: Add lines to the pages (simplified as a texture)\nbpy.ops.object.select_all(action='DESELECT')\npages.select_set(True)\nbpy.context.view_layer.objects.active = pages\n\n# Create a new texture for lines\ntexture = bpy.data.textures.new(\"Lines\", 'IMAGE')\nimage = bpy.data.images.new(\"LinesImage\", width=1024, height=1024)\ntexture.image = image\n\n# Create lines on the image\npixels = [1.0] * (4 * 1024 * 1024)\nfor y in range(0, 1024, 64):\n    for x in range(1024):\n        index = (y * 1024 + x) * 4\n        pixels[index:index+4] = [0.0, 0.0, 0.0, 1.0]\nimage.pixels = pixels\nimage.pack()\n\n# Apply the texture to the pages\nmaterial = bpy.data.materials.new(name=\"PageLines\")\nmaterial.use_nodes = True\nbsdf = material.node_tree.nodes[\"Principled BSDF\"]\ntexImage = material.node_tree.nodes.new('ShaderNodeTexImage')\ntexImage.image = image\nmaterial.node_tree.links.new(bsdf.inputs['Base Color'], texImage.outputs['Color'])\npages.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.5}
{"id": "91f91a35-5f9e-46d4-b5ec-f285a9464c5b", "name": "Pet Bed", "instruction": "Can you design a pet bed for a medium-sized dog? It should be rectangular and have raised edges.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define a basic color for the bed\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.35, 0.2, 1)  # Brownish color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nbase = bpy.context.object\nbase.scale[0] = 1.5  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.2  # Height\nbase.name = \"BedBase\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nedge_height = 0.4\nedge_thickness = 0.1\n\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.05, edge_height / 2 + 0.4))\nfront_edge = bpy.context.object\nfront_edge.scale[0] = 1.5\nfront_edge.scale[1] = edge_thickness\nfront_edge.scale[2] = edge_height / 2\nfront_edge.name = \"FrontEdge\"\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.05, edge_height / 2 + 0.4))\nback_edge = bpy.context.object\nback_edge.scale[0] = 1.5\nback_edge.scale[1] = edge_thickness\nback_edge.scale[2] = edge_height / 2\nback_edge.name = \"BackEdge\"\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.55, 0, edge_height / 2 + 0.4))\nleft_edge = bpy.context.object\nleft_edge.scale[0] = edge_thickness\nleft_edge.scale[1] = 1.1\nleft_edge.scale[2] = edge_height / 2\nleft_edge.name = \"LeftEdge\"\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.55, 0, edge_height / 2 + 0.4))\nright_edge = bpy.context.object\nright_edge.scale[0] = edge_thickness\nright_edge.scale[1] = 1.1\nright_edge.scale[2] = edge_height / 2\nright_edge.name = \"RightEdge\"\nright_edge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 5.0}
{"id": "78d4f055-20f3-4c7c-94bb-c458350622cc", "name": "Hat", "instruction": "Can you create a simple hat for me? It should have a round crown and a wide brim.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.82268249576401, "unit_n": 2, "param_ratio": 7.0}
{"id": "9337e31c-70be-45ad-a622-6bfeedde6ce7", "name": "Cat Scratcher", "instruction": "Design a cat scratcher. Start with a tall, cylindrical post wrapped in a textured material. The base is square and sturdy. Add a small platform at the top for the cat to sit on, and include a dangling toy attached to the side of the post. The scratcher should be in a neutral grey color.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nneutral_grey = bpy.data.materials.new(name=\"Neutral Grey\")\nneutral_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Neutral grey color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(neutral_grey)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 0.5))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(neutral_grey)\n\n# Step 4: Create the Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.data.materials.append(neutral_grey)\n\n# Step 5: Create the Dangling Toy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.3, 0, 1))\ntoy = bpy.context.object\ntoy.name = \"Toy\"\ntoy.data.materials.append(neutral_grey)\n\n# Create the string for the toy\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.8, location=(0.15, 0, 1.4), rotation=(math.pi/2, 0, 0))\nstring = bpy.context.object\nstring.name = \"String\"\nstring.data.materials.append(neutral_grey)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.6878258703680284, "unit_n": 5, "param_ratio": 6.0}
{"id": "5d2b1e77-4384-40a3-a0d1-01175a9758cd", "name": "Decorative Pattern", "instruction": "Design a simple geometric decorative pattern with repeating shapes. The pattern should be symmetrical and evenly spaced.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the repeating shapes\nfor i in range(5):\n    for j in range(5):\n        x = i * 2 - 4\n        y = j * 2 - 4\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0))\n        shape = bpy.context.object\n        shape.name = f\"Shape_{i}_{j}\"\n        shape.data.materials.append(pattern_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.298317366548037, "unit_n": 25, "param_ratio": 0.36}
{"id": "6575cde9-7086-4a00-bfd3-f084386cd48e", "name": "Coffee Maker", "instruction": "Design a coffee maker that includes a water reservoir, a filter basket, and a carafe. The water reservoir should be located at the back, the filter basket in the middle, and the carafe at the front.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Water Reservoir\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0.5))\nreservoir = bpy.context.object\nreservoir.name = \"Water Reservoir\"\nreservoir.scale = (0.5, 0.5, 1)\nreservoir.data.materials.append(gray)\n\n# Step 3: Create the Filter Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.6, location=(0, 0, 0.3))\nfilter_basket = bpy.context.object\nfilter_basket.name = \"Filter Basket\"\nfilter_basket.data.materials.append(black)\n\n# Step 4: Create the Carafe\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.8, location=(0, 1.5, 0.4))\ncarafe = bpy.context.object\ncarafe.name = \"Carafe\"\ncarafe.data.materials.append(gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.341827795863156, "unit_n": 3, "param_ratio": 8.0}
{"id": "61986a11-ecfe-4258-8206-c93b9aaf2c0e", "name": "Chess Board", "instruction": "Design a chess board with alternating black and white squares. The board should be 18 inches by 18 inches, with each square measuring 2.25 inches.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chess Board\nsquare_size = 2.25\nboard_size = 8 * square_size\n\nfor row in range(8):\n    for col in range(8):\n        x = (col - 3.5) * square_size\n        y = (row - 3.5) * square_size\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(x, y, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "c7eff622-708b-44eb-a6d9-af8b3e608c5e", "name": "Hat", "instruction": "Can you design a hat with a wide brim and a decorative band around it?", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.55))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.36925939033766, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "3960fb67-ef2d-448b-8f87-eda6710f1907", "name": "Cat Bed", "instruction": "Can you create a cat bed? It should be a simple, round bed with a low edge.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Edge of the Bed\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.1))\nedge = bpy.context.object\nedge.name = \"Edge\"\nedge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.36235244095226, "unit_n": 2, "param_ratio": 7.5}
{"id": "bed14891-69c2-4ae5-84ab-38cd4ea68b0a", "name": "Chess Piece", "instruction": "Imagine a pawn from a chess set. How would it look in 3D?", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the pawn\npawn_color = bpy.data.materials.new(name=\"Pawn Color\")\npawn_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pawn_color)\n\n# Step 3: Create the Lower Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.3, location=(0, 0, 0.2))\nlower_body = bpy.context.object\nlower_body.name = \"Lower Body\"\nlower_body.data.materials.append(pawn_color)\n\n# Step 4: Create the Middle Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0.55))\nmiddle_body = bpy.context.object\nmiddle_body.name = \"Middle Body\"\nmiddle_body.data.materials.append(pawn_color)\n\n# Step 5: Create the Upper Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 0.85))\nupper_body = bpy.context.object\nupper_body.name = \"Upper Body\"\nupper_body.data.materials.append(pawn_color)\n\n# Step 6: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.1))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(pawn_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.140687302402238, "unit_n": 5, "param_ratio": 5.6}
{"id": "fc2e368a-a708-4af8-bb27-0f7a4b68af61", "name": "Picture Frame", "instruction": "Please create a 3D model of a picture frame. The frame is rectangular and designed to hold a standard-sized photograph.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1.2, 0.1, 1.6)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (cutout for the photo)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (1, 0.1, 1.4)\n\n# Boolean modifier to cut out the inner frame from the outer frame\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_frame\n\n# Apply the boolean modifier\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner frame\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Dark", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "e561f6d9-85fe-4aca-aeda-093fe1fed1d7", "name": "Scarf", "instruction": "Can you create a simple scarf? It should be long and rectangular.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nscarf_color = bpy.data.materials.new(name=\"ScarfColor\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Scarf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf = bpy.context.object\nscarf.name = \"Scarf\"\nscarf.scale = (0.1, 5, 0.05)  # Make it long and rectangular\nscarf.data.materials.append(scarf_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "bab21979-fa3e-43a9-b66b-f9b286d4b367", "name": "Dog Bed", "instruction": "Can you create a 3D model of a dog bed? Make sure it is round and has a raised edge.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base of the Dog Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.1))\nedge = bpy.context.object\nedge.name = \"Edge\"\nedge.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.36235244095226, "unit_n": 2, "param_ratio": 7.5}
{"id": "5caad66f-518c-43ae-9b34-2148f82b2e51", "name": "Star Icon", "instruction": "Can you make a star icon? It should have five points and be symmetrical.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Star\n# Define the star parameters\nnum_points = 5\nouter_radius = 1\ninner_radius = 0.4\nangle = math.pi / num_points\n\n# Create a new mesh and object\nmesh = bpy.data.meshes.new(name=\"Star\")\nstar = bpy.data.objects.new(\"Star\", mesh)\n\n# Link the object to the scene\nbpy.context.collection.objects.link(star)\n\n# Create the star vertices and faces\nvertices = []\nfaces = []\n\nfor i in range(num_points * 2):\n    r = outer_radius if i % 2 == 0 else inner_radius\n    theta = i * angle\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    vertices.append((x, y, 0))\n\nfaces.append([i for i in range(num_points * 2)])\n\n# Create the mesh from the vertices and faces\nmesh.from_pydata(vertices, [], faces)\nmesh.update()\n\n# Step 3: Set the Star Material (optional)\nstar_material = bpy.data.materials.new(name=\"StarMaterial\")\nstar_material.diffuse_color = (1, 1, 0, 1)  # Yellow color\nstar.data.materials.append(star_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.3025850929940455, "unit_n": 1, "param_ratio": 5.0}
{"id": "a4f8682e-94b4-42c5-9864-a8a28ee6c3a1", "name": "Chessboard Pattern", "instruction": "Create a 3D model of a chessboard pattern. The board should consist of alternating black and white squares, arranged in an 8x8 grid. Ensure each square is perfectly aligned and uniform in size. The pattern should be displayed flat and viewed from above.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        x = col * square_size\n        y = row * square_size\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(x, y, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Adjust the View\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))  # Center the chessboard\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "bbb693fb-f7be-4e1c-87a8-04f0acb6ce63", "name": "Chessboard", "instruction": "Create a chessboard set up for a game. Include all the pieces in their starting positions.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nbpy.ops.mesh.primitive_plane_add(size=8, location=(0, 0, 0))\nchessboard = bpy.context.object\nchessboard.name = \"Chessboard\"\n\n# Create the squares\nfor i in range(8):\n    for j in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=1, location=(i - 3.5, j - 3.5, 0.01))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Create the Pawns\nfor i in range(8):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(i - 3.5, 1.5, 0.2))\n    pawn = bpy.context.object\n    pawn.name = f\"White Pawn {i + 1}\"\n    pawn.data.materials.append(white)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(i - 3.5, -1.5, 0.2))\n    pawn = bpy.context.object\n    pawn.name = f\"Black Pawn {i + 1}\"\n    pawn.data.materials.append(black)\n\n# Step 4: Create the Rooks\nfor i in [0, 7]:\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(i - 3.5, 3.5, 0.2))\n    rook = bpy.context.object\n    rook.name = f\"White Rook {i // 7 + 1}\"\n    rook.data.materials.append(white)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(i - 3.5, -3.5, 0.2))\n    rook = bpy.context.object\n    rook.name = f\"Black Rook {i // 7 + 1}\"\n    rook.data.materials.append(black)\n\n# Step 5: Create the Knights\nfor i in [1, 6]:\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=(i - 3.5, 3.5, 0.2))\n    knight = bpy.context.object\n    knight.name = f\"White Knight {i // 5 + 1}\"\n    knight.data.materials.append(white)\n    \n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=(i - 3.5, -3.5, 0.2))\n    knight = bpy.context.object\n    knight.name = f\"Black Knight {i // 5 + 1}\"\n    knight.data.materials.append(black)\n\n# Step 6: Create the Bishops\nfor i in [2, 5]:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(i - 3.5, 3.5, 0.2))\n    bishop = bpy.context.object\n    bishop.name = f\"White Bishop {i // 3 + 1}\"\n    bishop.data.materials.append(white)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(i - 3.5, -3.5, 0.2))\n    bishop = bpy.context.object\n    bishop.name = f\"Black Bishop {i // 3 + 1}\"\n    bishop.data.materials.append(black)\n\n# Step 7: Create the Queens\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(3 - 3.5, 3.5, 0.3))\nqueen = bpy.context.object\nqueen.name = \"White Queen\"\nqueen.data.materials.append(white)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(3 - 3.5, -3.5, 0.3))\nqueen = bpy.context.object\nqueen.name = \"Black Queen\"\nqueen.data.materials.append(black)\n\n# Step 8: Create the Kings\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(4 - 3.5, 3.5, 0.3))\nking = bpy.context.object\nking.name = \"White King\"\nking.data.materials.append(white)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(4 - 3.5, -3.5, 0.3))\nking = bpy.context.object\nking.name = \"Black King\"\nking.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.615539613131654, "unit_n": 91, "param_ratio": 0.7472527472527473}
{"id": "5787edce-4691-4a76-a87c-fc1f71905cc0", "name": "Decorative Mirror", "instruction": "Please create a 3D decorative mirror. It should be round with a simple frame.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmirror_color = bpy.data.materials.new(name=\"Mirror\")\nmirror_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the mirror\n\nframe_color = bpy.data.materials.new(name=\"Frame\")\nframe_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color for the frame\n\n# Step 2: Create the Mirror\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nmirror = bpy.context.object\nmirror.name = \"Mirror\"\nmirror.data.materials.append(mirror_color)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, -0.05))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(frame_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 10.0}
{"id": "4d865afb-6369-46b9-bb97-7052ebc9b773", "name": "Pen", "instruction": "Design a 3D model of a pen. Start with a long, cylindrical body. Add a pointed tip at one end and a cap at the other. Include a clip on the cap.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ntip_color = bpy.data.materials.new(name=\"Tip Color\")\ntip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncap_color = bpy.data.materials.new(name=\"Cap Color\")\ncap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(0, 0, 0))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(tip_color)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.4, location=(0, 0, 2.2))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(cap_color)\n\n# Step 5: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.05, 0, 2.4))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale[1] = 0.1\nclip.scale[2] = 0.5\nclip.data.materials.append(cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.423361643168726, "unit_n": 4, "param_ratio": 8.75}
{"id": "13a6fce6-b804-4816-97c5-17138b334488", "name": "Pet Bowl", "instruction": "Generate a pet bowl. ", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0))\nbowl_outer = bpy.context.object\nbowl_outer.name = \"Bowl Outer\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.4, location=(0, 0, 0.05))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Create the Hollow Part\nbpy.context.view_layer.objects.active = bowl_outer\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = bowl_inner\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner cylinder\nbpy.data.objects.remove(bowl_inner, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071983, "unit_n": 3, "param_ratio": 3.6666666666666665}
{"id": "4b7d4f84-b87a-41b1-aaa0-eb2631710f4b", "name": "Chessboard", "instruction": "Design a chessboard with alternating black and white squares. Include all the standard chess pieces: king, queen, bishop, knight, rook, and pawn. Each piece should be distinguishable by its shape and size.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Move the board to the center\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\nbpy.context.scene.cursor.location = (3.5, 3.5, 0)\nbpy.ops.object.origin_set(type='ORIGIN_CURSOR')\n\n# Step 3: Create the Pieces\n# Function to add a piece\ndef add_piece(shape, location, material):\n    if shape == \"pawn\":\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n        piece = bpy.context.object\n        bpy.ops.object.shade_smooth()\n        bpy.ops.object.mode_set(mode='EDIT')\n        bpy.ops.transform.resize(value=(1, 1, 2))\n        bpy.ops.object.mode_set(mode='OBJECT')\n    elif shape == \"rook\":\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.8, location=location)\n        piece = bpy.context.object\n        bpy.ops.object.shade_flat()\n    elif shape == \"knight\":\n        bpy.ops.mesh.primitive_monkey_add(location=location)\n        piece = bpy.context.object\n        bpy.ops.transform.resize(value=(0.2, 0.2, 0.2))\n    elif shape == \"bishop\":\n        bpy.ops.mesh.primitive_cone_add(radius1=0.3, depth=0.8, location=location)\n        piece = bpy.context.object\n        bpy.ops.object.shade_smooth()\n    elif shape == \"queen\":\n        bpy.ops.mesh.primitive_torus_add(location=location)\n        piece = bpy.context.object\n        bpy.ops.transform.resize(value=(0.3, 0.3, 0.8))\n    elif shape == \"king\":\n        bpy.ops.mesh.primitive_cube_add(size=0.6, location=location)\n        piece = bpy.context.object\n        bpy.ops.transform.resize(value=(1, 1, 2))\n    \n    piece.data.materials.append(material)\n    return piece\n\n# Add white pieces\nfor i in range(8):\n    add_piece(\"pawn\", (i, 1, 0.5), white)\nadd_piece(\"rook\", (0, 0, 0.5), white)\nadd_piece(\"rook\", (7, 0, 0.5), white)\nadd_piece(\"knight\", (1, 0, 0.5), white)\nadd_piece(\"knight\", (6, 0, 0.5), white)\nadd_piece(\"bishop\", (2, 0, 0.5), white)\nadd_piece(\"bishop\", (5, 0, 0.5), white)\nadd_piece(\"queen\", (3, 0, 0.5), white)\nadd_piece(\"king\", (4, 0, 0.5), white)\n\n# Add black pieces\nfor i in range(8):\n    add_piece(\"pawn\", (i, 6, 0.5), black)\nadd_piece(\"rook\", (0, 7, 0.5), black)\nadd_piece(\"rook\", (7, 7, 0.5), black)\nadd_piece(\"knight\", (1, 7, 0.5), black)\nadd_piece(\"knight\", (6, 7, 0.5), black)\nadd_piece(\"bishop\", (2, 7, 0.5), black)\nadd_piece(\"bishop\", (5, 7, 0.5), black)\nadd_piece(\"queen\", (3, 7, 0.5), black)\nadd_piece(\"king\", (4, 7, 0.5), black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.7191493123218, "unit_n": 7, "param_ratio": 2.7142857142857144}
{"id": "ed6d3c19-796c-4e37-abb8-51cafa9c3a1a", "name": "Bird Feeder", "instruction": "Create a 3D model of a bird feeder with a simple cylindrical design and a small perch for birds to land on.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Feeder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.0, location=(0, 0, 0.5))\nfeeder_body = bpy.context.object\nfeeder_body.name = \"Feeder Body\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.5, 0, 0.1), rotation=(0, 1.5708, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7237078521888343, "unit_n": 2, "param_ratio": 6.5}
{"id": "9dba8b19-87f9-4e91-853b-1cbc211bb6b0", "name": "Scarf", "instruction": "Create a scarf that is 5 feet long and 1 foot wide. It should have a simple, linear pattern running along its length.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nscarf_color = bpy.data.materials.new(name=\"ScarfColor\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # A simple red color\n\n# Step 2: Create the Scarf\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nscarf = bpy.context.object\nscarf.name = \"Scarf\"\nscarf.scale[0] = 5  # 5 feet long\nscarf.scale[1] = 1  # 1 foot wide\nscarf.data.materials.append(scarf_color)\n\n# Step 3: Add a Linear Pattern\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=50)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Select every other face to create a pattern\nscarf.data.update()\nfor i, face in enumerate(scarf.data.polygons):\n    if i % 2 == 0:\n        face.material_index = 0\n    else:\n        face.material_index = 1\n\n# Create a second material for the pattern\npattern_color = bpy.data.materials.new(name=\"PatternColor\")\npattern_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # A simple white color\nscarf.data.materials.append(pattern_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.599463201466676, "unit_n": 1, "param_ratio": 14.0}
{"id": "330201a7-eae9-4228-ad50-b4d3356e4064", "name": "Sandwich", "instruction": "Design a sandwich with two slices of bread. Between the slices, include layers of lettuce, tomato, cheese, and a meat slice.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.8, 0.2, 1)  # Yellow color for cheese\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color for meat\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.name = \"Meat\"\nmeat.scale[2] = 0.1\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "04f7dfd2-255f-4369-a5cb-f56276a21b12", "name": "Scarf", "instruction": "Design a scarf that is long and rectangular. Add fringes to both ends of the scarf for a decorative touch.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the scarf\nscarf_color = bpy.data.materials.new(name=\"Scarf Color\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Scarf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf = bpy.context.object\nscarf.scale = (0.1, 2, 0.02)  # Long and thin rectangular shape\nscarf.name = \"Scarf\"\nscarf.data.materials.append(scarf_color)\n\n# Step 3: Create the Fringes\nfringe_color = bpy.data.materials.new(name=\"Fringe Color\")\nfringe_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Same red color\n\nfor i in range(10):\n    x = (i - 4.5) * 0.02\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(x, 2.05, -0.01))\n    fringe = bpy.context.object\n    fringe.name = f\"Fringe Top {i + 1}\"\n    fringe.data.materials.append(fringe_color)\n\nfor i in range(10):\n    x = (i - 4.5) * 0.02\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(x, -2.05, -0.01))\n    fringe = bpy.context.object\n    fringe.name = f\"Fringe Bottom {i + 1}\"\n    fringe.data.materials.append(fringe_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.715953533243731, "unit_n": 21, "param_ratio": 1.1428571428571428}
{"id": "b56a6639-7c59-441c-bf57-1821efeb95fe", "name": "Travel Mug", "instruction": "Could you create a travel mug? It should be a simple cylindrical shape with a lid.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmug_color = bpy.data.materials.new(name=\"MugColor\")\nmug_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.0, location=(0, 0, 0.5))\nmug_body = bpy.context.object\nmug_body.name = \"MugBody\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.32, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 10.0}
{"id": "19957270-9b79-4e0f-a4be-fdfec2675cbb", "name": "Power Transformer", "instruction": "What's your outlook on a standard power transformer with two windings and a core?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the core\nwinding_color = bpy.data.materials.new(name=\"Winding Color\")\nwinding_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Orange color for the windings\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.scale = (0.5, 0.5, 1.5)\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Windings\n# Winding 1\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(0, 0, 0.75))\nwinding1 = bpy.context.object\nwinding1.name = \"Winding 1\"\nwinding1.data.materials.append(winding_color)\n\n# Winding 2\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.1, location=(0, 0, -0.75))\nwinding2 = bpy.context.object\nwinding2.name = \"Winding 2\"\nwinding2.data.materials.append(winding_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.232808812934874, "unit_n": 3, "param_ratio": 8.0}
{"id": "e3f317cb-8f66-4d2f-a5b9-03aea290d2ec", "name": "Syringe", "instruction": "Model a syringe.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsyringe_body_color = bpy.data.materials.new(name=\"Syringe Body Color\")\nsyringe_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nsyringe_plunger_color = bpy.data.materials.new(name=\"Syringe Plunger Color\")\nsyringe_plunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body.data.materials.append(syringe_body_color)\n\n# Step 3: Create the Syringe Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=2.2, location=(0, 0, 0.1))\nsyringe_plunger = bpy.context.object\nsyringe_plunger.name = \"Syringe Plunger\"\nsyringe_plunger.data.materials.append(syringe_plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(syringe_plunger_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.4475181658272644, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "ad2a9be6-8bfe-449d-a7dc-f01e716a7cde", "name": "Power Transformer", "instruction": "Design a power transformer. It should have a rectangular base with cylindrical coils on top. Include a cooling system with fins on the sides. The transformer should have high-voltage insulators on the top.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_grey = bpy.data.materials.new(name=\"Metal Grey\")\nmetal_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal grey color\ninsulator_brown = bpy.data.materials.new(name=\"Insulator Brown\")\ninsulator_brown.diffuse_color = (0.36, 0.25, 0.20, 1)  # Insulator brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.5\nbase.data.materials.append(metal_grey)\n\n# Step 3: Create the Cylindrical Coils\nfor i in range(2):\n    x = (i * 2 - 1) * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(x, 0, 1.5))\n    coil = bpy.context.object\n    coil.name = f\"Coil {i + 1}\"\n    coil.data.materials.append(metal_grey)\n\n# Step 4: Create the Cooling Fins\nfor i in range(5):\n    x = (i - 2) * 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 1.2, 0.5))\n    fin = bpy.context.object\n    fin.name = f\"Fin {i + 1}\"\n    fin.scale[2] = 0.5\n    fin.scale[0] = 0.5\n    fin.data.materials.append(metal_grey)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, -1.2, 0.5))\n    fin = bpy.context.object\n    fin.name = f\"Fin {i + 6}\"\n    fin.scale[2] = 0.5\n    fin.scale[0] = 0.5\n    fin.data.materials.append(metal_grey)\n\n# Step 5: Create the High-Voltage Insulators\nfor i in range(2):\n    x = (i * 2 - 1) * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 2.25))\n    insulator = bpy.context.object\n    insulator.name = f\"Insulator {i + 1}\"\n    insulator.data.materials.append(insulator_brown)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.224627334223886, "unit_n": 15, "param_ratio": 2.1333333333333333}
{"id": "5b6fb229-61d0-4f9e-9c37-a2668591161b", "name": "Armchair", "instruction": "Can you design an armchair with a simple, high backrest and armrests that are at a comfortable height, with a basic seat cushion and a straightforward four-legged base?", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\ncushion_color = bpy.data.materials.new(name=\"Cushion\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Legs\nfor i in range(4):\n    x = 0.7 * (i % 2) - 0.35\n    y = 0.7 * (i // 2) - 0.35\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.9, location=(x, y, -0.45))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.05))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale = (0.7, 0.7, 0.1)\nseat.data.materials.append(cushion_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.35, 0.55))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (0.7, 0.1, 1)\nbackrest.data.materials.append(wood_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 0.45 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.05, 0.7, 0.05)\n    armrest.data.materials.append(wood_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.255420789094746, "unit_n": 8, "param_ratio": 3.375}
{"id": "a317832b-fec8-44e5-946d-b7822e5569fa", "name": "Travel Wallet", "instruction": "Create a travel wallet with compartments for passport, cards, and cash.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Wallet Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_base = bpy.context.object\nwallet_base.name = \"Wallet Base\"\nwallet_base.scale = (1, 0.1, 0.7)\nwallet_base.data.materials.append(wallet_color)\n\n# Step 3: Create the Passport Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.5, 0.1, 0))\npassport_compartment = bpy.context.object\npassport_compartment.name = \"Passport Compartment\"\npassport_compartment.scale = (0.4, 0.02, 0.6)\npassport_compartment.data.materials.append(wallet_color)\n\n# Step 4: Create the Card Compartments\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.5, 0.1, 0.3 - i * 0.3))\n    card_compartment = bpy.context.object\n    card_compartment.name = f\"Card Compartment {i + 1}\"\n    card_compartment.scale = (0.3, 0.02, 0.15)\n    card_compartment.data.materials.append(wallet_color)\n\n# Step 5: Create the Cash Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.1, -0.5))\ncash_compartment = bpy.context.object\ncash_compartment.name = \"Cash Compartment\"\ncash_compartment.scale = (0.9, 0.02, 0.2)\ncash_compartment.data.materials.append(wallet_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4091028905345944, "unit_n": 6, "param_ratio": 3.5}
{"id": "be3f73f1-6a32-4ed2-83fc-5eaea9367bf5", "name": "Paper Towel Holder", "instruction": "Design a paper towel holder with a vertical rod and a circular base.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Vertical Rod\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nrod = bpy.context.object\nrod.name = \"Rod\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.377134261908862, "unit_n": 2, "param_ratio": 5.0}
{"id": "29891d3c-9d79-4ae0-8936-72403366acce", "name": "Modular Shelving Unit", "instruction": "I need a modular shelving unit that can be reconfigured. Each shelf should be able to support books.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the shelves\nshelf_color = bpy.data.materials.new(name=\"ShelfColor\")\nshelf_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Shelves\nshelf_width = 2.0\nshelf_depth = 0.3\nshelf_height = 0.1\nnum_shelves = 3\nshelf_spacing = 0.5\n\nfor i in range(num_shelves):\n    z = i * shelf_spacing\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(shelf_color)\n\n# Step 3: Create the Support Beams\nbeam_width = 0.1\nbeam_height = num_shelves * shelf_spacing\nbeam_depth = 0.1\n\n# Left beam\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-shelf_width / 2, -shelf_depth / 2, beam_height / 2 - shelf_height / 2))\nleft_beam = bpy.context.object\nleft_beam.scale = (beam_width, beam_depth, beam_height)\nleft_beam.name = \"Left Beam\"\nleft_beam.data.materials.append(shelf_color)\n\n# Right beam\nbpy.ops.mesh.primitive_cube_add(size=1, location=(shelf_width / 2, -shelf_depth / 2, beam_height / 2 - shelf_height / 2))\nright_beam = bpy.context.object\nright_beam.scale = (beam_width, beam_depth, beam_height)\nright_beam.name = \"Right Beam\"\nright_beam.data.materials.append(shelf_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.3423058638339653, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "31d0ec81-9e0b-4c39-960f-6f79a079ba7f", "name": "USB Flash Drive", "instruction": "Can you create a 3D model of a USB flash drive? It should have a removable cap.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncap_color = bpy.data.materials.new(name=\"Cap Color\")\ncap_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Light gray color\n\n# Step 2: Create the Body of the USB Flash Drive\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (0.2, 0.6, 0.1)\nbody.name = \"USB Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.35, 0))\nconnector = bpy.context.object\nconnector.scale = (0.15, 0.1, 0.05)\nconnector.name = \"USB Connector\"\nconnector.data.materials.append(body_color)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.45, 0))\ncap = bpy.context.object\ncap.scale = (0.2, 0.25, 0.1)\ncap.name = \"USB Cap\"\ncap.data.materials.append(cap_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "606a378a-37c9-41dc-aecf-3bd4383b0d7e", "name": "Centrifuge", "instruction": "Create a centrifuge with a cylindrical body. Include a lid on top with a handle for opening. Inside, add a rotor with multiple slots for test tubes. Ensure that there is a control panel on the front for setting the speed and time.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\nrotor_color = bpy.data.materials.new(name=\"Rotor Color\")\nrotor_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 1.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 1.3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 5: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.5))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(rotor_color)\n\n# Step 6: Create the Slots for Test Tubes\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.55))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(rotor_color)\n\n# Step 7: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, -0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(control_panel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.013941728353657, "unit_n": 13, "param_ratio": 4.076923076923077}
{"id": "965ff463-fa1f-40c3-8eba-348cc4dd7d5d", "name": "Art Deco Chandelier", "instruction": "I'm envisioning a 3D model of an Art Deco chandelier with a tiered structure. It should have a central column from which multiple arms extend, each arm supporting a light source at the end.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the chandelier\nchandelier_color = bpy.data.materials.new(name=\"Chandelier Color\")\nchandelier_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Central Column\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\ncentral_column = bpy.context.object\ncentral_column.name = \"Central Column\"\ncentral_column.data.materials.append(chandelier_color)\n\n# Step 3: Create the Arms and Light Sources\nnum_arms = 6\narm_length = 1.5\nfor i in range(num_arms):\n    angle = i * (2 * math.pi / num_arms)\n    x = arm_length * math.cos(angle)\n    y = arm_length * math.sin(angle)\n    \n    # Create the arm\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=arm_length, location=(x / 2, y / 2, 1), rotation=(0, math.pi / 2, angle))\n    arm = bpy.context.object\n    arm.name = f\"Arm {i + 1}\"\n    arm.data.materials.append(chandelier_color)\n    \n    # Create the light source at the end of the arm\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1))\n    light_source = bpy.context.object\n    light_source.name = f\"Light Source {i + 1}\"\n    light_source.data.materials.append(chandelier_color)\n\n# Step 4: Create the Tiered Structure\nnum_tiers = 3\ntier_height = 0.5\nfor j in range(1, num_tiers):\n    for i in range(num_arms):\n        angle = i * (2 * math.pi / num_arms)\n        x = (arm_length - j * 0.3) * math.cos(angle)\n        y = (arm_length - j * 0.3) * math.sin(angle)\n        \n        # Create the arm\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=arm_length - j * 0.3, location=(x / 2, y / 2, 1 - j * tier_height), rotation=(0, math.pi / 2, angle))\n        arm = bpy.context.object\n        arm.name = f\"Arm {i + 1 + j * num_arms}\"\n        arm.data.materials.append(chandelier_color)\n        \n        # Create the light source at the end of the arm\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1 - j * tier_height))\n        light_source = bpy.context.object\n        light_source.name = f\"Light Source {i + 1 + j * num_arms}\"\n        light_source.data.materials.append(chandelier_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.05229649647154, "unit_n": 3, "param_ratio": 11.0}
{"id": "dadaf9aa-235a-4e94-b471-359a5ccbd559", "name": "Chessboard", "instruction": "Compare and create two chessboards. The first one should have alternating black and white squares, while the second should have alternating dark and light brown squares.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ndark_brown = bpy.data.materials.new(name=\"Dark Brown\")\ndark_brown.diffuse_color = (0.36, 0.25, 0.20, 1)  # Dark brown color\nlight_brown = bpy.data.materials.new(name=\"Light Brown\")\nlight_brown.diffuse_color = (0.82, 0.71, 0.55, 1)  # Light brown color\n\n# Function to create a chessboard\ndef create_chessboard(x_offset, y_offset, dark_color, light_color):\n    for i in range(8):\n        for j in range(8):\n            bpy.ops.mesh.primitive_plane_add(size=1, location=(x_offset + i, y_offset + j, 0))\n            square = bpy.context.object\n            if (i + j) % 2 == 0:\n                square.data.materials.append(dark_color)\n            else:\n                square.data.materials.append(light_color)\n\n# Step 2: Create the first chessboard (black and white)\ncreate_chessboard(-4.5, 0, black, white)\n\n# Step 3: Create the second chessboard (dark and light brown)\ncreate_chessboard(4.5, 0, dark_brown, light_brown)", "color_brightness": "Dark", "verify": "human", "entropy": 4.440050655669077, "unit_n": 64, "param_ratio": 0.375}
{"id": "3c6a200c-5ef0-4ab6-8af1-508b846a58e0", "name": "Logo", "instruction": "Design a logo that consists of a simple geometric shape.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create a Simple Geometric Shape (e.g., a Cube)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"LogoCube\"\n\n# Optionally, set a material color for the cube\nmaterial = bpy.data.materials.new(name=\"LogoMaterial\")\nmaterial.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncube.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "64d27b23-f6ba-47c9-948e-d9bd17fdf5ab", "name": "Picture Frame", "instruction": "Create a simple picture frame. It should have a rectangular shape with a width of 1 inch around the edges.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nouter_width = 12  # Outer width of the frame\nouter_height = 8  # Outer height of the frame\nframe_thickness = 1  # Thickness of the frame\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (outer_width / 2, outer_height / 2, frame_thickness / 2)\nouter_frame.name = \"Outer Frame\"\n\n# Step 3: Create the Inner Cutout\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ninner_cutout = bpy.context.object\ninner_cutout.scale = ((outer_width - 2 * frame_thickness) / 2, (outer_height - 2 * frame_thickness) / 2, frame_thickness / 2 + 0.01)\ninner_cutout.name = \"Inner Cutout\"\n\n# Step 4: Boolean Modifier to Cut the Inner Part\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_cutout\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner cutout\nbpy.data.objects.remove(inner_cutout, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 4.0}
{"id": "c86d9511-0eee-4280-a6ce-c5f05c407478", "name": "Drum", "instruction": "Create a drum. The drum should have a cylindrical body with a drumhead stretched across the top. Include tension rods around the drumhead to adjust its tightness.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\ntension_rod_color = bpy.data.materials.new(name=\"Tension Rod Color\")\ntension_rod_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, 0.75))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = i * (2 * math.pi / num_rods)\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(x, y, 0))\n    rod = bpy.context.object\n    rod.name = f\"Tension Rod {i + 1}\"\n    rod.data.materials.append(tension_rod_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4780173825443086, "unit_n": 3, "param_ratio": 10.0}
{"id": "6796493c-c9f9-46b7-b435-5c84e4d7e006", "name": "Logo Comparison", "instruction": "Design two logos for comparison. The first logo should feature a simple geometric shape, and the second logo should incorporate a more intricate pattern. Place them side by side for easy comparison.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Simple Geometric Shape (First Logo)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2, 0, 0))\nsimple_logo = bpy.context.object\nsimple_logo.name = \"Simple Logo\"\n\n# Step 3: Create the Intricate Pattern (Second Logo)\n# Create a torus\nbpy.ops.mesh.primitive_torus_add(location=(2, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"Torus\"\n\n# Create a sphere inside the torus\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(2, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\n\n# Parent the sphere to the torus\nsphere.parent = torus\n\n# Step 4: Position the Logos Side by Side\nsimple_logo.location = (-2, 0, 0)\ntorus.location = (2, 0, 0)\nsphere.location = (2, 0, 0)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.221270491489955, "unit_n": 3, "param_ratio": 3.6666666666666665}
{"id": "80e7f183-8bf0-4274-9240-eca8f7d4f95b", "name": "Desk Organizer", "instruction": "Let's create a 3D desk organizer. Start with a rectangular base measuring 8 inches by 5 inches. Add three compartments of varying sizes on top: one for pens and pencils, one for sticky notes, and one for paper clips. Each compartment should be a simple rectangular shape.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (4, 2.5, 0.25)  # 8 inches by 5 inches by 0.5 inches thick\nbase.name = \"Base\"\n\n# Step 3: Create the Compartments\n# Pen and Pencil Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-2.5, 0, 1))\ncompartment1 = bpy.context.object\ncompartment1.scale = (1.5, 2.5, 1)  # 3 inches by 5 inches by 2 inches high\ncompartment1.name = \"Pen and Pencil Compartment\"\n\n# Sticky Notes Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 1.25, 0.75))\ncompartment2 = bpy.context.object\ncompartment2.scale = (1.5, 1, 0.75)  # 3 inches by 2 inches by 1.5 inches high\ncompartment2.name = \"Sticky Notes Compartment\"\n\n# Paper Clips Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, -1.25, 0.5))\ncompartment3 = bpy.context.object\ncompartment3.scale = (1.5, 1, 0.5)  # 3 inches by 2 inches by 1 inch high\ncompartment3.name = \"Paper Clips Compartment\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 4.0}
{"id": "b6a06539-99f3-47eb-a776-fd71cdddec78", "name": "Syringe", "instruction": "Design a syringe with a clear barrel and a plunger. It should be marked with measurement lines for precise dosing. The needle should be detachable, and the plunger should have a thumb rest for easy use.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (0.8, 0.8, 0.8, 0.2)  # Clear material with some transparency\nplunger_material = bpy.data.materials.new(name=\"Plunger\")\nplunger_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for plunger\nneedle_material = bpy.data.materials.new(name=\"Needle\")\nneedle_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for needle\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Thumb Rest\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, 2.05))\nthumb_rest = bpy.context.object\nthumb_rest.name = \"Thumb Rest\"\nthumb_rest.data.materials.append(plunger_material)\n\n# Step 5: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -0.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_material)\n\n# Step 6: Create Measurement Lines\nfor i in range(10):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.11, 0, 0.2 * i))\n    line = bpy.context.object\n    line.name = f\"Measurement Line {i + 1}\"\n    line.rotation_euler[1] = 1.5708  # Rotate 90 degrees\n    line.data.materials.append(plunger_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.687076168654325, "unit_n": 14, "param_ratio": 2.7857142857142856}
{"id": "fa0170fe-afe7-4001-8545-365de73de59f", "name": "Solar Charger", "instruction": "Let's conceptualize a solar charger designed to power small devices. It should have a fold-out panel with solar cells and a storage area for cables and adapters.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsolar_panel_color = bpy.data.materials.new(name=\"Solar Panel\")\nsolar_panel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for solar panel\nstorage_color = bpy.data.materials.new(name=\"Storage\")\nstorage_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color for storage area\n\n# Step 2: Create the Fold-out Panel\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.1))\nfold_out_panel = bpy.context.object\nfold_out_panel.name = \"Fold-out Panel\"\nfold_out_panel.data.materials.append(solar_panel_color)\n\n# Step 3: Create the Storage Area\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0.5))\nstorage_area = bpy.context.object\nstorage_area.name = \"Storage Area\"\nstorage_area.scale[2] = 0.5  # Make it flatter\nstorage_area.data.materials.append(storage_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "c8b8c077-fc76-488d-846b-86d8324359f4", "name": "Wall Shelf", "instruction": "Could you create a wall shelf? It should be a simple rectangular plank that can be mounted on a wall.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Shelf\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nshelf = bpy.context.object\nshelf.name = \"Shelf\"\n\n# Scale the cube to make it a plank\nshelf.scale[0] = 2  # Length\nshelf.scale[1] = 0.2  # Depth\nshelf.scale[2] = 0.1  # Height\n\n# Optional: Add a material to the shelf\nshelf_material = bpy.data.materials.new(name=\"Shelf Material\")\nshelf_material.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color\nshelf.data.materials.append(shelf_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "f0805446-61df-4393-a7ad-b71f44092420", "name": "Marker Pen", "instruction": "Please generate a 3D model of a marker pen with a cap and a fine point tip for detailed work.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncap_color = bpy.data.materials.new(name=\"Cap Color\")\ncap_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ntip_color = bpy.data.materials.new(name=\"Tip Color\")\ntip_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.3, location=(0, 0, 0.65))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(cap_color)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.02, radius2=0.005, depth=0.1, location=(0, 0, -0.55))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(tip_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.45525004013403, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "9badcb65-1fed-4cee-8bf8-4e58145ff9cf", "name": "Circuit Breaker", "instruction": "I'd like a 3D model of a circuit breaker. It should have a rectangular shape with a switch on the front. The back should have connectors for wiring.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body of the Circuit Breaker\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Circuit Breaker Body\"\nbody.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1, 0.75))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(black)\n\n# Step 4: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(-0.5 + i * 0.5, -1.25, -0.75), rotation=(1.5708, 0, 0))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.022312769586077, "unit_n": 5, "param_ratio": 5.2}
{"id": "0173fced-7867-40a0-972e-d18260512d4b", "name": "Basketball Hoop", "instruction": "Create a 3D model of a basketball hoop. The hoop should be a circular metal ring with a net hanging from it. Attach the hoop to a rectangular backboard. The backboard should be mounted on a pole that can be adjusted for height. Ensure the base of the pole is stable for safe play.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray metal color\nnet_color = bpy.data.materials.new(name=\"Net\")\nnet_color.diffuse_color = (1, 1, 1, 1)  # White net color\nbackboard_color = bpy.data.materials.new(name=\"Backboard\")\nbackboard_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray backboard color\npole_color = bpy.data.materials.new(name=\"Pole\")\npole_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray pole color\n\n# Step 2: Create the Hoop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.45, minor_radius=0.02, location=(0, 0, 2.5))\nhoop = bpy.context.object\nhoop.name = \"Hoop\"\nhoop.data.materials.append(metal_color)\n\n# Step 3: Create the Net\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=0.5, location=(0, 0, 2.25))\nnet = bpy.context.object\nnet.name = \"Net\"\nnet.scale = (1, 1, 0.5)\nnet.data.materials.append(net_color)\n\n# Step 4: Create the Backboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 2.75))\nbackboard = bpy.context.object\nbackboard.name = \"Backboard\"\nbackboard.scale = (1.5, 0.1, 1)\nbackboard.data.materials.append(backboard_color)\n\n# Step 5: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=5, location=(0, -0.6, 0.75))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(pole_color)\n\n# Step 6: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 0.1)\nbase.data.materials.append(pole_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5070346702057202, "unit_n": 5, "param_ratio": 8.6}
{"id": "179bd7ac-de1e-43c9-aedd-4402659b1193", "name": "Bird Feeder", "instruction": "Create a bird feeder. Start with a cylindrical container for holding birdseed. Attach a circular perch around the base of the container. Add a small roof on top to protect the seed from rain.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define a color for the bird feeder\nfeeder_color = bpy.data.materials.new(name=\"FeederColor\")\nfeeder_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Cylindrical Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(feeder_color)\n\n# Step 3: Create the Circular Perch\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(feeder_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=0.3, location=(0, 0, 1.65))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(feeder_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.23372934507823, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "11bc0c8c-5e68-4e5f-8520-a0faa1bd742f", "name": "Abstract Pattern", "instruction": "Generate a 3D model featuring an abstract pattern. The pattern should consist of interwoven lines and shapes, creating a complex and visually interesting design.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nabstract_color = bpy.data.materials.new(name=\"Abstract Color\")\nabstract_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Interwoven Lines and Shapes\n# Create a series of interwoven torus shapes\nfor i in range(5):\n    angle = i * math.pi / 5\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(math.cos(angle), math.sin(angle), 0))\n    torus = bpy.context.object\n    torus.name = f\"Torus {i + 1}\"\n    torus.data.materials.append(abstract_color)\n\n# Create a series of interwoven cylinders\nfor i in range(5):\n    angle = i * math.pi / 5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(math.cos(angle), math.sin(angle), 0), rotation=(0, 0, angle))\n    cylinder = bpy.context.object\n    cylinder.name = f\"Cylinder {i + 1}\"\n    cylinder.data.materials.append(abstract_color)\n\n# Create a series of interwoven spheres\nfor i in range(5):\n    angle = i * math.pi / 5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(math.cos(angle), math.sin(angle), 0))\n    sphere = bpy.context.object\n    sphere.name = f\"Sphere {i + 1}\"\n    sphere.data.materials.append(abstract_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.722418422486024, "unit_n": 15, "param_ratio": 1.4666666666666666}
{"id": "544d8c0f-ac9f-4e38-88bc-f4939c002995", "name": "Smartphone", "instruction": "Design a 3D model of a smartphone. It should be a rectangular device with a touchscreen on the front. Include a camera and a speaker at the top. Add buttons on the side for volume control.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Touchscreen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Touchscreen\"\nscreen.scale = (0.45, 0.95, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0.9, 0.06))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(black)\n\n# Step 5: Create the Speaker\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.8, 0.06))\nspeaker = bpy.context.object\nspeaker.name = \"Speaker\"\nspeaker.scale = (0.3, 0.05, 0.1)\nspeaker.data.materials.append(black)\n\n# Step 6: Create the Volume Buttons\nfor i in range(2):\n    y = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.55, y, 0))\n    button = bpy.context.object\n    button.name = f\"Volume Button {i + 1}\"\n    button.scale = (0.05, 0.2, 0.02)\n    button.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.166286621990099, "unit_n": 6, "param_ratio": 5.0}
{"id": "b4297d16-34f1-4a01-8cad-c0f31d22182b", "name": "Electrical Transformer", "instruction": "Construct a 3D model of an electrical transformer. The model should include a main cylindrical body with cooling fins on the sides. At the top, there should be multiple insulator bushings. Include a base with mounting brackets. The model should also feature a control panel and a series of connection points for high-voltage cables.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_grey = bpy.data.materials.new(name=\"Metal Grey\")\nmetal_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal grey color\n\n# Step 2: Create the Main Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(metal_grey)\n\n# Step 3: Create the Cooling Fins\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 1.2 * math.cos(angle)\n    y = 1.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 1))\n    fin = bpy.context.object\n    fin.scale[2] = 2\n    fin.name = f\"Cooling Fin {i + 1}\"\n    fin.data.materials.append(metal_grey)\n\n# Step 4: Create the Insulator Bushings\nfor i in range(3):\n    x = 0.5 * (i - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 2.5))\n    bushing = bpy.context.object\n    bushing.name = f\"Insulator Bushing {i + 1}\"\n    bushing.data.materials.append(metal_grey)\n\n# Step 5: Create the Base with Mounting Brackets\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.scale[2] = 0.25\nbase.name = \"Base\"\nbase.data.materials.append(metal_grey)\n\nfor i in range(4):\n    x = 1.1 * (i % 2 * 2 - 1)\n    y = 1.1 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, y, -0.5))\n    bracket = bpy.context.object\n    bracket.scale[2] = 0.5\n    bracket.name = f\"Mounting Bracket {i + 1}\"\n    bracket.data.materials.append(metal_grey)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, 0, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(metal_grey)\n\n# Step 7: Create the Connection Points for High-Voltage Cables\nfor i in range(3):\n    x = 0.5 * (i - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, 0, 2.7))\n    connection_point = bpy.context.object\n    connection_point.name = f\"Connection Point {i + 1}\"\n    connection_point.data.materials.append(metal_grey)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.771135236812383, "unit_n": 21, "param_ratio": 1.7142857142857142}
{"id": "0c146b02-a34f-41ee-89fb-3818b02a0144", "name": "Dog Bowl", "instruction": "Create a 3D model of a dog bowl. It should be round and shallow.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0))\nbowl_outer = bpy.context.object\nbowl_outer.name = \"Bowl Outer\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.4, location=(0, 0, 0.05))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Create the Hollow Part\nmod_bool = bowl_outer.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\nbpy.context.view_layer.objects.active = bowl_outer\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner cylinder\nbpy.data.objects.remove(bowl_inner, do_unlink=True)\n\n# Optional: Add a material to the bowl\nmaterial = bpy.data.materials.new(name=\"BowlMaterial\")\nmaterial.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nbowl_outer.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 7.5}
{"id": "74902cc2-838a-4c4b-8ec9-0be397d6555e", "name": "Microscope", "instruction": "Create a 3D model of a microscope. It should have an eyepiece at the top, a rotating nosepiece with multiple objective lenses, and a stage for placing slides. Add focusing knobs on the side and a base for stability.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0))\narm = bpy.context.object\narm.scale = (0.2, 0.5, 2)\narm.name = \"Arm\"\narm.data.materials.append(black)\n\n# Step 4: Create the Stage\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1))\nstage = bpy.context.object\nstage.scale = (1, 1, 0.1)\nstage.name = \"Stage\"\nstage.data.materials.append(gray)\n\n# Step 5: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 2.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(black)\n\n# Step 6: Create the Nosepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(0, 0, 2))\nnosepiece = bpy.context.object\nnosepiece.name = \"Nosepiece\"\nnosepiece.data.materials.append(gray)\n\n# Step 7: Create the Objective Lenses\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 1.75))\n    lens = bpy.context.object\n    lens.name = f\"Objective Lens {i + 1}\"\n    lens.data.materials.append(black)\n\n# Step 8: Create the Focusing Knobs\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, 0, 1))\n    knob = bpy.context.object\n    knob.rotation_euler = (0, math.pi / 2, 0)\n    knob.name = f\"Focusing Knob {i + 1}\"\n    knob.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4504620798238466, "unit_n": 10, "param_ratio": 4.2}
{"id": "a5118688-c433-40e7-8201-6cf4b82ffa60", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker. The breaker should be rectangular and compact, with a switch on the front for turning it on and off. The back should have two terminals for connecting wires. The front should also have a small window to indicate if the breaker is on or off.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Main Body of the Circuit Breaker\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.scale = (0.5, 0.3, 0.8)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.35, 0.2))\nswitch = bpy.context.object\nswitch.scale = (0.2, 0.05, 0.1)\nswitch.name = \"Switch\"\nswitch.data.materials.append(black)\n\n# Step 4: Create the Terminals\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0.2 * (i * 2 - 1), -0.35, -0.35))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.data.materials.append(black)\n\n# Step 5: Create the Indicator Window\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.35, -0.2))\nindicator_window = bpy.context.object\nindicator_window.scale = (0.1, 0.01, 0.05)\nindicator_window.name = \"Indicator Window\"\nindicator_window.data.materials.append(red)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.114388849079752, "unit_n": 5, "param_ratio": 6.4}
{"id": "a116119f-2f21-4d2c-bf32-ee33dc102ada", "name": "Bicycle", "instruction": "Design a bicycle with two wheels, a frame, handlebars, a seat, and pedals. Ensure the handlebars are connected to the front wheel and the pedals are connected to a chain that drives the rear wheel.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Wheels\nfor i in [-1, 1]:\n    bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(i * 2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {'Front' if i == 1 else 'Rear'}\"\n    wheel.data.materials.append(black)\n\n# Step 3: Create the Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=4, location=(0, 0, 0.5), rotation=(0, math.pi/4, 0))\nframe_top = bpy.context.object\nframe_top.name = \"Frame Top\"\nframe_top.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(-1, 0, 0.5), rotation=(0, -math.pi/4, 0))\nframe_bottom = bpy.context.object\nframe_bottom.name = \"Frame Bottom\"\nframe_bottom.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(1.5, 0, 0.75), rotation=(0, math.pi/2, 0))\nframe_vertical = bpy.context.object\nframe_vertical.name = \"Frame Vertical\"\nframe_vertical.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.5, location=(-0.5, 0, 1.25), rotation=(0, math.pi/4, 0))\nframe_diagonal = bpy.context.object\nframe_diagonal.name = \"Frame Diagonal\"\nframe_diagonal.data.materials.append(metal)\n\n# Step 4: Create the Handlebars\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(2, 0, 1.5), rotation=(0, 0, math.pi/2))\nhandlebar = bpy.context.object\nhandlebar.name = \"Handlebar\"\nhandlebar.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.5, location=(2.5, 0, 1.5), rotation=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle Left\"\nhandle.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.5, location=(1.5, 0, 1.5), rotation=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle Right\"\nhandle.data.materials.append(metal)\n\n# Step 5: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1, 0, 1.75))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(black)\n\n# Step 6: Create the Pedals and Chain\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(-1.2, 0.2, 0.5), rotation=(0, math.pi/2, 0))\npedal = bpy.context.object\npedal.name = \"Pedal Left\"\npedal.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(-1.2, -0.2, 0.5), rotation=(0, math.pi/2, 0))\npedal = bpy.context.object\npedal.name = \"Pedal Right\"\npedal.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.2, 0, 0.5), rotation=(0, 0, math.pi/2))\nchain = bpy.context.object\nchain.name = \"Chain\"\nchain.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 4.430221277625398, "unit_n": 12, "param_ratio": 8.25}
{"id": "73e38506-0df8-4502-9785-0aeb891241cf", "name": "Forklift", "instruction": "Design a forklift with a compact body, a lifting mast, and two forks in the front for lifting pallets.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\nfork_color = bpy.data.materials.new(name=\"Fork Color\")\nfork_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 1.5, 0.5)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lifting Mast\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.75, 1.25))\nmast = bpy.context.object\nmast.name = \"Mast\"\nmast.scale = (0.1, 0.1, 1.5)\nmast.data.materials.append(body_color)\n\n# Step 4: Create the Forks\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 1.25, 0.1))\n    fork = bpy.context.object\n    fork.name = f\"Fork {i + 1}\"\n    fork.scale = (0.1, 0.5, 0.1)\n    fork.data.materials.append(fork_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 5.5}
{"id": "4c808ab6-d4a7-4c8a-b38a-4b890c21d32d", "name": "Sofa", "instruction": "Let's create a 3D model of a sofa. Start with a rectangular base that measures 70 inches in length and 30 inches in width. Add a backrest that is 30 inches high and spans the entire length of the base. Include armrests on each side, each measuring 5 inches wide and 25 inches high. Finally, add three seat cushions and three back cushions, all of the same size, to fit the sofa.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Convert inches to Blender units (assuming 1 inch = 0.0254 meters)\ninch_to_meter = 0.0254\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25 * inch_to_meter))\nbase = bpy.context.object\nbase.scale = (35 * inch_to_meter, 15 * inch_to_meter, 0.5 * inch_to_meter)\nbase.name = \"Base\"\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -15 * inch_to_meter, 15 * inch_to_meter + 0.5 * inch_to_meter))\nbackrest = bpy.context.object\nbackrest.scale = (35 * inch_to_meter, 0.5 * inch_to_meter, 15 * inch_to_meter)\nbackrest.name = \"Backrest\"\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 35 * inch_to_meter * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 12.5 * inch_to_meter))\n    armrest = bpy.context.object\n    armrest.scale = (0.5 * inch_to_meter, 15 * inch_to_meter, 12.5 * inch_to_meter)\n    armrest.name = f\"Armrest {i + 1}\"\n\n# Step 5: Create the Seat Cushions\nfor i in range(3):\n    x = (i - 1) * 23.33 * inch_to_meter\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1 * inch_to_meter))\n    seat_cushion = bpy.context.object\n    seat_cushion.scale = (11.67 * inch_to_meter, 15 * inch_to_meter, 1 * inch_to_meter)\n    seat_cushion.name = f\"Seat Cushion {i + 1}\"\n\n# Step 6: Create the Back Cushions\nfor i in range(3):\n    x = (i - 1) * 23.33 * inch_to_meter\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -15 * inch_to_meter + 0.5 * inch_to_meter, 15 * inch_to_meter))\n    back_cushion = bpy.context.object\n    back_cushion.scale = (11.67 * inch_to_meter, 0.5 * inch_to_meter, 12.5 * inch_to_meter)\n    back_cushion.name = f\"Back Cushion {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.654222095085939, "unit_n": 10, "param_ratio": 2.0}
{"id": "077d0605-c88a-4ad1-a7ea-eb9ecc1e8df0", "name": "Sandwich", "instruction": "Imagine a sandwich. It consists of two slices of bread with layers of lettuce, tomatoes, and cheese in between.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale.z = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale.z = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale.z = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale.z = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale.z = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "dfb3e33f-892b-4209-9503-c6837122a03d", "name": "Skateboard", "instruction": "Design a skateboard with a flat deck, grip tape on top, and four wheels attached to the bottom.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeck_color = bpy.data.materials.new(name=\"Deck Color\")\ndeck_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the deck\ngrip_tape_color = bpy.data.materials.new(name=\"Grip Tape Color\")\ngrip_tape_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color for the grip tape\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the wheels\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale = (3, 0.5, 0.05)  # Scale to make it flat and long\ndeck.data.materials.append(deck_color)\n\n# Step 3: Create the Grip Tape\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\ngrip_tape = bpy.context.object\ngrip_tape.name = \"Grip Tape\"\ngrip_tape.scale = (2.95, 0.45, 0.01)  # Slightly smaller than the deck\ngrip_tape.data.materials.append(grip_tape_color)\n\n# Step 4: Create the Wheels\nwheel_positions = [(-2.5, -0.6, -0.1), (2.5, -0.6, -0.1), (-2.5, 0.6, -0.1), (2.5, 0.6, -0.1)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=pos, rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.107444985261333, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "1d0080c1-828a-4d55-8cb7-6387d5f31df7", "name": "Bird Cage", "instruction": "Create a bird cage that is cylindrical with a diameter of 18 inches and a height of 24 inches. The cage should have vertical bars spaced half an inch apart. There should be a small door on one side with a latch. Inside the cage, add a perch that runs horizontally across the diameter, positioned halfway up. Also, include a small water dish attached to the side of the cage. The top of the cage should have a handle for easy carrying.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Conversion factor from inches to Blender units (assuming 1 unit = 1 meter)\ninch_to_meter = 0.0254\n\n# Cage dimensions\ndiameter = 18 * inch_to_meter\nradius = diameter / 2\nheight = 24 * inch_to_meter\nbar_spacing = 0.5 * inch_to_meter\n\n# Step 2: Create the Cage Base\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=0.02, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Cage Base\"\n\n# Step 3: Create the Cage Top\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=0.02, location=(0, 0, height))\ntop = bpy.context.object\ntop.name = \"Cage Top\"\n\n# Step 4: Create the Vertical Bars\nnum_bars = int(math.pi * diameter / bar_spacing)\nfor i in range(num_bars):\n    angle = 2 * math.pi * i / num_bars\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=height, location=(x, y, height / 2))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n\n# Step 5: Create the Door\ndoor_width = 4 * inch_to_meter\ndoor_height = 6 * inch_to_meter\nbpy.ops.mesh.primitive_plane_add(size=door_width, location=(radius, 0, door_height / 2))\ndoor = bpy.context.object\ndoor.name = \"Door\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1, door_height / door_width, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 6: Create the Latch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(radius + 0.05, 0, door_height / 2))\nlatch = bpy.context.object\nlatch.name = \"Latch\"\n\n# Step 7: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=diameter, location=(0, 0, height / 2))\nperch = bpy.context.object\nperch.name = \"Perch\"\nbpy.ops.transform.rotate(value=math.pi / 2, orient_axis='Y')\n\n# Step 8: Create the Water Dish\ndish_radius = 1.5 * inch_to_meter\nbpy.ops.mesh.primitive_cylinder_add(radius=dish_radius, depth=0.05, location=(radius - dish_radius, 0, height / 2 - dish_radius))\ndish = bpy.context.object\ndish.name = \"Water Dish\"\n\n# Step 9: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, height + 0.1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"", "color_brightness": "Dark", "verify": "human", "entropy": 4.407492239428143, "unit_n": 8, "param_ratio": 4.0}
{"id": "141b52bf-5064-44e9-b8d8-a8f9b2a13271", "name": "Wind Turbine", "instruction": "I'm looking for a 3D model of a wind turbine. It should feature a tall tower, a nacelle at the top, and three long blades. The model should capture the blades in a mid-rotation position, emphasizing the movement and function of the turbine.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Tower\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=10, location=(0, 0, 5))\ntower = bpy.context.object\ntower.name = \"Tower\"\n\n# Step 3: Create the Nacelle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 10.5))\nnacelle = bpy.context.object\nnacelle.name = \"Nacelle\"\n\n# Step 4: Create the Blades\nfor i in range(3):\n    angle = i * (2 * math.pi / 3) + math.pi / 6  # mid-rotation position\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(math.cos(angle) * 3, math.sin(angle) * 3, 10.5))\n    blade = bpy.context.object\n    blade.name = f\"Blade {i + 1}\"\n    blade.rotation_euler = (0, math.radians(90), angle)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.341622523957121, "unit_n": 5, "param_ratio": 2.6}
{"id": "53c29adf-d407-40f6-abdd-019c5d5df741", "name": "Freight Elevator", "instruction": "Design a freight elevator. The cabin should be 3 meters wide, 4 meters deep, and 3 meters high, with reinforced walls and a double sliding door. Include control panels inside and outside, with buttons for different floors. Ensure there's an emergency stop button and a load capacity indicator inside the cabin.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey metal color\n\n# Step 2: Create the Cabin\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.5))\ncabin = bpy.context.object\ncabin.scale = (1.5, 2, 1.5)\ncabin.name = \"Cabin\"\ncabin.data.materials.append(metal_color)\n\n# Step 3: Create the Double Sliding Door\n# Left door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.75, 2.01, 1.5))\nleft_door = bpy.context.object\nleft_door.scale = (0.75, 0.05, 1.5)\nleft_door.name = \"Left Door\"\nleft_door.data.materials.append(metal_color)\n\n# Right door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.75, 2.01, 1.5))\nright_door = bpy.context.object\nright_door.scale = (0.75, 0.05, 1.5)\nright_door.name = \"Right Door\"\nright_door.data.materials.append(metal_color)\n\n# Step 4: Create the Control Panels\n# Inside control panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.45, 1.9, 1.5))\ninside_panel = bpy.context.object\ninside_panel.scale = (0.05, 0.05, 0.3)\ninside_panel.name = \"Inside Control Panel\"\ninside_panel.data.materials.append(metal_color)\n\n# Outside control panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 2.1, 1.5))\noutside_panel = bpy.context.object\noutside_panel.scale = (0.05, 0.05, 0.3)\noutside_panel.name = \"Outside Control Panel\"\noutside_panel.data.materials.append(metal_color)\n\n# Step 5: Create the Emergency Stop Button\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.45, 1.9, 1.2))\nemergency_button = bpy.context.object\nemergency_button.scale = (0.05, 0.05, 0.05)\nemergency_button.name = \"Emergency Stop Button\"\nemergency_button.data.materials.append(metal_color)\n\n# Step 6: Create the Load Capacity Indicator\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-1.45, 1.9, 1.8))\nload_indicator = bpy.context.object\nload_indicator.scale = (0.05, 0.05, 0.1)\nload_indicator.name = \"Load Capacity Indicator\"\nload_indicator.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.134162458586648, "unit_n": 7, "param_ratio": 4.714285714285714}
{"id": "b0c08e8a-976a-4013-a67f-6fdd5ae66c78", "name": "Emblem", "instruction": "Let's design a 3D model of an emblem. It should be circular with a basic geometric shape in the center, surrounded by a ring with a simple pattern or text.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nemblem_color = bpy.data.materials.new(name=\"EmblemColor\")\nemblem_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Circular Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(emblem_color)\n\n# Step 3: Create the Geometric Shape in the Center (e.g., a cube)\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 0.3))\ncenter_shape = bpy.context.object\ncenter_shape.name = \"CenterShape\"\ncenter_shape.data.materials.append(emblem_color)\n\n# Step 4: Create the Surrounding Ring with Simple Pattern (e.g., text)\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.05, location=(0, 0, 0.05))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(emblem_color)\n\n# Add text to the ring\nbpy.ops.object.text_add(location=(0, 0, 0.2))\ntext = bpy.context.object\ntext.data.body = \"Emblem\"\ntext.data.materials.append(emblem_color)\ntext.scale = (0.2, 0.2, 0.2)\ntext.rotation_euler = (0, 0, 0)\ntext.location = (0.8, 0, 0.2)\n\n# Convert text to mesh\nbpy.context.view_layer.objects.active = text\nbpy.ops.object.convert(target='MESH')\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.913084149267502, "unit_n": 4, "param_ratio": 5.5}
{"id": "2ba48118-6f43-4b6e-b2e8-81f34879c0d4", "name": "Laptop", "instruction": "Let's build a 3D model of a laptop. Start with a rectangular base that houses the keyboard and touchpad. The screen should be attached to the base with hinges, allowing it to open and close. Include a keyboard layout with individual keys and a touchpad below it. The screen should be a flat, rectangular display.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 1.1, 1.1))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.rotation_euler[0] = 1.57  # Rotate to stand vertically\n\n# Step 4: Create the Hinges\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(-0.85, 0.55, 0.1))\nhinge1 = bpy.context.object\nhinge1.name = \"Hinge 1\"\nhinge1.rotation_euler[1] = 1.57  # Rotate to align with the base\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.85, 0.55, 0.1))\nhinge2 = bpy.context.object\nhinge2.name = \"Hinge 2\"\nhinge2.rotation_euler[1] = 1.57  # Rotate to align with the base\n\n# Step 5: Create the Keyboard Layout\nfor i in range(5):\n    for j in range(10):\n        bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.9 + j * 0.2, -0.4 + i * 0.2, 0.15))\n        key = bpy.context.object\n        key.name = f\"Key {i * 10 + j + 1}\"\n        key.scale[2] = 0.1\n\n# Step 6: Create the Touchpad\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, -0.8, 0.15))\ntouchpad = bpy.context.object\ntouchpad.name = \"Touchpad\"\ntouchpad.scale[2] = 0.05", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.436554405193668, "unit_n": 55, "param_ratio": 0.4727272727272727}
{"id": "b537dc7b-0dfe-489c-bd5f-0eec9089da13", "name": "Monitor Stand", "instruction": "Develop a 3D model of a monitor stand that can hold a single computer monitor. The stand should have an adjustable height mechanism and a wide base for stability. Ensure the top platform is large enough to accommodate a standard monitor. Add cable management features at the back of the stand to keep wires organized.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 1.5  # Wide base\nbase.scale[1] = 0.5\nbase.scale[2] = 0.1\nbase.data.materials.append(metal)\n\n# Step 3: Create the Adjustable Height Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.6))\nheight_mechanism = bpy.context.object\nheight_mechanism.name = \"Height Mechanism\"\nheight_mechanism.data.materials.append(metal)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.1))\ntop_platform = bpy.context.object\ntop_platform.name = \"Top Platform\"\ntop_platform.scale[0] = 1.2  # Large enough for a standard monitor\ntop_platform.scale[1] = 0.6\ntop_platform.scale[2] = 0.1\ntop_platform.data.materials.append(metal)\n\n# Step 5: Create Cable Management Features\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, -0.3, 0.6), rotation=(1.5708, 0, 0))\ncable_management = bpy.context.object\ncable_management.name = \"Cable Management\"\ncable_management.data.materials.append(metal)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.224159274152706, "unit_n": 4, "param_ratio": 6.5}
{"id": "ee1a53e1-59b5-4d9e-981f-0d8cc2cc3c2d", "name": "Juicer", "instruction": "Create a cylindrical juicer with a spout on one side.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body of the Juicer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\njuicer_body = bpy.context.object\njuicer_body.name = \"Juicer Body\"\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.1, 0, 0.75), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\n\n# Step 4: Join the Spout to the Main Body\nbpy.ops.object.select_all(action='DESELECT')\njuicer_body.select_set(True)\nspout.select_set(True)\nbpy.context.view_layer.objects.active = juicer_body\nbpy.ops.object.join()\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.723707852188834, "unit_n": 2, "param_ratio": 6.5}
{"id": "e5e5faa7-2cdc-4379-a851-808d2de22520", "name": "Coffee Grinder", "instruction": "Let's make a 3D model of a coffee grinder. This grinder should be cylindrical with a hand crank on the top. The base should have a small drawer to collect the ground coffee. The crank should be positioned at a slight angle, ready for use. The grinder should feature a simple, functional design without any extra embellishments.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color for metal\n\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for wood\n\n# Step 2: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ngrinder_body = bpy.context.object\ngrinder_body.name = \"Grinder Body\"\ngrinder_body.data.materials.append(metal)\n\n# Step 3: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.1, 0.5))\ndrawer = bpy.context.object\ndrawer.scale = (0.5, 0.3, 0.3)\ndrawer.name = \"Drawer\"\ndrawer.data.materials.append(wood)\n\n# Step 4: Create the Crank Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 2.1))\ncrank_base = bpy.context.object\ncrank_base.name = \"Crank Base\"\ncrank_base.data.materials.append(metal)\n\n# Step 5: Create the Crank Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 2.3), rotation=(0, math.radians(45), 0))\ncrank_arm = bpy.context.object\ncrank_arm.name = \"Crank Arm\"\ncrank_arm.data.materials.append(metal)\n\n# Step 6: Create the Crank Handle\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0.7, 0.7, 2.3))\ncrank_handle = bpy.context.object\ncrank_handle.name = \"Crank Handle\"\ncrank_handle.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.5786162344801893, "unit_n": 5, "param_ratio": 7.2}
{"id": "1fb8160a-e0a8-4d38-be77-11c63f61de94", "name": "Sofa", "instruction": "Can you create a sofa? It should have a rectangular base with two armrests on either side. Add a backrest that spans the length of the sofa.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # A medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.5  # Height\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)  # Position on either side of the base\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2  # Thickness\n    armrest.scale[1] = 1  # Same width as the base\n    armrest.scale[2] = 1  # Height\n    armrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.5))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2  # Same length as the base\nbackrest.scale[1] = 0.2  # Thickness\nbackrest.scale[2] = 1  # Height\nbackrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.119162312519754, "unit_n": 4, "param_ratio": 4.25}
{"id": "94bf0fd1-d0c7-45ce-a3a5-e29d801df25b", "name": "Sandwich", "instruction": "Design a sandwich. It should have two slices of bread with layers of ingredients in between. The ingredients should include lettuce, tomato, cheese, and a slice of meat.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nmeat_color = bpy.data.materials.new(name=\"Meat\")\nmeat_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for meat\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale.z = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale.z = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale.z = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale.z = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Meat Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nmeat = bpy.context.object\nmeat.scale.z = 0.1\nmeat.name = \"Meat\"\nmeat.data.materials.append(meat_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale.z = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "6a64ea90-deb3-44c5-8f7c-6fdd2ee41636", "name": "Food Processor", "instruction": "Create a 3D model of a food processor with a simple design, including a base, a bowl, and a lid with a feed tube.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1, location=(0, 0, 1.25))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 1.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 5: Create the Feed Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 2.05))\nfeed_tube = bpy.context.object\nfeed_tube.name = \"Feed Tube\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.916386202594907, "unit_n": 4, "param_ratio": 5.0}
{"id": "1728c322-d229-436e-8c0a-604c9f6caef9", "name": "Dining Table", "instruction": "Create a dining table. Imagine a rectangular top supported by four legs, one at each corner. Ensure the table is proportionate and functional for dining purposes.", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the table\ntable_color = bpy.data.materials.new(name=\"Table Color\")\ntable_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(table_color)\n\n# Step 3: Create the Legs\nleg_height = 1  # Height of the legs\nleg_radius = 0.1  # Radius of the legs\n\n# Positions for the legs\nleg_positions = [\n    (1.9, 0.9, leg_height / 2),\n    (-1.9, 0.9, leg_height / 2),\n    (1.9, -0.9, leg_height / 2),\n    (-1.9, -0.9, leg_height / 2)\n]\n\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(table_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.2826589178640315, "unit_n": 2, "param_ratio": 4.5}
{"id": "51239a35-61ab-42a9-89f2-0d7646f54b8d", "name": "Power Supply Unit", "instruction": "Create a 3D model of a power supply unit. It should be a rectangular box with dimensions of 15 centimeters by 10 centimeters by 5 centimeters. Include a power switch and a power cord.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Rectangular Box\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbox = bpy.context.object\nbox.name = \"Power Supply Unit\"\nbox.scale = (0.15, 0.1, 0.05)\n\n# Step 3: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.07, 0, 0.04))\npower_switch = bpy.context.object\npower_switch.name = \"Power Switch\"\npower_switch.scale = (0.4, 0.2, 1)\n\n# Step 4: Create the Power Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.5, location=(-0.08, 0, -0.025), rotation=(1.5708, 0, 0))\npower_cord = bpy.context.object\npower_cord.name = \"Power Cord\"\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.0154272125579764, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "fc67a42b-5965-46fc-99d3-6590328dfd1a", "name": "Chess Set", "instruction": "Create a 3D model of a chess set. Include a chessboard with alternating black and white squares. Model all the chess pieces, including pawns, rooks, knights, bishops, queens, and kings. Show the pieces in their starting positions on the board.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Create a simple pawn model\ndef create_pawn(location, color):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.2))\n    pawn_head = bpy.context.object\n    pawn_head.data.materials.append(color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.4, location=(location[0], location[1], location[2] - 0.2))\n    pawn_body = bpy.context.object\n    pawn_body.data.materials.append(color)\n\n# Step 4: Place pawns on the board\nfor i in range(board_size):\n    create_pawn((i * square_size, 1 * square_size, 0), white)\n    create_pawn((i * square_size, 6 * square_size, 0), black)\n\n# Note: The rest of the pieces (rooks, knights, bishops, queens, and kings) would be modeled similarly\n# For simplicity, we will only create pawns in this example\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.156095101122521, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "de2015dc-b5a0-4e06-b8fe-5f6f3ad9d167", "name": "Keyboard", "instruction": "Let's create a 3D model of a keyboard. The keyboard should be rectangular, about 45cm wide and 15cm deep. It should have a standard QWERTY layout with rectangular keys. Each key should have a small letter or symbol on it. The keyboard should be slightly angled for comfortable typing.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nkeyboard_color = bpy.data.materials.new(name=\"KeyboardColor\")\nkeyboard_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nkey_color = bpy.data.materials.new(name=\"KeyColor\")\nkey_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Keyboard Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nkeyboard_base = bpy.context.object\nkeyboard_base.scale = (0.45, 0.15, 0.02)  # 45cm wide, 15cm deep, and 2cm thick\nkeyboard_base.rotation_euler = (math.radians(5), 0, 0)  # Slightly angled\nkeyboard_base.data.materials.append(keyboard_color)\n\n# Step 3: Create the Keys\nrows = [\"QWERTYUIOP\", \"ASDFGHJKL\", \"ZXCVBNM\"]\nkey_width = 0.04\nkey_height = 0.04\nkey_depth = 0.02\nkey_spacing = 0.05\n\nfor row_index, row in enumerate(rows):\n    for key_index, key in enumerate(row):\n        x = (key_index - len(row) / 2) * key_spacing\n        y = (row_index - len(rows) / 2) * key_spacing\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.03))\n        key_obj = bpy.context.object\n        key_obj.scale = (key_width, key_height, key_depth)\n        key_obj.data.materials.append(key_color)\n\n        # Add text to the key\n        bpy.ops.object.text_add(location=(x, y, 0.06))\n        text_obj = bpy.context.object\n        text_obj.data.body = key\n        text_obj.scale = (0.02, 0.02, 0.02)\n        text_obj.rotation_euler = (math.radians(90), 0, 0)\n        text_obj.data.materials.append(key_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.053618414397398, "unit_n": 3, "param_ratio": 7.0}
{"id": "d4c76d80-3b21-4780-b97c-0fa85a1f327d", "name": "Router", "instruction": "Create a router with a rectangular shape and four antennas. Add indicator lights on the front panel.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale[2] = 0.1  # Flatten the cube to make it a rectangular shape\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(4):\n    x = (i - 1.5) * 0.6\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, -0.5, 1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the Indicator Lights\nfor i in range(3):\n    x = (i - 1) * 0.3\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1, 0.55))\n    light = bpy.context.object\n    light.name = f\"Indicator Light {i + 1}\"\n    light.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.321222421796731, "unit_n": 8, "param_ratio": 2.875}
{"id": "0292f4c7-e398-4070-9ea9-0b7b05e72ce2", "name": "Wallpaper with Stripes", "instruction": "Create a wallpaper design that features vertical stripes. The stripes should alternate between two colors and be evenly spaced.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Stripes\nnum_stripes = 10\nstripe_width = 0.2\n\nfor i in range(num_stripes):\n    x = (i - num_stripes / 2) * stripe_width\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, 0, 0))\n    stripe = bpy.context.object\n    stripe.scale[0] = stripe_width / 2\n    stripe.scale[1] = 5  # Arbitrary large value to simulate wallpaper height\n    if i % 2 == 0:\n        stripe.data.materials.append(color1)\n    else:\n        stripe.data.materials.append(color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9172450519893096, "unit_n": 1, "param_ratio": 14.0}
{"id": "bafa45f1-c790-499c-af28-461e2b86687b", "name": "Trash Bin", "instruction": "Hi! I'd like a 3D model of a trash bin. The bin should have a rectangular shape with a hinged lid on top. The lid should have a small handle for easy opening. The body should be tall and narrow, with a flat base for stability. No need for any additional details or decorations.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body of the Trash Bin\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.scale = (0.5, 0.5, 1.5)\nbody.name = \"Trash Bin Body\"\n\n# Step 3: Create the Lid of the Trash Bin\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2.5))\nlid = bpy.context.object\nlid.scale = (0.55, 0.55, 0.1)\nlid.name = \"Trash Bin Lid\"\n\n# Step 4: Create the Handle on the Lid\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 2.7))\nhandle = bpy.context.object\nhandle.scale = (0.1, 0.1, 0.05)\nhandle.name = \"Lid Handle\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 4.0}
{"id": "74a2b647-254f-47ca-93d6-5a6255046338", "name": "Logo Design", "instruction": "Create a logo for a tech startup. The logo should combine elements of innovation and simplicity, using geometric shapes to form a unique symbol. Use clean lines and ensure the design is scalable for use on various platforms, from business cards to large banners.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntech_blue = bpy.data.materials.new(name=\"Tech Blue\")\ntech_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Tech blue color\n\n# Step 2: Create the Base Circle\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0))\nbase_circle = bpy.context.object\nbase_circle.name = \"Base Circle\"\nbase_circle.data.materials.append(tech_blue)\n\n# Step 3: Create the Inner Circle\nbpy.ops.mesh.primitive_circle_add(radius=0.5, location=(0, 0, 0))\ninner_circle = bpy.context.object\ninner_circle.name = \"Inner Circle\"\ninner_circle.data.materials.append(tech_blue)\n\n# Step 4: Create the Vertical Line\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))\nvertical_line = bpy.context.object\nvertical_line.scale[1] = 0.02\nvertical_line.scale[2] = 1\nvertical_line.name = \"Vertical Line\"\nvertical_line.data.materials.append(tech_blue)\n\n# Step 5: Create the Horizontal Line\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, 0, 0))\nhorizontal_line = bpy.context.object\nhorizontal_line.scale[0] = 1\nhorizontal_line.scale[1] = 0.02\nhorizontal_line.name = \"Horizontal Line\"\nhorizontal_line.data.materials.append(tech_blue)\n\n# Step 6: Create the Diagonal Line\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.35, 0, 0.35))\ndiagonal_line = bpy.context.object\ndiagonal_line.scale[0] = 0.7\ndiagonal_line.scale[1] = 0.02\ndiagonal_line.rotation_euler[2] = math.radians(45)\ndiagonal_line.name = \"Diagonal Line\"\ndiagonal_line.data.materials.append(tech_blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.068739918401592, "unit_n": 5, "param_ratio": 5.0}
{"id": "cbecde50-ea36-4426-ad77-b9238fae9ead", "name": "Syringe", "instruction": "Create a 3D model of a syringe. The body should be cylindrical, 10 cm long, and 1 cm in diameter. The plunger should fit snugly inside the body and extend out the back. The needle should be thin and sharp, extending 2 cm from the front.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=10, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Syringe Body\"\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.45, depth=12, location=(0, 0, -1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 6))\nneedle = bpy.context.object\nneedle.name = \"Needle\"", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.274231370687278, "unit_n": 3, "param_ratio": 5.0}
{"id": "afa5a18a-ff40-4fb0-a6b2-d4b81cba983f", "name": "Stethoscope", "instruction": "Design a stethoscope with a long, flexible tube connecting the earpieces to the chest piece. Make sure the chest piece is round and flat. How would this be used in a clinical setting?", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Chest Piece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0, 0))\nchest_piece = bpy.context.object\nchest_piece.name = \"Chest Piece\"\nchest_piece.data.materials.append(silver)\n\n# Step 3: Create the Flexible Tube\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.025), rotation=(math.pi/2, 0, 0))\ntube = bpy.context.object\ntube.name = \"Tube\"\ntube.data.materials.append(black)\n\n# Step 4: Create the Earpieces\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, 0, 2.5), rotation=(0, math.pi/4, 0))\n    earpiece = bpy.context.object\n    earpiece.name = f\"Earpiece {i + 1}\"\n    earpiece.data.materials.append(black)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.5228354135374222, "unit_n": 4, "param_ratio": 7.75}
{"id": "4a88c9b3-bb11-47dd-8c27-8b48a0c5047b", "name": "Pillow vs. Cushion", "instruction": "Could you create a 3D model of a pillow and a cushion? Place them side by side to show the difference in their shapes and sizes.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npillow_color = bpy.data.materials.new(name=\"Pillow Color\")\npillow_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium dark red color\n\n# Step 2: Create the Pillow\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.5, 0, 0))\npillow = bpy.context.object\npillow.name = \"Pillow\"\npillow.scale = (1, 0.5, 0.2)  # Flatten the cube to make it pillow-shaped\npillow.data.materials.append(pillow_color)\n\n# Step 3: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(1.5, 0, 0))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale = (1, 1, 0.5)  # Make it thicker to resemble a cushion\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "4fe18e8b-dc52-491e-b211-1a5bc9d13bac", "name": "Bird Feeder", "instruction": "Can you create a simple bird feeder? It should have a cylindrical body with a flat base and a small roof on top.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.4, depth=0.2, location=(0, 0, 1.1))\nroof = bpy.context.object\nroof.name = \"Roof\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.538773018293098, "unit_n": 3, "param_ratio": 5.0}
{"id": "f3bbdd37-ab4a-469d-acce-3b5bb326a667", "name": "Travel Wallet", "instruction": "Design a travel wallet with multiple compartments for organizing documents and currency.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"WalletColor\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncompartment_color = bpy.data.materials.new(name=\"CompartmentColor\")\ncompartment_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Wallet Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet_body = bpy.context.object\nwallet_body.scale = (1, 0.1, 0.5)\nwallet_body.name = \"WalletBody\"\nwallet_body.data.materials.append(wallet_color)\n\n# Step 3: Create Compartments\nnum_compartments = 4\nfor i in range(num_compartments):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.1 * (i + 1), 0))\n    compartment = bpy.context.object\n    compartment.scale = (0.9, 0.01, 0.4)\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.data.materials.append(compartment_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.411620581889958, "unit_n": 2, "param_ratio": 9.0}
{"id": "3cfb909c-7042-4999-95d5-fec441d58eef", "name": "Rice Cooker", "instruction": "Can you create a 3D model of a rice cooker? It has a round shape with a lid on top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlid_color = bpy.data.materials.new(name=\"LidColor\")\nlid_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[2] = 0.8  # Flatten the sphere to make it more like a rice cooker\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.9, location=(0, 0, 0.8))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.scale[2] = 0.2  # Flatten the sphere to make it more like a lid\nlid.data.materials.append(lid_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.939019669892769, "unit_n": 2, "param_ratio": 9.0}
{"id": "639aee1f-baf8-439b-88e9-156ed17e136a", "name": "Pizza", "instruction": "Can you create a 3D model of a pizza? Make sure it has pepperoni slices on top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_crust = bpy.data.materials.new(name=\"Pizza Crust\")\npizza_crust.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color for the crust\npepperoni = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_crust)\n\n# Step 3: Create the Pepperoni Slices\nnum_slices = 8\nradius = 0.8\nfor i in range(num_slices):\n    angle = i * (2 * math.pi / num_slices)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.06))\n    slice = bpy.context.object\n    slice.name = f\"Pepperoni Slice {i + 1}\"\n    slice.data.materials.append(pepperoni)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.39408645430929, "unit_n": 2, "param_ratio": 10.0}
{"id": "530329ef-bb41-4a7e-8838-3e7e27220e95", "name": "Espresso Machine", "instruction": "Design an espresso machine that has a built-in grinder, a steam wand for frothing milk, and a digital display for settings. The machine should have a compact design to fit on a kitchen counter.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmachine_color = bpy.data.materials.new(name=\"MachineColor\")\nmachine_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ndisplay_color = bpy.data.materials.new(name=\"DisplayColor\")\ndisplay_color.diffuse_color = (0, 0, 1, 1)  # Blue color for the digital display\n\n# Step 2: Create the Main Body of the Espresso Machine\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.5, 0.3, 0.7)\nmain_body.data.materials.append(machine_color)\n\n# Step 3: Create the Built-in Grinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(0, 0.4, 1.6))\ngrinder = bpy.context.object\ngrinder.name = \"Grinder\"\ngrinder.data.materials.append(machine_color)\n\n# Step 4: Create the Steam Wand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.8, location=(0.3, -0.3, 1.2), rotation=(0, 1.57, 0))\nsteam_wand = bpy.context.object\nsteam_wand.name = \"Steam Wand\"\nsteam_wand.data.materials.append(machine_color)\n\n# Step 5: Create the Digital Display\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0, -0.31, 1.4))\ndisplay = bpy.context.object\ndisplay.name = \"Digital Display\"\ndisplay.scale = (1, 0.5, 1)\ndisplay.data.materials.append(display_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.2099209885840536, "unit_n": 4, "param_ratio": 7.75}
{"id": "454deb7b-1fd3-4e91-b95d-3f77c2bd591a", "name": "Voltage Regulator", "instruction": "Please generate a voltage regulator for home electronics. It should have an input for plugging into a wall outlet, multiple output ports for devices, and a display showing the current voltage.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Bright green color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Input Plug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(-1.1, 0, 1.25))\ninput_plug = bpy.context.object\ninput_plug.name = \"Input Plug\"\ninput_plug.data.materials.append(gray)\n\n# Step 4: Create the Output Ports\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.1, -0.4 + i * 0.4, 1.25))\n    output_port = bpy.context.object\n    output_port.name = f\"Output Port {i + 1}\"\n    output_port.data.materials.append(gray)\n\n# Step 5: Create the Display\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.8, 1.25))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.767343814182109, "unit_n": 6, "param_ratio": 5.333333333333333}
{"id": "cc7b6934-329e-4974-adbe-349f464a8088", "name": "Mobile Phone", "instruction": "Could you create a 3D model of a mobile phone with a touch screen and a single button below the screen?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nphone_body_color = bpy.data.materials.new(name=\"Phone Body\")\nphone_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen\")\nscreen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button\")\nbutton_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Phone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nphone_body = bpy.context.object\nphone_body.name = \"Phone Body\"\nphone_body.scale = (0.5, 1, 0.05)\nphone_body.data.materials.append(phone_body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.45, 0.9, 1)\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, -0.8, 0.051))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.6653018803944484, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "1f926c95-ecec-4a70-b4b9-b1a574c088bc", "name": "Laptop", "instruction": "Design a laptop for me. It should have a thin rectangular body with a screen that can open and close. Include a keyboard on the lower section.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nkeyboard_color = bpy.data.materials.new(name=\"Keyboard Color\")\nkeyboard_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Darker gray color\n\n# Step 2: Create the Laptop Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbody = bpy.context.object\nbody.scale = (1.5, 1, 0.05)\nbody.name = \"Laptop Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0.95, 0.6))\nscreen = bpy.context.object\nscreen.scale = (1.5, 0.05, 1)\nscreen.rotation_euler[0] = 1.5708  # Rotate 90 degrees to stand up\nscreen.name = \"Laptop Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.15))\nkeyboard = bpy.context.object\nkeyboard.scale = (1.4, 0.9, 1)\nkeyboard.name = \"Laptop Keyboard\"\nkeyboard.data.materials.append(keyboard_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 3, "param_ratio": 9.0}
{"id": "98c8eb85-d949-4fbb-9f23-431719d1a3fa", "name": "Transformer", "instruction": "Please create a 3D model of a transformer. It should have a rectangular body with cooling fins on the sides. Include high-voltage bushings on the top and a base for mounting.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.5, 1.5)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Cooling Fins\nfor i in range(-4, 5):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(1.1, i * 0.2, 1))\n    fin = bpy.context.object\n    fin.name = f\"Fin Right {i + 5}\"\n    fin.scale = (1, 0.05, 1.5)\n    fin.data.materials.append(gray)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-1.1, i * 0.2, 1))\n    fin = bpy.context.object\n    fin.name = f\"Fin Left {i + 5}\"\n    fin.scale = (1, 0.05, 1.5)\n    fin.data.materials.append(gray)\n\n# Step 4: Create the High-Voltage Bushings\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(i * 0.5 - 0.5, 0, 2.5))\n    bushing = bpy.context.object\n    bushing.name = f\"Bushing {i + 1}\"\n    bushing.data.materials.append(gray)\n\n# Step 5: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, -0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.5, 0.25)\nbase.data.materials.append(gray)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.104842952222531, "unit_n": 13, "param_ratio": 2.0}
{"id": "3442f8d7-6fc7-49c4-b748-6192ea35e7b9", "name": "Dining Table", "instruction": "Create a 3D model of a dining table. The table should be rectangular with four legs. Keep the design simple and functional.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the table\nwood_color = bpy.data.materials.new(name=\"WoodColor\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.name = \"TableTop\"\ntable_top.scale[0] = 2  # Length\ntable_top.scale[1] = 1  # Width\ntable_top.scale[2] = 0.1  # Thickness\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(1.8, 0.9, 0.5), (-1.8, 0.9, 0.5), (1.8, -0.9, 0.5), (-1.8, -0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 5  # Height of the leg\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 2, "param_ratio": 5.0}
{"id": "468e3894-fa42-4ccf-a20d-44a6709af8ba", "name": "Electric Juicer", "instruction": "Design an electric juicer. The base should be a circular platform with a vertical column in the center. On top of the column, place a cone-shaped juicing element. Include a spout on the side of the base for pouring the juice. Add a power button on the front of the base.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\njuicer_color = bpy.data.materials.new(name=\"Juicer Color\")\njuicer_color.diffuse_color = (1, 1, 1, 1)  # White color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Vertical Column\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(0, 0, 0.7))\ncolumn = bpy.context.object\ncolumn.name = \"Column\"\ncolumn.data.materials.append(base_color)\n\n# Step 4: Create the Cone-shaped Juicing Element\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, radius2=0, depth=0.8, location=(0, 0, 1.5))\njuicer = bpy.context.object\njuicer.name = \"Juicer\"\njuicer.data.materials.append(juicer_color)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.5, 0, 0.3), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(base_color)\n\n# Step 6: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0, -1.5, 0.15))\nbutton = bpy.context.object\nbutton.name = \"Power Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.670183312511219, "unit_n": 5, "param_ratio": 8.8}
{"id": "1dbc004c-ab25-4490-a0b9-7a4f85bc526e", "name": "Espresso Machine", "instruction": "Model an espresso machine. Include a main body with a front-facing control panel. Add a portafilter handle at the bottom front. On top, place a reservoir for water. Ensure there's a steam wand on one side.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.1, 1.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\n\n# Step 4: Create the Portafilter Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, -1, 0.5), rotation=(0, 0, 1.57))\nportafilter_handle = bpy.context.object\nportafilter_handle.name = \"Portafilter Handle\"\n\n# Step 5: Create the Water Reservoir\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 2.5))\nwater_reservoir = bpy.context.object\nwater_reservoir.name = \"Water Reservoir\"\n\n# Step 6: Create the Steam Wand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1, 0, 1), rotation=(0, 1.57, 0))\nsteam_wand = bpy.context.object\nsteam_wand.name = \"Steam Wand\"", "color_brightness": "Dark", "verify": "human", "entropy": 2.96898275250303, "unit_n": 5, "param_ratio": 5.6}
{"id": "4a5bd3bd-825e-41b7-81fd-3db424ce02af", "name": "Electric Generator", "instruction": "Model an electric generator designed to supply power to a small outdoor event. What are the key features that enable it to be efficient yet portable?", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2.5, location=(0, 1.1, 2.1), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(x, -1.1, 0.3), rotation=(1.57, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(body_color)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 1.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(handle_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.150843262525205, "unit_n": 5, "param_ratio": 6.8}
{"id": "10402009-5f4a-4c89-a882-e1b4ca703fff", "name": "Drum", "instruction": "Create a 3D model of a drum. Keep it simple.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ndrum_head_color = bpy.data.materials.new(name=\"Drum Head Color\")\ndrum_head_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drum Head (Top)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.75))\ndrum_head_top = bpy.context.object\ndrum_head_top.name = \"Drum Head Top\"\ndrum_head_top.data.materials.append(drum_head_color)\n\n# Step 4: Create the Drum Head (Bottom)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, -0.75))\ndrum_head_bottom = bpy.context.object\ndrum_head_bottom.name = \"Drum Head Bottom\"\ndrum_head_bottom.data.materials.append(drum_head_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.144724830293388, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "37e3a59e-e444-43a0-abe0-5e695c421307", "name": "Multi-Tool", "instruction": "Please design a 3D model of a multi-tool. It should include a knife blade, pliers, screwdrivers, and a saw blade. Make sure each tool is clearly visible and distinguishable when extended.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Metal color\n\n# Step 2: Create the Knife Blade\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.5, 0, 0))\nknife_blade = bpy.context.object\nknife_blade.scale[0] = 0.1\nknife_blade.scale[1] = 0.02\nknife_blade.scale[2] = 0.02\nknife_blade.name = \"Knife Blade\"\nknife_blade.data.materials.append(metal)\n\n# Step 3: Create the Pliers\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0.5, 0), rotation=(0, math.pi/2, 0))\npliers_handle_1 = bpy.context.object\npliers_handle_1.name = \"Pliers Handle 1\"\npliers_handle_1.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, -0.5, 0), rotation=(0, math.pi/2, 0))\npliers_handle_2 = bpy.context.object\npliers_handle_2.name = \"Pliers Handle 2\"\npliers_handle_2.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.02, depth=0.2, location=(0, 0, 0.1), rotation=(0, math.pi/2, 0))\npliers_tip_1 = bpy.context.object\npliers_tip_1.name = \"Pliers Tip 1\"\npliers_tip_1.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.02, depth=0.2, location=(0, 0, -0.1), rotation=(0, -math.pi/2, 0))\npliers_tip_2 = bpy.context.object\npliers_tip_2.name = \"Pliers Tip 2\"\npliers_tip_2.data.materials.append(metal)\n\n# Step 4: Create the Screwdrivers\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.3, location=(-0.5, 0.2, 0), rotation=(0, math.pi/2, 0))\nscrewdriver_1 = bpy.context.object\nscrewdriver_1.name = \"Screwdriver 1\"\nscrewdriver_1.data.materials.append(metal)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.3, location=(-0.5, -0.2, 0), rotation=(0, math.pi/2, 0))\nscrewdriver_2 = bpy.context.object\nscrewdriver_2.name = \"Screwdriver 2\"\nscrewdriver_2.data.materials.append(metal)\n\n# Step 5: Create the Saw Blade\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))\nsaw_blade = bpy.context.object\nsaw_blade.scale[0] = 0.1\nsaw_blade.scale[1] = 0.02\nsaw_blade.scale[2] = 0.02\nsaw_blade.name = \"Saw Blade\"\nsaw_blade.data.materials.append(metal)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.092962451528376, "unit_n": 8, "param_ratio": 7.625}
{"id": "25cfd79d-4a20-40fe-b8d4-9e414041d694", "name": "Floral Pattern", "instruction": "Design a 3D model of a floral pattern. Start with a series of interconnected flowers, each with five petals. Arrange the flowers in a repeating pattern. Add leaves and stems to connect the flowers. Ensure the pattern is seamless.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npetal_color = bpy.data.materials.new(name=\"Petal Color\")\npetal_color.diffuse_color = (1, 0.5, 0.5, 1)  # Light pink color\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\n# Function to create a flower\ndef create_flower(location):\n    for i in range(5):\n        angle = i * (2 * math.pi / 5)\n        x = 0.3 * math.cos(angle) + location[0]\n        y = 0.3 * math.sin(angle) + location[1]\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, location[2]))\n        petal = bpy.context.object\n        petal.data.materials.append(petal_color)\n\n# Function to create a leaf\ndef create_leaf(location, rotation):\n    bpy.ops.mesh.primitive_plane_add(size=0.4, location=location, rotation=rotation)\n    leaf = bpy.context.object\n    leaf.scale[1] = 0.2\n    leaf.data.materials.append(leaf_color)\n\n# Function to create a stem\ndef create_stem(start, end):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=(end[2] - start[2]), location=((start[0] + end[0]) / 2, (start[1] + end[1]) / 2, (start[2] + end[2]) / 2))\n    stem = bpy.context.object\n    stem.data.materials.append(leaf_color)\n\n# Create a repeating pattern of flowers\nflower_locations = [(0, 0, 0), (1, 1, 0), (2, 0, 0), (1, -1, 0)]\nfor loc in flower_locations:\n    create_flower(loc)\n\n# Connect flowers with stems and add leaves\ncreate_stem((0, 0, 0), (1, 1, 0))\ncreate_stem((1, 1, 0), (2, 0, 0))\ncreate_stem((2, 0, 0), (1, -1, 0))\ncreate_stem((1, -1, 0), (0, 0, 0))\n\ncreate_leaf((0.5, 0.5, 0), (0, 0, math.pi / 4))\ncreate_leaf((1.5, 0.5, 0), (0, 0, -math.pi / 4))\ncreate_leaf((1.5, -0.5, 0), (0, 0, math.pi / 4))\ncreate_leaf((0.5, -0.5, 0), (0, 0, -math.pi / 4))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.724132656215516, "unit_n": 7, "param_ratio": 2.857142857142857}
{"id": "4821e63e-ec9c-4dd0-a9b2-36359eff3122", "name": "Travel Bag", "instruction": "Design a travel bag with the following features. It should have a large main compartment with a zipper closure and two handles on the top. Include a detachable shoulder strap and a small external pocket on the front. The bag should be rectangular in shape and have reinforced corners. Add a luggage tag holder on one side. Finally, ensure the bag has wheels on one end and a retractable handle for easy transport.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbag_color = bpy.data.materials.new(name=\"Bag Color\")\nbag_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nzipper_color = bpy.data.materials.new(name=\"Zipper Color\")\nzipper_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (1, 0.5, 0.5)\nmain_compartment.data.materials.append(bag_color)\n\n# Step 3: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.55))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (1, 0.02, 0.02)\nzipper.data.materials.append(zipper_color)\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, 0, 1.5))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.rotation_euler = (math.pi / 2, 0, 0)\n    handle.data.materials.append(handle_color)\n\n# Step 5: Create the Shoulder Strap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=2.5, location=(0, 0.6, 1))\nshoulder_strap = bpy.context.object\nshoulder_strap.name = \"Shoulder Strap\"\nshoulder_strap.rotation_euler = (0, math.pi / 2, 0)\nshoulder_strap.data.materials.append(handle_color)\n\n# Step 6: Create the External Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.55, 1))\nexternal_pocket = bpy.context.object\nexternal_pocket.name = \"External Pocket\"\nexternal_pocket.scale = (0.5, 0.02, 0.3)\nexternal_pocket.data.materials.append(bag_color)\n\n# Step 7: Create the Reinforced Corners\nfor i in range(4):\n    x = 0.9 * (i % 2 * 2 - 1)\n    y = 0.45 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0.5))\n    corner = bpy.context.object\n    corner.name = f\"Corner {i + 1}\"\n    corner.scale = (0.1, 0.1, 0.1)\n    corner.data.materials.append(handle_color)\n\n# Step 8: Create the Luggage Tag Holder\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(-1.1, 0, 1))\ntag_holder = bpy.context.object\ntag_holder.name = \"Tag Holder\"\ntag_holder.scale = (0.05, 0.05, 0.1)\ntag_holder.data.materials.append(handle_color)\n\n# Step 9: Create the Wheels\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, -0.5, 0.1))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler = (math.pi / 2, 0, 0)\n    wheel.data.materials.append(handle_color)\n\n# Step 10: Create the Retractable Handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.55, 1.5))\nretractable_handle = bpy.context.object\nretractable_handle.name = \"Retractable Handle\"\nretractable_handle.scale = (0.05, 0.05, 0.5)\nretractable_handle.data.materials.append(handle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.287748524982479, "unit_n": 14, "param_ratio": 3.857142857142857}
{"id": "33c72d06-4c17-4df5-8488-87842fb040b4", "name": "X-Ray Machine", "instruction": "Create a 3D model of an x-ray machine. The machine should have a large, movable arm that can be positioned over a patient. Include a control panel with buttons and a display screen. The base should be sturdy and have wheels for easy movement. Make sure to add a flat surface for the patient to lie on during the x-ray procedure.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\narm_color = bpy.data.materials.new(name=\"Arm Color\")\narm_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Base with Wheels\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1, 0.5, 0.25)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\nfor i in range(4):\n    x = 0.8 * (i % 2) - 0.4\n    y = 0.4 * (i // 2) - 0.2\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, y, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(base_color)\n\n# Step 3: Create the Arm\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1))\narm = bpy.context.object\narm.scale = (0.1, 0.1, 1)\narm.name = \"Arm\"\narm.data.materials.append(arm_color)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.3, 0, 1.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.scale = (0.5, 0.1, 0.3)\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 5: Create the Display Screen\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0.3, 0.15, 1.5))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 6: Create the Patient Surface\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\npatient_surface = bpy.context.object\npatient_surface.scale = (1, 2, 0.1)\npatient_surface.name = \"Patient Surface\"\npatient_surface.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.29650145628465, "unit_n": 9, "param_ratio": 5.0}
{"id": "c567dd89-5571-453a-ba4e-a53f22988d33", "name": "Syringe", "instruction": "How would you decorate a syringe?", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsyringe_body_color = bpy.data.materials.new(name=\"Syringe Body Color\")\nsyringe_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Almost white color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body.data.materials.append(syringe_body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=2.2, location=(0, 0, 0))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, 1.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n\n# Step 5: Create the Plunger Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, -1.1))\nplunger_handle = bpy.context.object\nplunger_handle.name = \"Plunger Handle\"\nplunger_handle.data.materials.append(plunger_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.574769445056559, "unit_n": 4, "param_ratio": 8.75}
{"id": "0d16f849-51db-42a2-8f13-cd2e04218772", "name": "Decorative Ornament", "instruction": "Design a decorative ornament. Begin with a spherical base. Add intricate patterns and shapes around the sphere. Ensure the design is visually appealing and symmetrical.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Spherical Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Base Sphere\"\n\n# Define the color for the sphere\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nsphere.data.materials.append(base_color)\n\n# Step 3: Add Intricate Patterns and Shapes\n# Create a torus around the sphere\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"Torus\"\ntorus.data.materials.append(base_color)\n\n# Create smaller spheres around the main sphere\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0))\n    small_sphere = bpy.context.object\n    small_sphere.name = f\"Small Sphere {i + 1}\"\n    small_sphere.data.materials.append(base_color)\n\n# Create a ring of cones around the sphere\nfor i in range(8):\n    angle = i * (math.pi / 4)\n    x = 1.5 * math.cos(angle)\n    y = 1.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.5, location=(x, y, 0.5))\n    cone = bpy.context.object\n    cone.name = f\"Cone {i + 1}\"\n    cone.data.materials.append(base_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.69670417903983, "unit_n": 18, "param_ratio": 1.2777777777777777}
{"id": "cc39e761-65c6-41cb-892e-403b53b0f634", "name": "Dog Leash", "instruction": "Can you design a dog leash? The handle should be a loop that fits comfortably in the hand. The leash should be long enough to give the dog some freedom but not too long. At the end, include a clip for attaching to a dog collar.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"Leash Color\")\nleash_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Handle (Loop)\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 3: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=3, location=(0, 0, -1.5))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -3.1))\nclip_base = bpy.context.object\nclip_base.name = \"Clip Base\"\nclip_base.data.materials.append(clip_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0, -3.2), rotation=(math.pi/2, 0, 0))\nclip_ring = bpy.context.object\nclip_ring.name = \"Clip Ring\"\nclip_ring.data.materials.append(clip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.349469044388275, "unit_n": 4, "param_ratio": 8.0}
{"id": "5d17ba1c-afc5-40ec-9cf7-63f556db53b5", "name": "Sketchbook", "instruction": "Could you create a 3D model of a sketchbook? It should be rectangular with a spiral binding along the top edge. The cover is plain and white, and the pages inside are blank.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale[0] = 1.5\ncover.scale[1] = 2\ncover.scale[2] = 0.05\ncover.data.materials.append(white)\n\n# Step 3: Create the Pages\nfor i in range(10):\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.05 - i * 0.01))\n    page = bpy.context.object\n    page.name = f\"Page {i + 1}\"\n    page.scale[0] = 1.45\n    page.scale[1] = 1.95\n    page.data.materials.append(white)\n\n# Step 4: Create the Spiral Binding\nbpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(-1.5, 0, 0.15))\nbinding = bpy.context.object\nbinding.name = \"Binding\"\nbinding.scale[1] = 0.1\nbinding.scale[2] = 0.1\nbinding.rotation_euler[1] = 1.5708  # Rotate 90 degrees along Y-axis\n\nfor i in range(15):\n    bpy.ops.object.duplicate(linked=False)\n    bpy.context.object.location[1] = -1.4 + i * 0.2\n\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.join()\nbpy.context.object.name = \"Sketchbook\"", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.685463416446384, "unit_n": 12, "param_ratio": 1.5}
{"id": "1eafd9b9-1adf-4ef7-a683-cb4a31d17f0c", "name": "Decorative Wall Panel", "instruction": "Create a 3D model of a decorative wall panel. It should be rectangular with an intricate pattern in relief.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\nbpy.ops.transform.resize(value=(2, 0.1, 3))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 3: Create the Pattern\n# For simplicity, we'll create a grid pattern using smaller cubes\npattern_material = bpy.data.materials.new(name=\"PatternMaterial\")\npattern_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nfor i in range(-3, 4):\n    for j in range(-5, 6):\n        bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.6, 0.1, j * 0.6))\n        pattern_cube = bpy.context.object\n        pattern_cube.name = f\"PatternCube_{i}_{j}\"\n        pattern_cube.data.materials.append(pattern_material)\n", "color_brightness": "Bright", "verify": "human", "entropy": 5.251719905317827, "unit_n": 16, "param_ratio": 0.8125}
{"id": "92f47e59-53e9-44c9-b344-8bfc2ea5395a", "name": "Sandwich", "instruction": "Can you create a 3D model of a sandwich? It should be a simple rectangular sandwich with two slices of bread, lettuce, a slice of tomato, a slice of cheese, and a slice of ham in between.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.76, 0.46, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\nham = bpy.context.object\nham.scale[2] = 0.05\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.85979674620054, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "67a240a1-0024-4f85-8543-f947cf16f0e3", "name": "Chocolate Bar", "instruction": "How does this chocolate bar look to you? Make it rectangular with segmented squares.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate_color = bpy.data.materials.new(name=\"Chocolate\")\nchocolate_color.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate brown color\n\n# Step 2: Create the base of the chocolate bar\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Chocolate Base\"\nbase.scale[2] = 0.1  # Flatten the cube to make it a rectangular base\nbase.data.materials.append(chocolate_color)\n\n# Step 3: Create the segmented squares\nrows = 4\ncols = 8\nsquare_size = 0.45\ngap = 0.05\n\nfor i in range(rows):\n    for j in range(cols):\n        x = j * (square_size + gap) - (cols * (square_size + gap) / 2) + (square_size / 2)\n        y = i * (square_size + gap) - (rows * (square_size + gap) / 2) + (square_size / 2)\n        bpy.ops.mesh.primitive_cube_add(size=square_size, location=(x, y, 0.1))\n        square = bpy.context.object\n        square.name = f\"Square {i * cols + j + 1}\"\n        square.data.materials.append(chocolate_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.706838240272375, "unit_n": 2, "param_ratio": 6.0}
{"id": "bddf4aba-ba3c-4820-9e1c-577fc80235b2", "name": "Wallpaper Pattern", "instruction": "Imagine a wallpaper pattern that could be used in a child's bedroom. The pattern should be playful and engaging, perhaps incorporating simple shapes or characters.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1.0, 1.0, 0.0, 1)  # Yellow color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create a series of simple shapes\n# Create a blue sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-1, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Blue Sphere\"\nsphere.data.materials.append(blue)\n\n# Create a yellow cube\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1, 0, 0))\ncube = bpy.context.object\ncube.name = \"Yellow Cube\"\ncube.data.materials.append(yellow)\n\n# Create a red cone\nbpy.ops.mesh.primitive_cone_add(radius1=0.5, depth=1, location=(0, 1, 0))\ncone = bpy.context.object\ncone.name = \"Red Cone\"\ncone.data.materials.append(red)\n\n# Create a green torus\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.2, location=(0, -1, 0))\ntorus = bpy.context.object\ntorus.name = \"Green Torus\"\ntorus.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.99982824846891, "unit_n": 4, "param_ratio": 9.5}
{"id": "727e4ded-cc6f-4a2d-9d85-86b776798424", "name": "Modern Sculpture", "instruction": "Design a 3D model of a modern sculpture. It should evoke a sense of movement and fluidity through its abstract shapes and forms.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nabstract_color = bpy.data.materials.new(name=\"AbstractColor\")\nabstract_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(abstract_color)\n\n# Step 3: Create the First Abstract Shape\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.1, location=(0, 0, 0.2))\nshape1 = bpy.context.object\nshape1.name = \"Shape1\"\nshape1.data.materials.append(abstract_color)\n\n# Step 4: Create the Second Abstract Shape\nbpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.5, location=(0.4, 0, 0.5), rotation=(0, 0, math.pi/4))\nshape2 = bpy.context.object\nshape2.name = \"Shape2\"\nshape2.data.materials.append(abstract_color)\n\n# Step 5: Create the Third Abstract Shape\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(-0.4, 0, 0.5))\nshape3 = bpy.context.object\nshape3.name = \"Shape3\"\nshape3.data.materials.append(abstract_color)\n\n# Step 6: Create the Fourth Abstract Shape\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0, 0.4, 0.8), rotation=(math.pi/2, 0, 0))\nshape4 = bpy.context.object\nshape4.name = \"Shape4\"\nshape4.data.materials.append(abstract_color)\n\n# Step 7: Create the Fifth Abstract Shape\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.3, location=(0, -0.4, 0.8), rotation=(0, math.pi/4, 0))\nshape5 = bpy.context.object\nshape5.name = \"Shape5\"\nshape5.data.materials.append(abstract_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.107820484918783, "unit_n": 6, "param_ratio": 7.166666666666667}
{"id": "84c56480-f62c-4131-a0a7-8168fdca99e8", "name": "Mirror", "instruction": "Design a 3D model of a rectangular mirror. Compare two versions: one with a simple frame and one without a frame.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_material = bpy.data.materials.new(name=\"Glass\")\nglass_material.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Slightly transparent gray\n\nframe_material = bpy.data.materials.new(name=\"Frame\")\nframe_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for the frame\n\n# Step 2: Create the mirror without a frame\nbpy.ops.mesh.primitive_plane_add(size=2, location=(-3, 0, 0))\nmirror_no_frame = bpy.context.object\nmirror_no_frame.name = \"Mirror_No_Frame\"\nmirror_no_frame.scale[1] = 1.5  # Make it rectangular\nmirror_no_frame.data.materials.append(glass_material)\n\n# Step 3: Create the mirror with a frame\nbpy.ops.mesh.primitive_plane_add(size=2, location=(3, 0, 0))\nmirror_with_frame = bpy.context.object\nmirror_with_frame.name = \"Mirror_With_Frame\"\nmirror_with_frame.scale[1] = 1.5  # Make it rectangular\nmirror_with_frame.data.materials.append(glass_material)\n\n# Step 4: Create the frame for the second mirror\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(3, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale[1] = 1.6  # Match the mirror's proportions, slightly larger\nframe.scale[2] = 0.1  # Make it thin\nframe.data.materials.append(frame_material)\n\n# Create a boolean modifier to cut out the center of the frame\nbool_mod = frame.modifiers.new(type='BOOLEAN', name='bool_mod')\nbool_mod.object = mirror_with_frame\nbool_mod.operation = 'DIFFERENCE'\n\n# Apply the modifier\nbpy.context.view_layer.objects.active = frame\nbpy.ops.object.modifier_apply(modifier='bool_mod')\n\n# Clean up the mirror object within the frame\nbpy.ops.object.select_all(action='DESELECT')\nmirror_with_frame.select_set(True)\nbpy.ops.object.delete()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "be6f3549-1c80-480c-9ced-8e0e5cb3c015", "name": "Feeding Bowl", "instruction": "What would a simple, round feeding bowl that can hold enough water or food for a medium-sized dog look like?", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0))\nbowl_outer = bpy.context.object\nbowl_outer.name = \"Bowl Outer\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.4, location=(0, 0, 0.05))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Create the Hollow Part\nbpy.context.view_layer.objects.active = bowl_outer\nmod_bool = bowl_outer.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Delete the inner object as it's no longer needed\nbpy.data.objects.remove(bowl_inner, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 5.0}
{"id": "551d05ae-8e12-40b2-8f33-3daad9484c54", "name": "External Hard Drive", "instruction": "Decorate an external hard drive. Include a sleek, minimalist design with the brand logo subtly placed on the top surface. Add a small LED indicator light to show when the drive is in use.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\n\n# Step 2: Create the Hard Drive Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nhard_drive = bpy.context.object\nhard_drive.name = \"Hard Drive\"\nhard_drive.scale = (1.5, 1, 0.2)\nhard_drive.data.materials.append(black)\n\n# Step 3: Add the Brand Logo\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0, 0.21))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.data.materials.append(white)\n\n# Step 4: Add the LED Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(1.4, -0.9, 0.21))\nled_light = bpy.context.object\nled_light.name = \"LED Light\"\nled_light.data.materials.append(blue)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.1303554169898375, "unit_n": 3, "param_ratio": 9.0}
{"id": "999d900b-6fc1-4035-8a2e-d494d0abd411", "name": "Dog Bowl", "instruction": "How does a 3D dog bowl compare to a cat bowl? Design a dog bowl with a wide base and shallow depth. Include a slight curve on the edges to prevent spillage.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Dog Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.3, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Dog Bowl Base\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.2, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\n\n# Step 4: Boolean Modifier to Create the Hollow Part\nmod_bool = base.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner bowl object\nbpy.data.objects.remove(inner_bowl, do_unlink=True)\n\n# Step 5: Add a slight curve on the edges to prevent spillage\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bevel(offset=0.05, segments=5)\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.30099998030031, "unit_n": 2, "param_ratio": 5.0}
{"id": "d21acf51-70f4-4879-b610-f7054289df43", "name": "Cooking Pot", "instruction": "Design a cooking pot with a round base and straight sides. Include two handles on either side and a lid with a handle on top. The pot should be deep enough to hold a significant amount of liquid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npot_color = bpy.data.materials.new(name=\"PotColor\")\npot_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the pot\n\n# Step 2: Create the Pot Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\npot_base = bpy.context.object\npot_base.name = \"PotBase\"\npot_base.data.materials.append(pot_color)\n\n# Step 3: Create the Handles\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 1))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.rotation_euler = (0, 1.5708, 0)  # Rotate 90 degrees on Y axis\n    handle.data.materials.append(pot_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(pot_color)\n\n# Step 5: Create the Lid Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, 2.3))\nlid_handle = bpy.context.object\nlid_handle.name = \"LidHandle\"\nlid_handle.data.materials.append(pot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.082236581062003, "unit_n": 5, "param_ratio": 5.0}
{"id": "af5db30f-fa25-4b52-a6a8-2d873c5729ea", "name": "Floral Emblem", "instruction": "Design a floral emblem with a central rose surrounded by a pattern of leaves and smaller flowers. The emblem should be circular, with the rose prominently in the center. Arrange the leaves and smaller flowers symmetrically around the rose, ensuring a balanced and cohesive look.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrose_color = bpy.data.materials.new(name=\"Rose Color\")\nrose_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the rose\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color for the leaves\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.9, 0.9, 0.1, 1)  # Yellow color for the smaller flowers\n\n# Step 2: Create the Central Rose\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0))\nrose = bpy.context.object\nrose.name = \"Rose\"\nrose.data.materials.append(rose_color)\n\n# Step 3: Create the Leaves\nnum_leaves = 8\nfor i in range(num_leaves):\n    angle = i * (2 * math.pi / num_leaves)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.4, location=(x, y, 0))\n    leaf = bpy.context.object\n    leaf.name = f\"Leaf {i + 1}\"\n    leaf.rotation_euler = (0, 0, angle)\n    leaf.data.materials.append(leaf_color)\n\n# Step 4: Create the Smaller Flowers\nnum_flowers = 8\nfor i in range(num_flowers):\n    angle = i * (2 * math.pi / num_flowers) + (math.pi / num_flowers)\n    x = 0.9 * math.cos(angle)\n    y = 0.9 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(x, y, 0))\n    flower = bpy.context.object\n    flower.name = f\"Flower {i + 1}\"\n    flower.data.materials.append(flower_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.278236765252174, "unit_n": 3, "param_ratio": 9.0}
{"id": "0d2207a4-92ca-4246-885a-41c5ff9ccbb0", "name": "Desktop Computer", "instruction": "Create a desktop computer with a tower and a monitor. The monitor should be flat and rectangular, and the tower should be slightly larger.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nmonitor = bpy.context.object\nmonitor.scale = (1.5, 0.1, 1)  # Make it flat and rectangular\nmonitor.name = \"Monitor\"\nmonitor.data.materials.append(black)\n\n# Step 3: Create the Tower\nbpy.ops.mesh.primitive_cube_add(size=1, location=(2, 0, 0.75))\ntower = bpy.context.object\ntower.scale = (0.75, 0.75, 1.5)  # Make it larger than the monitor\ntower.name = \"Tower\"\ntower.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "eb148271-2371-427f-a88b-84290200504a", "name": "Decorative Border", "instruction": "Design a decorative border with repeating floral motifs.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for flowers\n\n# Function to create a single flower\ndef create_flower(location):\n    # Create the center of the flower\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    center = bpy.context.object\n    center.data.materials.append(flower_color)\n    \n    # Create the petals\n    for i in range(5):\n        angle = i * (2 * 3.14159 / 5)\n        x = location[0] + 0.2 * math.cos(angle)\n        y = location[1] + 0.2 * math.sin(angle)\n        z = location[2]\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n        petal = bpy.context.object\n        petal.data.materials.append(flower_color)\n\n# Create a row of flowers\nfor i in range(10):\n    create_flower((i * 0.5, 0, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.473951346464588, "unit_n": 6, "param_ratio": 1.6666666666666667}
{"id": "166e389a-a210-4804-9a35-8bc82d8024ba", "name": "Geometric Wall Pattern", "instruction": "Create a geometric wall pattern for an interior space. The design should feature interlocking shapes such as triangles, squares, and hexagons. Use a repeating pattern that covers a large wall area, ensuring the shapes align perfectly at the edges.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Materials\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 3: Create the Shapes\ndef create_triangle(location, material):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=location)\n    triangle = bpy.context.object\n    triangle.data.materials.append(material)\n    return triangle\n\ndef create_square(location, material):\n    bpy.ops.mesh.primitive_plane_add(size=2, location=location)\n    square = bpy.context.object\n    square.data.materials.append(material)\n    return square\n\ndef create_hexagon(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=1, depth=0.1, location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(material)\n    return hexagon\n\n# Step 4: Arrange the Shapes in a Pattern\nrows = 5\ncols = 5\nspacing = 2.5\n\nfor i in range(rows):\n    for j in range(cols):\n        x = j * spacing\n        y = i * spacing\n        if (i + j) % 3 == 0:\n            create_triangle((x, y, 0), white)\n        elif (i + j) % 3 == 1:\n            create_square((x, y, 0), gray)\n        else:\n            create_hexagon((x, y, 0), black)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.829369967117877, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "9b3d9657-317f-4acf-906a-a2b54a54e4fd", "name": "Easel", "instruction": "Imagine an easel that can support various sizes of canvases, has adjustable height and angle, and includes a tray for holding art supplies. How would you construct it?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Legs\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, 0, 1))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Support Beam\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 1.5), rotation=(math.pi/2, 0, 0))\nsupport_beam = bpy.context.object\nsupport_beam.name = \"Support Beam\"\nsupport_beam.data.materials.append(wood_color)\n\n# Step 4: Create the Canvas Holder\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 2))\ncanvas_holder = bpy.context.object\ncanvas_holder.name = \"Canvas Holder\"\ncanvas_holder.scale = (1, 0.1, 0.1)\ncanvas_holder.data.materials.append(wood_color)\n\n# Step 5: Create the Tray\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0.5))\ntray = bpy.context.object\ntray.name = \"Tray\"\ntray.scale = (0.5, 0.2, 0.05)\ntray.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1189664650235187, "unit_n": 5, "param_ratio": 5.2}
{"id": "301724cb-f609-4413-84c5-49cbd162b6aa", "name": "Chess Set", "instruction": "I want to see a chess set designed for outdoor use. Envision the board as a large square with alternating light and dark squares. Each piece should be easily distinguishable and weighted for stability. What would this look like on a sunny day in a park setting, with families gathered around watching a game?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create a simple pawn piece\ndef create_pawn(location, color):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=location)\n    pawn = bpy.context.object\n    pawn.name = \"Pawn\"\n    mat = bpy.data.materials.new(name=color)\n    if color == \"White\":\n        mat.diffuse_color = (1, 1, 1, 1)  # White color\n    else:\n        mat.diffuse_color = (0, 0, 0, 1)  # Black color\n    pawn.data.materials.append(mat)\n\n# Place pawns on the board\nfor col in range(board_size):\n    create_pawn((col * square_size, 1 * square_size, 0.2), \"White\")\n    create_pawn((col * square_size, 6 * square_size, 0.2), \"Black\")", "color_brightness": "Dark", "verify": "human", "entropy": 5.601537842239587, "unit_n": 2, "param_ratio": 11.0}
{"id": "b3fa5a74-7346-4951-a453-432d1dbabacf", "name": "Circuit Breaker Panel", "instruction": "Design a circuit breaker panel with multiple switches arranged in rows. Ensure the panel has a rectangular shape.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale[0] = 1.5\npanel.scale[1] = 0.1\npanel.scale[2] = 2\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Switches\nrows = 4\ncols = 3\nswitch_width = 0.3\nswitch_height = 0.6\nspacing_x = 0.5\nspacing_y = 0.8\n\nfor row in range(rows):\n    for col in range(cols):\n        x = (col - (cols - 1) / 2) * spacing_x\n        y = 0.1\n        z = (row - (rows - 1) / 2) * spacing_y\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, z))\n        switch = bpy.context.object\n        switch.name = f\"Switch {row * cols + col + 1}\"\n        switch.scale[0] = switch_width / 2\n        switch.scale[1] = 0.05\n        switch.scale[2] = switch_height / 2\n        switch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.271157801916786, "unit_n": 2, "param_ratio": 9.0}
{"id": "1fdba529-95fb-46ce-a9de-5ecf8a3d52d2", "name": "Sofa", "instruction": "Describe a sofa with a chaise lounge on one side.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium bright color\n\n# Step 2: Create the Main Sofa Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_body = bpy.context.object\nsofa_body.name = \"Sofa Body\"\nsofa_body.scale = (1.5, 0.5, 0.5)\nsofa_body.data.materials.append(sofa_color)\n\n# Step 3: Create the Chaise Lounge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.5, 0, 0.25))\nchaise_lounge = bpy.context.object\nchaise_lounge.name = \"Chaise Lounge\"\nchaise_lounge.scale = (0.5, 1, 0.25)\nchaise_lounge.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.5, 0.75))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1.5, 0.1, 0.5)\nbackrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Chaise Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.5, -0.5, 0.5))\nchaise_backrest = bpy.context.object\nchaise_backrest.name = \"Chaise Backrest\"\nchaise_backrest.scale = (0.5, 0.1, 0.25)\nchaise_backrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 5.25}
{"id": "b49b7612-3968-4f6e-9a9d-941303f354ee", "name": "Desktop Computer", "instruction": "Imagine a desktop computer setup. It includes a monitor, a keyboard, and a mouse. The monitor is centered, with the keyboard in front and the mouse to the right. How does this setup make you feel?", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nmonitor.data.materials.append(black)\n\n# Step 3: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0.25), scale=(2, 1, 0.1))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.data.materials.append(gray)\n\n# Step 4: Create the Mouse\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, -1.5, 0.25), scale=(0.5, 1, 0.25))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nmouse.data.materials.append(gray)", "color_brightness": "Dark", "verify": "human", "entropy": 2.715955709974649, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "0ca5e3f6-c985-43d8-b0ed-e1270dc32891", "name": "Mandala Design", "instruction": "Create a 3D mandala design. Start with a central circle and add concentric rings of intricate, symmetrical patterns. Include shapes like petals, circles, and lines radiating outward from the center.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ncolor3 = bpy.data.materials.new(name=\"Color3\")\ncolor3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Central Circle\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0))\ncentral_circle = bpy.context.object\ncentral_circle.name = \"Central Circle\"\ncentral_circle.data.materials.append(color1)\n\n# Step 3: Create Concentric Rings\nfor i in range(1, 4):\n    bpy.ops.mesh.primitive_circle_add(radius=1 + i, location=(0, 0, 0))\n    ring = bpy.context.object\n    ring.name = f\"Ring {i}\"\n    ring.data.materials.append(color2 if i % 2 == 0 else color3)\n\n# Step 4: Add Petals\nnum_petals = 12\nfor i in range(num_petals):\n    angle = i * (2 * math.pi / num_petals)\n    x = (1.5 + 0.5) * math.cos(angle)\n    y = (1.5 + 0.5) * math.sin(angle)\n    bpy.ops.mesh.primitive_circle_add(vertices=5, radius=0.5, location=(x, y, 0), rotation=(0, 0, angle))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(color1)\n\n# Step 5: Add Radiating Lines\nnum_lines = 24\nfor i in range(num_lines):\n    angle = i * (2 * math.pi / num_lines)\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(x / 2, y / 2, 0), rotation=(0, 0, angle))\n    line = bpy.context.object\n    line.name = f\"Line {i + 1}\"\n    line.data.materials.append(color3)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5751407337094157, "unit_n": 6, "param_ratio": 6.5}
{"id": "bbf68dce-60a1-48e9-ad60-2a6d61b66ccb", "name": "Blender", "instruction": "Design a 3D model of a blender. Focus on the base and the container where ingredients are blended.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.65, depth=0.1, location=(0, 0, 2.0))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.58796533359084, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "0e2fb535-cab8-4791-bf47-a4b10731df0b", "name": "Chessboard", "instruction": "Create a 3D model of a chessboard. The board should have 64 squares arranged in an 8x8 grid. Could you show the board with and without chess pieces on it?", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Arrange the Chessboard\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.join()\nchessboard = bpy.context.object\nchessboard.name = \"Chessboard\"\nchessboard.location = (-3.5, -3.5, 0)  # Center the chessboard\n\n# Step 4: Create Chess Pieces (Optional)\n# Note: This part is commented out to show the board without pieces.\n# Uncomment to add pieces.\n\n# pieces = []\n# for i in range(16):\n#     bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(i % 8, i // 8, 0.3))\n#     piece = bpy.context.object\n#     piece.name = f\"Piece {i + 1}\"\n#     piece.data.materials.append(black if i < 8 else white)\n#     pieces.append(piece)\n\n# for i in range(16):\n#     bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(i % 8, 7 - i // 8, 0.3))\n#     piece = bpy.context.object\n#     piece.name = f\"Piece {i + 17}\"\n#     piece.data.materials.append(white if i < 8 else black)\n#     pieces.append(piece)\n\n# bpy.ops.object.select_all(action='DESELECT')\n# for piece in pieces:\n#     piece.select_set(True)\n# bpy.ops.object.join()\n# chess_pieces = bpy.context.object\n# chess_pieces.name = \"Chess Pieces\"\n# chess_pieces.location = (-3.5, -3.5, 0.3)  # Center the chess pieces above the board", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "975f52bd-44b5-459d-8688-23758a1a0f75", "name": "Sofa", "instruction": "Let's create a 3D model comparing two sofas. One should be a classic style with rolled arms and wooden legs. The other should be a modern style with straight lines and metal legs. Highlight the differences in shape and design.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wooden color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\nfabric_color = bpy.data.materials.new(name=\"Fabric\")\nfabric_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Fabric color\n\n# Step 2: Create the Classic Sofa\n# Create the base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2.5, 0, 0.5))\nclassic_base = bpy.context.object\nclassic_base.name = \"Classic Base\"\nclassic_base.scale = (1, 0.5, 0.2)\nclassic_base.data.materials.append(fabric_color)\n\n# Create the backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2.5, -0.75, 1.1))\nclassic_backrest = bpy.context.object\nclassic_backrest.name = \"Classic Backrest\"\nclassic_backrest.scale = (1, 0.1, 0.5)\nclassic_backrest.data.materials.append(fabric_color)\n\n# Create the arms\nfor i in range(2):\n    x = -2.5 + (i * 2 - 1) * 1.1\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1, location=(x, 0, 0.6), rotation=(0, 0, math.pi/2))\n    arm = bpy.context.object\n    arm.name = f\"Classic Arm {i + 1}\"\n    arm.data.materials.append(fabric_color)\n\n# Create the legs\nfor i in range(4):\n    x = -2.5 + (i % 2) * 1.8 - 0.9\n    y = (i // 2) * 0.8 - 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, 0.2))\n    leg = bpy.context.object\n    leg.name = f\"Classic Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Modern Sofa\n# Create the base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2.5, 0, 0.5))\nmodern_base = bpy.context.object\nmodern_base.name = \"Modern Base\"\nmodern_base.scale = (1, 0.5, 0.2)\nmodern_base.data.materials.append(fabric_color)\n\n# Create the backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2.5, -0.75, 1.1))\nmodern_backrest = bpy.context.object\nmodern_backrest.name = \"Modern Backrest\"\nmodern_backrest.scale = (1, 0.1, 0.5)\nmodern_backrest.data.materials.append(fabric_color)\n\n# Create the arms\nfor i in range(2):\n    x = 2.5 + (i * 2 - 1) * 1.1\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.6))\n    arm = bpy.context.object\n    arm.name = f\"Modern Arm {i + 1}\"\n    arm.scale = (0.1, 0.5, 0.3)\n    arm.data.materials.append(fabric_color)\n\n# Create the legs\nfor i in range(4):\n    x = 2.5 + (i % 2) * 1.8 - 0.9\n    y = (i // 2) * 0.8 - 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, 0.2))\n    leg = bpy.context.object\n    leg.name = f\"Modern Leg {i + 1}\"\n    leg.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.067729949832296, "unit_n": 16, "param_ratio": 3.3125}
{"id": "1890a201-b3d1-4fcd-90e3-41901c71ab96", "name": "Travel Suitcase", "instruction": "Let's compare two types of travel suitcases. First, create a standard hard-shell suitcase with four wheels and a retractable handle. It should have a zipper closure and a built-in combination lock. Next, design a soft-sided suitcase with two wheels and a telescoping handle. This one should have exterior pockets and a buckle closure. Compare their features and potential benefits for different types of travel.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors\nhard_shell_color = bpy.data.materials.new(name=\"HardShellColor\")\nhard_shell_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue color\nsoft_shell_color = bpy.data.materials.new(name=\"SoftShellColor\")\nsoft_shell_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create Hard-shell Suitcase\n# Main body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nhard_shell_body = bpy.context.object\nhard_shell_body.name = \"HardShellBody\"\nhard_shell_body.data.materials.append(hard_shell_color)\n\n# Wheels\nfor i in range(4):\n    x = 0.9 * (i % 2) - 0.45\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, y, 0.05))\n    wheel = bpy.context.object\n    wheel.name = f\"HardShellWheel {i + 1}\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lay flat\n    wheel.data.materials.append(hard_shell_color)\n\n# Retractable handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.9, 2))\nhandle = bpy.context.object\nhandle.scale[2] = 3  # Make it longer\nhandle.name = \"HardShellHandle\"\nhandle.data.materials.append(hard_shell_color)\n\n# Step 3: Create Soft-sided Suitcase\n# Main body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(3, 0, 1))\nsoft_shell_body = bpy.context.object\nsoft_shell_body.name = \"SoftShellBody\"\nsoft_shell_body.data.materials.append(soft_shell_color)\n\n# Wheels\nfor i in range(2):\n    x = 3.9 * (i % 2) - 0.45 + 3\n    y = -0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, y, 0.05))\n    wheel = bpy.context.object\n    wheel.name = f\"SoftShellWheel {i + 1}\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lay flat\n    wheel.data.materials.append(soft_shell_color)\n\n# Telescoping handle\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(3, 0.9, 2))\nhandle = bpy.context.object\nhandle.scale[2] = 3  # Make it longer\nhandle.name = \"SoftShellHandle\"\nhandle.data.materials.append(soft_shell_color)\n\n# Exterior pockets\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(3, 0.75, 1.5))\npocket = bpy.context.object\npocket.name = \"SoftShellPocket\"\npocket.data.materials.append(soft_shell_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.928548747448762, "unit_n": 11, "param_ratio": 3.6363636363636362}
{"id": "20f0d0f3-694e-437d-9b61-3b5ef3dcabd3", "name": "Hammer", "instruction": "Design a hammer with a long, straight handle and a rectangular head at one end.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 2.25))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale = (0.3, 0.3, 0.5)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.763180447528589, "unit_n": 2, "param_ratio": 4.5}
{"id": "5ccb050d-c2d5-4a6c-975b-16f9cca62bfe", "name": "Hammer", "instruction": "Construct a simple hammer with a claw end.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the handle\nhead_color = bpy.data.materials.new(name=\"Head Color\")\nhead_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the head\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, -0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 0.35))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[1] = 0.2\nhead.scale[2] = 0.2\nhead.data.materials.append(head_color)\n\n# Step 4: Create the Claw\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0.15, 0.35), rotation=(math.pi/2, 0, 0))\nclaw1 = bpy.context.object\nclaw1.name = \"Claw1\"\nclaw1.data.materials.append(head_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -0.15, 0.35), rotation=(math.pi/2, 0, 0))\nclaw2 = bpy.context.object\nclaw2.name = \"Claw2\"\nclaw2.data.materials.append(head_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4820878134525084, "unit_n": 4, "param_ratio": 8.75}
{"id": "d67d4950-4fad-4fa3-8890-9707d4d11c66", "name": "Syringe", "instruction": "Create a syringe. It should have a cylindrical body, a plunger at one end, and a needle at the other.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=0.2, location=(0, 0, 0.6))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.3, location=(0, 0, -0.65))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.2742313706872785, "unit_n": 3, "param_ratio": 10.0}
{"id": "9c29224b-f9c1-42b1-ab8d-5b9a13b37064", "name": "Solar Inverter", "instruction": "Create a solar inverter with a display for system status and multiple connection points for input and output.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 1, 1)  # Blue color\n\nconnection_color = bpy.data.materials.new(name=\"Connection Color\")\nconnection_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Inverter\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Inverter Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Display\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0.8, 0.9))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.data.materials.append(display_color)\n\n# Step 4: Create the Connection Points\nfor i in range(4):\n    x = 0.5 * (i % 2) - 0.25\n    y = -0.9\n    z = 0.5 * (i // 2) - 0.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, y, z))\n    connection = bpy.context.object\n    connection.name = f\"Connection {i + 1}\"\n    connection.data.materials.append(connection_color)\n    connection.rotation_euler[0] = 1.5708  # Rotate 90 degrees to align with the body\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.8552580397170226, "unit_n": 6, "param_ratio": 4.666666666666667}
{"id": "ad92b573-2f58-444c-988c-9dfa5a9610eb", "name": "Ironing Board", "instruction": "Can you make a 3D model of an ironing board? It should have a flat, elongated surface with a folding mechanism underneath.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsurface_color = bpy.data.materials.new(name=\"Surface Color\")\nsurface_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nleg_color = bpy.data.materials.new(name=\"Leg Color\")\nleg_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Ironing Surface\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsurface = bpy.context.object\nsurface.name = \"Ironing Surface\"\nsurface.scale = (2, 0.5, 0.1)\nsurface.data.materials.append(surface_color)\n\n# Step 3: Create the Folding Mechanism (Legs)\n# Front legs\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(x, 0.3, 0.6), rotation=(math.pi/4, 0, 0))\n    leg = bpy.context.object\n    leg.name = f\"Front Leg {i + 1}\"\n    leg.data.materials.append(leg_color)\n\n# Back legs\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(x, -0.3, 0.6), rotation=(-math.pi/4, 0, 0))\n    leg = bpy.context.object\n    leg.name = f\"Back Leg {i + 1}\"\n    leg.data.materials.append(leg_color)\n\n# Connectors\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.4, location=(0, 0.3, 0.6), rotation=(0, 0, math.pi/2))\nconnector_front = bpy.context.object\nconnector_front.name = \"Connector Front\"\nconnector_front.data.materials.append(leg_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.4, location=(0, -0.3, 0.6), rotation=(0, 0, math.pi/2))\nconnector_back = bpy.context.object\nconnector_back.name = \"Connector Back\"\nconnector_back.data.materials.append(leg_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.5847887071622893, "unit_n": 7, "param_ratio": 6.571428571428571}
{"id": "f4f1dce9-7518-40d1-aecd-9cf102f6a569", "name": "Blender", "instruction": "Construct a 3D model of a blender. Compare the features of a standard blender and a personal blender. Include the base with control buttons and the blending jar with a lid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Light gray color with transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6 * (i - 1), 0.8, 0.35))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Blending Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.734963444530251, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "50c70460-700f-4a44-9153-ffd9774f495d", "name": "Bird Feeder", "instruction": "Could you model a bird feeder and compare it to a birdhouse? The feeder should be cylindrical with a perch for birds to land on. Include a small roof to protect the feed from rain.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Feeder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 0.25))\nfeeder_body = bpy.context.object\nfeeder_body.name = \"Feeder Body\"\nfeeder_body.data.materials.append(wood_color)\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.4, location=(0, -0.2, 0.1), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.25, depth=0.1, location=(0, 0, 0.55))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.920218651308215, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "a91c9a8b-b4a1-451e-8922-396b46fd5600", "name": "Power Strip", "instruction": "Could you generate a 3D model of a power strip? The strip should be long with multiple sockets along its length. Compare the size of the sockets to the overall length of the strip and ensure they are evenly spaced. The cable should be attached at one end.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrip_color = bpy.data.materials.new(name=\"Strip Color\")\nstrip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nsocket_color = bpy.data.materials.new(name=\"Socket Color\")\nsocket_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Power Strip Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nstrip_body = bpy.context.object\nstrip_body.scale = (3, 0.5, 0.1)\nstrip_body.name = \"Power Strip Body\"\nstrip_body.data.materials.append(strip_color)\n\n# Step 3: Create the Sockets\nnum_sockets = 6\nfor i in range(num_sockets):\n    x = -2.5 + i * 1.0  # Evenly space the sockets along the length of the strip\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, 0, 0.1))\n    socket = bpy.context.object\n    socket.name = f\"Socket {i + 1}\"\n    socket.rotation_euler = (1.5708, 0, 0)  # Rotate to lie flat on the strip\n    socket.data.materials.append(socket_color)\n\n# Step 4: Create the Cable\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(-3.2, 0, -0.05))\ncable = bpy.context.object\ncable.name = \"Cable\"\ncable.rotation_euler = (0, 1.5708, 0)  # Rotate to extend from the end of the strip\ncable.data.materials.append(socket_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.453436137853772, "unit_n": 3, "param_ratio": 8.0}
{"id": "31b6939d-70b1-4ed9-b47e-edc4e203e790", "name": "Coffee Pot", "instruction": "Could you create a coffee pot?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npot_color = bpy.data.materials.new(name=\"Pot Color\")\npot_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body of the Coffee Pot\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(pot_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(1.2, 0, 1.5), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(pot_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(-1.5, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(pot_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.2, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(pot_color)\n\n# Step 6: Create the Lid Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 2.3))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(pot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9318135465316257, "unit_n": 5, "param_ratio": 7.0}
{"id": "37f8f497-d1bc-49f2-a296-4c17859ec4f9", "name": "Stapler", "instruction": "Let's create a 3D model of a stapler. It should have a flat base and a hinged top part that presses down to staple papers. Include a small metal plate on the base where the staples are pressed.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.01, 0.01, 0.01, 1)  # Very dark color\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (2, 1, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Hinged Top Part\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.75))\ntop = bpy.context.object\ntop.scale = (2, 1, 0.1)\ntop.name = \"Top\"\ntop.data.materials.append(black)\n\n# Step 4: Create the Metal Plate\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.35))\nplate = bpy.context.object\nplate.scale = (1.5, 0.5, 0.02)\nplate.name = \"Metal Plate\"\nplate.data.materials.append(metal)\n\n# Step 5: Create the Hinge (a simple cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, -0.5, 0.5), rotation=(0, math.pi/2, 0))\nhinge = bpy.context.object\nhinge.name = \"Hinge\"\nhinge.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.3964738920298294, "unit_n": 4, "param_ratio": 7.5}
{"id": "da8d985f-d11b-4253-b6a9-d4f7aa334eb7", "name": "Laundry Basket", "instruction": "Create a laundry basket. It should be a simple container with an open top for holding clothes.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Basket Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbasket_body = bpy.context.object\nbasket_body.name = \"Basket Body\"\n\n# Step 3: Create the Basket Opening\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.6, location=(0, 0, 0.75))\nbasket_opening = bpy.context.object\nbasket_opening.name = \"Basket Opening\"\n\n# Step 4: Apply Boolean Modifier to Create the Hollow Basket\nmod_bool = basket_body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = basket_opening\nbpy.context.view_layer.objects.active = basket_body\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the basket opening object\nbpy.data.objects.remove(basket_opening, do_unlink=True)\n\n# Step 5: Add Material to the Basket\nbasket_material = bpy.data.materials.new(name=\"Basket Material\")\nbasket_material.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\nbasket_body.data.materials.append(basket_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.1588830833596715, "unit_n": 2, "param_ratio": 7.5}
{"id": "7b25a670-e632-46d3-9745-1380c335c9f7", "name": "Stop Sign", "instruction": "Create an octagonal stop sign with the word \"STOP\" in the center.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nred_color = bpy.data.materials.new(name=\"Red\")\nred_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Octagon\nbpy.ops.mesh.primitive_circle_add(vertices=8, radius=1, fill_type='NGON', location=(0, 0, 0))\noctagon = bpy.context.object\noctagon.name = \"Octagon\"\noctagon.data.materials.append(red_color)\n\n# Step 3: Add the Text \"STOP\"\nbpy.ops.object.text_add(location=(0, 0, 0.01))\ntext = bpy.context.object\ntext.name = \"StopText\"\ntext.data.body = \"STOP\"\ntext.data.align_x = 'CENTER'\ntext.data.align_y = 'CENTER'\ntext.data.size = 0.5\n\n# Set the text color to white\nwhite_color = bpy.data.materials.new(name=\"White\")\nwhite_color.diffuse_color = (1, 1, 1, 1)  # White color\ntext.data.materials.append(white_color)\n\n# Rotate the text to face upwards\ntext.rotation_euler = (0, 0, 0)\n\n# Center the text on the octagon\ntext.location = (0, 0, 0.01)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 9.5}
{"id": "4e3de5e2-3902-4d80-83ce-dd499b32ef5c", "name": "Guitar", "instruction": "How would you model an acoustic guitar for a beginner? Include the body, neck, fretboard, and strings. Make sure it has tuning pegs at the headstock.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metal color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale[0] = 0.6  # Make it more guitar-shaped\nbody.data.materials.append(wood_color)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 1.2, 0))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.scale[1] = 4  # Lengthen the neck\nneck.data.materials.append(wood_color)\n\n# Step 4: Create the Fretboard\nbpy.ops.mesh.primitive_cube_add(size=0.15, location=(0, 1.2, 0.1))\nfretboard = bpy.context.object\nfretboard.name = \"Fretboard\"\nfretboard.scale[1] = 4  # Lengthen the fretboard\nfretboard.data.materials.append(wood_color)\n\n# Step 5: Create the Strings\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=4.4, location=(x, 1.2, 0.1))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.rotation_euler[0] = math.pi / 2  # Rotate to align with the neck\n    string.data.materials.append(metal_color)\n\n# Step 6: Create the Tuning Pegs\nfor i in range(6):\n    x = 0.05 * (i - 2.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(x, 3.4, 0.1))\n    peg = bpy.context.object\n    peg.name = f\"Tuning Peg {i + 1}\"\n    peg.data.materials.append(metal_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0663784554052453, "unit_n": 15, "param_ratio": 2.2}
{"id": "31023880-3070-4c3f-8ad9-665121bb8bd4", "name": "Dog Bed", "instruction": "Could you create a dog bed and compare it to a cat bed in terms of shape and size?", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brown color\n\n# Step 2: Create the Dog Bed\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(-2, 0, 0.1))\ndog_bed_base = bpy.context.object\ndog_bed_base.name = \"Dog Bed Base\"\ndog_bed_base.data.materials.append(bed_color)\n\n# Sides\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(-2, 0, 0.3))\ndog_bed_sides = bpy.context.object\ndog_bed_sides.name = \"Dog Bed Sides\"\ndog_bed_sides.data.materials.append(bed_color)\n\n# Step 3: Create the Cat Bed\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(2, 0, 0.1))\ncat_bed_base = bpy.context.object\ncat_bed_base.name = \"Cat Bed Base\"\ncat_bed_base.data.materials.append(bed_color)\n\n# Sides\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(2, 0, 0.3))\ncat_bed_sides = bpy.context.object\ncat_bed_sides.name = \"Cat Bed Sides\"\ncat_bed_sides.data.materials.append(bed_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.571257362450389, "unit_n": 4, "param_ratio": 6.25}
{"id": "5f11c9b6-9fc3-413c-84e3-cb4c17b04af8", "name": "Laundry Basket", "instruction": "Could you create a laundry basket? The basket should be tall and cylindrical, with handles on either side for easy carrying.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Handles\nfor i in range(2):\n    angle = math.pi * i\n    x = 1.2 * math.cos(angle)\n    y = 1.2 * math.sin(angle)\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(x, y, 1.5), rotation=(math.pi/2, 0, 0), major_radius=0.2, minor_radius=0.05)\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(basket_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.3966119290438215, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "53a13ede-53f6-40f7-9883-42d24f40a501", "name": "Sandwich", "instruction": "Can you create a 3D model of a sandwich? Compare the thickness of the bread slices to the filling.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.80, 0.20, 0.20, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it thin\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nfilling = bpy.context.object\nfilling.scale[2] = 0.2  # Make it thicker than the bread\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it thin\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "4c6fdb13-4bec-4e56-a10e-ad657da31a44", "name": "Circuit Breaker", "instruction": "Create a 3D model of a circuit breaker. It should be rectangular and compact, with a switch on the front and connection terminals on the top and bottom.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body of the Circuit Breaker\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.3, 0.8)\nbody.data.materials.append(gray)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.4, 0.2))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.05, 0.3)\nswitch.data.materials.append(black)\n\n# Step 4: Create the Top Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 0.9))\ntop_terminal = bpy.context.object\ntop_terminal.name = \"Top Terminal\"\ntop_terminal.data.materials.append(black)\n\n# Step 5: Create the Bottom Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -0.9))\nbottom_terminal = bpy.context.object\nbottom_terminal.name = \"Bottom Terminal\"\nbottom_terminal.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.584513664307951, "unit_n": 4, "param_ratio": 7.0}
{"id": "9bf3d89c-97cf-4cfc-9366-2366c7cf1543", "name": "Circular Saw", "instruction": "Create a 3D model of a circular saw. It should feature a round blade with sharp teeth, a handle on the top for gripping, and a baseplate for stability. The saw should have a simple, functional design without any added details.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray metal color\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray handle color\n\n# Step 2: Create the Blade\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nblade = bpy.context.object\nblade.name = \"Blade\"\nblade.data.materials.append(metal_color)\n\n# Step 3: Create the Teeth\nnum_teeth = 20\nfor i in range(num_teeth):\n    angle = (2 * math.pi / num_teeth) * i\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0, depth=0.2, location=(x, y, 0.05), rotation=(0, 0, angle))\n    tooth = bpy.context.object\n    tooth.name = f\"Tooth {i + 1}\"\n    tooth.data.materials.append(metal_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale[0] = 1.5\nhandle.scale[1] = 0.5\nhandle.scale[2] = 0.5\nhandle.data.materials.append(handle_color)\n\n# Step 5: Create the Baseplate\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, -0.1))\nbaseplate = bpy.context.object\nbaseplate.name = \"Baseplate\"\nbaseplate.scale[2] = 0.05\nbaseplate.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.8206878182197572, "unit_n": 4, "param_ratio": 8.0}
{"id": "84e7e42e-a5a0-453a-b588-15540290170e", "name": "Acoustic Guitar vs. Classical Guitar", "instruction": "Create a 3D model to compare an acoustic guitar and a classical guitar. The acoustic guitar should have steel strings, while the classical guitar should have nylon strings. Highlight the differences in the body shape and string type.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.8, 0.52, 0.25, 1)  # Light brown wood color\nsteel_string_color = bpy.data.materials.new(name=\"Steel String\")\nsteel_string_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Gray steel color\nnylon_string_color = bpy.data.materials.new(name=\"Nylon String\")\nnylon_string_color.diffuse_color = (0.9, 0.9, 0.7, 1)  # Light yellow nylon color\n\n# Function to create a guitar body\ndef create_guitar_body(location, scale):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=location)\n    body = bpy.context.object\n    body.scale = scale\n    body.data.materials.append(wood_color)\n    return body\n\n# Function to create guitar strings\ndef create_guitar_strings(location, string_color):\n    for i in range(6):\n        x = location[0] + (i - 2.5) * 0.1\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=3, location=(x, location[1], location[2] + 1.5))\n        string = bpy.context.object\n        string.data.materials.append(string_color)\n\n# Step 2: Create Acoustic Guitar Body\nacoustic_body = create_guitar_body(location=(-2, 0, 0), scale=(1, 0.5, 0.1))\n\n# Step 3: Create Classical Guitar Body\nclassical_body = create_guitar_body(location=(2, 0, 0), scale=(0.9, 0.45, 0.1))\n\n# Step 4: Create Acoustic Guitar Strings\ncreate_guitar_strings(location=(-2, 0, 0), string_color=steel_string_color)\n\n# Step 5: Create Classical Guitar Strings\ncreate_guitar_strings(location=(2, 0, 0), string_color=nylon_string_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7805673953490517, "unit_n": 7, "param_ratio": 3.0}
{"id": "771c7ab7-12dc-470a-8b6d-11532e429117", "name": "Dog Collar", "instruction": "Craft a dog collar that feels comfortable for the pet and includes a small tag.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the collar\ntag_color = bpy.data.materials.new(name=\"Tag Color\")\ntag_color.diffuse_color = (1, 1, 0, 1)  # Yellow color for the tag\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Tag\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -1, -0.1))\ntag = bpy.context.object\ntag.name = \"Tag\"\ntag.data.materials.append(tag_color)\n\n# Step 4: Create the Tag Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.02, location=(0, -0.9, -0.1))\ntag_loop = bpy.context.object\ntag_loop.name = \"Tag Loop\"\ntag_loop.data.materials.append(collar_color)\n\n# Parent the tag to the tag loop\ntag.parent = tag_loop\n\n# Parent the tag loop to the collar\ntag_loop.parent = collar", "color_brightness": "Bright", "verify": "human", "entropy": 4.250403398700006, "unit_n": 3, "param_ratio": 8.0}
{"id": "069d3ffa-a804-4291-aaaa-d9a7d21c8adf", "name": "Hat", "instruction": "Create a hat. It should have a rounded crown and a wide brim.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.5))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Combine the crown and brim into a single object\nbpy.ops.object.select_all(action='DESELECT')\ncrown.select_set(True)\nbrim.select_set(True)\nbpy.context.view_layer.objects.active = crown\nbpy.ops.object.join()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.183147163984124, "unit_n": 2, "param_ratio": 4.5}
{"id": "6886afd3-fc81-44fd-9abf-39f7850dc7a1", "name": "Power Supply", "instruction": "Create a 3D model of a power supply unit. It should be rectangular with a fan on one side and various connectors on the other. ", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body of the Power Supply Unit\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npsu_body = bpy.context.object\npsu_body.name = \"PSU Body\"\npsu_body.scale = (1.5, 1, 0.5)\n\n# Step 3: Create the Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, 1.05, 0))\nfan = bpy.context.object\nfan.name = \"Fan\"\nfan.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face the side\n\n# Step 4: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.6 + i * 0.6, -1.05, 0.2))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5726995680469433, "unit_n": 5, "param_ratio": 2.6}
{"id": "e8749151-adc3-48b4-97da-dba74343945b", "name": "Wall Mural", "instruction": "Design a wall mural that features a landscape scene. The scene should include mountains, a river, and a few trees. The mural should be large enough to cover an entire wall.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmountain_color = bpy.data.materials.new(name=\"Mountain Color\")\nmountain_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray color for mountains\nriver_color = bpy.data.materials.new(name=\"River Color\")\nriver_color.diffuse_color = (0.0, 0.5, 1.0, 1)  # Blue color for river\ntree_trunk_color = bpy.data.materials.new(name=\"Tree Trunk Color\")\ntree_trunk_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for tree trunks\ntree_leaves_color = bpy.data.materials.new(name=\"Tree Leaves Color\")\ntree_leaves_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for tree leaves\n\n# Step 2: Create the Wall\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nwall = bpy.context.object\nwall.name = \"Wall\"\n\n# Step 3: Create the Mountains\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2, depth=3, location=(-2, 0, 1.5))\nmountain1 = bpy.context.object\nmountain1.name = \"Mountain 1\"\nmountain1.data.materials.append(mountain_color)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1.5, depth=2.5, location=(0, 0, 1.25))\nmountain2 = bpy.context.object\nmountain2.name = \"Mountain 2\"\nmountain2.data.materials.append(mountain_color)\n\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1, depth=2, location=(2, 0, 1))\nmountain3 = bpy.context.object\nmountain3.name = \"Mountain 3\"\nmountain3.data.materials.append(mountain_color)\n\n# Step 4: Create the River\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, -1, 0.01))\nriver = bpy.context.object\nriver.name = \"River\"\nriver.scale = (10, 0.5, 1)\nriver.data.materials.append(river_color)\n\n# Step 5: Create the Trees\nfor i in range(3):\n    x = -3 + i * 3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(x, 0.5, 0.5))\n    trunk = bpy.context.object\n    trunk.name = f\"Tree Trunk {i + 1}\"\n    trunk.data.materials.append(tree_trunk_color)\n    \n    bpy.ops.mesh.primitive_cone_add(vertices=8, radius1=0.5, depth=1, location=(x, 0.5, 1))\n    leaves = bpy.context.object\n    leaves.name = f\"Tree Leaves {i + 1}\"\n    leaves.data.materials.append(tree_leaves_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.12494428561471, "unit_n": 11, "param_ratio": 5.181818181818182}
{"id": "d9e751a6-1836-460b-b834-d0c9a0d69f06", "name": "Pizza", "instruction": "Design a pizza. Start with a circular base. Add a layer of tomato sauce, followed by a layer of cheese. Finally, place evenly spaced pepperoni slices on top. Ensure the pizza is the standard size for a large pizza.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Dough color\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Pepperoni color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=4.8, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=4.7, depth=0.05, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 12\npepperoni_radius = 0.5\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.05, location=(x, y, 0.2))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.785358038410146, "unit_n": 4, "param_ratio": 9.75}
{"id": "1f53583c-6427-40a5-9b2d-efa7000c74b3", "name": "Logo", "instruction": "Design a 3D logo for a company. The logo should feature a simple, geometric shape that is easy to recognize.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nlogo_color = bpy.data.materials.new(name=\"Logo Color\")\nlogo_color.diffuse_color = (0.1, 0.5, 0.8, 1)  # Blue color\n\n# Step 2: Create a simple geometric shape (e.g., a torus)\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\nlogo = bpy.context.object\nlogo.name = \"Company Logo\"\nlogo.data.materials.append(logo_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.486749349760814, "unit_n": 1, "param_ratio": 10.0}
{"id": "3933ac27-a56e-4744-9954-e4b2eee0bf58", "name": "Dog Leash", "instruction": "Please design a 3D model of a dog leash. The leash should be long enough for a medium-sized dog and have a comfortable handle for the owner. Include a secure clip at the end to attach to the dog's collar. The leash should be durable and suitable for daily walks in various environments. Additionally, add a small loop near the handle for attaching accessories like a waste bag dispenser or a keychain.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nleash_color = bpy.data.materials.new(name=\"LeashColor\")\nleash_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Leash\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=5, location=(0, 0, 2.5))\nleash = bpy.context.object\nleash.name = \"Leash\"\nleash.data.materials.append(leash_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, location=(0, 0, 5.3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(leash_color)\n\n# Step 4: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 0))\nclip_base = bpy.context.object\nclip_base.name = \"ClipBase\"\nclip_base.data.materials.append(leash_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.2, location=(0, 0, -0.15))\nclip_cylinder = bpy.context.object\nclip_cylinder.name = \"ClipCylinder\"\nclip_cylinder.data.materials.append(leash_color)\n\n# Step 5: Create the Accessory Loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 5.1))\naccessory_loop = bpy.context.object\naccessory_loop.name = \"AccessoryLoop\"\naccessory_loop.data.materials.append(leash_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.035918980537907, "unit_n": 5, "param_ratio": 5.8}
{"id": "d27d696d-ff48-490c-8d28-d6b69b6a3232", "name": "Sofa", "instruction": "Create a 3D model of a two-seater sofa. It should be comfortable and have a simple, modern design.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.scale = (1.5, 0.5, 0.2)\nseat.name = \"Seat\"\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1))\nbackrest = bpy.context.object\nbackrest.scale = (1.5, 0.1, 0.5)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 0.5, 0.5)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "e9af118f-68e7-4ade-83ce-cde5a64f5758", "name": "Patterned Rug", "instruction": "Compare the design elements of two different patterned rugs. One rug should have geometric shapes arranged in a repeating pattern. The other rug should have floral motifs spread across the surface. Show the differences in pattern density and layout.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create the first rug (Geometric shapes)\nbpy.ops.mesh.primitive_plane_add(size=4, location=(-3, 0, 0))\nrug1 = bpy.context.object\nrug1.name = \"Geometric Rug\"\n\n# Add geometric shapes to the first rug\nfor i in range(-1, 2):\n    for j in range(-1, 2):\n        bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-3 + i, j, 0.01))\n        shape = bpy.context.object\n        shape.data.materials.append(color1)\n\n# Step 3: Create the second rug (Floral motifs)\nbpy.ops.mesh.primitive_plane_add(size=4, location=(3, 0, 0))\nrug2 = bpy.context.object\nrug2.name = \"Floral Rug\"\n\n# Add floral motifs to the second rug\nfor i in range(-1, 2):\n    for j in range(-1, 2):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(3 + i, j, 0.01))\n        flower = bpy.context.object\n        flower.data.materials.append(color2)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.271908735082903, "unit_n": 4, "param_ratio": 6.5}
{"id": "31f86262-ed38-404f-ac2f-ebbddac956bb", "name": "Wall Clock", "instruction": "I'm thinking of a wall clock with a minimalist design. It should feature a circular face, 30cm in diameter, with 12 evenly spaced indicators for each hour. The hour and minute hands should be distinguishable by length. Please include a small window on the lower half of the face that displays the current date.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclock_face_color = bpy.data.materials.new(name=\"Clock Face Color\")\nclock_face_color.diffuse_color = (1, 1, 1, 1)  # White color for clock face\nindicator_color = bpy.data.materials.new(name=\"Indicator Color\")\nindicator_color.diffuse_color = (0, 0, 0, 1)  # Black color for indicators\nhand_color = bpy.data.materials.new(name=\"Hand Color\")\nhand_color.diffuse_color = (0, 0, 0, 1)  # Black color for hands\n\n# Step 2: Create the Clock Face\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.01, location=(0, 0, 0))\nclock_face = bpy.context.object\nclock_face.name = \"Clock Face\"\nclock_face.data.materials.append(clock_face_color)\n\n# Step 3: Create the Hour Indicators\nfor i in range(12):\n    angle = i * (math.pi / 6)\n    x = 0.14 * math.cos(angle)\n    y = 0.14 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.01, location=(x, y, 0.01))\n    indicator = bpy.context.object\n    indicator.name = f\"Indicator {i + 1}\"\n    indicator.data.materials.append(indicator_color)\n\n# Step 4: Create the Hour Hand\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0.07, 0.02))\nhour_hand = bpy.context.object\nhour_hand.scale[1] = 0.07\nhour_hand.name = \"Hour Hand\"\nhour_hand.data.materials.append(hand_color)\n\n# Step 5: Create the Minute Hand\nbpy.ops.mesh.primitive_cube_add(size=0.015, location=(0, 0.1, 0.02))\nminute_hand = bpy.context.object\nminute_hand.scale[1] = 0.1\nminute_hand.name = \"Minute Hand\"\nminute_hand.data.materials.append(hand_color)\n\n# Step 6: Create the Date Window\nbpy.ops.mesh.primitive_cube_add(size=0.03, location=(0, -0.1, 0.01))\ndate_window = bpy.context.object\ndate_window.scale[0] = 0.05\ndate_window.scale[1] = 0.02\ndate_window.name = \"Date Window\"\ndate_window.data.materials.append(indicator_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.547937365982652, "unit_n": 16, "param_ratio": 2.25}
{"id": "1d26d5ab-74f4-40d3-89f2-ac46aa1ab9ad", "name": "Coffee Grinder", "instruction": "Design a 3D model of a coffee grinder. It should have a cylindrical body with a handle on top. Include a small drawer at the bottom to collect the ground coffee. The handle should be attached to a rotating mechanism on the top.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.1, 0.5))\ndrawer = bpy.context.object\ndrawer.scale = (0.5, 0.2, 0.5)\ndrawer.name = \"Drawer\"\n\n# Step 4: Create the Top Rotating Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 2.05))\nrotating_mechanism = bpy.context.object\nrotating_mechanism.name = \"Rotating Mechanism\"\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.5, 0, 2.1), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Create the handle knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1, 0, 2.1))\nknob = bpy.context.object\nknob.name = \"Knob\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.4057731508572382, "unit_n": 5, "param_ratio": 5.2}
{"id": "7f74dccc-5bd6-4db4-86c2-b8b21a2996a4", "name": "Drumstick", "instruction": "Create a 3D model of a drumstick. It should be a long, tapered stick with a rounded tip at one end. The handle should be slightly thicker for a comfortable grip.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the main stick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5))\nstick = bpy.context.object\nstick.name = \"Stick\"\nstick.data.materials.append(wood_color)\n\n# Step 3: Create the tapered end\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.02, depth=0.2, location=(0, 0, 1.1))\ntapered_end = bpy.context.object\ntapered_end.name = \"Tapered End\"\ntapered_end.data.materials.append(wood_color)\n\n# Step 4: Create the rounded tip\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0, 1.2))\nrounded_tip = bpy.context.object\nrounded_tip.name = \"Rounded Tip\"\nrounded_tip.data.materials.append(wood_color)\n\n# Step 5: Create the handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.3, location=(0, 0, 0.15))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8957217360878498, "unit_n": 4, "param_ratio": 6.25}
{"id": "228c05c7-ec36-4f11-bf01-1ad3f22837c6", "name": "Blender", "instruction": "Create a blender with a simple base and a container on top for blending ingredients. Include a lid for the container.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.659885851703786, "unit_n": 3, "param_ratio": 10.0}
{"id": "b2923400-4af8-45c1-b558-209f2bf3c3fb", "name": "Logo Design", "instruction": "Design a 3D logo for a tech company. It should be simple and modern, incorporating elements that suggest innovation and technology. The logo should be easily recognizable and scalable.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntech_blue = bpy.data.materials.new(name=\"Tech Blue\")\ntech_blue.diffuse_color = (0.0, 0.5, 1.0, 1)  # Tech blue color\ntech_gray = bpy.data.materials.new(name=\"Tech Gray\")\ntech_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Tech gray color\n\n# Step 2: Create the Main Shape (a simple ring to suggest connectivity)\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), major_radius=1, minor_radius=0.1)\nring = bpy.context.object\nring.name = \"Main Ring\"\nring.data.materials.append(tech_blue)\n\n# Step 3: Create a Cube (to suggest stability and innovation)\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.5, 0, 0))\ncube = bpy.context.object\ncube.name = \"Tech Cube\"\ncube.data.materials.append(tech_gray)\n\n# Step 4: Create a Sphere (to suggest global reach and modernity)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(-1.5, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Tech Sphere\"\nsphere.data.materials.append(tech_blue)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.048948330520346, "unit_n": 3, "param_ratio": 8.0}
{"id": "158b58e6-c2e8-4256-9b52-758a09c3666d", "name": "Maracas", "instruction": "Design a pair of maracas. Each should have a spherical head attached to a handle. The head contains the beads, and the handle is for holding. They are identical in size and shape.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Spherical Heads\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)  # Position the heads left and right\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, 0, 0.6))\n    head = bpy.context.object\n    head.name = f\"Head {i + 1}\"\n\n# Step 3: Create the Handles\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)  # Position the handles left and right\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.126967504681808, "unit_n": 4, "param_ratio": 2.25}
{"id": "970ea2ff-af81-4d31-930f-1508751424ab", "name": "Circuit Breaker Panel", "instruction": "Create a circuit breaker panel with a simple rectangular shape and a series of switches aligned in rows.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.scale = (1, 0.1, 2)  # Make it rectangular\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Switches\nrows = 4\ncolumns = 3\nswitch_width = 0.2\nswitch_height = 0.4\nspacing_x = 0.3\nspacing_y = 0.5\n\nfor row in range(rows):\n    for col in range(columns):\n        x = (col - (columns - 1) / 2) * spacing_x\n        y = 0.1  # Slightly in front of the panel\n        z = (row - (rows - 1) / 2) * spacing_y\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, z))\n        switch = bpy.context.object\n        switch.name = f\"Switch_{row}_{col}\"\n        switch.scale = (switch_width, 0.05, switch_height)\n        switch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.3777958296952395, "unit_n": 2, "param_ratio": 9.0}
{"id": "99e71327-8b62-4f29-ab3c-6a8a774a7833", "name": "Drum", "instruction": "Hey, can you describe a drum for me? Start with the circular body and add the drumhead stretched over the top. Include the tension rods around the sides that are used to tighten the drumhead. Mention the drumsticks used to play it.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color for the drum body\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color for the drumhead\nrod_color = bpy.data.materials.new(name=\"Rod Color\")\nrod_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the tension rods\nstick_color = bpy.data.materials.new(name=\"Stick Color\")\nstick_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color for the drumsticks\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.65))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = (2 * math.pi / num_rods) * i\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.3, location=(x, y, 0))\n    rod = bpy.context.object\n    rod.name = f\"Tension Rod {i + 1}\"\n    rod.data.materials.append(rod_color)\n\n# Step 5: Create the Drumsticks\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 1.5, 0.6), rotation=(math.pi/4, 0, 0))\n    stick = bpy.context.object\n    stick.name = f\"Drumstick {i + 1}\"\n    stick.data.materials.append(stick_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.655823476637921, "unit_n": 5, "param_ratio": 8.6}
{"id": "0d252ee4-5dc1-4cf9-9c24-c8bc13bbc49b", "name": "Wallet", "instruction": "Decorate a wallet. Add a simple pattern or design to the exterior. The decoration should be subtle and enhance the overall appearance of the wallet.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwallet_color = bpy.data.materials.new(name=\"Wallet Color\")\nwallet_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Wallet Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nwallet = bpy.context.object\nwallet.name = \"Wallet\"\nwallet.scale[1] = 0.1  # Make it thin\nwallet.data.materials.append(wallet_color)\n\n# Step 3: Create a Simple Pattern (e.g., stripes)\nfor i in range(-4, 5, 2):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.2, 0.11, 0))\n    stripe = bpy.context.object\n    stripe.name = f\"Stripe {i + 5}\"\n    stripe.scale[1] = 0.02  # Make it thin\n    stripe.scale[2] = 0.8  # Make it long\n    stripe.data.materials.append(pattern_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.409102890534594, "unit_n": 2, "param_ratio": 9.0}
{"id": "ecff2dec-a0f1-44bc-a065-f759c7aa47f3", "name": "Dog Bed", "instruction": "Visualize a circular dog bed with raised edges. The center should be slightly depressed to form a comfortable sleeping area.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.2))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)\n\n# Step 4: Create the Depressed Center\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.05))\ncenter = bpy.context.object\ncenter.name = \"Center\"\ncenter.data.materials.append(bed_color)\n\n# Adjust the center to be slightly depressed\nbpy.ops.transform.translate(value=(0, 0, -0.05))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.76092645498405, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "a97df935-8774-4e99-8991-75e6a6bd3929", "name": "Apple", "instruction": "Can you make a 3D model of a simple apple? It should look fresh and ready to eat.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (1, 0, 0, 1)  # Bright red color\n\napple_green = bpy.data.materials.new(name=\"Apple Green\")\napple_green.diffuse_color = (0, 1, 0, 1)  # Bright green color\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_body.data.materials.append(apple_red)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(apple_green)\n", "color_brightness": "Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "3d542028-32e5-41a3-8cc8-c5043ede664c", "name": "Chocolate Chip Cookie vs. Oatmeal Raisin Cookie", "instruction": "Can you compare a chocolate chip cookie with an oatmeal raisin cookie? Each cookie should be a perfect circle with a diameter of 3 inches. The chocolate chip cookie should have 12 visible chocolate chips, while the oatmeal raisin cookie should have 8 visible raisins. The texture of the oatmeal cookie should be slightly rougher.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie Color\")\ncookie_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Cookie color\n\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip Color\")\nchocolate_chip_color.diffuse_color = (0.20, 0.13, 0.10, 1)  # Dark brown color\n\nraisin_color = bpy.data.materials.new(name=\"Raisin Color\")\nraisin_color.diffuse_color = (0.25, 0.10, 0.05, 1)  # Dark raisin color\n\n# Step 2: Create the Chocolate Chip Cookie\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(-2, 0, 0))\nchocolate_chip_cookie = bpy.context.object\nchocolate_chip_cookie.name = \"Chocolate Chip Cookie\"\nchocolate_chip_cookie.data.materials.append(cookie_color)\n\n# Add chocolate chips\nfor i in range(12):\n    angle = random.uniform(0, 2 * 3.14159)\n    radius = random.uniform(0.3, 1.2)\n    x = radius * math.cos(angle) - 2\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.1))\n    chocolate_chip = bpy.context.object\n    chocolate_chip.name = f\"Chocolate Chip {i + 1}\"\n    chocolate_chip.data.materials.append(chocolate_chip_color)\n\n# Step 3: Create the Oatmeal Raisin Cookie\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(2, 0, 0))\noatmeal_raisin_cookie = bpy.context.object\noatmeal_raisin_cookie.name = \"Oatmeal Raisin Cookie\"\noatmeal_raisin_cookie.data.materials.append(cookie_color)\n\n# Add raisins\nfor i in range(8):\n    angle = random.uniform(0, 2 * 3.14159)\n    radius = random.uniform(0.3, 1.2)\n    x = radius * math.cos(angle) + 2\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.1))\n    raisin = bpy.context.object\n    raisin.name = f\"Raisin {i + 1}\"\n    raisin.data.materials.append(raisin_color)\n\n# Roughen the oatmeal raisin cookie\nbpy.context.view_layer.objects.active = oatmeal_raisin_cookie\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=10)\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='DISPLACE')\ndisplace = oatmeal_raisin_cookie.modifiers['Displace']\ndisplace.strength = 0.1\nbpy.ops.texture.new()\ntexture = bpy.data.textures['Texture']\ntexture.type = 'CLOUDS'\ndisplace.texture = texture", "color_brightness": "Dark", "verify": "human", "entropy": 3.4250028530527676, "unit_n": 23, "param_ratio": 1.4782608695652173}
{"id": "5b364aad-9180-4d89-b7fe-bfd390a47208", "name": "Pet Bed", "instruction": "Create a pet bed that has a rectangular shape with raised edges on all four sides.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.scale[2] = 0.1  # Flatten the cube to make it a rectangular base\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1, 0.1))\nfront_edge = bpy.context.object\nfront_edge.scale[2] = 0.1\nfront_edge.scale[1] = 0.1\nfront_edge.name = \"Front Edge\"\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 0.1))\nback_edge = bpy.context.object\nback_edge.scale[2] = 0.1\nback_edge.scale[1] = 0.1\nback_edge.name = \"Back Edge\"\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1, 0, 0.1))\nleft_edge = bpy.context.object\nleft_edge.scale[2] = 0.1\nleft_edge.scale[0] = 0.1\nleft_edge.name = \"Left Edge\"\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1, 0, 0.1))\nright_edge = bpy.context.object\nright_edge.scale[2] = 0.1\nright_edge.scale[0] = 0.1\nright_edge.name = \"Right Edge\"\nright_edge.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.775154542425223, "unit_n": 5, "param_ratio": 5.0}
{"id": "4ff41565-c60f-49ae-8274-ab9107b6f9a5", "name": "Dish rack", "instruction": "Create a 3D model of a dish rack. It should have multiple slots for holding plates upright, as well as compartments for utensils and cups. The design should be simple and practical, fitting easily on a kitchen countertop. How does this dish rack's design compare to a drying mat?", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05  # Make it flat\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Plate Slots\nnum_slots = 5\nslot_width = 0.1\nslot_height = 0.5\nslot_depth = 1.8\nfor i in range(num_slots):\n    x = -0.9 + i * 0.4\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.scale = (slot_width, slot_depth, slot_height)\n    slot.data.materials.append(metal_color)\n\n# Step 4: Create the Utensil Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.1, 0.5, 0.35))\nutensil_compartment = bpy.context.object\nutensil_compartment.name = \"Utensil Compartment\"\nutensil_compartment.scale = (0.3, 0.3, 0.7)\nutensil_compartment.data.materials.append(metal_color)\n\n# Step 5: Create the Cup Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.1, -0.5, 0.35))\ncup_compartment = bpy.context.object\ncup_compartment.name = \"Cup Compartment\"\ncup_compartment.scale = (0.3, 0.3, 0.7)\ncup_compartment.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8392796873720543, "unit_n": 4, "param_ratio": 5.25}
{"id": "e07991cf-2287-4c7a-9959-55186833ca25", "name": "Pattern", "instruction": "Design a 3D pattern featuring interlocking hexagons. Compare it to a honeycomb structure in terms of the arrangement and overall appearance.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon parameters\nradius = 1\ndepth = 0.1\n\n# Function to create a hexagon\ndef create_hexagon(name, location):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=radius, depth=depth, location=location)\n    hexagon = bpy.context.object\n    hexagon.name = name\n\n# Step 2: Create the honeycomb pattern\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = col * 1.5 * radius\n        y_offset = row * math.sqrt(3) * radius\n        if col % 2 == 1:\n            y_offset += math.sqrt(3) / 2 * radius\n        create_hexagon(f\"Hexagon_{row}_{col}\", (x_offset, y_offset, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 1.0}
{"id": "1c4a1ed6-01e2-42e9-895b-2bd6ef352c5a", "name": "Sofa", "instruction": "Design a 3D model of a sofa. The sofa should have a rectangular seat, a backrest, and armrests on both sides. How would this sofa be used in a living room setting?", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.scale[0] = 2  # Length\nseat.scale[1] = 1  # Width\nseat.scale[2] = 0.2  # Height\nseat.name = \"Seat\"\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.1))\nbackrest = bpy.context.object\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.2  # Width\nbackrest.scale[2] = 0.6  # Height\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.2  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.4  # Height\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "60236c09-5753-4f40-be0a-97972b22b6ff", "name": "Drum Kit", "instruction": "Create a drum kit for a beginner drummer. It should include a bass drum, snare drum, two tom-toms, a hi-hat, and a crash cymbal. The bass drum should have a pedal, and the hi-hat should have a stand with a pedal. Make sure all the drums have simple tuning lugs.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for metal parts\ndrum_color = bpy.data.materials.new(name=\"Drum\")\ndrum_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for drum shells\ncymbal_color = bpy.data.materials.new(name=\"Cymbal\")\ncymbal_color.diffuse_color = (0.8, 0.8, 0.1, 1)  # Yellow color for cymbals\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0.6, 0.5))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 4: Create the Tom-Toms\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.15, location=(x, 0.3, 0.6))\n    tom_tom = bpy.context.object\n    tom_tom.name = f\"Tom-Tom {i + 1}\"\n    tom_tom.data.materials.append(drum_color)\n\n# Step 5: Create the Hi-Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.02, location=(-0.6, 0.6, 0.8))\nhi_hat_top = bpy.context.object\nhi_hat_top.name = \"Hi-Hat Top\"\nhi_hat_top.data.materials.append(cymbal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.02, location=(-0.6, 0.6, 0.78))\nhi_hat_bottom = bpy.context.object\nhi_hat_bottom.name = \"Hi-Hat Bottom\"\nhi_hat_bottom.data.materials.append(cymbal_color)\n\n# Hi-Hat Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.8, location=(-0.6, 0.6, 0.4))\nhi_hat_stand = bpy.context.object\nhi_hat_stand.name = \"Hi-Hat Stand\"\nhi_hat_stand.data.materials.append(metal_color)\n\n# Hi-Hat Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.6, 0.6, 0.05))\nhi_hat_pedal = bpy.context.object\nhi_hat_pedal.name = \"Hi-Hat Pedal\"\nhi_hat_pedal.data.materials.append(metal_color)\n\n# Step 6: Create the Crash Cymbal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(0.6, 0.6, 0.8))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(cymbal_color)\n\n# Crash Cymbal Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.8, location=(0.6, 0.6, 0.4))\ncrash_cymbal_stand = bpy.context.object\ncrash_cymbal_stand.name = \"Crash Cymbal Stand\"\ncrash_cymbal_stand.data.materials.append(metal_color)\n\n# Step 7: Create the Bass Drum Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.3, 0.05))\nbass_drum_pedal = bpy.context.object\nbass_drum_pedal.name = \"Bass Drum Pedal\"\nbass_drum_pedal.data.materials.append(metal_color)\n\n# Step 8: Add simple tuning lugs to all drums\ndef add_tuning_lugs(drum, num_lugs):\n    for i in range(num_lugs):\n        angle = 2 * math.pi * i / num_lugs\n        x = drum.location.x + drum.dimensions.x / 2 * math.cos(angle)\n        y = drum.location.y + drum.dimensions.y / 2 * math.sin(angle)\n        z = drum.location.z + drum.dimensions.z / 2\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.05, location=(x, y, z))\n        lug = bpy.context.object\n        lug.data.materials.append(metal_color)\n\nadd_tuning_lugs(bass_drum, 8)\nadd_tuning_lugs(snare_drum, 6)\nfor i in range(2):\n    tom_tom = bpy.data.objects[f\"Tom-Tom {i + 1}\"]\n    add_tuning_lugs(tom_tom, 6)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.49544119749776, "unit_n": 12, "param_ratio": 5.666666666666667}
{"id": "dce8b126-0ed9-4216-8241-1f2f6c8fcc75", "name": "Sticky Notes", "instruction": "Could you create sticky notes that are easy to peel and stick on surfaces? They should be square-shaped and come in a variety of colors.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1)   # Blue\n]\n\n# Step 2: Create Sticky Notes\nfor i, color in enumerate(colors):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(i * 1.2, 0, 0))\n    note = bpy.context.object\n    note.name = f\"Sticky Note {i + 1}\"\n    mat = bpy.data.materials.new(name=f\"Color {i + 1}\")\n    mat.diffuse_color = color\n    note.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.995732273553991, "unit_n": 1, "param_ratio": 5.0}
{"id": "986b8507-6188-4f39-8587-0648eeae0fbf", "name": "Pizza", "instruction": "Create a pizza with a round base, topped with tomato sauce, cheese, and pepperoni slices.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Yellow color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_radius = 0.1\npepperoni_depth = 0.02\npepperoni_positions = [\n    (0.3, 0.3),\n    (-0.3, 0.3),\n    (0.3, -0.3),\n    (-0.3, -0.3),\n    (0.5, 0),\n    (-0.5, 0),\n    (0, 0.5),\n    (0, -0.5),\n]\n\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=pepperoni_depth, location=(pos[0], pos[1], 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.274039292141756, "unit_n": 4, "param_ratio": 9.5}
{"id": "7544b1aa-5706-402e-97f3-0fa272f5ea76", "name": "Pencil", "instruction": "Create a 3D model of a pencil. The pencil should be hexagonal in shape with a sharpened tip on one end and an eraser on the other. Include a metal band connecting the eraser to the pencil body. The pencil should be detailed enough to show the wood and graphite core.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Wood color\ngraphite_color = bpy.data.materials.new(name=\"Graphite\")\ngraphite_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Graphite color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metal color\neraser_color = bpy.data.materials.new(name=\"Eraser\")\neraser_color.diffuse_color = (1, 0.4, 0.4, 1)  # Eraser color\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.1, depth=5, location=(0, 0, 2.5))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(wood_color)\n\n# Step 3: Create the Graphite Tip\nbpy.ops.mesh.primitive_cone_add(vertices=6, radius1=0.1, radius2=0, depth=0.5, location=(0, 0, 5.25))\ngraphite_tip = bpy.context.object\ngraphite_tip.name = \"Graphite Tip\"\ngraphite_tip.data.materials.append(graphite_color)\n\n# Step 4: Create the Metal Band\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.11, depth=0.2, location=(0, 0, 0.1))\nmetal_band = bpy.context.object\nmetal_band.name = \"Metal Band\"\nmetal_band.data.materials.append(metal_color)\n\n# Step 5: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=0.3, location=(0, 0, -0.25))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(eraser_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.078400518116993, "unit_n": 4, "param_ratio": 11.25}
{"id": "aabf2a23-4576-4772-95a2-0eba16970043", "name": "Backpack", "instruction": "Let's create a 3D model of a backpack. It should have two shoulder straps, a main compartment with a zipper, and a front pocket. The back should be slightly padded. Ensure the shoulder straps are adjustable and there is a small handle on top.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbackpack_color = bpy.data.materials.new(name=\"Backpack Color\")\nbackpack_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\nstrap_color = bpy.data.materials.new(name=\"Strap Color\")\nstrap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.5, 0.3, 0.7)\nmain_compartment.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.6))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.05, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.35, 1.2))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n    strap.scale = (0.05, 0.02, 0.6)\n    strap.data.materials.append(strap_color)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0, -0.35, 1.8), rotation=(0, 1.57, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(strap_color)\n\n# Step 6: Create the Padded Back\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.31, 1))\npadded_back = bpy.context.object\npadded_back.name = \"Padded Back\"\npadded_back.scale = (0.48, 0.02, 0.68)\npadded_back.data.materials.append(backpack_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.993098988254088, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "25485011-89e3-4bf0-83eb-4a96838776e5", "name": "Sushi Roll", "instruction": "Please create a 3D model of a sushi roll. It should have a cylindrical shape with visible layers of rice, seaweed, and filling. This will be used in a virtual food presentation, so it should look appetizing and realistic.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed = bpy.data.materials.new(name=\"Seaweed\")\nseaweed.diffuse_color = (0.0, 0.1, 0.0, 1)  # Dark green color for seaweed\nrice = bpy.data.materials.new(name=\"Rice\")\nrice.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color for rice\nfilling = bpy.data.materials.new(name=\"Filling\")\nfilling.diffuse_color = (1.0, 0.5, 0.0, 1)  # Orange color for filling\n\n# Step 2: Create the Seaweed Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.2, location=(0, 0, 0))\nseaweed_layer = bpy.context.object\nseaweed_layer.name = \"Seaweed Layer\"\nseaweed_layer.data.materials.append(seaweed)\n\n# Step 3: Create the Rice Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.2, location=(0, 0, 0))\nrice_layer = bpy.context.object\nrice_layer.name = \"Rice Layer\"\nrice_layer.data.materials.append(rice)\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0))\nfilling_layer = bpy.context.object\nfilling_layer.name = \"Filling Layer\"\nfilling_layer.data.materials.append(filling)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.600308450524309, "unit_n": 3, "param_ratio": 10.0}
{"id": "ffa97b2b-aaa2-4b11-93d4-d0b7f9ccb630", "name": "Sun Hat", "instruction": "Imagine a wide-brimmed sun hat, perfect for a sunny day at the beach. The hat should have a circular brim extending outwards, with a slightly domed crown. Add a simple ribbon around the base of the crown, tied in a small bow at the back. The hat should have a smooth, continuous surface, giving it a seamless look.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.9, 0.8, 0.6, 1)  # Light beige color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.scale[2] = 0.5  # Flatten the sphere to make it domed\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.5))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.scale[2] = 0.05  # Make the ribbon thin\nribbon.data.materials.append(hat_color)\n\n# Step 5: Create the Bow\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -1.05, 0.5))\nbow_center = bpy.context.object\nbow_center.name = \"Bow Center\"\nbow_center.data.materials.append(hat_color)\n\nfor i in range(2):\n    angle = math.pi / 4 if i == 0 else -math.pi / 4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, -1.05, 0.5))\n    bow_ribbon = bpy.context.object\n    bow_ribbon.name = f\"Bow Ribbon {i + 1}\"\n    bow_ribbon.rotation_euler = (0, angle, 0)\n    bow_ribbon.data.materials.append(hat_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.9021941311361372, "unit_n": 6, "param_ratio": 4.666666666666667}
{"id": "d566abc8-8b23-46f6-a3e5-7910c6717fd8", "name": "Blender", "instruction": "Create a blender. It should have a base with buttons, a clear container with measurement markings, and blades at the bottom of the container.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Light gray with transparency\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    x = 0.5 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, 0.9, 0.35))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Blades\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.5, depth=0.1, location=(0, 0, 0.75))\nblades = bpy.context.object\nblades.name = \"Blades\"\nblades.data.materials.append(base_color)\n\n# Step 6: Add Measurement Markings (simplified as lines)\nfor i in range(1, 5):\n    bpy.ops.mesh.primitive_plane_add(size=0.02, location=(0.75, 0, 0.5 * i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(base_color)\n    marking.rotation_euler[1] = 1.5708  # Rotate 90 degrees on Y axis", "color_brightness": "Dark", "verify": "human", "entropy": 4.902318335023195, "unit_n": 10, "param_ratio": 3.9}
{"id": "76192921-a720-443f-a94a-d62b49fb212f", "name": "Winter Hat", "instruction": "Design a winter hat with a snug fit and a fold-over brim. The hat should be warm and comfortable to wear. Include a pom-pom on top for added style.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Warm red color\n\npom_pom_color = bpy.data.materials.new(name=\"Pom Pom Color\")\npom_pom_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White color\n\n# Step 2: Create the Main Part of the Hat\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nhat = bpy.context.object\nhat.name = \"Hat\"\nhat.scale[2] = 1.2  # Elongate the sphere to make it look like a hat\nhat.data.materials.append(hat_color)\n\n# Step 3: Create the Fold-Over Brim\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.2, location=(0, 0, 0.4))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 4: Create the Pom-Pom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 2.2))\npom_pom = bpy.context.object\npom_pom.name = \"Pom Pom\"\npom_pom.data.materials.append(pom_pom_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.2337040535458375, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "d31f25bb-dc53-4610-923f-250dd21a7aa2", "name": "Chess Set", "instruction": "Create a chess set. The board should be square with alternating light and dark squares. Each side should have 16 pieces: one king, one queen, two rooks, two knights, two bishops, and eight pawns. The pieces should be easily distinguishable from one another.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"LightSquare\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"DarkSquare\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\nfor i in range(board_size):\n    for j in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        if (i + j) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Create a simple representation of chess pieces\ndef create_piece(name, location, color):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=location)\n    piece = bpy.context.object\n    piece.name = name\n    piece.data.materials.append(color)\n\nwhite_color = bpy.data.materials.new(name=\"White\")\nwhite_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_color = bpy.data.materials.new(name=\"Black\")\nblack_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Create white pieces\nfor i in range(8):\n    create_piece(f\"WhitePawn{i+1}\", (i, 1, 0.3), white_color)\n\ncreate_piece(\"WhiteRook1\", (0, 0, 0.3), white_color)\ncreate_piece(\"WhiteRook2\", (7, 0, 0.3), white_color)\ncreate_piece(\"WhiteKnight1\", (1, 0, 0.3), white_color)\ncreate_piece(\"WhiteKnight2\", (6, 0, 0.3), white_color)\ncreate_piece(\"WhiteBishop1\", (2, 0, 0.3), white_color)\ncreate_piece(\"WhiteBishop2\", (5, 0, 0.3), white_color)\ncreate_piece(\"WhiteQueen\", (3, 0, 0.3), white_color)\ncreate_piece(\"WhiteKing\", (4, 0, 0.3), white_color)\n\n# Create black pieces\nfor i in range(8):\n    create_piece(f\"BlackPawn{i+1}\", (i, 6, 0.3), black_color)\n\ncreate_piece(\"BlackRook1\", (0, 7, 0.3), black_color)\ncreate_piece(\"BlackRook2\", (7, 7, 0.3), black_color)\ncreate_piece(\"BlackKnight1\", (1, 7, 0.3), black_color)\ncreate_piece(\"BlackKnight2\", (6, 7, 0.3), black_color)\ncreate_piece(\"BlackBishop1\", (2, 7, 0.3), black_color)\ncreate_piece(\"BlackBishop2\", (5, 7, 0.3), black_color)\ncreate_piece(\"BlackQueen\", (3, 7, 0.3), black_color)\ncreate_piece(\"BlackKing\", (4, 7, 0.3), black_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 6.123010727368461, "unit_n": 2, "param_ratio": 12.0}
{"id": "ecbfd92c-3792-48f7-ae18-c173ead3593a", "name": "Plate", "instruction": "Create a simple round plate with a slightly raised edge.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nplate_color = bpy.data.materials.new(name=\"Plate Color\")\nplate_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Main Plate\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nmain_plate = bpy.context.object\nmain_plate.name = \"Main Plate\"\nmain_plate.data.materials.append(plate_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, 0.075))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(plate_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 7.5}
{"id": "f7b1d535-70dd-4744-9116-877160315cf4", "name": "Cat Scratcher", "instruction": "Describe this cat scratcher. It should be a vertical post with a circular base.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the base\npost_color = bpy.data.materials.new(name=\"Post Color\")\npost_color.diffuse_color = (0.8, 0.7, 0.6, 1)  # Light brown color for the post\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 1.05))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(post_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.567477585857952, "unit_n": 2, "param_ratio": 10.0}
{"id": "5e40daa2-7ddc-44f8-9119-15e762a52115", "name": "Laptop", "instruction": "Add decorative stickers to the back of a laptop screen.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlaptop_color = bpy.data.materials.new(name=\"Laptop Color\")\nlaptop_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nsticker_color = bpy.data.materials.new(name=\"Sticker Color\")\nsticker_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Laptop Screen\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nlaptop_screen = bpy.context.object\nlaptop_screen.name = \"Laptop Screen\"\nlaptop_screen.data.materials.append(laptop_color)\n\n# Step 3: Create the Decorative Stickers\nsticker_positions = [(-0.5, 0.5, 0.01), (0.5, 0.5, 0.01), (-0.5, -0.5, 0.01), (0.5, -0.5, 0.01)]\nfor i, pos in enumerate(sticker_positions):\n    bpy.ops.mesh.primitive_circle_add(radius=0.1, location=pos)\n    sticker = bpy.context.object\n    sticker.name = f\"Sticker {i + 1}\"\n    sticker.data.materials.append(sticker_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.01)})\n    bpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4211148171735375, "unit_n": 2, "param_ratio": 7.5}
{"id": "926f22db-33f3-499e-8812-4660a1f2cfd2", "name": "Power Strip", "instruction": "Create a 3D model of a power strip with six outlets and a switch. The strip should have a cord extending from one end.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstrip_color = bpy.data.materials.new(name=\"Strip Color\")\nstrip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\noutlet_color = bpy.data.materials.new(name=\"Outlet Color\")\noutlet_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"Switch Color\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\ncord_color = bpy.data.materials.new(name=\"Cord Color\")\ncord_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Power Strip Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nstrip_body = bpy.context.object\nstrip_body.scale[0] = 3\nstrip_body.scale[1] = 0.5\nstrip_body.scale[2] = 0.1\nstrip_body.name = \"Power Strip Body\"\nstrip_body.data.materials.append(strip_color)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-2.5 + i, 0, 0.1))\n    outlet = bpy.context.object\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(2.5, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(switch_color)\n\n# Step 5: Create the Cord\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(-3.5, 0, 0))\ncord = bpy.context.object\ncord.name = \"Cord\"\ncord.rotation_euler[1] = 1.5708  # Rotate 90 degrees to lay flat\ncord.data.materials.append(cord_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8852251148237573, "unit_n": 9, "param_ratio": 4.111111111111111}
{"id": "b66c0a39-8264-4b22-857a-2d322f143da0", "name": "Smartphone", "instruction": "What does a modern smartphone look like? ", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Smartphone Screen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(gray)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "a300cebf-2700-4d0c-962c-dfe1e605df4f", "name": "Pizza Slice", "instruction": "Hi there! Let's create a pizza slice. It should have a triangular shape with a crust at the wider end. The slice should be topped with pepperoni, mushrooms, and green peppers. The cheese should be melted and cover the entire slice. Make sure the toppings are evenly distributed.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Crust color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Pepperoni color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.9, 0.9, 0.8, 1)  # Mushroom color\ngreen_pepper_color = bpy.data.materials.new(name=\"Green Pepper\")\ngreen_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green pepper color\n\n# Step 2: Create the Pizza Slice Base\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1.0, radius2=0, depth=0.1, location=(0, 0, 0))\npizza_slice = bpy.context.object\npizza_slice.name = \"Pizza Slice\"\npizza_slice.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, -0.5, 0.05))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.scale[0] = 1.2\ncrust.scale[1] = 0.2\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create the Pepperoni\npepperoni_positions = [(0.2, 0.2, 0.1), (-0.2, 0.1, 0.1), (0.1, -0.1, 0.1)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create the Mushrooms\nmushroom_positions = [(0.3, -0.2, 0.1), (-0.3, 0.3, 0.1)]\nfor i, pos in enumerate(mushroom_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.05, location=pos)\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 6: Create the Green Peppers\ngreen_pepper_positions = [(0.0, 0.3, 0.1), (-0.2, -0.3, 0.1)]\nfor i, pos in enumerate(green_pepper_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    green_pepper = bpy.context.object\n    green_pepper.name = f\"Green Pepper {i + 1}\"\n    green_pepper.data.materials.append(green_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8051785737242865, "unit_n": 5, "param_ratio": 8.4}
{"id": "dba71e0d-3d8f-41eb-aead-e7fbcb369643", "name": "Dog Bed", "instruction": "Design a 3D model of a dog bed. The bed should be oval-shaped with raised edges. Add a soft cushion inside the bed. Ensure the bed looks comfortable and inviting for a dog.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the bed\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color for the cushion\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"BedBase\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.5, 1, 0.3))\nbpy.ops.object.mode_set(mode='OBJECT')\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.2, location=(0, 0, 0.15))\nbed_edges = bpy.context.object\nbed_edges.name = \"BedEdges\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.5, 1, 0.3))\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = bed_base\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.ops.object.select_all(action='DESELECT')\nbed_edges.select_set(True)\nbpy.ops.object.delete()\n\n# Step 4: Create the Soft Cushion\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.8, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1.3, 0.9, 0.2))\nbpy.ops.object.mode_set(mode='OBJECT')\ncushion.data.materials.append(cushion_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 5.751791587097548, "unit_n": 4, "param_ratio": 5.75}
{"id": "9c1c0427-fdae-429a-ae09-7cad15259623", "name": "Smartphone", "instruction": "Design a sleek smartphone with a prominent screen and minimal bezels.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nbezel_color = bpy.data.materials.new(name=\"Bezel Color\")\nbezel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color for the bezels\n\n# Step 2: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nscreen = bpy.context.object\nscreen.scale = (0.7, 1.4, 0.02)  # A sleek rectangular screen\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 3: Create the Bezels\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.03))\nbezel = bpy.context.object\nbezel.scale = (0.72, 1.42, 0.01)  # Slightly larger to act as bezels\nbezel.name = \"Bezel\"\nbezel.data.materials.append(bezel_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 9.0}
{"id": "0a48a455-e2db-4989-9540-49204c817c3e", "name": "Centrifuge", "instruction": "Create a 3D model of a laboratory centrifuge. The centrifuge should have a cylindrical body with a lid on top. Include a control panel with buttons and a small display screen. Ensure there are slots inside the centrifuge for holding test tubes.", "category": "Furnishing", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\npanel_color = bpy.data.materials.new(name=\"Panel Color\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0, 0, 1, 1)  # Blue color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Centrifuge Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 1.5))\nlid = bpy.context.object\nlid.name = \"Centrifuge Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.1, 0.75))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.scale[2] = 0.1\npanel.data.materials.append(panel_color)\n\n# Step 5: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 1.15, 0.75))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 6: Create the Display Screen\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.3, 1.15, 0.75))\nscreen = bpy.context.object\nscreen.name = \"Display Screen\"\nscreen.scale[2] = 0.05\nscreen.data.materials.append(screen_color)\n\n# Step 7: Create the Slots for Test Tubes\nfor i in range(6):\n    angle = math.radians(i * 60)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, y, 0.25))\n    slot = bpy.context.object\n    slot.name = f\"Test Tube Slot {i + 1}\"\n    slot.data.materials.append(body_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.373904749647343, "unit_n": 13, "param_ratio": 4.0}
{"id": "5d735faf-f8f0-4f76-8f69-e21b6c88623e", "name": "Dish Drying Mat", "instruction": "Create a dish drying mat with a rectangular shape, measuring 40cm by 50cm. It should have a grid texture on the surface to facilitate water drainage.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Mat\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nmat = bpy.context.object\nmat.scale = (0.4, 0.5, 0.01)  # Scale to 40cm by 50cm\n\n# Step 3: Create the Grid Texture\nbpy.ops.mesh.primitive_grid_add(x_subdivisions=20, y_subdivisions=25, size=1, location=(0, 0, 0.01))\ngrid = bpy.context.object\ngrid.scale = (0.4, 0.5, 0.01)  # Scale to match the mat\n\n# Step 4: Parent the Grid to the Mat\ngrid.parent = mat\n\n# Optional: Add a material to the mat for better visualization\nmat_material = bpy.data.materials.new(name=\"MatMaterial\")\nmat_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nmat.data.materials.append(mat_material)\ngrid.data.materials.append(mat_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.548067889236444, "unit_n": 2, "param_ratio": 7.5}
{"id": "3be83e9c-b159-4709-a574-cc2a3706cde6", "name": "Pet Bed", "instruction": "Design a pet bed that has a circular shape with raised edges all around. Ensure it has a flat bottom. Add a soft cushion that fits perfectly inside the bed. The pet bed should be large enough to accommodate a medium-sized dog.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.35, 0.05, 1)  # Brown color for the bed\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cushion\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.1))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(0, 0, 0.075))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.37047276378577, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "835fe0c3-26a3-45e6-b227-4815fd9aad10", "name": "Logo", "instruction": "Generate a 3D model of a simple logo. It should be a geometric shape with clean lines and no additional details.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Logo Shape\n# For simplicity, let's create a basic geometric shape, such as a triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(0, 0, 0))\nlogo = bpy.context.object\nlogo.name = \"Simple Logo\"\n\n# Step 3: Assign a Material (Optional)\n# Let's assign a simple gray color to the logo\nmaterial = bpy.data.materials.new(name=\"LogoMaterial\")\nmaterial.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nlogo.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.3862943611198906, "unit_n": 1, "param_ratio": 11.0}
{"id": "8e366cee-f648-40b1-bceb-c68b681e13da", "name": "Smartphone", "instruction": "Can you design a smartphone with a touchscreen?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (0.4, 0.8, 0.02)\nbody.name = \"Smartphone Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Touchscreen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.scale = (0.35, 0.75, 1)\nscreen.name = \"Touchscreen\"\nscreen.data.materials.append(dark_gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "ebaeb0e6-96e9-498e-b240-6bbe7882cf2e", "name": "Pattern", "instruction": "Create a pattern consisting of repeating geometric shapes. It should be symmetrical and uniform.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncolor = bpy.data.materials.new(name=\"PatternColor\")\ncolor.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the repeating geometric shapes\nfor i in range(-2, 3):\n    for j in range(-2, 3):\n        bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i, j, 0))\n        cube = bpy.context.object\n        cube.data.materials.append(color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.298317366548037, "unit_n": 4, "param_ratio": 2.25}
{"id": "5536be98-aa53-4b2e-bf47-a037e9f68959", "name": "Light Switch", "instruction": "Make a 3D model of a light switch.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nlight_switch_color = bpy.data.materials.new(name=\"Light Switch Color\")\nlight_switch_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Base Plate\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbase_plate = bpy.context.object\nbase_plate.scale[0] = 0.6\nbase_plate.scale[1] = 0.1\nbase_plate.scale[2] = 1.0\nbase_plate.name = \"Base Plate\"\nbase_plate.data.materials.append(light_switch_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, 0))\nswitch = bpy.context.object\nswitch.scale[0] = 0.2\nswitch.scale[1] = 0.05\nswitch.scale[2] = 0.4\nswitch.name = \"Switch\"\nswitch.data.materials.append(light_switch_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "29c9711b-1a9c-4538-83f5-82abc90f52c5", "name": "Fruit Basket", "instruction": "Can you create a fruit basket? The basket is round and open at the top, filled with various fruits like apples, bananas, and oranges. It has a handle for carrying.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the basket\napple_color = bpy.data.materials.new(name=\"Apple Color\")\napple_color.diffuse_color = (1, 0, 0, 1)  # Red color for apples\nbanana_color = bpy.data.materials.new(name=\"Banana Color\")\nbanana_color.diffuse_color = (1, 1, 0, 1)  # Yellow color for bananas\norange_color = bpy.data.materials.new(name=\"Orange Color\")\norange_color.diffuse_color = (1, 0.55, 0, 1)  # Orange color for oranges\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.1, minor_radius=0.05, location=(0, 0, 0.75), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(basket_color)\n\n# Step 4: Create the Fruits\n# Apples\nfor i in range(3):\n    x = 0.4 * math.cos(i * 2 * math.pi / 3)\n    y = 0.4 * math.sin(i * 2 * math.pi / 3)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0.5))\n    apple = bpy.context.object\n    apple.name = f\"Apple {i + 1}\"\n    apple.data.materials.append(apple_color)\n\n# Bananas\nfor i in range(2):\n    x = 0.5 * math.cos(i * math.pi)\n    y = 0.5 * math.sin(i * math.pi)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.6, location=(x, y, 0.5), rotation=(0, math.pi/4, 0))\n    banana = bpy.context.object\n    banana.name = f\"Banana {i + 1}\"\n    banana.data.materials.append(banana_color)\n\n# Oranges\nfor i in range(2):\n    x = 0.3 * math.cos(i * math.pi)\n    y = 0.3 * math.sin(i * math.pi)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(x, y, 0.5))\n    orange = bpy.context.object\n    orange.name = f\"Orange {i + 1}\"\n    orange.data.materials.append(orange_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.211845051630486, "unit_n": 9, "param_ratio": 5.444444444444445}
{"id": "11feb409-20f4-498a-855e-9dc12402b983", "name": "Dog Bowl", "instruction": "Create a 3D model of a dog bowl. The bowl should be round with a wide base to prevent tipping. Include a small indent on one side for easy lifting.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbowl_outer = bpy.context.object\nbowl_outer.name = \"Bowl Outer\"\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.4, location=(0, 0, 0.45))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Boolean difference to create the bowl shape\nbpy.context.view_layer.objects.active = bowl_outer\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = bowl_inner\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner cylinder\nbpy.data.objects.remove(bowl_inner)\n\n# Step 3: Create the Indent for Easy Lifting\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(1.5, 0, 0.25))\nindent = bpy.context.object\nindent.name = \"Indent\"\n\n# Boolean difference to create the indent\nbpy.context.view_layer.objects.active = bowl_outer\nbpy.ops.object.modifier_add(type='BOOLEAN')\nbpy.context.object.modifiers[\"Boolean\"].operation = 'DIFFERENCE'\nbpy.context.object.modifiers[\"Boolean\"].object = indent\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the indent cube\nbpy.data.objects.remove(indent)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.414042434444, "unit_n": 5, "param_ratio": 3.2}
{"id": "5e7ce687-ea8d-487b-b323-34e36cba21d7", "name": "Soap Dispenser", "instruction": "Create a soap dispenser. It should be a cylindrical container with a pump on top.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer_material = bpy.data.materials.new(name=\"ContainerMaterial\")\ncontainer_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncontainer.data.materials.append(container_material)\n\n# Step 3: Create the Pump Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, 0, 2.05))\npump_base = bpy.context.object\npump_base.name = \"PumpBase\"\npump_base_material = bpy.data.materials.new(name=\"PumpBaseMaterial\")\npump_base_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\npump_base.data.materials.append(pump_base_material)\n\n# Step 4: Create the Pump Nozzle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(0, 0, 2.4))\npump_nozzle = bpy.context.object\npump_nozzle.name = \"PumpNozzle\"\npump_nozzle.data.materials.append(pump_base_material)\n\n# Create the spout of the pump nozzle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.25, 0, 2.55), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(pump_base_material)\n", "color_brightness": "Bright", "verify": "human", "entropy": 3.80089699036127, "unit_n": 4, "param_ratio": 8.25}
{"id": "a571fef9-4a14-4f43-a5fa-036572e102b1", "name": "Drawing Easel", "instruction": "Design a 3D model of a drawing easel. It should have a triangular base with adjustable legs and a flat board to hold the canvas. Include a small shelf below the board for holding drawing tools.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Triangular Base with Adjustable Legs\nfor i in range(3):\n    angle = math.radians(120 * i)\n    x = math.sin(angle) * 0.8\n    y = math.cos(angle) * 0.8\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=2, location=(x, y, 1), rotation=(math.radians(90), 0, angle))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n\n# Step 3: Create the Flat Board for the Canvas\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(0, 0, 2))\nboard = bpy.context.object\nboard.name = \"Board\"\nboard.rotation_euler = (math.radians(90), 0, 0)\n\n# Step 4: Create the Shelf for Holding Drawing Tools\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, -0.4, 0.5))\nshelf = bpy.context.object\nshelf.name = \"Shelf\"\nshelf.scale = (1, 0.1, 0.05)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.2730957032101835, "unit_n": 5, "param_ratio": 3.2}
{"id": "e508251b-4934-41ff-9bdf-864887c3265b", "name": "Chess Set", "instruction": "Create a 3D model of a chess set. The set should include a chessboard with alternating black and white squares. Each side should have 16 pieces: 8 pawns, 2 rooks, 2 knights, 2 bishops, 1 queen, and 1 king. The pieces should be positioned in their starting positions on the board.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Create a simple pawn model\ndef create_pawn(location, is_white):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.2))\n    pawn_head = bpy.context.object\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], location[2] - 0.2))\n    pawn_body = bpy.context.object\n    if is_white:\n        pawn_head.data.materials.append(white)\n        pawn_body.data.materials.append(white)\n    else:\n        pawn_head.data.materials.append(black)\n        pawn_body.data.materials.append(black)\n\n# Step 4: Place pawns\nfor i in range(board_size):\n    create_pawn((i, 1, 0), True)  # White pawns\n    create_pawn((i, 6, 0), False)  # Black pawns\n\n# Step 5: Create a simple rook model\ndef create_rook(location, is_white):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(location[0], location[1], location[2] + 0.2))\n    rook = bpy.context.object\n    if is_white:\n        rook.data.materials.append(white)\n    else:\n        rook.data.materials.append(black)\n\n# Place rooks\ncreate_rook((0, 0, 0), True)\ncreate_rook((7, 0, 0), True)\ncreate_rook((0, 7, 0), False)\ncreate_rook((7, 7, 0), False)\n\n# Step 6: Create a simple knight model\ndef create_knight(location, is_white):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.6, location=(location[0], location[1], location[2] + 0.3))\n    knight = bpy.context.object\n    if is_white:\n        knight.data.materials.append(white)\n    else:\n        knight.data.materials.append(black)\n\n# Place knights\ncreate_knight((1, 0, 0), True)\ncreate_knight((6, 0, 0), True)\ncreate_knight((1, 7, 0), False)\ncreate_knight((6, 7, 0), False)\n\n# Step 7: Create a simple bishop model\ndef create_bishop(location, is_white):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], location[2] + 0.4))\n    bishop = bpy.context.object\n    if is_white:\n        bishop.data.materials.append(white)\n    else:\n        bishop.data.materials.append(black)\n\n# Place bishops\ncreate_bishop((2, 0, 0), True)\ncreate_bishop((5, 0, 0), True)\ncreate_bishop((2, 7, 0), False)\ncreate_bishop((5, 7, 0), False)\n\n# Step 8: Create a simple queen model\ndef create_queen(location, is_white):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(location[0], location[1], location[2] + 0.3))\n    queen = bpy.context.object\n    if is_white:\n        queen.data.materials.append(white)\n    else:\n        queen.data.materials.append(black)\n\n# Place queens\ncreate_queen((3, 0, 0), True)\ncreate_queen((3, 7, 0), False)\n\n# Step 9: Create a simple king model\ndef create_king(location, is_white):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.8, location=(location[0], location[1], location[2] + 0.4))\n    king = bpy.context.object\n    if is_white:\n        king.data.materials.append(white)\n    else:\n        king.data.materials.append(black)\n\n# Place kings\ncreate_king((4, 0, 0), True)\ncreate_king((4, 7, 0), False)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.157726211168644, "unit_n": 8, "param_ratio": 5.625}
{"id": "8d534e73-fbc5-4ff3-997d-2ec955a11e52", "name": "Coffee Table", "instruction": "Compare a traditional rectangular coffee table with a modern circular one. Focus on the differences in shape, leg design, and surface area.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Traditional Rectangular Coffee Table\n\n# Create the tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, 0, 0.5))\nrect_tabletop = bpy.context.object\nrect_tabletop.scale[0] = 1.5\nrect_tabletop.scale[1] = 0.75\nrect_tabletop.scale[2] = 0.1\nrect_tabletop.name = \"Rectangular Tabletop\"\nrect_tabletop.data.materials.append(wood_color)\n\n# Create the legs\nfor i in range(4):\n    x = (-2) + 1.5 * (i % 2) - 0.75\n    y = 0.75 * (i // 2) - 0.375\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 0))\n    leg = bpy.context.object\n    leg.name = f\"Rectangular Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the Modern Circular Coffee Table\n\n# Create the tabletop\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(2, 0, 0.5))\ncirc_tabletop = bpy.context.object\ncirc_tabletop.name = \"Circular Tabletop\"\ncirc_tabletop.data.materials.append(wood_color)\n\n# Create the legs\nfor i in range(4):\n    angle = i * (3.14159 / 2)\n    x = 2 + 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, y, 0))\n    leg = bpy.context.object\n    leg.name = f\"Circular Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6966077734190517, "unit_n": 10, "param_ratio": 2.4}
{"id": "ec55479d-d2e0-473a-a265-bb369920d183", "name": "Pizza", "instruction": "Design a pizza with a diameter of 12 inches. The crust should be slightly raised around the edges. The base is covered with a layer of tomato sauce, followed by a generous amount of shredded mozzarella cheese. Add pepperoni slices evenly distributed across the surface. Sprinkle some chopped green bell peppers and black olives for additional flavor. Finally, add a few fresh basil leaves on top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntomato_sauce = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato red color\nmozzarella_cheese = bpy.data.materials.new(name=\"Mozzarella Cheese\")\nmozzarella_cheese.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\npepperoni = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni.diffuse_color = (0.8, 0.2, 0.2, 1)  # Pepperoni red color\ngreen_bell_pepper = bpy.data.materials.new(name=\"Green Bell Pepper\")\ngreen_bell_pepper.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color\nblack_olive = bpy.data.materials.new(name=\"Black Olive\")\nblack_olive.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nbasil = bpy.data.materials.new(name=\"Basil\")\nbasil.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(tomato_sauce)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=6.2, depth=0.3, location=(0, 0, 0.1))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(mozzarella_cheese)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.8, depth=0.1, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(mozzarella_cheese)\n\n# Step 5: Add Pepperoni Slices\npepperoni_positions = [(2, 2), (-2, 2), (2, -2), (-2, -2), (0, 3), (3, 0), (-3, 0), (0, -3)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(pos[0], pos[1], 0.2))\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = \"Pepperoni Slice\"\n    pepperoni_slice.data.materials.append(pepperoni)\n\n# Step 6: Add Green Bell Peppers\ngreen_pepper_positions = [(1, 1), (-1, 1), (1, -1), (-1, -1), (2, 0), (-2, 0), (0, 2), (0, -2)]\nfor pos in green_pepper_positions:\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(pos[0], pos[1], 0.25))\n    green_pepper_piece = bpy.context.object\n    green_pepper_piece.name = \"Green Bell Pepper\"\n    green_pepper_piece.data.materials.append(green_bell_pepper)\n\n# Step 7: Add Black Olives\nolive_positions = [(3, 3), (-3, 3), (3, -3), (-3, -3), (1, 3), (3, 1), (-3, 1), (1, -3)]\nfor pos in olive_positions:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(pos[0], pos[1], 0.3))\n    olive = bpy.context.object\n    olive.name = \"Black Olive\"\n    olive.data.materials.append(black_olive)\n\n# Step 8: Add Basil Leaves\nbasil_positions = [(2, 2.5), (-2, 2.5), (2, -2.5), (-2, -2.5)]\nfor pos in basil_positions:\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=(pos[0], pos[1], 0.35))\n    basil_leaf = bpy.context.object\n    basil_leaf.name = \"Basil Leaf\"\n    basil_leaf.data.materials.append(basil)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.rotate(value=1.57, orient_axis='X')\n    bpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.459068297455017, "unit_n": 7, "param_ratio": 8.857142857142858}
{"id": "39d83ff5-8823-46cb-bf57-3efdbd79a37c", "name": "Cat Bed", "instruction": "Create a round cat bed with a diameter of 18 inches. The bed should have raised edges to provide a cozy space for the cat to rest.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2286, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2286, minor_radius=0.05, location=(0, 0, 0.05))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.574265832324029, "unit_n": 2, "param_ratio": 7.5}
{"id": "c55e994c-ce44-494b-8074-46e7821b17bd", "name": "Dog Bowl", "instruction": "Compare a dog bowl to a cat bowl. Create a 3D model of a dog bowl with a circular shape and a slightly raised edge.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Dog Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbowl_base = bpy.context.object\nbowl_base.name = \"Dog Bowl Base\"\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0.15))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\n\n# Step 4: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.15, location=(0, 0, 0.075))\ninner_part = bpy.context.object\ninner_part.name = \"Inner Part\"\n\n# Boolean difference to create the hollow part of the bowl\nmod_bool = bowl_base.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_part\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner part object as it is no longer needed\nbpy.data.objects.remove(inner_part, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.733813110145869, "unit_n": 3, "param_ratio": 5.0}
{"id": "0d2be559-5542-4fd2-89ec-0d0785ca61e5", "name": "Hat", "instruction": "Design a 3D model of a hat. Focus on the shape and form of the brim and crown.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 5.0}
{"id": "a1ff6051-e680-42c4-837e-b6ea5c27fe8f", "name": "Drum", "instruction": "Let's make a drum. It should be a cylindrical shape with a taut surface on top for striking.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\ndrum_surface_color = bpy.data.materials.new(name=\"Drum Surface Color\")\ndrum_surface_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drum Surface\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1))\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrum_surface = bpy.context.object\ndrum_surface.name = \"Drum Surface\"\ndrum_surface.data.materials.append(drum_surface_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "11c2a6f9-a394-4e8e-9514-e7a4f8539c24", "name": "Dog Bowl", "instruction": "Create a dog bowl that is circular and shallow, with a slightly raised edge to prevent spillage. The bowl should be of a size suitable for medium-sized dogs.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.2, location=(0, 0, 0))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\nbowl_base.data.materials.append(bowl_color)\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.15, location=(0, 0, 0.025))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\ninner_bowl.data.materials.append(bowl_color)\n\n# Step 4: Boolean Difference to Create the Hollow Part\nmod_bool = bowl_base.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner part used for boolean operation\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 7.5}
{"id": "e25b1437-efa9-436e-b4aa-b61a46444191", "name": "Electrical Fuse", "instruction": "Model a cylindrical electrical fuse with metal caps on both ends.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color for metal\nfuse_body_color = bpy.data.materials.new(name=\"Fuse Body\")\nfuse_body_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color for fuse body\n\n# Step 2: Create the Fuse Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.2, location=(0, 0, 0))\nfuse_body = bpy.context.object\nfuse_body.name = \"Fuse Body\"\nfuse_body.data.materials.append(fuse_body_color)\n\n# Step 3: Create the Metal Caps\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(0, 0, 0.6))\ncap1 = bpy.context.object\ncap1.name = \"Metal Cap 1\"\ncap1.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(0, 0, -0.6))\ncap2 = bpy.context.object\ncap2.name = \"Metal Cap 2\"\ncap2.data.materials.append(metal_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.383417643403943, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "f9c6676c-491b-46f5-8473-17e18be9609d", "name": "Hammer vs. Mallet", "instruction": "Can you create a 3D model comparing a hammer and a mallet? Place them side by side, highlighting the differences in their heads and handles.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.6, 0.6, 0.6, 1)  # Light gray color for metal\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for wood\n\n# Step 2: Create the Hammer Head\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(-1, 0, 0.15))\nhammer_head = bpy.context.object\nhammer_head.name = \"Hammer Head\"\nhammer_head.data.materials.append(metal)\n\n# Step 3: Create the Hammer Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(-1, 0, -0.35))\nhammer_handle = bpy.context.object\nhammer_handle.name = \"Hammer Handle\"\nhammer_handle.data.materials.append(wood)\n\n# Step 4: Create the Mallet Head\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(1, 0, 0.2), rotation=(math.pi/2, 0, 0))\nmallet_head = bpy.context.object\nmallet_head.name = \"Mallet Head\"\nmallet_head.data.materials.append(wood)\n\n# Step 5: Create the Mallet Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1, 0, -0.35))\nmallet_handle = bpy.context.object\nmallet_handle.name = \"Mallet Handle\"\nmallet_handle.data.materials.append(wood)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.617640474977281, "unit_n": 4, "param_ratio": 8.0}
{"id": "790d3f78-6a71-4cb6-8c31-15c04224ce77", "name": "Hamburger", "instruction": "Can you make a 3D model of a hamburger? Compare one with sesame seeds on the bun and one without. Make sure to include the patty, lettuce, tomato, and cheese.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Clear the scene\nbpy.ops.wm.read_factory_settings(use_empty=True)\n\n# Define colors\nbun_color = (0.9, 0.7, 0.3, 1)\npatty_color = (0.3, 0.2, 0.1, 1)\nlettuce_color = (0.1, 0.8, 0.2, 1)\ntomato_color = (0.8, 0.1, 0.1, 1)\ncheese_color = (1, 0.8, 0.2, 1)\nsesame_color = (1, 1, 0.8, 1)\n\ndef create_material(name, color):\n    mat = bpy.data.materials.new(name=name)\n    mat.diffuse_color = color\n    return mat\n\n# Create materials\nbun_material = create_material(\"Bun\", bun_color)\npatty_material = create_material(\"Patty\", patty_color)\nlettuce_material = create_material(\"Lettuce\", lettuce_color)\ntomato_material = create_material(\"Tomato\", tomato_color)\ncheese_material = create_material(\"Cheese\", cheese_color)\nsesame_material = create_material(\"Sesame\", sesame_color)\n\n# Create the bun top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 2))\nbun_top = bpy.context.object\nbun_top.scale[2] = 0.5\nbun_top.name = \"Bun Top\"\nbun_top.data.materials.append(bun_material)\n\n# Create the bun bottom\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbun_bottom = bpy.context.object\nbun_bottom.scale[2] = 0.5\nbun_bottom.name = \"Bun Bottom\"\nbun_bottom.data.materials.append(bun_material)\n\n# Create the patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.3, location=(0, 0, 1))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_material)\n\n# Create the lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.3))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_material)\n\n# Create the tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.4))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_material)\n\n# Create the cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.5))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_material)\n\n# Function to add sesame seeds\ndef add_sesame_seeds():\n    import random\n    for _ in range(30):\n        x = random.uniform(-0.8, 0.8)\n        y = random.uniform(-0.8, 0.8)\n        z = 2.2\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n        seed = bpy.context.object\n        seed.name = \"Sesame Seed\"\n        seed.data.materials.append(sesame_material)\n\n# Create burger with sesame seeds\nadd_sesame_seeds()\n\n# Duplicate the burger without sesame seeds\nbpy.ops.object.select_all(action='DESELECT')\nbpy.data.objects['Bun Top'].select_set(True)\nbpy.data.objects['Bun Bottom'].select_set(True)\nbpy.data.objects['Patty'].select_set(True)\nbpy.data.objects['Lettuce'].select_set(True)\nbpy.data.objects['Tomato'].select_set(True)\nbpy.data.objects['Cheese'].select_set(True)\nbpy.ops.object.duplicate_move(TRANSFORM_OT_translate={\"value\":(3, 0, 0)})\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.428740788296699, "unit_n": 36, "param_ratio": 0.8888888888888888}
{"id": "f1d8d668-75ae-4e12-9c05-edf4db78b17c", "name": "Pizza", "instruction": "Can you model a pizza with pepperoni slices on top?", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color for dough\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for sauce\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(dough_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Pepperoni Slices\nimport math\n\nnum_slices = 8\nradius = 0.8\nfor i in range(num_slices):\n    angle = i * (2 * math.pi / num_slices)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.08))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.587090761767443, "unit_n": 3, "param_ratio": 10.0}
{"id": "359781e7-6155-4ef6-a2b2-845fa869584f", "name": "Soap Dispenser", "instruction": "Design a soap dispenser. It should have a cylindrical body with a pump on top. Include a spout for dispensing soap.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npump_color = bpy.data.materials.new(name=\"PumpColor\")\npump_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Pump\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.3, location=(0, 0, 1.65))\npump = bpy.context.object\npump.name = \"Pump\"\npump.data.materials.append(pump_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(0.35, 0, 1.65), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(pump_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.0640101049277355, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "b4510f19-a772-4bfc-8925-742d1a267b94", "name": "Hot Air Balloon", "instruction": "How would you decorate a hot air balloon to make it stand out in the sky? Include a basket and a colorful envelope with a unique pattern.", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbasket_color = bpy.data.materials.new(name=\"Basket Color\")\nbasket_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the basket\n\n# Define colors for the envelope\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0, 1, 1),  # Magenta\n    (0, 1, 1, 1)   # Cyan\n]\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.5, location=(0, 0, -0.25))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Envelope\nbpy.ops.mesh.primitive_uv_sphere_add(radius=2, location=(0, 0, 2.5))\nenvelope = bpy.context.object\nenvelope.name = \"Envelope\"\n\n# Create a unique pattern by assigning different colors to different faces\nmesh = envelope.data\ncolor_layer = mesh.vertex_colors.new(name=\"Col\")\n\n# Assign colors to the faces\nfor poly in mesh.polygons:\n    for loop_index in poly.loop_indices:\n        loop = mesh.loops[loop_index]\n        vertex_index = loop.vertex_index\n        color_layer.data[loop_index].color = colors[vertex_index % len(colors)]\n\n# Create a new material and assign the vertex colors\nenvelope_material = bpy.data.materials.new(name=\"Envelope Material\")\nenvelope_material.use_nodes = True\nbsdf = envelope_material.node_tree.nodes[\"Principled BSDF\"]\nvertex_color_node = envelope_material.node_tree.nodes.new(type=\"ShaderNodeVertexColor\")\nvertex_color_node.layer_name = \"Col\"\nenvelope_material.node_tree.links.new(bsdf.inputs['Base Color'], vertex_color_node.outputs['Color'])\n\nenvelope.data.materials.append(envelope_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.473216952020678, "unit_n": 2, "param_ratio": 7.5}
{"id": "25b07bbf-b7fa-4280-89ce-40c6993a8609", "name": "Floor Lamp", "instruction": "Design a floor lamp with a tall, slender pole and a circular base. Add a cone-shaped lampshade at the top. Include a power switch on the pole.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nshade_color = bpy.data.materials.new(name=\"Shade\")\nshade_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellowish color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0.025))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_color)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.05))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(metal_color)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, radius2=0, depth=0.5, location=(0, 0, 2.55))\nlampshade = bpy.context.object\nlampshade.name = \"Lampshade\"\nlampshade.data.materials.append(shade_color)\n\n# Step 5: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.1, 0, 0.5))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.947194317607476, "unit_n": 4, "param_ratio": 7.5}
{"id": "b94bbb5b-3873-46c2-a902-e84322d4bc32", "name": "Dog Bed", "instruction": "Start with a rectangular base. Add raised edges on all four sides. The bed should be large enough to accommodate a medium-sized dog. Include a cushion that fits snugly inside the base. The cushion should be removable.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for the base\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cushion\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale = (1, 1.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.5, 0.5))\nfront_edge = bpy.context.object\nfront_edge.scale = (1, 0.1, 0.25)\nfront_edge.name = \"Front Edge\"\nfront_edge.data.materials.append(base_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.5, 0.5))\nback_edge = bpy.context.object\nback_edge.scale = (1, 0.1, 0.25)\nback_edge.name = \"Back Edge\"\nback_edge.data.materials.append(base_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1, 0, 0.5))\nleft_edge = bpy.context.object\nleft_edge.scale = (0.1, 1.5, 0.25)\nleft_edge.name = \"Left Edge\"\nleft_edge.data.materials.append(base_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1, 0, 0.5))\nright_edge = bpy.context.object\nright_edge.scale = (0.1, 1.5, 0.25)\nright_edge.name = \"Right Edge\"\nright_edge.data.materials.append(base_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ncushion = bpy.context.object\ncushion.scale = (0.9, 1.4, 0.05)\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7385037603537192, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "78c099dc-bef4-4be7-8283-ae3812e6902c", "name": "Apple", "instruction": "How would you feel about creating a 3D model of an apple? ", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the apple\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_body.data.materials.append(apple_red)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.rotation_euler[0] = 0.5  # Slightly tilt the stem\n\n# Define the color for the stem\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "5f3f179f-94db-44f4-8fd0-ff06c8e62e4e", "name": "Drum", "instruction": "Could you design a 3D model of a drum? It should have a cylindrical body and a drumhead on top.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.974130658833826, "unit_n": 2, "param_ratio": 5.0}
{"id": "d71202b4-29fd-4b9d-8dd3-350db147b6ac", "name": "Pizza", "instruction": "Design a 3D model of a pizza. It should be a circular shape with a slightly raised crust. The surface should be topped with a layer of tomato sauce, cheese, and pepperoni slices evenly distributed. The cheese should appear melted.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.7, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\npepperoni_radius = 0.1\nfor i in range(num_pepperoni):\n    angle = 2 * math.pi * i / num_pepperoni\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.02, location=(x, y, 0.09))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.428414735711406, "unit_n": 4, "param_ratio": 9.75}
{"id": "3df32a40-a4fc-4a0b-930d-e5bbaa61bd22", "name": "Bookshelf", "instruction": "Let's design a 3D model of a bookshelf. The bookshelf should have five shelves, evenly spaced. Each shelf should be able to hold books of various sizes. Include a back panel to support the structure. Optionally, add a few books on the shelves to show how it can be used.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Shelves\nshelf_height = 0.2\nshelf_depth = 0.3\nshelf_width = 1.0\nnum_shelves = 5\n\nfor i in range(num_shelves):\n    z = i * shelf_height * 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_height)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\nside_panel_thickness = 0.05\nside_panel_height = shelf_height * 2 * (num_shelves - 1) + shelf_height\n\nfor i in range(2):\n    x = (shelf_width + side_panel_thickness) * (i * 2 - 1) / 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, side_panel_height / 2 - shelf_height / 2))\n    side_panel = bpy.context.object\n    side_panel.scale = (side_panel_thickness, shelf_depth, side_panel_height)\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nback_panel_thickness = 0.05\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -shelf_depth / 2, side_panel_height / 2 - shelf_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width, back_panel_thickness, side_panel_height)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)\n\n# Step 5: Optionally, add a few books on the shelves\nbook_color = bpy.data.materials.new(name=\"Book\")\nbook_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red book color\n\nfor i in range(3):\n    x = -0.4 + i * 0.4\n    z = shelf_height * 2\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, z))\n    book = bpy.context.object\n    book.scale = (0.1, 0.25, 0.3)\n    book.name = f\"Book {i + 1}\"\n    book.data.materials.append(book_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8987313240557198, "unit_n": 7, "param_ratio": 3.7142857142857144}
{"id": "ee89cfb6-36b6-49c8-815e-ccd71cf46749", "name": "Floral Pattern", "instruction": "Create a 3D model of a floral pattern. The design should include various flowers and leaves arranged in a repeating pattern.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nflower_color = bpy.data.materials.new(name=\"Flower Color\")\nflower_color.diffuse_color = (1, 0, 0, 1)  # Red color for flowers\nleaf_color = bpy.data.materials.new(name=\"Leaf Color\")\nleaf_color.diffuse_color = (0, 1, 0, 1)  # Green color for leaves\n\n# Function to create a flower\ndef create_flower(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=location)\n    flower_center = bpy.context.object\n    flower_center.data.materials.append(flower_color)\n    \n    for i in range(5):\n        angle = i * (2 * 3.14159 / 5)\n        x = location[0] + 0.2 * math.cos(angle)\n        y = location[1] + 0.2 * math.sin(angle)\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, location[2]))\n        petal = bpy.context.object\n        petal.data.materials.append(flower_color)\n\n# Function to create a leaf\ndef create_leaf(location, rotation):\n    bpy.ops.mesh.primitive_plane_add(size=0.3, location=location, rotation=rotation)\n    leaf = bpy.context.object\n    leaf.scale[1] = 0.5\n    leaf.data.materials.append(leaf_color)\n\n# Create a repeating pattern of flowers and leaves\nfor i in range(3):\n    for j in range(3):\n        x = i * 1.0\n        y = j * 1.0\n        create_flower((x, y, 0))\n        create_leaf((x + 0.5, y, 0), (0, 0, 0.785398))  # 45 degrees in radians\n        create_leaf((x - 0.5, y, 0), (0, 0, -0.785398))  # -45 degrees in radians\n        create_leaf((x, y + 0.5, 0), (0, 0, 0))\n        create_leaf((x, y - 0.5, 0), (0, 0, 3.14159))  # 180 degrees in radians", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.565721343309793, "unit_n": 7, "param_ratio": 2.2857142857142856}
{"id": "8e282e77-08c6-42c9-8f33-6d76ca16bd6f", "name": "Trash Can", "instruction": "Create a trash can. It should be cylindrical with a foot pedal to open the lid.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\n\n# Step 2: Create the Trash Can Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Trash Can Body\"\nbody.data.materials.append(metal)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.52, depth=0.1, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal)\n\n# Step 4: Create the Foot Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6, 0, 0.1))\npedal = bpy.context.object\npedal.name = \"Foot Pedal\"\npedal.scale = (1, 0.5, 0.1)\npedal.data.materials.append(metal)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9525341047381577, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "3ff3c2d3-9c88-4f46-8756-d978988aab38", "name": "Living Room Arrangement", "instruction": "Design a living room layout. Place a three-seater sofa along one wall, with a coffee table in front of it. Add a TV stand with a flat-screen TV opposite the sofa. Include a floor lamp in one corner, and a bookshelf on the adjacent wall. Place a rug under the coffee table, and add a few decorative cushions on the sofa. Ensure the arrangement is spacious and functional.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='SELECT')\n    bpy.ops.object.delete(use_global=False)\n\nclear_scene()\n\n# Define materials\nsofa_material = bpy.data.materials.new(name=\"SofaMaterial\")\nsofa_material.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brown color\n\ntable_material = bpy.data.materials.new(name=\"TableMaterial\")\ntable_material.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color\n\ntv_material = bpy.data.materials.new(name=\"TVMaterial\")\ntv_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\nlamp_material = bpy.data.materials.new(name=\"LampMaterial\")\nlamp_material.diffuse_color = (0.9, 0.9, 0.7, 1)  # Light yellow color\n\nbookshelf_material = bpy.data.materials.new(name=\"BookshelfMaterial\")\nbookshelf_material.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\nrug_material = bpy.data.materials.new(name=\"RugMaterial\")\nrug_material.diffuse_color = (0.8, 0.7, 0.6, 1)  # Beige color\n\ncushion_material = bpy.data.materials.new(name=\"CushionMaterial\")\ncushion_material.diffuse_color = (0.7, 0.2, 0.2, 1)  # Red color\n\n# Create Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -3, 0.5))\nsofa = bpy.context.object\nsofa.scale = (2, 0.5, 0.5)\nsofa.name = \"Sofa\"\nsofa.data.materials.append(sofa_material)\n\n# Create Coffee Table\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -1.5, 0.25))\ntable = bpy.context.object\ntable.scale = (1, 0.5, 0.25)\ntable.name = \"CoffeeTable\"\ntable.data.materials.append(table_material)\n\n# Create TV Stand\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 3, 0.25))\ntv_stand = bpy.context.object\ntv_stand.scale = (1.5, 0.5, 0.25)\ntv_stand.name = \"TVStand\"\ntv_stand.data.materials.append(table_material)\n\n# Create TV\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 3, 1))\ntv = bpy.context.object\ntv.scale = (1.2, 0.1, 0.75)\ntv.name = \"TV\"\ntv.data.materials.append(tv_material)\n\n# Create Floor Lamp\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(-3, 3, 1.5))\nlamp_stand = bpy.context.object\nlamp_stand.name = \"LampStand\"\nlamp_stand.data.materials.append(lamp_material)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(-3, 3, 3))\nlamp_shade = bpy.context.object\nlamp_shade.name = \"LampShade\"\nlamp_shade.data.materials.append(lamp_material)\n\n# Create Bookshelf\nbpy.ops.mesh.primitive_cube_add(size=1, location=(3, 0, 1.5))\nbookshelf = bpy.context.object\nbookshelf.scale = (0.5, 2, 1.5)\nbookshelf.name = \"Bookshelf\"\nbookshelf.data.materials.append(bookshelf_material)\n\n# Create Rug\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, -1.5, 0))\nrug = bpy.context.object\nrug.scale = (1.5, 1, 1)\nrug.name = \"Rug\"\nrug.data.materials.append(rug_material)\n\n# Create Cushions\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(-0.5 + i * 0.5, -3, 1))\n    cushion = bpy.context.object\n    cushion.scale = (0.3, 0.3, 0.1)\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(cushion_material)", "color_brightness": "Dark", "verify": "human", "entropy": 1.5028564235454276, "unit_n": 11, "param_ratio": 6.545454545454546}
{"id": "b8d21ca1-f4a2-4895-8a91-511602aea4cf", "name": "Wall Art", "instruction": "Design a piece of wall art featuring a geometric pattern. Use a combination of shapes and lines to create an intricate design.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Base Plane\nbpy.ops.mesh.primitive_plane_add(size=5, location=(0, 0, 0))\nbase_plane = bpy.context.object\nbase_plane.name = \"Base Plane\"\n\n# Step 3: Create Geometric Pattern\n# Circle\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0.01))\ncircle = bpy.context.object\ncircle.name = \"Circle\"\ncircle.data.materials.append(blue)\n\n# Square\nbpy.ops.mesh.primitive_plane_add(size=1.5, location=(1.5, 1.5, 0.01))\nsquare = bpy.context.object\nsquare.name = \"Square\"\nsquare.data.materials.append(red)\n\n# Triangle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.01, location=(-1.5, -1.5, 0.01))\ntriangle = bpy.context.object\ntriangle.name = \"Triangle\"\ntriangle.data.materials.append(green)\n\n# Step 4: Create Lines\n# Horizontal Line\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=5, location=(0, 0, 0.02), rotation=(1.5708, 0, 0))\nhorizontal_line = bpy.context.object\nhorizontal_line.name = \"Horizontal Line\"\nhorizontal_line.data.materials.append(blue)\n\n# Vertical Line\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=5, location=(0, 0, 0.02), rotation=(0, 1.5708, 0))\nvertical_line = bpy.context.object\nvertical_line.name = \"Vertical Line\"\nvertical_line.data.materials.append(red)\n\n# Diagonal Line\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=7.07, location=(0, 0, 0.02), rotation=(0.7854, 0, 0.7854))\ndiagonal_line = bpy.context.object\ndiagonal_line.name = \"Diagonal Line\"\ndiagonal_line.data.materials.append(green)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2433892935152118, "unit_n": 7, "param_ratio": 8.142857142857142}
{"id": "f6e430cb-8eac-4c90-82ef-10d41e283fe3", "name": "Cake", "instruction": "Create a 3D model of a cake decorated with frosting and some sprinkles on top.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color for cake\nfrosting_color = bpy.data.materials.new(name=\"Frosting Color\")\nfrosting_color.diffuse_color = (1, 0.85, 0.85, 1)  # Light pink color for frosting\nsprinkle_color = bpy.data.materials.new(name=\"Sprinkle Color\")\nsprinkle_color.diffuse_color = (1, 0, 0, 1)  # Red color for sprinkles\n\n# Step 2: Create the Cake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\ncake_base = bpy.context.object\ncake_base.name = \"Cake Base\"\ncake_base.data.materials.append(cake_color)\n\n# Step 3: Create the Frosting\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0.55))\nfrosting = bpy.context.object\nfrosting.name = \"Frosting\"\nfrosting.data.materials.append(frosting_color)\n\n# Step 4: Create the Sprinkles\nfor i in range(20):\n    x = random.uniform(-0.9, 0.9)\n    y = random.uniform(-0.9, 0.9)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.65))\n    sprinkle = bpy.context.object\n    sprinkle.name = f\"Sprinkle {i + 1}\"\n    sprinkle.data.materials.append(sprinkle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.055230879452746, "unit_n": 22, "param_ratio": 1.3181818181818181}
{"id": "32ad121e-69d9-47f4-92d7-26b4bdd4f201", "name": "Syringe", "instruction": "Create a 3D model of a syringe. The syringe should have a cylindrical barrel with a plunger inside and a needle at one end. The plunger should have a flange at the top for thumb placement.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbarrel_color = bpy.data.materials.new(name=\"Barrel Color\")\nbarrel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Very light gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(barrel_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=1.8, location=(0, 0, 0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Flange\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, 1.05))\nflange = bpy.context.object\nflange.name = \"Flange\"\nflange.data.materials.append(plunger_color)\n\n# Step 5: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.574769445056559, "unit_n": 4, "param_ratio": 8.75}
{"id": "304de94f-dbb7-4a11-9bd9-3be234255da8", "name": "Backpack", "instruction": "Let's create a 3D model of a backpack. Start with a rectangular main compartment that has a zipper closure. Add two adjustable shoulder straps and a top handle for carrying. Include a front pocket with a zipper and two side pockets for water bottles. The backpack should have a simple, solid color design.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbackpack_color = bpy.data.materials.new(name=\"Backpack Color\")\nbackpack_color.diffuse_color = (0.2, 0.3, 0.8, 1)  # Solid blue color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.5, 0.3, 0.7)\nmain_compartment.data.materials.append(backpack_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.6))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.05, 0.3)\nfront_pocket.data.materials.append(backpack_color)\n\n# Step 4: Create the Side Pockets\nfor i in range(2):\n    x = 0.55 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.6))\n    side_pocket = bpy.context.object\n    side_pocket.name = f\"Side Pocket {i + 1}\"\n    side_pocket.scale = (0.05, 0.2, 0.3)\n    side_pocket.data.materials.append(backpack_color)\n\n# Step 5: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.4, 1.2))\n    shoulder_strap = bpy.context.object\n    shoulder_strap.name = f\"Shoulder Strap {i + 1}\"\n    shoulder_strap.scale = (0.05, 0.02, 0.6)\n    shoulder_strap.data.materials.append(backpack_color)\n\n# Step 6: Create the Top Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.4, 1.8))\ntop_handle = bpy.context.object\ntop_handle.name = \"Top Handle\"\ntop_handle.scale = (0.2, 0.02, 0.05)\ntop_handle.data.materials.append(backpack_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3322045101752034, "unit_n": 7, "param_ratio": 3.5714285714285716}
{"id": "2c5bd816-2200-4c0f-a75f-34238177d763", "name": "Donut", "instruction": "I need a 3D model of a donut. It should be circular with a hole in the middle. The donut should have a smooth surface.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Donut\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.3, location=(0, 0, 0))\ndonut = bpy.context.object\ndonut.name = \"Donut\"\n\n# Step 3: Smooth the Surface\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.486749349760814, "unit_n": 1, "param_ratio": 5.0}
{"id": "06fb108e-d5fa-469c-b2ac-6c026516e9c2", "name": "Pizza", "instruction": "Imagine a round pizza with a slightly raised crust. The pizza is topped with a layer of tomato sauce, melted cheese, and pepperoni slices evenly distributed across the surface.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.02, location=(0, 0, 0.07))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0, 0.7), (0.7, 0), (-0.7, 0), (0, -0.7)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.08))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.847573479358143, "unit_n": 4, "param_ratio": 10.0}
{"id": "d85e4543-990e-4b2a-a72b-e95ccdf7f2f3", "name": "Picture Frame", "instruction": "Craft a 3D model of a picture frame with a simple, rectangular design. The frame should be about 8x10 inches.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nouter_width = 0.2032  # 8 inches in meters\nouter_height = 0.254  # 10 inches in meters\nframe_thickness = 0.02  # 2 cm thickness\n\n# Define the color\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.scale = (outer_width / 2, outer_height / 2, frame_thickness / 2)\nouter_frame.name = \"Outer Frame\"\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Cutout\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ninner_cutout = bpy.context.object\ninner_cutout.scale = ((outer_width - frame_thickness) / 2, (outer_height - frame_thickness) / 2, frame_thickness / 2 + 0.01)\ninner_cutout.name = \"Inner Cutout\"\n\n# Step 4: Boolean Difference to Create the Frame\nmod_bool = outer_frame.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_cutout\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner cutout\nbpy.data.objects.remove(inner_cutout, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "8a040f69-7513-4a66-9529-c513dd673364", "name": "Chess Set", "instruction": "Let's embark on creating a 3D model of a chess set. This set should include all the standard pieces: pawns, knights, bishops, rooks, queens, and kings. Ensure each piece is distinguishable by its traditional shape, with the kings being the tallest pieces and the pawns the shortest. Place these pieces in their starting positions on a chessboard divided into 64 squares, alternating in color.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nboard_size = 8\nsquare_size = 1\nheight = 0.1\n\n# Create the squares\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col, row, 0))\n        square = bpy.context.object\n        square.scale.z = height\n        if (row + col) % 2 == 0:\n            square.data.materials.append(black_material)\n        else:\n            square.data.materials.append(white_material)\n        square.name = f\"Square_{row}_{col}\"\n\n# Step 3: Create a basic pawn piece\ndef create_pawn(location):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.2))\n    pawn = bpy.context.object\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.4))\n    base = bpy.context.object\n    bpy.ops.object.select_all(action='DESELECT')\n    pawn.select_set(True)\n    base.select_set(True)\n    bpy.context.view_layer.objects.active = pawn\n    bpy.ops.object.join()\n    return pawn\n\n# Create Pawns\nfor i in range(board_size):\n    white_pawn = create_pawn((i, 1, 0))\n    white_pawn.data.materials.append(white_material)\n    black_pawn = create_pawn((i, 6, 0))\n    black_pawn.data.materials.append(black_material)\n\n# Step 4: Create other pieces (simplified shapes for clarity)\ndef create_rook(location):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(location[0], location[1], 0.25))\n    rook = bpy.context.object\n    return rook\n\ndef create_knight(location):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.5, location=(location[0], location[1], 0.25))\n    knight = bpy.context.object\n    return knight\n\ndef create_bishop(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.6, location=(location[0], location[1], 0.3))\n    bishop = bpy.context.object\n    return bishop\n\ndef create_queen(location):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.1, location=(location[0], location[1], 0.3))\n    queen = bpy.context.object\n    return queen\n\ndef create_king(location):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.8, location=(location[0], location[1], 0.4))\n    king = bpy.context.object\n    return king\n\n# Position pieces for White\npieces = [(create_rook, 0, 0), (create_rook, 7, 0), (create_knight, 1, 0), (create_knight, 6, 0),\n          (create_bishop, 2, 0), (create_bishop, 5, 0), (create_queen, 3, 0), (create_king, 4, 0)]\nfor create_fn, x, y in pieces:\n    piece = create_fn((x, y, 0))\n    piece.data.materials.append(white_material)\n\n# Position pieces for Black\npieces = [(create_rook, 0, 7), (create_rook, 7, 7), (create_knight, 1, 7), (create_knight, 6, 7),\n          (create_bishop, 2, 7), (create_bishop, 5, 7), (create_queen, 3, 7), (create_king, 4, 7)]\nfor create_fn, x, y in pieces:\n    piece = create_fn((x, y, 0))\n    piece.data.materials.append(black_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.221997100600941, "unit_n": 8, "param_ratio": 5.75}
{"id": "d0401caa-3bf8-4944-8a6a-19829b06d57f", "name": "Pizza", "instruction": "Could you create a 3D model of a pizza? The pizza should be round with a thin crust, covered with tomato sauce, melted cheese, and pepperoni slices. Please add a few basil leaves on top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce\")\nsauce_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.98, 0.93, 0.36, 1)  # Melted cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.55, 0.10, 0.10, 1)  # Pepperoni color\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Basil color\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create Pepperoni Slices\npepperoni_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3), (0, 0.4), (0.4, 0)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create Basil Leaves\nbasil_positions = [(0.2, 0.2), (-0.2, 0.2), (0.2, -0.2)]\nfor pos in basil_positions:\n    bpy.ops.mesh.primitive_plane_add(size=0.15, location=(pos[0], pos[1], 0.12))\n    basil = bpy.context.object\n    basil.name = \"Basil\"\n    basil.data.materials.append(basil_color)\n\n    # Rotate the basil leaves to make them look more natural\n    bpy.context.object.rotation_euler[0] = math.radians(45)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.333712336856284, "unit_n": 5, "param_ratio": 9.8}
{"id": "c9137f5a-5ba8-4c7a-bfdc-b107e8b6b2f7", "name": "Chocolate Cake", "instruction": "Picture a chocolate cake that you'd love to eat at a birthday party. Can you create a round cake with three layers? Each layer should have a filling in between, and the top should have a simple decoration.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate_color = bpy.data.materials.new(name=\"Chocolate\")\nchocolate_color.diffuse_color = (0.24, 0.12, 0.06, 1)  # Dark chocolate color\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown color (filling)\n\n# Step 2: Create the Cake Layers\nlayer_height = 0.2\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=layer_height, location=(0, 0, i * (layer_height + 0.05)))\n    layer = bpy.context.object\n    layer.name = f\"Cake Layer {i + 1}\"\n    layer.data.materials.append(chocolate_color)\n\n# Step 3: Create the Fillings\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, (i + 1) * layer_height + i * 0.05))\n    filling = bpy.context.object\n    filling.name = f\"Filling {i + 1}\"\n    filling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Decoration\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 3 * layer_height + 0.05))\ndecoration = bpy.context.object\ndecoration.name = \"Top Decoration\"\ndecoration.data.materials.append(chocolate_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.154290589495257, "unit_n": 6, "param_ratio": 3.8333333333333335}
{"id": "64398bcc-a011-438f-bb72-3bf442c048cd", "name": "Pizza Slice", "instruction": "Can you create a 3D model of a slice of pizza with visible toppings like pepperoni, mushrooms, and green peppers?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for dough\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (0.98, 0.85, 0.37, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.80, 0.20, 0.20, 1)  # Red color for pepperoni\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.82, 0.80, 0.77, 1)  # Light gray color for mushrooms\ngreen_pepper_color = bpy.data.materials.new(name=\"Green Pepper\")\ngreen_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for green peppers\n\n# Step 2: Create the Pizza Slice (Dough)\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0, depth=0.1, location=(0, 0, 0))\ndough = bpy.context.object\ndough.name = \"Dough\"\ndough.data.materials.append(dough_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.95, radius2=0, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Pepperoni Toppings\npepperoni_positions = [(0.3, 0.3, 0.1), (-0.3, 0.3, 0.1), (0, 0.5, 0.1)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create the Mushroom Toppings\nmushroom_positions = [(0.2, -0.2, 0.1), (-0.2, -0.2, 0.1)]\nfor i, pos in enumerate(mushroom_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=pos)\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 6: Create the Green Pepper Toppings\ngreen_pepper_positions = [(0.4, 0, 0.1), (-0.4, 0, 0.1)]\nfor i, pos in enumerate(green_pepper_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=pos)\n    green_pepper = bpy.context.object\n    green_pepper.name = f\"Green Pepper {i + 1}\"\n    green_pepper.data.materials.append(green_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.977644589108258, "unit_n": 5, "param_ratio": 9.0}
{"id": "fd53ed46-4835-441a-b32e-ab639cb90bad", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. The pizza should be circular with a diameter of 12 inches. The crust should be slightly raised around the edges. The pizza should be topped with tomato sauce, cheese, and a variety of toppings such as pepperoni, mushrooms, and bell peppers. \n\nEnsure the toppings are evenly distributed across the pizza, and the cheese is melted and covers the entire surface.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.5, 1)  # Yellowish color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.9, 0.9, 0.8, 1)  # Light gray color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Base Pizza\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(0, 0, 0))\nbase_pizza = bpy.context.object\nbase_pizza.name = \"Base Pizza\"\nbase_pizza.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.01, location=(0, 0, 0.01))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.005, location=(0, 0, 0.015))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Toppings\n# Pepperoni\nfor i in range(10):\n    angle = i * (2 * math.pi / 10)\n    x = 0.1 * math.cos(angle)\n    y = 0.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.015, depth=0.005, location=(x, y, 0.02))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Mushrooms\nfor i in range(5):\n    angle = i * (2 * math.pi / 5) + math.pi / 10\n    x = 0.12 * math.cos(angle)\n    y = 0.12 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.005, location=(x, y, 0.02))\n    mushroom = bpy.context.object\n    mushroom.name = f\"Mushroom {i + 1}\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Bell Peppers\nfor i in range(5):\n    angle = i * (2 * math.pi / 5) - math.pi / 10\n    x = 0.08 * math.cos(angle)\n    y = 0.08 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.03, location=(x, y, 0.02))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.062211793686702, "unit_n": 23, "param_ratio": 2.5652173913043477}
{"id": "000b8181-92cd-4112-8a0b-f5c7caa06874", "name": "Spice Rack", "instruction": "Let's design a spice rack that can be easily mounted on a kitchen wall. It should hold at least ten spice jars, with labels visible from the front. The rack should allow for quick access and organization of different spices.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nback_panel = bpy.context.object\nback_panel.name = \"Back Panel\"\nback_panel.scale = (1, 0.1, 1)\nback_panel.data.materials.append(wood_color)\n\n# Step 3: Create the Shelves\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.3, 0.5 + i * 0.5))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale = (1, 0.1, 0.05)\n    shelf.data.materials.append(wood_color)\n\n# Step 4: Create the Spice Jars\nfor i in range(10):\n    x = (i % 5) * 0.4 - 0.8\n    y = 0.3\n    z = 0.5 + (i // 5) * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(x, y, z))\n    jar = bpy.context.object\n    jar.name = f\"Jar {i + 1}\"\n    jar_material = bpy.data.materials.new(name=f\"Jar Material {i + 1}\")\n    jar_material.diffuse_color = (1, 1, 1, 1)  # White color for jars\n    jar.data.materials.append(jar_material)", "color_brightness": "Bright", "verify": "human", "entropy": 5.035188850154944, "unit_n": 14, "param_ratio": 1.6428571428571428}
{"id": "d8969942-d39b-4cb8-a5a3-f24e385f9dd6", "name": "Pet Carrier", "instruction": "Create a pet carrier with a rectangular shape, a handle on top, and a front mesh door.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncarrier_color = bpy.data.materials.new(name=\"Carrier Color\")\ncarrier_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nmesh_color = bpy.data.materials.new(name=\"Mesh Color\")\nmesh_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Carrier Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ncarrier_body = bpy.context.object\ncarrier_body.name = \"Carrier Body\"\ncarrier_body.scale[0] = 1.5\ncarrier_body.scale[1] = 1\ncarrier_body.scale[2] = 1\ncarrier_body.data.materials.append(carrier_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0, 1.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale[0] = 0.2\nhandle.scale[1] = 1\nhandle.scale[2] = 0.2\nhandle.data.materials.append(carrier_color)\n\n# Step 4: Create the Mesh Door\nbpy.ops.mesh.primitive_plane_add(size=1, location=(1.5, 0, 0.5))\nmesh_door = bpy.context.object\nmesh_door.name = \"Mesh Door\"\nmesh_door.scale[0] = 1\nmesh_door.scale[1] = 1\nmesh_door.data.materials.append(mesh_color)\n\n# Rotate the mesh door to stand vertically\nmesh_door.rotation_euler[1] = 1.5708  # 90 degrees in radians", "color_brightness": "Dark", "verify": "human", "entropy": 2.4412145291060345, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "9ef17a5c-e406-492e-a0cb-0285982393f5", "name": "Drum", "instruction": "Design a 3D model of a drum. The drum should have a cylindrical body with a drumhead on the top. Include drumsticks placed next to it.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\ndrumstick_color = bpy.data.materials.new(name=\"Drumstick Color\")\ndrumstick_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Drumsticks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0, 0.5), rotation=(0, 0, 0.2 * (i * 2 - 1)))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(drumstick_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.5736166799691444, "unit_n": 4, "param_ratio": 8.25}
{"id": "43421d11-c27f-4442-8a6c-f6cb9d6cc174", "name": "Apple", "instruction": "Model a simple apple. It should be round with a small stem on top.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color\n\n# Assign colors to the objects\napple_body.data.materials.append(apple_red)\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "d922ee51-fd17-4df0-8532-b4bd9fe56bb0", "name": "Backpack", "instruction": "Let's create a backpack designed for travel. It should have a main compartment, a smaller front pocket, and two side pockets. Include adjustable shoulder straps and a top handle. The main compartment should have a zipper closure, and the front pocket should have a flap with a buckle. Add a small logo on the front pocket. The overall design should be sleek and functional.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmain_color = bpy.data.materials.new(name=\"Main Color\")\nmain_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nlogo_color = bpy.data.materials.new(name=\"Logo Color\")\nlogo_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Main Compartment\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nmain_compartment = bpy.context.object\nmain_compartment.name = \"Main Compartment\"\nmain_compartment.scale = (0.5, 0.3, 0.7)\nmain_compartment.data.materials.append(main_color)\n\n# Step 3: Create the Front Pocket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0.5))\nfront_pocket = bpy.context.object\nfront_pocket.name = \"Front Pocket\"\nfront_pocket.scale = (0.4, 0.05, 0.3)\nfront_pocket.data.materials.append(main_color)\n\n# Step 4: Create the Side Pockets\nfor i in range(2):\n    x = 0.6 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    side_pocket = bpy.context.object\n    side_pocket.name = f\"Side Pocket {i + 1}\"\n    side_pocket.scale = (0.05, 0.2, 0.3)\n    side_pocket.data.materials.append(main_color)\n\n# Step 5: Create the Shoulder Straps\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.35, 1.2))\n    strap = bpy.context.object\n    strap.name = f\"Shoulder Strap {i + 1}\"\n    strap.scale = (0.05, 0.02, 0.6)\n    strap.data.materials.append(main_color)\n\n# Step 6: Create the Top Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.35, 1.8))\ntop_handle = bpy.context.object\ntop_handle.name = \"Top Handle\"\ntop_handle.scale = (0.2, 0.02, 0.05)\ntop_handle.data.materials.append(main_color)\n\n# Step 7: Create the Front Pocket Flap\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.4, 0.75))\nflap = bpy.context.object\nflap.name = \"Front Pocket Flap\"\nflap.scale = (0.4, 0.02, 0.1)\nflap.data.materials.append(main_color)\n\n# Step 8: Create the Front Pocket Buckle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.45, 0.6))\nbuckle = bpy.context.object\nbuckle.name = \"Front Pocket Buckle\"\nbuckle.scale = (0.1, 0.02, 0.05)\nbuckle.data.materials.append(main_color)\n\n# Step 9: Create the Logo\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0.37, 0.5))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.scale = (0.2, 0.01, 0.2)\nlogo.data.materials.append(logo_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.477890749509435, "unit_n": 10, "param_ratio": 4.2}
{"id": "be088933-b3b7-4f36-a4fe-15ca5c52631f", "name": "Velvet Ottoman", "instruction": "Can you render a velvet ottoman 3D model? It should evoke a sense of comfort and warmth, with a top that is inviting for resting one's feet on after a long day.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nvelvet_color = bpy.data.materials.new(name=\"Velvet\")\nvelvet_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Warm, inviting red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(velvet_color)\n\n# Step 3: Create the Top Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.4))\ntop_cushion = bpy.context.object\ntop_cushion.name = \"Top Cushion\"\ntop_cushion.data.materials.append(velvet_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.3321698784996565, "unit_n": 2, "param_ratio": 7.5}
{"id": "098f933e-652b-43f9-9c62-35870fbae2c8", "name": "Pizza", "instruction": "Let's create a pizza. Start with a circular base. Add a layer of tomato sauce, then cover it with cheese. Place pepperoni slices evenly across the surface. Add some green bell pepper slices and a few black olives. Finally, sprinkle a bit of oregano on top.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 1, 0.6, 1)  # Yellowish color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.1, 0.6, 0.1, 1)  # Green color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\noregano_color = bpy.data.materials.new(name=\"Oregano\")\noregano_color.diffuse_color = (0.3, 0.3, 0.1, 1)  # Dark green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Add Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Add Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0, 0)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Add Green Bell Pepper Slices\nbell_pepper_positions = [(0.7, 0), (-0.7, 0), (0, 0.7), (0, -0.7)]\nfor pos in bell_pepper_positions:\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(pos[0], pos[1], 0.1))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = \"Bell Pepper\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Step 7: Add Black Olives\nolive_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3)]\nfor pos in olive_positions:\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(pos[0], pos[1], 0.1))\n    olive = bpy.context.object\n    olive.name = \"Olive\"\n    olive.data.materials.append(olive_color)\n\n# Step 8: Sprinkle Oregano\noregano_positions = [(0.2, 0.2), (-0.2, 0.2), (0.2, -0.2), (-0.2, -0.2), (0, 0)]\nfor pos in oregano_positions:\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(pos[0], pos[1], 0.12))\n    oregano = bpy.context.object\n    oregano.name = \"Oregano\"\n    oregano.data.materials.append(oregano_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.413276115054436, "unit_n": 7, "param_ratio": 9.714285714285714}
{"id": "87b92f09-75c6-4fca-90df-5bbc850c4e8c", "name": "Router", "instruction": "Could you create a router with multiple antennas and a sleek, compact design?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)  # Sleek and compact design\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = (i - 1) * 0.75  # Positioning antennas evenly on the router body\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(x, -0.5, 1.25))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n    antenna.rotation_euler = (math.pi / 4, 0, 0)  # Slightly tilted backwards\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.1923925901013237, "unit_n": 4, "param_ratio": 3.5}
{"id": "06e5578e-bdc0-4b95-95cc-348cccb645b6", "name": "Drum", "instruction": "Create a drum. The drum is cylindrical with a flat top surface. There are no additional details or accessories.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\n\n# Step 3: Create the Drum Top Surface\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1.5))\ndrum_top = bpy.context.object\ndrum_top.name = \"Drum Top\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.fill()\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.928963275954553, "unit_n": 2, "param_ratio": 4.5}
{"id": "d5975fcf-ee78-4115-92de-6a6315c8ba84", "name": "Burger", "instruction": "Create a 3D model of a burger. It should have a bun, patty, lettuce, and tomato.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun Color\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the bun\npatty_color = bpy.data.materials.new(name=\"Patty Color\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Dark brown color for the patty\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for the lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the tomato\n\n# Step 2: Create the Bottom Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbottom_bun = bpy.context.object\nbottom_bun.name = \"Bottom Bun\"\nbottom_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(0, 0, 0.25))\npatty = bpy.context.object\npatty.name = \"Patty\"\npatty.data.materials.append(patty_color)\n\n# Step 4: Create the Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.4))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 5: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(0, 0, 0.5))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Top Bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.75))\ntop_bun = bpy.context.object\ntop_bun.name = \"Top Bun\"\ntop_bun.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.28311796940181, "unit_n": 5, "param_ratio": 9.0}
{"id": "838362e0-b02d-4cff-b4e7-6a1851fe00b1", "name": "Blender", "instruction": "Design a 3D blender. The base should be cylindrical with simple buttons on the front. The pitcher should be transparent with clear measurement markings on the side. Add a lid on top.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Clear the scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\nbase_material = bpy.data.materials.new(name=\"Base_Material\")\nbase_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\npitcher_material = bpy.data.materials.new(name=\"Pitcher_Material\")\npitcher_material.diffuse_color = (0.8, 0.8, 0.8, 0.2)  # Transparent gray color\n\nbutton_material = bpy.data.materials.new(name=\"Button_Material\")\nbutton_material.diffuse_color = (1, 0, 0, 1)  # Red color\n\nlid_material = bpy.data.materials.new(name=\"Lid_Material\")\nlid_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Create the base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_material)\n\n# Create the buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.6 + i*0.3, 1.1, 0.2))\n    button = bpy.context.object\n    button.name = f\"Button_{i+1}\"\n    button.data.materials.append(button_material)\n\n# Create the pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=2, location=(0, 0, 1.5))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_material)\n\n# Create measurement markings\nbpy.ops.mesh.primitive_plane_add(size=0.05, location=(0.7, 0, 1))\nmarking = bpy.context.object\nmarking.name = \"Measurement_Marking\"\nmarking.data.materials.append(base_material)\n\nfor i in range(1, 6):\n    bpy.ops.mesh.primitive_plane_add(size=0.05, location=(0.7, 0, 0.5 + i * 0.3))\n    marking = bpy.context.object\n    marking.name = f\"Measurement_Marking_{i}\"\n    marking.data.materials.append(base_material)\n\n# Create the lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_material)", "color_brightness": "Dark", "verify": "human", "entropy": 4.499769499228425, "unit_n": 12, "param_ratio": 3.9166666666666665}
{"id": "b0eafdea-97d1-4a8b-a9bb-b76505058c4b", "name": "Blender", "instruction": "Design a blender with a transparent container and a base that includes a control panel with buttons. Ensure the lid fits snugly on top of the container.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransparent_material = bpy.data.materials.new(name=\"Transparent Material\")\ntransparent_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nbase_material = bpy.data.materials.new(name=\"Base Material\")\nbase_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_material = bpy.data.materials.new(name=\"Button Material\")\nbutton_material.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_material)\n\n# Step 3: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(transparent_material)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_material)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.75, 0.5))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[0] = 1.5\ncontrol_panel.scale[2] = 0.2\ncontrol_panel.data.materials.append(base_material)\n\n# Step 6: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.3 + i * 0.3, 0.85, 0.55))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_material)", "color_brightness": "Dark", "verify": "human", "entropy": 4.683269717293901, "unit_n": 7, "param_ratio": 5.428571428571429}
{"id": "b473da35-cef7-4f71-a528-ebf3afaf113a", "name": "Cat Scratcher", "instruction": "What features would you include in a cat scratcher to make it both functional and appealing for cats?", "category": "Furnishing", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the base\nsisal_color = bpy.data.materials.new(name=\"Sisal\")\nsisal_color.diffuse_color = (0.82, 0.71, 0.55, 1)  # Light brown color for the post\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make it flat\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 0.5))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(sisal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.68616409413304, "unit_n": 2, "param_ratio": 9.5}
{"id": "2805aa8c-9338-43ac-91fb-bb1e1e0bffa3", "name": "Circuit Breaker Panel", "instruction": "Design a circuit breaker panel. Ensure it has multiple switches and a main breaker.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npanel_color = bpy.data.materials.new(name=\"PanelColor\")\npanel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npanel = bpy.context.object\npanel.name = \"Panel\"\npanel.data.materials.append(panel_color)\n\n# Step 3: Create the Main Breaker\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 0.8))\nmain_breaker = bpy.context.object\nmain_breaker.name = \"Main Breaker\"\nmain_breaker.scale = (1, 0.5, 1)\nmain_breaker.data.materials.append(switch_color)\n\n# Step 4: Create the Switches\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0, 0.4 - i * 0.4))\n    switch = bpy.context.object\n    switch.name = f\"Switch {i + 1}\"\n    switch.scale = (1, 0.5, 1)\n    switch.data.materials.append(switch_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8273096391465935, "unit_n": 7, "param_ratio": 3.142857142857143}
{"id": "726a47df-db49-4946-b3dd-c38d69343dc7", "name": "Dog Bowl", "instruction": "Design a 3D model of a dog bowl. It should be circular with a wide base to prevent tipping. Include a slight lip around the edge.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.15, location=(0, 0, 0.025))\ninner = bpy.context.object\ninner.name = \"Inner\"\ninner.select_set(True)\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.15)})\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Lip of the Bowl\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.05, location=(0, 0, 0.1))\nlip = bpy.context.object\nlip.name = \"Lip\"\n\n# Step 5: Combine the Base, Inner, and Lip into One Object\nbpy.ops.object.select_all(action='DESELECT')\nbase.select_set(True)\ninner.select_set(True)\nlip.select_set(True)\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.join()\n\n# Step 6: Smooth the Bowl\nbpy.ops.object.shade_smooth()", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.038665941119155, "unit_n": 3, "param_ratio": 5.0}
{"id": "b6faefe1-ebca-4697-99f1-073be240e537", "name": "Dog Bowl", "instruction": "Create a simple dog bowl.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bowl Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbowl_base = bpy.context.object\nbowl_base.name = \"Bowl Base\"\n\n# Step 3: Create the Bowl Inner Part\nbpy.ops.mesh.primitive_cylinder_add(radius=1.25, depth=0.4, location=(0, 0, 0.45))\nbowl_inner = bpy.context.object\nbowl_inner.name = \"Bowl Inner\"\n\n# Step 4: Boolean Difference to Create the Hollow Part\nmod_bool = bowl_base.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = bowl_inner\n\nbpy.context.view_layer.objects.active = bowl_base\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the inner cylinder\nbpy.data.objects.remove(bowl_inner, do_unlink=True)\n\n# Optional: Assign a simple material to the bowl\nmaterial = bpy.data.materials.new(name=\"BowlMaterial\")\nmaterial.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nbowl_base.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.548778372424641, "unit_n": 2, "param_ratio": 7.5}
{"id": "61a717ac-83bd-46e6-9f10-5104685b0883", "name": "Power Bank", "instruction": "Design a rectangular power bank. It should have a smooth surface with a single button and LED indicator lights to show battery status.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npower_bank_color = bpy.data.materials.new(name=\"PowerBankColor\")\npower_bank_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nled_color = bpy.data.materials.new(name=\"LEDColor\")\nled_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Power Bank Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npower_bank = bpy.context.object\npower_bank.name = \"PowerBank\"\npower_bank.scale = (1, 2, 0.3)\nbpy.ops.object.shade_smooth()\npower_bank.data.materials.append(power_bank_color)\n\n# Step 3: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(0.8, 0, 0.35))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)\n\n# Step 4: Create the LED Indicator Lights\nfor i in range(3):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-0.8 + i * 0.3, 0, 0.35))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(led_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.057294389579252, "unit_n": 5, "param_ratio": 5.6}
{"id": "b97b2732-5d15-4544-a6be-79f78df9ca41", "name": "Apple", "instruction": "Create a 3D model of an apple. The apple should be round and have a small stem protruding from the top. The surface should be a solid red color.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Solid red color\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.4, 0.2, 0, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "052fa318-8c3e-4c0e-9285-555157908a11", "name": "Birthday Cake", "instruction": "Design a 3D model of a birthday cake. The cake should be round with three layers. Each layer should have a different color of frosting. The top layer should have \"Happy Birthday\" written on it with a few candles placed around the text. The sides of the cake should be decorated with small, evenly spaced frosting dots.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfrosting_color1 = bpy.data.materials.new(name=\"Frosting1\")\nfrosting_color1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red-ish color\nfrosting_color2 = bpy.data.materials.new(name=\"Frosting2\")\nfrosting_color2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green-ish color\nfrosting_color3 = bpy.data.materials.new(name=\"Frosting3\")\nfrosting_color3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue-ish color\nfrosting_dot_color = bpy.data.materials.new(name=\"FrostingDot\")\nfrosting_dot_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the bottom layer\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.5, location=(0, 0, 0))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"BottomLayer\"\nbottom_layer.data.materials.append(frosting_color1)\n\n# Step 3: Create the middle layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.5))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"MiddleLayer\"\nmiddle_layer.data.materials.append(frosting_color2)\n\n# Step 4: Create the top layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 1))\ntop_layer = bpy.context.object\ntop_layer.name = \"TopLayer\"\ntop_layer.data.materials.append(frosting_color3)\n\n# Step 5: Add \"Happy Birthday\" text on top\nbpy.ops.object.text_add(location=(0, 0, 1.5))\nhappy_birthday_text = bpy.context.object\nhappy_birthday_text.name = \"HappyBirthdayText\"\nhappy_birthday_text.data.body = \"Happy Birthday\"\nhappy_birthday_text.data.align_x = 'CENTER'\nhappy_birthday_text.data.align_y = 'CENTER'\nhappy_birthday_text.location = (0, 0, 1.25)\nhappy_birthday_text.scale = (0.2, 0.2, 0.2)\n\n# Step 6: Add candles\ncandle_count = 5\nfor i in range(candle_count):\n    angle = i * 2 * 3.14159 / candle_count\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 1.5))\n    candle = bpy.context.object\n    candle.name = f\"Candle{i + 1}\"\n    candle.data.materials.append(frosting_dot_color)\n    # Add flame to the candle\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.75))\n    flame = bpy.context.object\n    flame.name = f\"Flame{i + 1}\"\n    flame.data.materials.append(frosting_dot_color)\n\n# Step 7: Decorate sides with frosting dots\ndot_positions = [(1.8, 0), (1.27, 1.27), (0, 1.8), (-1.27, 1.27), (-1.8, 0), (-1.27, -1.27), (0, -1.8), (1.27, -1.27)]\nfor layer in [bottom_layer, middle_layer, top_layer]:\n    z_height = layer.location[2] + 0.25\n    for pos in dot_positions:\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(pos[0], pos[1], z_height))\n        dot = bpy.context.object\n        dot.data.materials.append(frosting_dot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.570829886870623, "unit_n": 7, "param_ratio": 7.285714285714286}
{"id": "6c326e41-0a31-47f7-a74d-30004594d2f9", "name": "Convertible Sofa", "instruction": "Design a convertible sofa that can easily transform into a bed. Compare the dimensions and functionality of the sofa in both forms. Ensure it is suitable for a small apartment living room.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Sofa Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_base = bpy.context.object\nsofa_base.name = \"Sofa Base\"\nsofa_base.scale = (1.5, 0.5, 0.2)\nsofa_base.data.materials.append(sofa_color)\n\n# Step 3: Create the Sofa Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1))\nsofa_backrest = bpy.context.object\nsofa_backrest.name = \"Sofa Backrest\"\nsofa_backrest.scale = (1.5, 0.1, 0.5)\nsofa_backrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Sofa Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.5))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 0.5, 0.5)\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Bed Extension\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.25, 0.2))\nbed_extension = bpy.context.object\nbed_extension.name = \"Bed Extension\"\nbed_extension.scale = (1.5, 0.5, 0.2)\nbed_extension.data.materials.append(sofa_color)\n\n# Group the sofa parts together\nbpy.ops.object.select_all(action='DESELECT')\nsofa_base.select_set(True)\nsofa_backrest.select_set(True)\nfor i in range(2):\n    bpy.data.objects[f\"Armrest {i + 1}\"].select_set(True)\nbed_extension.select_set(True)\nbpy.context.view_layer.objects.active = sofa_base\nbpy.ops.object.join()\nsofa = bpy.context.object\nsofa.name = \"Convertible Sofa\"\n\n# Position the sofa for a small apartment living room\nsofa.location = (0, 0, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2729911457779703, "unit_n": 5, "param_ratio": 4.2}
{"id": "725071e4-bdd4-4915-8f34-d722775d4aa9", "name": "Skateboard", "instruction": "What about designing a skateboard?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeck_color = bpy.data.materials.new(name=\"Deck Color\")\ndeck_color.diffuse_color = (0.15, 0.15, 0.15, 1)  # Dark gray color\n\nwheel_color = bpy.data.materials.new(name=\"Wheel Color\")\nwheel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Deck\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ndeck = bpy.context.object\ndeck.name = \"Deck\"\ndeck.scale = (1, 0.3, 0.05)\ndeck.data.materials.append(deck_color)\n\n# Step 3: Create the Wheels\nwheel_positions = [(0.8, 0.25, -0.1), (-0.8, 0.25, -0.1), (0.8, -0.25, -0.1), (-0.8, -0.25, -0.1)]\nfor i, pos in enumerate(wheel_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.05, location=pos, rotation=(math.pi / 2, 0, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(wheel_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.384385915576972, "unit_n": 2, "param_ratio": 9.5}
{"id": "aa4dd911-e08a-4cdc-91b6-15dfda2c0c9d", "name": "Classic Chess Set", "instruction": "Design a 3D chess set with pieces that have a minimalist aesthetic. The set should include all 32 pieces and a board with 64 squares, arranged in an 8x8 grid.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite_material = bpy.data.materials.new(name=\"White\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Board\nboard_size = 8\nsquare_size = 1\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col, row, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white_material)\n        else:\n            square.data.materials.append(black_material)\n\n# Step 3: Create a minimalist pawn\ndef create_pawn(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.2))\n    head = bpy.context.object\n    head.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(location[0], location[1], 0.1))\n    body = bpy.context.object\n    body.data.materials.append(material)\n\n# Step 4: Create all pawns\nfor i in range(8):\n    create_pawn((i, 1, 0), black_material)  # Black pawns\n    create_pawn((i, 6, 0), white_material)  # White pawns\n\n# Step 5: Create a minimalist rook\ndef create_rook(location, material):\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(location[0], location[1], 0.2))\n    base = bpy.context.object\n    base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(location[0], location[1], 0.4))\n    top = bpy.context.object\n    top.data.materials.append(material)\n\n# Step 6: Create all rooks\ncreate_rook((0, 0, 0), black_material)\ncreate_rook((7, 0, 0), black_material)\ncreate_rook((0, 7, 0), white_material)\ncreate_rook((7, 7, 0), white_material)\n\n# Step 7: Create a minimalist knight\ndef create_knight(location, material):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.4, location=(location[0], location[1], 0.2))\n    base = bpy.context.object\n    base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_cone_add(radius1=0.1, depth=0.2, location=(location[0], location[1], 0.5))\n    head = bpy.context.object\n    head.data.materials.append(material)\n\n# Step 8: Create all knights\ncreate_knight((1, 0, 0), black_material)\ncreate_knight((6, 0, 0), black_material)\ncreate_knight((1, 7, 0), white_material)\ncreate_knight((6, 7, 0), white_material)\n\n# Step 9: Create a minimalist bishop\ndef create_bishop(location, material):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(location[0], location[1], 0.2))\n    base = bpy.context.object\n    base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(location[0], location[1], 0.4))\n    head = bpy.context.object\n    head.data.materials.append(material)\n\n# Step 10: Create all bishops\ncreate_bishop((2, 0, 0), black_material)\ncreate_bishop((5, 0, 0), black_material)\ncreate_bishop((2, 7, 0), white_material)\ncreate_bishop((5, 7, 0), white_material)\n\n# Step 11: Create a minimalist queen\ndef create_queen(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.4, location=(location[0], location[1], 0.2))\n    base = bpy.context.object\n    base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(location[0], location[1], 0.4))\n    head = bpy.context.object\n    head.data.materials.append(material)\n\n# Step 12: Create all queens\ncreate_queen((3, 0, 0), black_material)\ncreate_queen((3, 7, 0), white_material)\n\n# Step 13: Create a minimalist king\ndef create_king(location, material):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(location[0], location[1], 0.25))\n    base = bpy.context.object\n    base.data.materials.append(material)\n    \n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(location[0], location[1], 0.5))\n    head = bpy.context.object\n    head.data.materials.append(material)\n\n# Step 14: Create all kings\ncreate_king((4, 0, 0), black_material)\ncreate_king((4, 7, 0), white_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.55277345290656, "unit_n": 13, "param_ratio": 5.076923076923077}
{"id": "e27338cb-fa0c-4697-a5c1-593a0596577b", "name": "Birthday Cake", "instruction": "Create a birthday cake with three layers. Each layer should have a different color of frosting. Add decorative icing around the edges and place a few candles on top.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlayer1_color = bpy.data.materials.new(name=\"Layer1Color\")\nlayer1_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink\nlayer2_color = bpy.data.materials.new(name=\"Layer2Color\")\nlayer2_color.diffuse_color = (0.8, 1, 0.8, 1)  # Light green\nlayer3_color = bpy.data.materials.new(name=\"Layer3Color\")\nlayer3_color.diffuse_color = (0.8, 0.8, 1, 1)  # Light blue\nicing_color = bpy.data.materials.new(name=\"IcingColor\")\nicing_color.diffuse_color = (1, 1, 1, 1)  # White\ncandle_color = bpy.data.materials.new(name=\"CandleColor\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow\n\n# Step 2: Create the Layers\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0.15))\nlayer1 = bpy.context.object\nlayer1.name = \"Layer1\"\nlayer1.data.materials.append(layer1_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.3, location=(0, 0, 0.45))\nlayer2 = bpy.context.object\nlayer2.name = \"Layer2\"\nlayer2.data.materials.append(layer2_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.3, location=(0, 0, 0.75))\nlayer3 = bpy.context.object\nlayer3.name = \"Layer3\"\nlayer3.data.materials.append(layer3_color)\n\n# Step 3: Create the Decorative Icing\nfor i in range(3):\n    bpy.ops.mesh.primitive_torus_add(major_radius=1 - i * 0.1, minor_radius=0.05, location=(0, 0, 0.3 * (i + 1)))\n    icing = bpy.context.object\n    icing.name = f\"Icing {i + 1}\"\n    icing.data.materials.append(icing_color)\n\n# Step 4: Create the Candles\nfor i in range(5):\n    angle = i * (2 * 3.14159 / 5)\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.85))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.254830040019225, "unit_n": 11, "param_ratio": 4.545454545454546}
{"id": "dfe4009b-d518-43dc-86f2-8847ee367a12", "name": "Bird Feeder", "instruction": "Design a bird feeder. It should have a cylindrical shape with a perch for birds to sit on. Include a small opening for birds to access the seeds inside.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Cylinder (Feeder Body)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nfeeder_body = bpy.context.object\nfeeder_body.name = \"Feeder Body\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(1, 0, 0.5), rotation=(0, 1.5708, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 4: Create the Opening\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 1, 1.5))\nopening = bpy.context.object\nopening.name = \"Opening\"\n\n# Boolean modifier to create the hole\nbpy.context.view_layer.objects.active = feeder_body\nmod_bool = feeder_body.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = opening\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(opening, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3864068596092007, "unit_n": 3, "param_ratio": 6.0}
{"id": "eedc38b8-00e6-41da-a75c-76be4197eb9b", "name": "Pet Bed", "instruction": "I'd like to see a 3D model of a pet bed. It should be circular with a raised edge around the perimeter and a flat cushion in the center.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\n\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.15))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.373190042261195, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "e2716a8f-3dee-4af2-8899-18a33ffd6044", "name": "Sofa", "instruction": "Can you create a 3D model of a sofa? It should have a backrest and armrests, with enough space to seat three people.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (2, 1, 0.5)\nbase.name = \"Sofa Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.1, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 1, 0.75)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 4.25}
{"id": "b35bdd95-55cc-4a59-bbe1-39a56850a5f0", "name": "Suitcase", "instruction": "Generate a 3D model of a suitcase. Compare it to a backpack in terms of size and shape. The suitcase should have a handle on top, wheels on the bottom, and a zipper.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsuitcase_color = bpy.data.materials.new(name=\"SuitcaseColor\")\nsuitcase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\nwheel_color = bpy.data.materials.new(name=\"WheelColor\")\nwheel_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color\nzipper_color = bpy.data.materials.new(name=\"ZipperColor\")\nzipper_color.diffuse_color = (0.3, 0.3, 0.3, 1)  # Medium gray color\n\n# Step 2: Create the Suitcase Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsuitcase = bpy.context.object\nsuitcase.name = \"Suitcase\"\nsuitcase.scale = (0.6, 0.3, 1)\nsuitcase.data.materials.append(suitcase_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 2.2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.scale = (0.5, 0.1, 0.1)\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wheels\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.05, location=(x, -0.35, 0.1))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.rotation_euler[0] = 1.5708  # Rotate 90 degrees to lay flat\n    wheel.data.materials.append(wheel_color)\n\n# Step 5: Create the Zipper\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0.32, 1))\nzipper = bpy.context.object\nzipper.name = \"Zipper\"\nzipper.scale = (0.5, 0.02, 0.02)\nzipper.data.materials.append(zipper_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.0175126063378452, "unit_n": 5, "param_ratio": 7.4}
{"id": "9c3e1df2-ce3f-4f43-a7f2-4c5179e6874d", "name": "Router", "instruction": "Create a router with a sleek design. The router should have multiple antennas for better signal strength and several ports for connectivity. It should be suitable for home or office use.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = (i - 1) * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(x, -0.8, 1.25))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the Ports\nfor i in range(4):\n    x = (i - 1.5) * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, 1.1, 0.3))\n    port = bpy.context.object\n    port.name = f\"Port {i + 1}\"\n    port.scale = (0.5, 0.1, 0.2)\n    port.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.1343907789948635, "unit_n": 8, "param_ratio": 2.25}
{"id": "f0d49dea-4718-4925-abc8-cc59d6646fce", "name": "Light Bulb", "instruction": "Create a 3D model of a light bulb.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_material = bpy.data.materials.new(name=\"Glass\")\nglass_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent white color for glass\n\nmetal_material = bpy.data.materials.new(name=\"Metal\")\nmetal_material.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color for metal\n\n# Step 2: Create the Bulb\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb.data.materials.append(glass_material)\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal_material)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.390756146937895, "unit_n": 2, "param_ratio": 9.5}
{"id": "fdf5432d-b508-4dbb-8125-4844648f10db", "name": "Decorative Pattern", "instruction": "Generate a 3D model of a decorative pattern with interlocking circles.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ndecorative_color = bpy.data.materials.new(name=\"Decorative Color\")\ndecorative_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create Interlocking Circles\nnum_circles = 5\nradius = 1\nfor i in range(num_circles):\n    angle = i * (2 * math.pi / num_circles)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_torus_add(location=(x, y, 0), major_radius=0.5, minor_radius=0.1)\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(decorative_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.630001084981197, "unit_n": 1, "param_ratio": 10.0}
{"id": "b77364cf-aaab-406f-878d-1eb37cf85130", "name": "Cat Scratching Post", "instruction": "Let's design a 3D model of a cat scratching post. The base should be a square platform. From the center of the base, a vertical post should rise. The post should have a cylindrical shape. Add a small platform at the top of the post. The entire structure should be simple and functional, without any additional accessories or decorations.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase_material = bpy.data.materials.new(name=\"Base Material\")\nbase_material.diffuse_color = (0.7, 0.5, 0.3, 1)  # Medium bright brown color\nbase.data.materials.append(base_material)\n\n# Step 3: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=4, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost_material = bpy.data.materials.new(name=\"Post Material\")\npost_material.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium bright dark brown color\npost.data.materials.append(post_material)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 3))\ntop_platform = bpy.context.object\ntop_platform.name = \"Top Platform\"\ntop_platform.data.materials.append(base_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.497925203625492, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "b05960fc-1c51-4c4c-99b1-44721d1bb7de", "name": "Abstract Wall Art", "instruction": "Create a piece of abstract wall art. ", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\n\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the base plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nbase_plane = bpy.context.object\nbase_plane.name = \"Base Plane\"\nbase_plane.data.materials.append(yellow)\n\n# Step 3: Create abstract shapes\n# Red Cube\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(-0.5, -0.5, 0.25))\nred_cube = bpy.context.object\nred_cube.name = \"Red Cube\"\nred_cube.data.materials.append(red)\n\n# Blue Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0.5, 0.5, 0.3))\nblue_sphere = bpy.context.object\nblue_sphere.name = \"Blue Sphere\"\nblue_sphere.data.materials.append(blue)\n\n# Yellow Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0.5, 0.25))\nyellow_cylinder = bpy.context.object\nyellow_cylinder.name = \"Yellow Cylinder\"\nyellow_cylinder.data.materials.append(yellow)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.2907421334086875, "unit_n": 4, "param_ratio": 8.0}
{"id": "9fa4237a-cb67-4630-98e0-8fe4bb6db0e8", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. The pizza has a round base with a diameter of 12 inches. The crust is slightly raised and golden brown. The pizza is topped with a layer of tomato sauce, melted cheese, pepperoni slices, green bell pepper strips, and black olives. Add some texture to the cheese and toppings to make them look realistic. Finally, slice the pizza into 8 equal pieces and show one piece being lifted with a cheese pull.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngolden_brown = bpy.data.materials.new(name=\"Golden Brown\")\ngolden_brown.diffuse_color = (0.76, 0.60, 0.42, 1)  # Golden brown color\ntomato_sauce = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese = bpy.data.materials.new(name=\"Cheese\")\ncheese.diffuse_color = (1, 0.9, 0.5, 1)  # Cheese color\npepperoni = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\ngreen_pepper = bpy.data.materials.new(name=\"Green Pepper\")\ngreen_pepper.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green bell pepper color\nblack_olive = bpy.data.materials.new(name=\"Black Olive\")\nblack_olive.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black olive color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(golden_brown)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.8, depth=0.05, location=(0, 0, 0.1))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.7, depth=0.05, location=(0, 0, 0.15))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese)\n\n# Step 5: Create Pepperoni Slices\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(x, y, 0.2))\n    pepperoni_slice = bpy.context.object\n    pepperoni_slice.name = f\"Pepperoni {i + 1}\"\n    pepperoni_slice.data.materials.append(pepperoni)\n\n# Step 6: Create Green Bell Pepper Strips\nfor i in range(8):\n    angle = i * math.pi / 4 + math.pi / 16\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0.25))\n    green_pepper_strip = bpy.context.object\n    green_pepper_strip.name = f\"Green Pepper {i + 1}\"\n    green_pepper_strip.scale[1] = 2\n    green_pepper_strip.data.materials.append(green_pepper)\n\n# Step 7: Create Black Olives\nfor i in range(8):\n    angle = i * math.pi / 4 + math.pi / 8\n    x = 2 * math.cos(angle)\n    y = 2 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0.3))\n    black_olive_piece = bpy.context.object\n    black_olive_piece.name = f\"Black Olive {i + 1}\"\n    black_olive_piece.data.materials.append(black_olive)\n\n# Step 8: Slice the Pizza into 8 Pieces\nfor i in range(8):\n    angle = i * math.pi / 4\n    bpy.ops.mesh.primitive_cone_add(radius1=6, radius2=0, depth=0.3, location=(0, 0, 0.15), rotation=(0, 0, angle))\n    slice = bpy.context.object\n    slice.name = f\"Slice {i + 1}\"\n    slice.data.materials.append(cheese)\n\n# Step 9: Lift One Slice with a Cheese Pull\nbpy.ops.mesh.primitive_cone_add(radius1=6, radius2=0, depth=0.3, location=(0, 0, 0.15), rotation=(0, 0, math.pi / 4))\nlifted_slice = bpy.context.object\nlifted_slice.name = \"Lifted Slice\"\nlifted_slice.data.materials.append(cheese)\nlifted_slice.location = (3, 3, 1)\nlifted_slice.rotation_euler = (0, math.pi / 6, math.pi / 4)\n\n# Create Cheese Pull\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(3, 3, 0.5))\ncheese_pull = bpy.context.object\ncheese_pull.name = \"Cheese Pull\"\ncheese_pull.data.materials.append(cheese)\ncheese_pull.rotation_euler = (math.pi / 2, 0, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.603294412009159, "unit_n": 37, "param_ratio": 2.189189189189189}
{"id": "ba051a96-088a-460b-a44a-31d899819315", "name": "Router", "instruction": "Design a router with a rectangular body. Include multiple antennas extending from the back.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the router\nrouter_color = bpy.data.materials.new(name=\"Router Color\")\nrouter_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)\nrouter_body.data.materials.append(router_color)\n\n# Step 3: Create the Antennas\nantenna_color = bpy.data.materials.new(name=\"Antenna Color\")\nantenna_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\nfor i in range(3):\n    x = -0.5 + i * 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, -0.75, 1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(antenna_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.31942357404355, "unit_n": 4, "param_ratio": 4.75}
{"id": "f5952915-e6bd-4dc8-9708-4ead664f903c", "name": "Smartphone Stand", "instruction": "Create a minimalist smartphone stand with a flat base and a backrest at a slight angle. Ensure it has a slot to hold the phone upright.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbpy.ops.transform.resize(value=(1, 1.5, 0.1))\nbpy.ops.object.transform_apply(scale=True)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbpy.ops.transform.resize(value=(1, 0.1, 1.5))\nbpy.ops.object.transform_apply(scale=True)\nbpy.ops.transform.rotate(value=math.radians(75), orient_axis='X')\nbpy.ops.object.transform_apply(rotation=True)\n\n# Step 4: Create the Slot\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 0.75))\nslot = bpy.context.object\nslot.name = \"Slot\"\nbpy.ops.transform.resize(value=(0.2, 0.1, 0.5))\nbpy.ops.object.transform_apply(scale=True)\n\n# Boolean difference to create the slot\nmod_bool = base.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = slot\nbpy.context.view_layer.objects.active = base\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\nbpy.data.objects.remove(slot, do_unlink=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 4.0}
{"id": "aa1a3f2a-813d-4fe8-8cba-3bd565706b2f", "name": "Sofa", "instruction": "Design a sofa that seats three people. It should have a backrest, armrests on both sides, and three seat cushions. The legs should be simple and unobtrusive.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Seat Base\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, 0, 0.25))\nseat_base = bpy.context.object\nseat_base.name = \"Seat Base\"\nseat_base.scale = (1.5, 0.5, 0.1)\nseat_base.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2.5, location=(0, -0.55, 0.75))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (1.5, 0.1, 0.5)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.55 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.5))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 0.5, 0.5)\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Seat Cushions\nfor i in range(3):\n    x = (i - 1) * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale = (0.45, 0.45, 0.1)\n    cushion.data.materials.append(sofa_color)\n\n# Step 6: Create the Legs\nfor i in range(4):\n    x = 1.3 * (i % 2) - 0.65\n    y = 0.6 * (i // 2) - 0.3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, -0.25))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0903372725272487, "unit_n": 11, "param_ratio": 2.3636363636363638}
{"id": "98c4ab28-72a4-4e90-b5b0-fdf5861543da", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. The phone should have a 6.5-inch screen with a front-facing camera located at the top center. The back should feature a dual-camera setup in the top left corner and a fingerprint sensor in the middle. Include volume buttons and a power button on the side.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Phone Body\nbpy.ops.mesh.primitive_cube_add(size=7, location=(0, 0, 0))\nphone_body = bpy.context.object\nphone_body.name = \"Phone Body\"\nphone_body.scale = (0.35, 0.75, 0.02)\nphone_body.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=6.5, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.32, 0.72, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0.72, 0.022))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Dual Back Cameras\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-0.3, 0.7, -0.021))\nback_camera1 = bpy.context.object\nback_camera1.name = \"Back Camera 1\"\nback_camera1.data.materials.append(black)\n\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(-0.3, 0.6, -0.021))\nback_camera2 = bpy.context.object\nback_camera2.name = \"Back Camera 2\"\nback_camera2.data.materials.append(black)\n\n# Step 6: Create the Fingerprint Sensor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, -0.021))\nfingerprint_sensor = bpy.context.object\nfingerprint_sensor.name = \"Fingerprint Sensor\"\nfingerprint_sensor.rotation_euler = (1.5708, 0, 0)\nfingerprint_sensor.data.materials.append(black)\n\n# Step 7: Create the Volume Buttons\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.38, 0.2 - i * 0.1, 0))\n    volume_button = bpy.context.object\n    volume_button.name = f\"Volume Button {i + 1}\"\n    volume_button.scale = (1, 0.5, 0.1)\n    volume_button.data.materials.append(black)\n\n# Step 8: Create the Power Button\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.38, -0.4, 0))\npower_button = bpy.context.object\npower_button.name = \"Power Button\"\npower_button.scale = (1, 0.5, 0.1)\npower_button.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8282173319399915, "unit_n": 9, "param_ratio": 4.777777777777778}
{"id": "beaee3e1-55eb-4646-92db-d33473cac731", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. The pizza should be round with a golden crust. The toppings should include pepperoni slices, green bell peppers, and black olives.\n\nNext, add some melted cheese on top of the toppings, making sure it looks evenly spread out.\n\nFinally, show a slice being pulled away from the pizza, with strings of cheese stretching between the slice and the rest of the pizza.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngolden_crust = bpy.data.materials.new(name=\"Golden Crust\")\ngolden_crust.diffuse_color = (0.98, 0.72, 0.18, 1)  # Golden color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Pepperoni color\nbell_pepper_color = bpy.data.materials.new(name=\"Bell Pepper\")\nbell_pepper_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green bell pepper color\nolive_color = bpy.data.materials.new(name=\"Olive\")\nolive_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black olive color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Melted cheese color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=0.2, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(golden_crust)\n\n# Step 3: Add Pepperoni Slices\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 3.5 * math.cos(angle)\n    y = 3.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 4: Add Bell Peppers\nfor i in range(8):\n    angle = i * math.pi / 4 + math.pi / 8\n    x = 4 * math.cos(angle)\n    y = 4 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(x, y, 0.1))\n    bell_pepper = bpy.context.object\n    bell_pepper.name = f\"Bell Pepper {i + 1}\"\n    bell_pepper.data.materials.append(bell_pepper_color)\n\n# Step 5: Add Black Olives\nfor i in range(8):\n    angle = i * math.pi / 4 + math.pi / 16\n    x = 2.5 * math.cos(angle)\n    y = 2.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0.1))\n    olive = bpy.context.object\n    olive.name = f\"Olive {i + 1}\"\n    olive.data.materials.append(olive_color)\n\n# Step 6: Add Melted Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=4.8, depth=0.1, location=(0, 0, 0.15))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 7: Create a Slice Being Pulled Away\nbpy.ops.mesh.primitive_cone_add(radius1=2, radius2=0, depth=0.2, location=(6, 0, 0.1), rotation=(0, 0, math.pi / 4))\nslice = bpy.context.object\nslice.name = \"Pizza Slice\"\nslice.data.materials.append(golden_crust)\n\n# Step 8: Add Cheese Strings\nfor i in range(5):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=6, location=(3 + i * 0.5, 0, 0.15), rotation=(0, math.pi / 2, 0))\n    cheese_string = bpy.context.object\n    cheese_string.name = f\"Cheese String {i + 1}\"\n    cheese_string.data.materials.append(cheese_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.883860302639541, "unit_n": 32, "param_ratio": 2.03125}
{"id": "d740468c-c651-4ee3-af8b-04636a0ebb3d", "name": "Apple", "instruction": "Create a 3D model of a red apple with a small stem and a single leaf attached to it. Ensure the apple has a round shape.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nbrown = bpy.data.materials.new(name=\"Brown\")\nbrown.diffuse_color = (0.4, 0.2, 0, 1)  # Brown color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(brown)\n\n# Step 4: Create the Leaf\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0.2, 0, 1.3))\nleaf = bpy.context.object\nleaf.name = \"Leaf\"\nleaf.data.materials.append(green)\n\n# Rotate the leaf to make it look more natural\nbpy.context.object.rotation_euler[1] = 1.0\nbpy.context.object.rotation_euler[2] = 0.5", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.328118452134484, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "e9a60b07-01dd-41da-bc33-3775fe8184e4", "name": "Wall Art", "instruction": "Generate a 3D model of a piece of wall art that can be used to decorate a living room. The design should be abstract and visually appealing.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ncolor3 = bpy.data.materials.new(name=\"Color3\")\ncolor3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create the Base Plane\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(color1)\n\n# Step 3: Add Abstract Shapes\n# Shape 1: Circle\nbpy.ops.mesh.primitive_circle_add(radius=0.4, location=(-0.5, -0.5, 0.01))\ncircle = bpy.context.object\ncircle.name = \"Circle\"\ncircle.data.materials.append(color2)\n\n# Shape 2: Cube\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.5, 0.5, 0.25))\ncube = bpy.context.object\ncube.name = \"Cube\"\ncube.data.materials.append(color3)\n\n# Shape 3: Cone\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, depth=0.6, location=(0, -0.5, 0.3))\ncone = bpy.context.object\ncone.name = \"Cone\"\ncone.data.materials.append(color2)\n\n# Shape 4: Torus\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.1, location=(-0.5, 0.5, 0.1))\ntorus = bpy.context.object\ntorus.name = \"Torus\"\ntorus.data.materials.append(color3)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.72768064953747, "unit_n": 5, "param_ratio": 7.4}
{"id": "f5383468-7d5d-404b-9c18-710851b7d5ff", "name": "Flower Vase", "instruction": "Could you create a flower vase with a simple cylindrical shape?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Vase\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=3, location=(0, 0, 1.5))\nvase = bpy.context.object\nvase.name = \"Vase\"\n\n# Optional: Add a material to the vase\nvase_material = bpy.data.materials.new(name=\"VaseMaterial\")\nvase_material.diffuse_color = (0.8, 0.5, 0.3, 1)  # A simple brown color\nvase.data.materials.append(vase_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "d9c049cf-c4de-42b9-bfad-dd580fcc6d1a", "name": "Pizza Dough", "instruction": "Create a 3D model of pizza dough. The dough should be circular and about 12 inches in diameter. It should be slightly raised around the edges to form a crust. The texture should appear soft and slightly uneven, with a few air bubbles visible. Please animate the dough being stretched and tossed in the air, as if being prepared by a pizza chef.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dough color\ndough_color = bpy.data.materials.new(name=\"Dough Color\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light dough color\n\n# Step 2: Create the Dough\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1524, depth=0.01, location=(0, 0, 0))  # 12 inches in diameter (0.3048 meters)\ndough = bpy.context.object\ndough.name = \"Pizza Dough\"\ndough.data.materials.append(dough_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1524, minor_radius=0.01, location=(0, 0, 0.005))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(dough_color)\n\n# Step 4: Add Texture to the Dough\nbpy.ops.object.select_all(action='DESELECT')\ndough.select_set(True)\nbpy.context.view_layer.objects.active = dough\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.subdivide(number_cuts=50)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Adding a Displacement Modifier for uneven texture\ndisplace = dough.modifiers.new(name='Displace', type='DISPLACE')\ntexture = bpy.data.textures.new(name='DoughTexture', type='CLOUDS')\ndisplace.texture = texture\ndisplace.strength = 0.005\n\n# Step 5: Animate the Dough\n# Keyframe 1: Initial Position\ndough.location = (0, 0, 0)\ndough.keyframe_insert(data_path=\"location\", frame=1)\n\n# Keyframe 2: Tossed Up\ndough.location = (0, 0, 1)\ndough.keyframe_insert(data_path=\"location\", frame=20)\n\n# Keyframe 3: Stretched\ndough.scale = (1.1, 1.1, 0.01)\ndough.keyframe_insert(data_path=\"scale\", frame=40)\n\n# Keyframe 4: Back Down\ndough.location = (0, 0, 0)\ndough.scale = (1, 1, 0.01)\ndough.keyframe_insert(data_path=\"location\", frame=60)\ndough.keyframe_insert(data_path=\"scale\", frame=60)\n\n# Set the end frame for the animation\nbpy.context.scene.frame_end = 60", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.237498722678184, "unit_n": 2, "param_ratio": 7.5}
{"id": "fffb4721-7f99-4aa4-93c2-dcc37123cb04", "name": "Tennis Ball", "instruction": "Generate a 3D model of a tennis ball. Ensure it is spherical and has the characteristic white curved lines.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Tennis Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nball = bpy.context.object\nball.name = \"Tennis Ball\"\n\n# Define the colors\ntennis_ball_yellow = bpy.data.materials.new(name=\"Tennis Ball Yellow\")\ntennis_ball_yellow.diffuse_color = (0.93, 0.93, 0.13, 1)  # Tennis ball yellow color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Apply the yellow color to the ball\nball.data.materials.append(tennis_ball_yellow)\n\n# Step 3: Create the White Curved Lines\n# Using a simple approach to create a visual representation of the lines\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\nline1 = bpy.context.object\nline1.name = \"Line 1\"\nline1.data.materials.append(white)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0), rotation=(1.57, 0, 0))\nline2 = bpy.context.object\nline2.name = \"Line 2\"\nline2.data.materials.append(white)", "color_brightness": "Bright", "verify": "human", "entropy": 5.2604174664451655, "unit_n": 3, "param_ratio": 9.0}
{"id": "e1fc05b6-a6a4-4abb-b4c0-49500123e0dc", "name": "Dining Table", "instruction": "Could you create a dining table that seats six people? The table should be rectangular with four legs. Each corner of the table should have a slight curve for safety.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Tabletop\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\ntabletop = bpy.context.object\ntabletop.name = \"Tabletop\"\ntabletop.scale[0] = 2  # Length\ntabletop.scale[1] = 1  # Width\ntabletop.scale[2] = 0.05  # Thickness\ntabletop.data.materials.append(wood_color)\n\n# Step 3: Round the Corners of the Tabletop\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bevel(offset=0.1, segments=5, profile=0.5)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Legs\nleg_positions = [(1.8, 0.9, 0.375), (1.8, -0.9, 0.375), (-1.8, 0.9, 0.375), (-1.8, -0.9, 0.375)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.75, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.4242175155673724, "unit_n": 2, "param_ratio": 5.5}
{"id": "a1e3e00c-9404-441d-8a27-d8bee6c6dabf", "name": "Inductor", "instruction": "Construct an inductor with a cylindrical shape, including visible windings around the core.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncore_color = bpy.data.materials.new(name=\"Core Color\")\ncore_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the core\nwinding_color = bpy.data.materials.new(name=\"Winding Color\")\nwinding_color.diffuse_color = (0.8, 0.4, 0.1, 1)  # Copper color for the windings\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(core_color)\n\n# Step 3: Create the Windings\nnum_windings = 10\nwinding_radius = 0.25\nwinding_thickness = 0.05\nspacing = 0.1\n\nfor i in range(num_windings):\n    z = -0.5 + i * spacing\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, z), major_radius=winding_radius, minor_radius=winding_thickness, major_segments=30, minor_segments=12)\n    winding = bpy.context.object\n    winding.name = f\"Winding {i + 1}\"\n    winding.data.materials.append(winding_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 6.343283584727206, "unit_n": 2, "param_ratio": 10.5}
{"id": "b76cc187-40fa-4104-93b6-2eb295c8aade", "name": "Syringe", "instruction": "Design a 3D model of a syringe. It should have a cylindrical barrel, a plunger, and a needle at one end. How does it look?", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbarrel_color = bpy.data.materials.new(name=\"BarrelColor\")\nbarrel_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"PlungerColor\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"NeedleColor\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Almost white color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(barrel_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=2.2, location=(0, 0, 0))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.100944575547292, "unit_n": 3, "param_ratio": 10.0}
{"id": "c31e10b3-0f98-4f2b-a140-aca0bf9a0700", "name": "Umbrella", "instruction": "Design an umbrella. It should have a long handle with a canopy on top. The canopy should have a simple, smooth surface.", "category": "Household goods, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncanopy_color = bpy.data.materials.new(name=\"Canopy Color\")\ncanopy_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(radius1=1, depth=0.5, location=(0, 0, 0.25))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1429574603893564, "unit_n": 2, "param_ratio": 10.0}
{"id": "ffad6653-41b7-4655-a5a5-159b8d6b22e2", "name": "Sandwich", "instruction": "How would you create a sandwich?", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Flatten the cube to make it a layer\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05  # Flatten the cube to make it a layer\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Flatten the cube to make it a layer\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Flatten the cube to make it a slice\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.804778023065548, "unit_n": 5, "param_ratio": 8.0}
{"id": "cc9427ef-0f4d-4fe0-b01d-fb63664673a4", "name": "Hat", "instruction": "Create a hat with a wide brim.", "category": "Means of transport or hoisting", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Top of the Hat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 7.5}
{"id": "d99006ae-9728-4445-b3a0-7f60fdba966a", "name": "Smartphone", "instruction": "Create a 3D model of a smartphone. It should be rectangular with a touchscreen.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.3, 0.6, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Touchscreen\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Touchscreen\"\nscreen.scale = (0.28, 0.58, 1)\nscreen.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "ab837d28-b443-44a8-adaa-65f04e87599b", "name": "Cupcake", "instruction": "Let's design a cupcake with a swirl of icing on top, sprinkled with colored sugar and topped with a single cherry.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncupcake_color = bpy.data.materials.new(name=\"Cupcake\")\ncupcake_color.diffuse_color = (0.82, 0.41, 0.12, 1)  # Brownish color for cupcake\nicing_color = bpy.data.materials.new(name=\"Icing\")\nicing_color.diffuse_color = (1, 0.85, 0.85, 1)  # Light pink color for icing\ncherry_color = bpy.data.materials.new(name=\"Cherry\")\ncherry_color.diffuse_color = (0.8, 0, 0, 1)  # Red color for cherry\nsprinkle_color = bpy.data.materials.new(name=\"Sprinkle\")\nsprinkle_color.diffuse_color = (0, 1, 0, 1)  # Green color for sprinkles\n\n# Step 2: Create the Cupcake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\ncupcake_base = bpy.context.object\ncupcake_base.name = \"Cupcake Base\"\ncupcake_base.data.materials.append(cupcake_color)\n\n# Step 3: Create the Icing\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.1, radius2=0.3, depth=1, location=(0, 0, 1.5))\nicing = bpy.context.object\nicing.name = \"Icing\"\nicing.data.materials.append(icing_color)\n\n# Step 4: Create the Cherry\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 2.1))\ncherry = bpy.context.object\ncherry.name = \"Cherry\"\ncherry.data.materials.append(cherry_color)\n\n# Step 5: Create Sprinkles\nfor i in range(10):\n    angle = i * (2 * math.pi / 10)\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(x, y, 1.8), rotation=(math.pi/2, 0, 0))\n    sprinkle = bpy.context.object\n    sprinkle.name = f\"Sprinkle {i + 1}\"\n    sprinkle.data.materials.append(sprinkle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8914291716527076, "unit_n": 13, "param_ratio": 3.3846153846153846}
{"id": "99597b15-914e-4e5d-9865-71a811a82d43", "name": "Syringe", "instruction": "Design a 3D model of a syringe. The syringe should have a cylindrical barrel with measurement markings, a plunger with a thumb rest, and a needle at the end. Ensure the needle is thin and pointed, and the plunger can be positioned at different levels within the barrel. The syringe should be displayed in a neutral position, with the plunger partially depressed.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\nbarrel_material = bpy.data.materials.new(name=\"Barrel Material\")\nbarrel_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the barrel\nplunger_material = bpy.data.materials.new(name=\"Plunger Material\")\nplunger_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color for the plunger\nneedle_material = bpy.data.materials.new(name=\"Needle Material\")\nneedle_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for the needle\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(barrel_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, -0.6))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Thumb Rest\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, -1.35))\nthumb_rest = bpy.context.object\nthumb_rest.name = \"Thumb Rest\"\nthumb_rest.data.materials.append(plunger_material)\n\n# Step 5: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_material)\n\n# Step 6: Create the Needle Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.01, radius2=0, depth=0.1, location=(0, 0, 1.55))\nneedle_tip = bpy.context.object\nneedle_tip.name = \"Needle Tip\"\nneedle_tip.data.materials.append(needle_material)", "color_brightness": "Dark", "verify": "human", "entropy": 4.481134453534951, "unit_n": 5, "param_ratio": 8.2}
{"id": "e8536f48-77f0-44dd-a8c2-e3073ca2bc80", "name": "Bagel", "instruction": "Could you generate a 3D object of a bagel? It should have a round shape with a hole in the middle.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bagel\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.4, location=(0, 0, 0))\nbagel = bpy.context.object\nbagel.name = \"Bagel\"\n\n# Define the color\nbagel_color = bpy.data.materials.new(name=\"Bagel Color\")\nbagel_color.diffuse_color = (0.82, 0.71, 0.55, 1)  # Light brown color\nbagel.data.materials.append(bagel_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.541671201316971, "unit_n": 1, "param_ratio": 10.0}
{"id": "b50b8c2a-ea7f-455f-a3d3-df1140f952e5", "name": "Bed", "instruction": "Design a bed with a rectangular frame. The headboard should be higher than the footboard. Add a rectangular mattress on top of the frame.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nmattress_color = bpy.data.materials.new(name=\"Mattress Color\")\nmattress_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nframe = bpy.context.object\nframe.scale = (1, 2, 0.25)\nframe.name = \"Bed Frame\"\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Headboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -2, 0.75))\nheadboard = bpy.context.object\nheadboard.scale = (1, 0.1, 0.75)\nheadboard.name = \"Headboard\"\nheadboard.data.materials.append(frame_color)\n\n# Step 4: Create the Footboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 2, 0.5))\nfootboard = bpy.context.object\nfootboard.scale = (1, 0.1, 0.5)\nfootboard.name = \"Footboard\"\nfootboard.data.materials.append(frame_color)\n\n# Step 5: Create the Mattress\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.75))\nmattress = bpy.context.object\nmattress.scale = (0.95, 1.95, 0.2)\nmattress.name = \"Mattress\"\nmattress.data.materials.append(mattress_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.8804694994091986, "unit_n": 4, "param_ratio": 6.5}
{"id": "f343e9cb-7582-427f-9a80-601167246be8", "name": "Blender", "instruction": "Produce a 3D model of a blender. It should have a sturdy base with control buttons, a transparent container for blending, and a lid with a removable center cap. Describe the outlook on how this blender can revolutionize smoothie preparation at home, emphasizing its blending power and efficiency.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncontainer_color = bpy.data.materials.new(name=\"Container Color\")\ncontainer_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Transparent\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.4 * (i - 1), 0.9, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(container_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 6: Create the Removable Center Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.2, location=(0, 0, 2.7))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.7801119590295205, "unit_n": 7, "param_ratio": 6.285714285714286}
{"id": "ee446808-060e-4222-aa90-e4ac941f2321", "name": "Syringe", "instruction": "Create a syringe with a clear cylindrical barrel, a plunger, and a needle. The barrel should have measurement markings.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (1, 1, 1, 0.1)  # Clear material with low opacity\nmetal_material = bpy.data.materials.new(name=\"Metal\")\nmetal_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metal color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.5, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.4, location=(0, 0, -0.05))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(metal_material)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 0.75))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(metal_material)\n\n# Step 5: Add Measurement Markings (simplified as small cylinders)\nfor i in range(1, 15):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.02, location=(0.11, 0, -0.75 + i * 0.1))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(metal_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 3.522281294707172, "unit_n": 17, "param_ratio": 1.7647058823529411}
{"id": "ba07e585-38d9-4ba9-8a7b-b418fac2a63a", "name": "Cupcake", "instruction": "Design a cupcake with a cylindrical base and a domed top. Add a swirl of frosting on top.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncupcake_base_color = bpy.data.materials.new(name=\"Cupcake Base\")\ncupcake_base_color.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color\nfrosting_color = bpy.data.materials.new(name=\"Frosting\")\nfrosting_color.diffuse_color = (1, 0.8, 0.9, 1)  # Light pink color\n\n# Step 2: Create the Cupcake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\ncupcake_base = bpy.context.object\ncupcake_base.name = \"Cupcake Base\"\ncupcake_base.data.materials.append(cupcake_base_color)\n\n# Step 3: Create the Domed Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1.5))\ndomed_top = bpy.context.object\ndomed_top.name = \"Domed Top\"\nbpy.ops.transform.resize(value=(1, 1, 0.5))\ndomed_top.data.materials.append(cupcake_base_color)\n\n# Step 4: Create the Swirl of Frosting\nbpy.ops.mesh.primitive_torus_add(major_radius=0.8, minor_radius=0.2, location=(0, 0, 2))\nfrosting_swirl = bpy.context.object\nfrosting_swirl.name = \"Frosting Swirl\"\nfrosting_swirl.data.materials.append(frosting_color)\n\n# Add additional smaller swirls for more detail\nfor i in range(1, 4):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.8 - 0.2 * i, minor_radius=0.2, location=(0, 0, 2 + 0.2 * i))\n    small_swirl = bpy.context.object\n    small_swirl.name = f\"Frosting Swirl {i + 1}\"\n    small_swirl.data.materials.append(frosting_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.522574003012373, "unit_n": 6, "param_ratio": 4.833333333333333}
{"id": "a9929cb8-d4f6-4052-acef-66280a32383d", "name": "Sofa", "instruction": "Design a sofa with three cushions on the seat and three on the backrest. It should have armrests on both sides and short legs at the bottom. The sofa should be spacious enough to comfortably seat three people.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (2, 1, 0.5)\nbase.name = \"Sofa Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.1, 0.75)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.scale = (0.1, 1, 0.75)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Legs\nfor i in range(4):\n    x = 1.8 * (i % 2) - 0.9\n    y = 0.8 * (i // 2) - 0.4\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0.1))\n    leg = bpy.context.object\n    leg.scale = (0.1, 0.1, 0.1)\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)\n\n# Step 6: Create the Seat Cushions\nfor i in range(3):\n    x = 1.3 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    seat_cushion = bpy.context.object\n    seat_cushion.scale = (0.6, 0.9, 0.2)\n    seat_cushion.name = f\"Seat Cushion {i + 1}\"\n    seat_cushion.data.materials.append(sofa_color)\n\n# Step 7: Create the Backrest Cushions\nfor i in range(3):\n    x = 1.3 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.65, 1.75))\n    backrest_cushion = bpy.context.object\n    backrest_cushion.scale = (0.6, 0.1, 0.6)\n    backrest_cushion.name = f\"Backrest Cushion {i + 1}\"\n    backrest_cushion.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8581327183378553, "unit_n": 14, "param_ratio": 2.0714285714285716}
{"id": "d9929ac4-87a2-4e32-812f-988f2ad1b876", "name": "Calculator", "instruction": "Could you create a 3D model of a calculator? It should have a rectangular shape with a set of buttons arranged in a grid. Include a display screen at the top and ensure the buttons have numbers and basic mathematical symbols.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (1, 1.5, 0.1)\nbody.name = \"Calculator Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1.2, 0.1))\nscreen = bpy.context.object\nscreen.scale = (0.8, 0.3, 0.05)\nscreen.name = \"Calculator Screen\"\nscreen.data.materials.append(screen_color)\n\n# Step 4: Create the Buttons\nbutton_positions = [\n    (-0.6, -0.5), (-0.2, -0.5), (0.2, -0.5), (0.6, -0.5),\n    (-0.6, -0.1), (-0.2, -0.1), (0.2, -0.1), (0.6, -0.1),\n    (-0.6, 0.3), (-0.2, 0.3), (0.2, 0.3), (0.6, 0.3),\n    (-0.6, 0.7), (-0.2, 0.7), (0.2, 0.7), (0.6, 0.7)\n]\n\nfor i, (x, y) in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, 0.1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.661747885993803, "unit_n": 3, "param_ratio": 9.0}
{"id": "b0212c8a-63b8-46bc-abcf-0f3fa7440f2a", "name": "Smartphone", "instruction": "Create a smartphone. It should have a rectangular shape with rounded edges. Decorate the back with a simple logo in the center.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nphone_color = bpy.data.materials.new(name=\"PhoneColor\")\nphone_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\nlogo_color = bpy.data.materials.new(name=\"LogoColor\")\nlogo_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nphone_body = bpy.context.object\nphone_body.name = \"PhoneBody\"\nphone_body.scale = (0.5, 1, 0.05)\nphone_body.data.materials.append(phone_color)\n\n# Step 3: Add Rounded Edges\nbpy.ops.object.modifier_add(type='BEVEL')\nphone_body.modifiers[\"Bevel\"].width = 0.1\nphone_body.modifiers[\"Bevel\"].segments = 10\nbpy.ops.object.modifier_apply(modifier=\"Bevel\")\n\n# Step 4: Create the Logo\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, 0, 0.051))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.data.materials.append(logo_color)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.1095705129445532, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "99255617-dcb5-424b-ad6a-ea6c175139bc", "name": "Notebook", "instruction": "Could you create a 3D model of a notebook? It should be rectangular, with a spiral binding along the left edge. The cover and pages should be visible.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White pages\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black spiral\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, 0))\npages = bpy.context.object\npages.scale = (0.95, 1.45, 0.04)\npages.name = \"Pages\"\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.05, -1.4 + i * 0.3, 0))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)\n    spiral.rotation_euler[1] = 1.5708  # Rotate to align with the notebook\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.406391426410309, "unit_n": 12, "param_ratio": 2.3333333333333335}
{"id": "f6eede88-4829-45c4-9875-c5f3d584a711", "name": "Laptop", "instruction": "Create a laptop with a sleek design. The screen should be open at a 90-degree angle to the keyboard. Add a logo in the center of the back of the screen.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Keyboard Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nkeyboard_base = bpy.context.object\nkeyboard_base.scale[2] = 0.05  # Make it flat\nkeyboard_base.name = \"Keyboard Base\"\nkeyboard_base.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1, 1.15))\nscreen = bpy.context.object\nscreen.scale[2] = 0.05  # Make it flat\nscreen.rotation_euler[0] = math.pi / 2  # Rotate 90 degrees\nscreen.name = \"Screen\"\nscreen.data.materials.append(black)\n\n# Step 4: Create the Logo\nbpy.ops.mesh.primitive_plane_add(size=0.3, location=(0, 1.05, 1.15))\nlogo = bpy.context.object\nlogo.rotation_euler[0] = math.pi / 2  # Rotate 90 degrees\nlogo.name = \"Logo\"\nlogo.data.materials.append(gray)\n", "color_brightness": "Dark", "verify": "human", "entropy": 2.527519150841569, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "b6cd7d70-644d-42e1-8dcf-89a69cad0093", "name": "Screwdriver", "instruction": "Could you generate a 3D model of a screwdriver with a flathead tip and a simple handle?", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for metal\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color for handle\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(0, 0, -0.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Flathead Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, -1.5))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.scale[1] = 0.03  # Flatten the tip\ntip.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.270275129726422, "unit_n": 3, "param_ratio": 8.0}
{"id": "e9266bbc-a1a2-4b60-bdff-05297308cabb", "name": "Drum", "instruction": "Create a drum with a cylindrical body and a taut membrane stretched over one end. Include a pair of drumsticks.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nmembrane_color = bpy.data.materials.new(name=\"Membrane Color\")\nmembrane_color.diffuse_color = (1, 1, 1, 1)  # White color\ndrumstick_color = bpy.data.materials.new(name=\"Drumstick Color\")\ndrumstick_color.diffuse_color = (0.6, 0.3, 0.1, 1)  # Brown color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Membrane\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0.75))\nmembrane = bpy.context.object\nmembrane.name = \"Membrane\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\nmembrane.data.materials.append(membrane_color)\n\n# Step 4: Create the Drumsticks\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, 0, 1))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(drumstick_color)\n    bpy.ops.transform.rotate(value=1.57, orient_axis='X')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2270430896891713, "unit_n": 4, "param_ratio": 7.25}
{"id": "e33b507a-f87d-41dd-ad15-c86a05e67375", "name": "Laptop", "instruction": "I need you to create a laptop. It should have a rectangular screen attached to a keyboard base.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the screen\nkeyboard_color = bpy.data.materials.new(name=\"Keyboard Color\")\nkeyboard_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray for the keyboard base\n\n# Step 2: Create the Keyboard Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nkeyboard_base = bpy.context.object\nkeyboard_base.scale[0] = 1.5\nkeyboard_base.scale[1] = 1\nkeyboard_base.scale[2] = 0.1\nkeyboard_base.name = \"Keyboard Base\"\nkeyboard_base.data.materials.append(keyboard_color)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.1, 1.5))\nscreen = bpy.context.object\nscreen.scale[0] = 1.5\nscreen.scale[1] = 0.05\nscreen.scale[2] = 1\nscreen.name = \"Screen\"\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.426015131959808, "unit_n": 2, "param_ratio": 9.0}
{"id": "f6b4280d-878c-4871-92b8-5cb010b0f8bd", "name": "Pizza", "instruction": "Please create a 3D model of a pizza with a round shape and visible slices.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Crust color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.4, 1)  # Cheese color\n\n# Step 2: Create the Pizza Base (Crust)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.05, location=(0, 0, 0.05))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Slices\nnum_slices = 8\nfor i in range(num_slices):\n    angle = (2 * math.pi / num_slices) * i\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.9, radius2=0, depth=0.1, location=(0, 0, 0.1), rotation=(0, 0, angle))\n    slice = bpy.context.object\n    slice.name = f\"Slice {i + 1}\"\n    slice.data.materials.append(cheese_color)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.684131963230271, "unit_n": 3, "param_ratio": 10.0}
{"id": "b5b585d9-8baf-45af-889d-12694e310882", "name": "Drumsticks", "instruction": "Design a pair of drumsticks. They should be cylindrical with a tapered end leading to a rounded tip.", "category": "Foodstuffs", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Function to create a drumstick\ndef create_drumstick(location):\n    # Create the main body of the drumstick\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=location)\n    body = bpy.context.object\n    body.name = \"Drumstick Body\"\n    body.data.materials.append(wood_color)\n    \n    # Create the tapered end\n    bpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.02, depth=0.2, location=(location[0], location[1], location[2] + 0.6))\n    taper = bpy.context.object\n    taper.name = \"Drumstick Taper\"\n    taper.data.materials.append(wood_color)\n    \n    # Create the rounded tip\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(location[0], location[1], location[2] + 0.7))\n    tip = bpy.context.object\n    tip.name = \"Drumstick Tip\"\n    tip.data.materials.append(wood_color)\n\n# Create two drumsticks\ncreate_drumstick(location=(0, 0, 0))\ncreate_drumstick(location=(0.2, 0, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.944320272649517, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "fee603eb-1ce8-4d9a-9e7b-1b3cbae9bca7", "name": "Screwdriver", "instruction": "Model a screwdriver with a flathead tip and a comfortable handle. The handle should have grooves for better grip.", "category": "Articles of clothing and haberdashery", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray for the handle\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray for the metal part\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1.0, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Add Grooves to the Handle\nfor i in range(6):\n    angle = i * (2 * 3.14159 / 6)\n    x = 0.12 * math.cos(angle)\n    y = 0.12 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(x, y, 0.5))\n    groove = bpy.context.object\n    groove.name = f\"Groove {i + 1}\"\n    groove.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 1.75))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 5: Create the Flathead Tip\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 2.5))\ntip = bpy.context.object\ntip.name = \"Flathead Tip\"\ntip.scale[0] = 0.02\ntip.scale[1] = 0.1\ntip.scale[2] = 0.1\ntip.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.56653885771939, "unit_n": 9, "param_ratio": 3.2222222222222223}
{"id": "dad02340-7eff-4a2b-b59a-dec8f88fe92b", "name": "Sketchbook", "instruction": "Please design a 3D model of a sketchbook for artists. The sketchbook should be rectangular with a hardcover and contain multiple blank pages. Add a spiral binding along the edge for easy page turning.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the cover\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nfor i in range(10):\n    bpy.ops.mesh.primitive_plane_add(size=1.9, location=(0, 0, 0.1 + 0.01 * (i + 1)))\n    page = bpy.context.object\n    page.scale = (1, 1.5, 1)\n    page.name = f\"Page {i + 1}\"\n    page.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(location=(-1.05, -1.4 + 0.3 * i, 0.1), major_radius=0.05, minor_radius=0.02)\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(cover_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6308108884480674, "unit_n": 21, "param_ratio": 1.0952380952380953}
{"id": "df07f419-c535-4b3b-8efd-473d98919dba", "name": "Blender", "instruction": "Start by creating the base of the blender, which houses the motor and control panel. \n\nNext, add the blender jar, which sits on top of the base and has a removable lid. \n\nInclude the blades at the bottom of the jar for blending.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Blender Base\"\n\n# Step 3: Create the Blender Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 2))\njar = bpy.context.object\njar.name = \"Blender Jar\"\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 3.05))\nlid = bpy.context.object\nlid.name = \"Blender Lid\"\n\n# Step 5: Create the Blades\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.5, depth=0.1, location=(0, 0, 1.1))\nblade1 = bpy.context.object\nblade1.name = \"Blade 1\"\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.5, depth=0.1, location=(0, 0, 1.1), rotation=(0, 0, 1.5708))\nblade2 = bpy.context.object\nblade2.name = \"Blade 2\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.600617852102567, "unit_n": 5, "param_ratio": 6.0}
{"id": "f6570831-6c0c-41ca-a004-589dbba7900a", "name": "Blender", "instruction": "Let's create a 3D model of a blender. It should have a cylindrical base with a control panel on the front. The blender jar should be transparent and have measurement markings on the side. The lid should have a small removable cap in the center.", "category": "Foodstuffs", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and materials\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray color\njar_material = bpy.data.materials.new(name=\"Jar Material\")\njar_material.diffuse_color = (1, 1, 1, 0.1)  # Transparent material\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.35, 0.15))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[2] = 0.1  # Flatten the control panel\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 4: Create the Blender Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1, location=(0, 0, 0.8))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_material)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.42, depth=0.1, location=(0, 0, 1.35))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 6: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0, 1.4))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(base_color)\n\n# Step 7: Add Measurement Markings (Simplified as small cubes for demonstration)\nfor i in range(1, 5):\n    bpy.ops.mesh.primitive_cube_add(size=0.02, location=(0.38, 0, 0.3 * i))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.7590845161782305, "unit_n": 9, "param_ratio": 4.777777777777778}
{"id": "b08fc069-23b3-4187-a944-30e478cca974", "name": "Pizza", "instruction": "Let's design a 3D model of a pizza. Start with a round base. Add a layer of tomato sauce, followed by a generous amount of cheese. Place pepperoni slices evenly across the surface. Include a few sprigs of basil for garnish.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for dough\ntomato_sauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\ntomato_sauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for basil\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(dough_color)\n\n# Step 3: Add Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(tomato_sauce_color)\n\n# Step 4: Add Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Add Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5), (0, 0)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Add Basil Sprigs\nbasil_positions = [(0.7, 0.3), (-0.7, -0.3), (0.3, -0.7)]\nfor i, (x, y) in enumerate(basil_positions):\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(x, y, 0.12))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.rotate(value=1.57, orient_axis='X')\n    bpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.469584800533563, "unit_n": 5, "param_ratio": 9.8}
{"id": "f696c820-c764-49dc-9d3b-d567bd82ba01", "name": "Sofa", "instruction": "Could you generate a sofa with three cushions? Ensure it has a low backrest and armrests on both sides.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the sofa\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Sofa Base\"\nbase.scale = (2, 1, 0.3)\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.15))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (2, 0.1, 0.5)\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.9 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 1, 0.4)\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.3\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.85))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale = (0.6, 0.9, 0.2)\n    cushion.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7096011796464388, "unit_n": 7, "param_ratio": 3.0}
{"id": "b9a042f5-8d0d-4085-91a8-b8525ddc5c7f", "name": "Pen", "instruction": "Create a 3D model of a pen. It should have a slim, cylindrical shape with a pointed tip and a cap that fits snugly.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npen_body_color = bpy.data.materials.new(name=\"Pen Body Color\")\npen_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\npen_tip_color = bpy.data.materials.new(name=\"Pen Tip Color\")\npen_tip_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npen_cap_color = bpy.data.materials.new(name=\"Pen Cap Color\")\npen_cap_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0.6))\npen_body = bpy.context.object\npen_body.name = \"Pen Body\"\npen_body.data.materials.append(pen_body_color)\n\n# Step 3: Create the Pen Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(0, 0, 0.1))\npen_tip = bpy.context.object\npen_tip.name = \"Pen Tip\"\npen_tip.data.materials.append(pen_tip_color)\n\n# Step 4: Create the Pen Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.4, location=(0, 0, 1.4))\npen_cap = bpy.context.object\npen_cap.name = \"Pen Cap\"\npen_cap.data.materials.append(pen_cap_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.361527516030895, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "e7218923-aaf8-4219-b21e-ebbcaab16f3b", "name": "Ottoman", "instruction": "Design a 3D model of an ottoman.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nfabric_color = bpy.data.materials.new(name=\"Fabric Color\")\nfabric_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Ottoman\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Ottoman Base\"\nbase.scale = (1, 1, 0.25)\nbase.data.materials.append(fabric_color)\n\n# Step 3: Create the Legs of the Ottoman\nleg_height = 0.1\nleg_radius = 0.05\nleg_positions = [(-0.45, -0.45), (0.45, -0.45), (-0.45, 0.45), (0.45, 0.45)]\n\nfor pos in leg_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=(pos[0], pos[1], leg_height / 2))\n    leg = bpy.context.object\n    leg.name = \"Ottoman Leg\"\n    leg.data.materials.append(fabric_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.4839514834534477, "unit_n": 2, "param_ratio": 6.0}
{"id": "c7787006-29d1-4dbf-9536-d299ca3912e0", "name": "Ottoman", "instruction": "I'd like a 3D model of an ottoman. It should be a cube-shaped piece of furniture, padded on the top, and can be used as a seat or footrest.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npadding_color = bpy.data.materials.new(name=\"Padding\")\npadding_color.diffuse_color = (0.8, 0.4, 0.2, 1)  # Medium bright color\n\n# Step 2: Create the Base of the Ottoman\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nottoman_base = bpy.context.object\nottoman_base.name = \"Ottoman Base\"\nottoman_base.scale[2] = 0.8  # Make it less tall\n\n# Step 3: Create the Padding on Top\nbpy.ops.mesh.primitive_cube_add(size=2.2, location=(0, 0, 0.9))\nottoman_padding = bpy.context.object\nottoman_padding.name = \"Ottoman Padding\"\nottoman_padding.scale[2] = 0.2  # Make it thin for padding\nottoman_padding.data.materials.append(padding_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "5be3b0b9-db0c-401c-882b-a5c587ed7908", "name": "Cupcake", "instruction": "Create a 3D model of a cupcake. Start with a standard cupcake base. Add a generous swirl of frosting on top. Sprinkle some small decorations on the frosting. The overall design should be appealing and mouth-watering.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncupcake_base_color = bpy.data.materials.new(name=\"Cupcake Base\")\ncupcake_base_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Light brown color for the base\nfrosting_color = bpy.data.materials.new(name=\"Frosting\")\nfrosting_color.diffuse_color = (1, 0.8, 0.9, 1)  # Light pink color for the frosting\ndecoration_color = bpy.data.materials.new(name=\"Decoration\")\ndecoration_color.diffuse_color = (1, 0, 0, 1)  # Red color for the decorations\n\n# Step 2: Create the Cupcake Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Cupcake Base\"\nbase.data.materials.append(cupcake_base_color)\n\n# Step 3: Create the Frosting\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1.2, radius2=0.2, depth=1.5, location=(0, 0, 1.75))\nfrosting = bpy.context.object\nfrosting.name = \"Frosting\"\nfrosting.data.materials.append(frosting_color)\n\n# Step 4: Create the Decorations\nfor i in range(20):\n    angle = i * (2 * math.pi / 20)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    z = 2.3 + 0.1 * math.sin(5 * angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, z))\n    decoration = bpy.context.object\n    decoration.name = f\"Decoration {i + 1}\"\n    decoration.data.materials.append(decoration_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6333490438423177, "unit_n": 22, "param_ratio": 1.4090909090909092}
{"id": "c5f81641-e96e-4883-a6b4-08e00889e3ec", "name": "Pizza", "instruction": "Can you create a 3D model of a pizza? The pizza should have a round shape with a slightly raised edge. Add some toppings like pepperoni slices, mushrooms, and green peppers evenly distributed on the surface.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npizza_crust_color = bpy.data.materials.new(name=\"Pizza Crust\")\npizza_crust_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nmushroom_color = bpy.data.materials.new(name=\"Mushroom\")\nmushroom_color.diffuse_color = (0.8, 0.8, 0.7, 1)  # Light beige color\ngreen_pepper_color = bpy.data.materials.new(name=\"Green Pepper\")\ngreen_pepper_color.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(pizza_crust_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.05))\npizza_edge = bpy.context.object\npizza_edge.name = \"Pizza Edge\"\npizza_edge.data.materials.append(pizza_crust_color)\n\n# Step 4: Add Pepperoni Slices\npepperoni_positions = [(0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5)]\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.06))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Add Mushrooms\nmushroom_positions = [(0.3, 0.3), (-0.3, 0.3), (0.3, -0.3), (-0.3, -0.3)]\nfor pos in mushroom_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(pos[0], pos[1], 0.06))\n    mushroom = bpy.context.object\n    mushroom.name = \"Mushroom\"\n    mushroom.data.materials.append(mushroom_color)\n\n# Step 6: Add Green Peppers\ngreen_pepper_positions = [(0.7, 0.2), (-0.7, 0.2), (0.7, -0.2), (-0.7, -0.2)]\nfor pos in green_pepper_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(pos[0], pos[1], 0.06))\n    green_pepper = bpy.context.object\n    green_pepper.name = \"Green Pepper\"\n    green_pepper.data.materials.append(green_pepper_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.1540062538716525, "unit_n": 5, "param_ratio": 9.0}
{"id": "c58f5fd0-2f72-4bf4-b2cb-92ad66da9387", "name": "Drum", "instruction": "Please create a simple 3D model of a drum. The drum should have a cylindrical body with a drumhead on top and tension rods around the sides.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntension_rod_color = bpy.data.materials.new(name=\"Tension Rod Color\")\ntension_rod_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.55))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = i * (360 / num_rods)\n    x = 1.1 * math.cos(math.radians(angle))\n    y = 1.1 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(x, y, 0.8))\n    tension_rod = bpy.context.object\n    tension_rod.name = f\"Tension Rod {i + 1}\"\n    tension_rod.data.materials.append(tension_rod_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4780173825443086, "unit_n": 3, "param_ratio": 10.0}
{"id": "fc0ee9b9-f514-48c0-bf29-49477613abfc", "name": "Notebook", "instruction": "Could you create a 3D model of a notebook? The notebook should have a spiral binding on the left side and lined pages. Include a few pages that are slightly turned to show the thickness of the notebook. Add a cover with a simple design and place a pen next to it.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue cover color\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # White pages color\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black spiral color\npen_color = bpy.data.materials.new(name=\"Pen Color\")\npen_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black pen color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale = (1, 1.5, 0.05)\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nfor i in range(5):\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0.05 * (i + 1)))\n    page = bpy.context.object\n    page.name = f\"Page {i + 1}\"\n    page.scale = (0.95, 1.45, 1)\n    page.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(location=(-1.05, -1.4 + 0.3 * i, 0.1), rotation=(math.pi/2, 0, 0))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.scale = (0.05, 0.05, 0.05)\n    spiral.data.materials.append(spiral_color)\n\n# Step 5: Create the Pen\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(1.2, 0, 0.1))\npen = bpy.context.object\npen.name = \"Pen\"\npen.data.materials.append(pen_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0504478364831877, "unit_n": 17, "param_ratio": 2.2941176470588234}
{"id": "ab072fe5-d6ae-46e1-b63b-c2105cfeaf2d", "name": "Smartphone", "instruction": "Design a smartphone with a rectangular shape and a screen covering the entire front. It should have a single button at the bottom and a camera on the back.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Smartphone Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.5, 1, 0.05)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.9, location=(0, 0, 0.051))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.475, 0.95, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.01, location=(0, -0.9, 0.051))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(gray)\n\n# Step 5: Create the Camera\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0.9, -0.051), rotation=(1.5708, 0, 0))\ncamera = bpy.context.object\ncamera.name = \"Camera\"\ncamera.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.727532263671408, "unit_n": 4, "param_ratio": 7.75}
{"id": "b0cc56b8-1054-45bf-8a4d-dfd5881f4116", "name": "Paperweight", "instruction": "Create a 3D paperweight in the shape of a pyramid with a base of 5 cm by 5 cm and a height of 5 cm.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pyramid\nbpy.ops.mesh.primitive_cone_add(vertices=4, radius1=2.5, radius2=0, depth=5, location=(0, 0, 2.5))\npyramid = bpy.context.object\npyramid.name = \"Pyramid Paperweight\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.6094379124341005, "unit_n": 1, "param_ratio": 7.0}
{"id": "a86fb12e-fb3e-44e2-9ab7-6abe5640b4e9", "name": "Sofa", "instruction": "Can you create a 3D model of a sofa that looks inviting and comfortable? It should be big enough to seat three people, with large cushions and armrests.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Sofa Base\"\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Depth\nbase.scale[2] = 0.2  # Height\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.1  # Depth\nbackrest.scale[2] = 0.6  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1) * 0.9\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.7))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 1  # Depth\n    armrest.scale[2] = 0.4  # Height\n    armrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.3\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale[0] = 0.6  # Length\n    cushion.scale[1] = 0.9  # Depth\n    cushion.scale[2] = 0.2  # Height\n    cushion.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6353354103007303, "unit_n": 7, "param_ratio": 3.0}
{"id": "bf4c65cb-1012-42db-8752-52436f220828", "name": "Hat", "instruction": "Could you design a hat for me? It should have a wide brim and a rounded crown. Include a band around the base of the crown.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nband_color = bpy.data.materials.new(name=\"Band Color\")\nband_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.75, location=(0, 0, 0.75))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.5))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.890830029797145, "unit_n": 3, "param_ratio": 8.0}
{"id": "98c468ce-39d3-4256-985a-33842b71483f", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich with two slices of bread. Add layers of lettuce, tomato, cheese, and ham in between the slices.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.91, 0.76, 0.65, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.11, 0.11, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "fa62ff61-fd19-4d24-b981-cf4910e3a315", "name": "Sandwich", "instruction": "Imagine a sandwich that is simple yet delicious. Model two slices of bread with a layer of lettuce, a slice of tomato, and a piece of cheese in between. Make sure the ingredients are neatly stacked.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.871201010907891, "unit_n": 5, "param_ratio": 8.2}
{"id": "fad707c8-05a6-4924-99b1-96eaa9064fcd", "name": "Drum", "instruction": "Can you make a 3D model of a drum? It should be cylindrical with a taut surface on top and bottom.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\ndrum_surface_color = bpy.data.materials.new(name=\"Drum Surface Color\")\ndrum_surface_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Top Surface\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1))\ntop_surface = bpy.context.object\ntop_surface.name = \"Top Surface\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ntop_surface.data.materials.append(drum_surface_color)\n\n# Step 4: Create the Bottom Surface\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, -1))\nbottom_surface = bpy.context.object\nbottom_surface.name = \"Bottom Surface\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\nbottom_surface.data.materials.append(drum_surface_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "9db533d3-ab1f-4ce8-8623-825428ef8a1f", "name": "Chocolate Cake", "instruction": "Describe the feeling of creating a 3D model of a chocolate cake. It should have three layers, each separated by a layer of frosting. The top should be smooth and flat, with a few decorative swirls of frosting around the edge.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.12, 0.08, 1)  # Dark chocolate color\nfrosting = bpy.data.materials.new(name=\"Frosting\")\nfrosting.diffuse_color = (0.9, 0.8, 0.7, 1)  # Light frosting color\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, i * 0.6))\n    layer = bpy.context.object\n    layer.name = f\"Layer {i + 1}\"\n    layer.data.materials.append(chocolate)\n\n# Step 3: Create the Frosting Layers\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, i * 0.6 + 0.3))\n    frosting_layer = bpy.context.object\n    frosting_layer.name = f\"Frosting Layer {i + 1}\"\n    frosting_layer.data.materials.append(frosting)\n\n# Step 4: Create the Top Frosting Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.8))\ntop_frosting = bpy.context.object\ntop_frosting.name = \"Top Frosting\"\ntop_frosting.data.materials.append(frosting)\n\n# Step 5: Create Decorative Swirls\nfor i in range(8):\n    angle = i * (2 * 3.14159 / 8)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.9))\n    swirl = bpy.context.object\n    swirl.name = f\"Swirl {i + 1}\"\n    swirl.data.materials.append(frosting)", "color_brightness": "Dark", "verify": "human", "entropy": 3.8279163014600632, "unit_n": 14, "param_ratio": 2.0714285714285716}
{"id": "bfc9e2fe-4c13-4f18-a548-8e818e29eafb", "name": "Cat Bed", "instruction": "Construct a 3D model of a cat bed. The bed should be circular with raised edges for comfort. Add a small cushion inside for the cat to rest on. The cushion should fit snugly within the bed.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.2))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 0.15))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.614839448632885, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "5fb739ba-1f0e-4fbe-a053-9a56682edd0f", "name": "Screwdriver", "instruction": "Create a 3D model of a screwdriver. The screwdriver should have a cylindrical handle and a long, thin shaft with a flat or Phillips head. Keep the design simple and functional.", "category": "Musical instruments", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.3, 0.1, 1)  # Orange color for the handle\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1.5))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Head (Flathead for simplicity)\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, 2.55))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.scale[0] = 0.02  # Make it flat\nhead.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.270275129726423, "unit_n": 3, "param_ratio": 8.0}
{"id": "5d6daa9d-ded8-499e-a88d-2558bb6eba0e", "name": "Apple Pie", "instruction": "Can you make an apple pie and compare it to a cherry pie in terms of shape and size?", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_pie_color = bpy.data.materials.new(name=\"Apple Pie Color\")\napple_pie_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brownish color for apple pie\ncherry_pie_color = bpy.data.materials.new(name=\"Cherry Pie Color\")\ncherry_pie_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Reddish color for cherry pie\n\n# Step 2: Create the Apple Pie\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.3, location=(-1.5, 0, 0))\napple_pie = bpy.context.object\napple_pie.name = \"Apple Pie\"\napple_pie.data.materials.append(apple_pie_color)\n\n# Step 3: Create the Cherry Pie\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.3, location=(1.5, 0, 0))\ncherry_pie = bpy.context.object\ncherry_pie.name = \"Cherry Pie\"\ncherry_pie.data.materials.append(cherry_pie_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.494414514046857, "unit_n": 2, "param_ratio": 10.0}
{"id": "2f006f23-a74a-4bb5-ae97-3055f5e831d2", "name": "Notebook", "instruction": "Create a simple notebook. The notebook should be rectangular with a spiral binding on one side. Include evenly spaced lines on each page.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Notebook Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Notebook Cover\"\ncover.scale[0] = 1.5\ncover.scale[1] = 0.1\ncover.scale[2] = 2\n\n# Step 3: Create the Spiral Binding\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.6, 0, 0.9))\nspiral = bpy.context.object\nspiral.name = \"Spiral Binding\"\nspiral.rotation_euler[1] = 1.5708  # Rotate 90 degrees around Y-axis\n\n# Duplicate and position the spirals\nfor i in range(10):\n    bpy.ops.object.duplicate(linked=False)\n    bpy.context.object.location[2] -= 0.2\n\n# Step 4: Create the Lines on the Notebook\nfor i in range(-9, 10):\n    bpy.ops.mesh.primitive_plane_add(size=3, location=(0, 0.11, i * 0.2))\n    line = bpy.context.object\n    line.scale[1] = 0.01\n    line.name = f\"Line {i + 10}\"\n\n# Set the color for the cover and lines\ncover_material = bpy.data.materials.new(name=\"CoverMaterial\")\ncover_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncover.data.materials.append(cover_material)\n\nline_material = bpy.data.materials.new(name=\"LineMaterial\")\nline_material.diffuse_color = (0, 0, 0, 1)  # Black color\nfor i in range(-9, 10):\n    bpy.data.objects[f\"Line {i + 10}\"].data.materials.append(line_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.002084734384485, "unit_n": 11, "param_ratio": 2.090909090909091}
{"id": "8cb7b3dd-7325-495b-b0be-1f54d61fdb3c", "name": "Coaster", "instruction": "Could you create a simple round coaster? It should have a diameter of 4 inches and be about 0.2 inches thick.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Coaster\ndiameter = 4 * 0.0254  # Convert inches to meters\nthickness = 0.2 * 0.0254  # Convert inches to meters\n\nbpy.ops.mesh.primitive_cylinder_add(radius=diameter / 2, depth=thickness, location=(0, 0, 0))\ncoaster = bpy.context.object\ncoaster.name = \"Coaster\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 4.0}
{"id": "161c4a46-2eb4-4967-9064-ddc21d59172e", "name": "Wallpaper Pattern", "instruction": "Create a 3D model of a wallpaper pattern. The pattern should feature repeating geometric shapes. The shapes should be arranged in a symmetrical layout. Ensure the pattern looks continuous when tiled.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the geometric shapes\n# Create a base square\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nbase_square = bpy.context.object\nbase_square.name = \"Base Square\"\nbase_square.data.materials.append(color1)\n\n# Create a smaller square on top of the base square\nbpy.ops.mesh.primitive_plane_add(size=0.5, location=(0, 0, 0.01))\nsmall_square = bpy.context.object\nsmall_square.name = \"Small Square\"\nsmall_square.data.materials.append(color2)\n\n# Step 3: Arrange the shapes in a symmetrical layout\n# Duplicate the base square and small square to create a pattern\nfor i in range(3):\n    for j in range(3):\n        if i == 0 and j == 0:\n            continue  # Skip the original square\n        bpy.ops.object.duplicate(linked=False)\n        duplicated_square = bpy.context.object\n        duplicated_square.location = (i, j, 0)\n\n# Step 4: Ensure the pattern looks continuous when tiled\n# Add more squares to complete the tiling pattern\nfor i in range(3):\n    for j in range(3):\n        if i == 0 and j == 0:\n            continue  # Skip the original square\n        bpy.ops.object.duplicate(linked=False)\n        duplicated_square = bpy.context.object\n        duplicated_square.location = (i - 1.5, j - 1.5, 0)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.088844653215942, "unit_n": 2, "param_ratio": 9.0}
{"id": "349e846b-da3f-47e8-9948-c7c7d0ee9d8b", "name": "Pillow", "instruction": "Create a pillow with a rectangular shape.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pillow\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\npillow = bpy.context.object\npillow.name = \"Pillow\"\n\n# Step 3: Scale the Pillow to a Rectangular Shape\npillow.scale[0] = 2  # Length\npillow.scale[1] = 1  # Width\npillow.scale[2] = 0.3  # Height", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 4.0}
{"id": "158ed922-4cde-4324-9064-3b9bbb1cef3d", "name": "Bed Frame", "instruction": "Could you create a 3D model of a bed frame that has a rectangular base and simple headboard?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.scale[0] = 2  # Length\nbase.scale[1] = 1  # Width\nbase.scale[2] = 0.1  # Height\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Headboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.1, 0.75))\nheadboard = bpy.context.object\nheadboard.scale[0] = 2  # Length\nheadboard.scale[1] = 0.1  # Width\nheadboard.scale[2] = 0.5  # Height\nheadboard.name = \"Headboard\"\nheadboard.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.426015131959808, "unit_n": 2, "param_ratio": 6.5}
{"id": "8f6319e7-9547-46b3-b7f5-7dcf3ffcfc58", "name": "Power Bank", "instruction": "Design a power bank with a rectangular shape. It should have a power button, four LED indicators for battery level, and two USB ports.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nbutton_color = bpy.data.materials.new(name=\"ButtonColor\")\nbutton_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nled_color = bpy.data.materials.new(name=\"LEDColor\")\nled_color.diffuse_color = (0, 1, 0, 1)  # Green color\nusb_color = bpy.data.materials.new(name=\"USBColor\")\nusb_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Power Bank Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"PowerBankBody\"\nbody.scale = (1, 0.5, 0.2)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Power Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0.9, 0, 0.2))\nbutton = bpy.context.object\nbutton.name = \"PowerButton\"\nbutton.data.materials.append(button_color)\n\n# Step 4: Create the LED Indicators\nfor i in range(4):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(-0.8 + i * 0.4, 0.45, 0.2))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(led_color)\n\n# Step 5: Create the USB Ports\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(-0.5 + i * 0.5, -0.55, 0.1))\n    usb = bpy.context.object\n    usb.name = f\"USBPort {i + 1}\"\n    usb.scale = (0.5, 0.2, 0.1)\n    usb.data.materials.append(usb_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8499421309318334, "unit_n": 8, "param_ratio": 4.625}
{"id": "a9f6c20e-fdb8-4ae7-8c09-d46f7a34dec4", "name": "Blender", "instruction": "Start with the base of the blender, which is a cylindrical shape. \n\nAdd a control panel with buttons on the front of the base.\n\nNext, add a jar on top of the base, which is also cylindrical and has a handle.\n\nInclude a lid for the jar with a removable cap.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1, 0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\n\n# Step 4: Add Buttons to the Control Panel\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(-0.15 + i * 0.15, 1.25, 0.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n\n# Step 5: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 1.25))\njar = bpy.context.object\njar.name = \"Jar\"\n\n# Step 6: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.9, 0, 1.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nbpy.ops.transform.resize(value=(1, 0.2, 0.5))\n\n# Step 7: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 8: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.2, location=(0, 0, 2.1))\ncap = bpy.context.object\ncap.name = \"Cap\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.832489446592212, "unit_n": 9, "param_ratio": 3.5555555555555554}
{"id": "743903f3-5f81-44bf-b6b2-8c859d600de9", "name": "Coffee Grinder", "instruction": "Can you model a coffee grinder with a cylindrical body and a crank handle on top?", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Crank Handle Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 1, 2.1))\nhandle_base = bpy.context.object\nhandle_base.name = \"Handle Base\"\n\n# Step 4: Create the Crank Handle Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 1.5, 2.1), rotation=(math.pi/2, 0, 0))\nhandle_arm = bpy.context.object\nhandle_arm.name = \"Handle Arm\"\n\n# Step 5: Create the Crank Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 2, 2.1))\nhandle_knob = bpy.context.object\nhandle_knob.name = \"Handle Knob\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 1.6852881441101428, "unit_n": 4, "param_ratio": 5.5}
{"id": "2a6735d2-e290-4a7a-b6b2-66f4ff96abd0", "name": "Router", "instruction": "Create a 3D model of a router. It should be rectangular with two or more antennae on the back and several LED indicator lights on the front.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0.0, 1.0, 0.0, 1)  # Green color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (1.5, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennae\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, -0.5, 1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the LED Indicator Lights\nfor i in range(5):\n    x = -0.6 + i * 0.3\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.6))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(green)", "color_brightness": "Very Dark", "verify": "human", "entropy": 1.959419161651216, "unit_n": 8, "param_ratio": 2.875}
{"id": "f56fc6ef-781f-49d9-a6d5-5820d7f1f040", "name": "Bird Perch", "instruction": "Can you create a bird perch? It should have a main horizontal bar for the bird to stand on and two vertical supports on either end.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\n# Step 2: Create the Main Horizontal Bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5), rotation=(0, 1.5708, 0))\nmain_bar = bpy.context.object\nmain_bar.name = \"Main Bar\"\nmain_bar.data.materials.append(wood_color)\n\n# Step 3: Create the Vertical Supports\nfor i in range(2):\n    x = 0.45 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, 0, 0.25))\n    support = bpy.context.object\n    support.name = f\"Support {i + 1}\"\n    support.data.materials.append(wood_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8815333803662035, "unit_n": 3, "param_ratio": 6.0}
{"id": "0ed91c83-4a1f-4b3f-9dd2-af7594b2f262", "name": "Scarf", "instruction": "Create a scarf. It should be a long, rectangular piece of fabric with fringes at both ends.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nscarf_color = bpy.data.materials.new(name=\"Scarf Color\")\nscarf_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\n\n# Step 2: Create the Scarf Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nscarf_body = bpy.context.object\nscarf_body.scale = (0.1, 1, 0.02)  # Long rectangular shape\nscarf_body.name = \"Scarf Body\"\nscarf_body.data.materials.append(scarf_color)\n\n# Step 3: Create the Fringes\nfringe_count = 10\nfringe_spacing = 0.2\nfor i in range(fringe_count):\n    x = (i - (fringe_count / 2 - 0.5)) * fringe_spacing\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 1.05, 0))\n    fringe = bpy.context.object\n    fringe.scale = (0.02, 0.1, 0.02)  # Small rectangular shape\n    fringe.name = f\"Fringe Top {i + 1}\"\n    fringe.data.materials.append(scarf_color)\n\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, -1.05, 0))\n    fringe = bpy.context.object\n    fringe.scale = (0.02, 0.1, 0.02)  # Small rectangular shape\n    fringe.name = f\"Fringe Bottom {i + 1}\"\n    fringe.data.materials.append(scarf_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.803683635479554, "unit_n": 3, "param_ratio": 5.666666666666667}
{"id": "16d2fb34-d7bc-4a57-89b7-b7b72e8ce30d", "name": "Electric Insulator", "instruction": "Craft an electric insulator for high-voltage power lines. It should have a cylindrical shape with multiple sheds to increase the leakage path in wet conditions.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ninsulator_color = bpy.data.materials.new(name=\"Insulator Color\")\ninsulator_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nmain_cylinder = bpy.context.object\nmain_cylinder.name = \"Main Cylinder\"\nmain_cylinder.data.materials.append(insulator_color)\n\n# Step 3: Create the Sheds\nshed_height = 0.1\nshed_radius = 0.3\nnum_sheds = 8\nfor i in range(num_sheds):\n    bpy.ops.mesh.primitive_cylinder_add(radius=shed_radius, depth=shed_height, location=(0, 0, 0.2 * i + 0.1))\n    shed = bpy.context.object\n    shed.name = f\"Shed {i + 1}\"\n    shed.data.materials.append(insulator_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.463152261317009, "unit_n": 2, "param_ratio": 6.5}
{"id": "254600cd-a4a3-49e4-a2a4-70b03549f286", "name": "Couch", "instruction": "Can you create a simple couch with three cushions?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncouch_color = bpy.data.materials.new(name=\"CouchColor\")\ncouch_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\n\n# Step 2: Create the Base of the Couch\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Couch Base\"\nbase.scale[0] = 2\nbase.scale[1] = 1\nbase.scale[2] = 0.5\nbase.data.materials.append(couch_color)\n\n# Step 3: Create the Backrest of the Couch\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Couch Backrest\"\nbackrest.scale[0] = 2\nbackrest.scale[1] = 0.2\nbackrest.scale[2] = 1\nbackrest.data.materials.append(couch_color)\n\n# Step 4: Create the Cushions\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(-1 + i, 0, 1))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale[0] = 0.6\n    cushion.scale[1] = 0.9\n    cushion.scale[2] = 0.4\n    cushion.data.materials.append(couch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6888794541139363, "unit_n": 5, "param_ratio": 3.4}
{"id": "e1431c41-28ef-489c-95fb-871ddd322f38", "name": "Smartphone", "instruction": "Design a smartphone with a sleek, rectangular body. The front should have a large touch screen that covers most of the surface, and a small front-facing camera at the top. The back should have a dual-camera setup and a fingerprint sensor.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.3, 0.6, 0.02)\nbody.data.materials.append(black)\n\n# Step 3: Create the Screen\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Screen\"\nscreen.scale = (0.3, 0.6, 1)\nscreen.data.materials.append(gray)\n\n# Step 4: Create the Front Camera\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.02, location=(0, 0.55, 0.022))\nfront_camera = bpy.context.object\nfront_camera.name = \"Front Camera\"\nfront_camera.data.materials.append(black)\n\n# Step 5: Create the Back Cameras\nfor i in range(2):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0.1 * (i * 2 - 1), -0.55, -0.021))\n    back_camera = bpy.context.object\n    back_camera.name = f\"Back Camera {i + 1}\"\n    back_camera.data.materials.append(black)\n\n# Step 6: Create the Fingerprint Sensor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.01, location=(0, -0.55, -0.021), rotation=(1.5708, 0, 0))\nfingerprint_sensor = bpy.context.object\nfingerprint_sensor.name = \"Fingerprint Sensor\"\nfingerprint_sensor.data.materials.append(gray)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.450852352143386, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "bad4572e-d675-45b3-a747-95ec3c1c5a23", "name": "Sandwich", "instruction": "Design a sandwich with two slices of bread, a layer of lettuce, a slice of tomato, and a slice of cheese in between.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (1, 0.2, 0.2, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.1, 1)  # Yellow color for cheese\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Make it flatter\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Slice\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Make it flatter\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.871201010907891, "unit_n": 5, "param_ratio": 8.2}
{"id": "cdbaf758-a4ba-41ef-aea8-e24fbccf2d83", "name": "Bookshelf", "instruction": "Let's create a bookshelf. \n\nShelves: It should have five evenly spaced shelves, each 12 inches apart.\n\nDimensions: The overall height should be 6 feet, with a width of 3 feet and a depth of 1 foot.\n\nBack Panel: Include a solid back panel for support.\n\nDesign: Keep the design minimalistic.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the dimensions\nshelf_height = 0.1\nshelf_width = 3\nshelf_depth = 1\nshelf_spacing = 1  # 12 inches in feet\nnum_shelves = 5\ntotal_height = 6\n\n# Step 2: Create the Shelves\nfor i in range(num_shelves):\n    z = i * shelf_spacing\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, z))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n\n# Step 3: Create the Side Panels\nside_panel_thickness = 0.1\nfor x in [-shelf_width / 2 + side_panel_thickness / 2, shelf_width / 2 - side_panel_thickness / 2]:\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, total_height / 2 - shelf_height / 2))\n    side_panel = bpy.context.object\n    side_panel.scale = (side_panel_thickness / 2, shelf_depth / 2, total_height / 2)\n    side_panel.name = f\"Side Panel {x}\"\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -shelf_depth / 2 + side_panel_thickness / 2, total_height / 2 - shelf_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, side_panel_thickness / 2, total_height / 2)\nback_panel.name = \"Back Panel\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.3790925052297336, "unit_n": 3, "param_ratio": 4.0}
{"id": "fbe0eb5b-e7a4-49c3-aef5-de24fb89a10b", "name": "Chocolate Assortment", "instruction": "I'm interested in a chocolate assortment that features a variety of shapes, such as squares, circles, and triangles, with each shape corresponding to a different filling. Can you create a layout that presents these chocolates in an organized and appealing manner?", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors for different fillings\ndark_chocolate = bpy.data.materials.new(name=\"Dark Chocolate\")\ndark_chocolate.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\nmilk_chocolate = bpy.data.materials.new(name=\"Milk Chocolate\")\nmilk_chocolate.diffuse_color = (0.4, 0.2, 0.1, 1)  # Lighter brown color\nwhite_chocolate = bpy.data.materials.new(name=\"White Chocolate\")\nwhite_chocolate.diffuse_color = (0.9, 0.8, 0.7, 1)  # Cream color\n\n# Step 2: Create the Square Chocolates\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.5, location=(-1 + i, 1, 0))\n    square = bpy.context.object\n    square.name = f\"Square Chocolate {i + 1}\"\n    square.data.materials.append(dark_chocolate)\n\n# Step 3: Create the Circular Chocolates\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(-1 + i, 0, 0))\n    circle = bpy.context.object\n    circle.name = f\"Circular Chocolate {i + 1}\"\n    circle.data.materials.append(milk_chocolate)\n\n# Step 4: Create the Triangular Chocolates\nfor i in range(3):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.3, depth=0.5, location=(-1 + i, -1, 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangular Chocolate {i + 1}\"\n    triangle.data.materials.append(white_chocolate)", "color_brightness": "Dark", "verify": "human", "entropy": 4.0624649163824325, "unit_n": 9, "param_ratio": 3.3333333333333335}
{"id": "12f473e9-a1d4-421a-87e1-20a91a67f657", "name": "Screwdriver", "instruction": "Could you make a 3D model of a screwdriver? I want to see it from a top-down perspective.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color for the shaft\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, -1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0, depth=0.2, location=(0, 0, -2.1))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.066165304888272, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "58b04519-fdb9-49e6-a6ec-4cdee6f8f90c", "name": "Coffee Table", "instruction": "Can you make a coffee table for me? Something low and rectangular would be perfect. Thanks!", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood Color\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood-like color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.scale[0] = 1.5  # Scale to make it rectangular\ntable_top.scale[1] = 0.75\ntable_top.scale[2] = 0.1  # Make it thin\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = 0.4\nleg_radius = 0.05\npositions = [(-1.4, -0.65, leg_height / 2), (1.4, -0.65, leg_height / 2), (-1.4, 0.65, leg_height / 2), (1.4, 0.65, leg_height / 2)]\n\nfor i, pos in enumerate(positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.2826589178640315, "unit_n": 2, "param_ratio": 4.5}
{"id": "2688a707-c797-49cb-a801-5d79f4c5c7ba", "name": "Chocolate Bar", "instruction": "Can you design a chocolate bar with an even number of segments that can be easily broken off?", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the chocolate color\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Dark chocolate color\n\n# Step 2: Create the main bar\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbar = bpy.context.object\nbar.name = \"Chocolate Bar\"\nbar.scale = (2, 1, 0.2)\nbar.data.materials.append(chocolate)\n\n# Step 3: Create the segments\nnum_segments_x = 4\nnum_segments_y = 2\nsegment_width = 4 / num_segments_x\nsegment_height = 2 / num_segments_y\n\nfor i in range(num_segments_x):\n    for j in range(num_segments_y):\n        x = (i - num_segments_x / 2 + 0.5) * segment_width\n        y = (j - num_segments_y / 2 + 0.5) * segment_height\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.2))\n        segment = bpy.context.object\n        segment.name = f\"Segment {i + 1}-{j + 1}\"\n        segment.scale = (segment_width * 0.9, segment_height * 0.9, 0.1)\n        segment.data.materials.append(chocolate)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.9878547937827435, "unit_n": 2, "param_ratio": 6.5}
{"id": "395ce952-9603-42e0-a89d-7f51ce29ae3e", "name": "Blender", "instruction": "Design a blender with a cylindrical base and a transparent jug. The base should have control buttons on the front. Include a lid with a removable cap.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\njug_color = bpy.data.materials.new(name=\"Jug Color\")\njug_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=2, location=(0, 0, 1.5))\njug = bpy.context.object\njug.name = \"Jug\"\njug.data.materials.append(jug_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)\n\n# Step 5: Create the Removable Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.15, location=(0, 0, 2.65))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(lid_color)\n\n# Step 6: Create the Control Buttons\nbutton_positions = [(-0.6, 0.9, 0.4), (0, 0.9, 0.4), (0.6, 0.9, 0.4)]\nfor i, pos in enumerate(button_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.479400329544016, "unit_n": 5, "param_ratio": 8.2}
{"id": "4ee7b4dd-40b0-4a51-b9cf-c63acbb00ee0", "name": "Capacitor", "instruction": "Please create a 3D model of a capacitor. It should be cylindrical with two terminals on either end.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncapacitor_body_color = bpy.data.materials.new(name=\"CapacitorBodyColor\")\ncapacitor_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nterminal_color = bpy.data.materials.new(name=\"TerminalColor\")\nterminal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Capacitor Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 0))\ncapacitor_body = bpy.context.object\ncapacitor_body.name = \"CapacitorBody\"\ncapacitor_body.data.materials.append(capacitor_body_color)\n\n# Step 3: Create the Terminals\n# Terminal 1\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, -0.35))\nterminal_1 = bpy.context.object\nterminal_1.name = \"Terminal1\"\nterminal_1.data.materials.append(terminal_color)\n\n# Terminal 2\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0, 0, 0.35))\nterminal_2 = bpy.context.object\nterminal_2.name = \"Terminal2\"\nterminal_2.data.materials.append(terminal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.462981914440795, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "4d827024-98c5-41d4-bc68-fcec2ae1fb58", "name": "Pen", "instruction": "Create a pen with a click mechanism.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npen_body_color = bpy.data.materials.new(name=\"Pen Body Color\")\npen_body_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nclick_mechanism_color = bpy.data.materials.new(name=\"Click Mechanism Color\")\nclick_mechanism_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Pen Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0))\npen_body = bpy.context.object\npen_body.name = \"Pen Body\"\npen_body.data.materials.append(pen_body_color)\n\n# Step 3: Create the Click Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=0.1, location=(0, 0, 0.55))\nclick_mechanism = bpy.context.object\nclick_mechanism.name = \"Click Mechanism\"\nclick_mechanism.data.materials.append(click_mechanism_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.3321698784996565, "unit_n": 2, "param_ratio": 10.0}
{"id": "2d84e1a1-9bb0-49c0-bbac-4a973f9bffe0", "name": "Laundry Basket", "instruction": "Let's create a laundry basket. Start with a rectangular shape. Include a wide opening at the top. Add handles on the sides for easy carrying. Include a removable lid. Ensure the basket has enough capacity to hold a significant amount of laundry.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbasket_color = bpy.data.materials.new(name=\"BasketColor\")\nbasket_color.diffuse_color = (0.5, 0.35, 0.2, 1)  # Brown color\n\n# Step 2: Create the Basket\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.scale = (1, 0.8, 1.5)\nbasket.data.materials.append(basket_color)\n\n# Step 3: Create the Opening at the Top\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 2))\nopening = bpy.context.object\nopening.name = \"Opening\"\nopening.scale = (0.9, 0.7, 0.1)\nbpy.context.view_layer.objects.active = basket\nmod_bool = basket.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = opening\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(opening)\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0\n    y = 1.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(x, y, 1))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.rotation_euler = (1.5708, 0, 0)\n    handle.data.materials.append(basket_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 2.75))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.scale = (1, 0.8, 0.1)\nlid.data.materials.append(basket_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.305650128598338, "unit_n": 5, "param_ratio": 4.4}
{"id": "bf2af398-7550-4da6-85fc-d08c9bd3e15f", "name": "Cat Tree", "instruction": "Create a cat tree with multiple levels. Include a base platform, a few perches, and a small enclosed space for hiding. Add a few vertical posts connecting the different levels.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base Platform\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base Platform\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Vertical Posts\npost_height = 2\nfor i in range(4):\n    x = 0.9 * (i % 2) - 0.45\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=post_height, location=(x, y, -1 + post_height/2))\n    post = bpy.context.object\n    post.name = f\"Post {i + 1}\"\n    post.data.materials.append(wood_color)\n\n# Step 4: Create the First Perch\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 0.5))\nperch1 = bpy.context.object\nperch1.name = \"First Perch\"\nperch1.data.materials.append(wood_color)\n\n# Step 5: Create the Second Perch\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 2))\nperch2 = bpy.context.object\nperch2.name = \"Second Perch\"\nperch2.data.materials.append(wood_color)\n\n# Step 6: Create the Enclosed Space\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nenclosed_space = bpy.context.object\nenclosed_space.name = \"Enclosed Space\"\nenclosed_space.data.materials.append(wood_color)\n\n# Create the opening for the enclosed space\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.5, -0.5))\nopening = bpy.context.object\nbpy.context.view_layer.objects.active = enclosed_space\nmod_bool = enclosed_space.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = opening\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(opening)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.715773480703678, "unit_n": 9, "param_ratio": 3.2222222222222223}
{"id": "c4de9c01-2ccc-49d5-bf03-fb5008bca68d", "name": "Hat", "instruction": "Please design a 3D model of a hat. Compare a baseball cap with a fedora in terms of style and functionality.", "category": "Articles for the care and handling of animals", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncap_color = bpy.data.materials.new(name=\"Cap Color\")\ncap_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color for the cap\nfedora_color = bpy.data.materials.new(name=\"Fedora Color\")\nfedora_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for the fedora\n\n# Step 2: Create the Baseball Cap\n# Cap crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(-2, 0, 0))\ncap_crown = bpy.context.object\ncap_crown.scale[2] = 0.6\ncap_crown.name = \"Cap Crown\"\ncap_crown.data.materials.append(cap_color)\n\n# Cap bill\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(-2, 1, -0.4), rotation=(math.pi/2, 0, 0))\ncap_bill = bpy.context.object\ncap_bill.name = \"Cap Bill\"\ncap_bill.data.materials.append(cap_color)\n\n# Step 3: Create the Fedora\n# Fedora crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.2, location=(2, 0, 0))\nfedora_crown = bpy.context.object\nfedora_crown.scale[2] = 0.7\nfedora_crown.name = \"Fedora Crown\"\nfedora_crown.data.materials.append(fedora_color)\n\n# Fedora brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.1, location=(2, 0, -0.6))\nfedora_brim = bpy.context.object\nfedora_brim.name = \"Fedora Brim\"\nfedora_brim.data.materials.append(fedora_color)", "color_brightness": "Dark", "verify": "human", "entropy": 5.087675913915483, "unit_n": 4, "param_ratio": 8.0}
{"id": "52a21854-891a-4c1c-9384-b95d0c658a16", "name": "Syringe", "instruction": "Create a 3D model of a syringe with a thin, long body and a plunger at one end. The other end should have a needle.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsyringe_body_color = bpy.data.materials.new(name=\"Syringe Body Color\")\nsyringe_body_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Dark gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Darker gray color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nsyringe_body = bpy.context.object\nsyringe_body.name = \"Syringe Body\"\nsyringe_body.data.materials.append(syringe_body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, 1.15))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.5, location=(0, 0, -1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.216469105640616, "unit_n": 3, "param_ratio": 10.0}
{"id": "cc5af1e3-2a9c-4bd0-8132-357e8166293c", "name": "Cat Bed", "instruction": "Could you create a cat bed?", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Light brown color\n\n# Step 2: Create the Base of the Cat Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Walls of the Cat Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.6, depth=0.4, location=(0, 0, 0.3))\nwalls = bpy.context.object\nwalls.name = \"Walls\"\nwalls.data.materials.append(bed_color)\n\n# Step 4: Create the Inner Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.1, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(bed_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.910921781747808, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "e1a6831e-1433-423c-9bd7-f1276f62e576", "name": "Juicer", "instruction": "Can you create a juicer with a round base and a spout for pouring juice?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nspout_color = bpy.data.materials.new(name=\"SpoutColor\")\nspout_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Juicer Top\nbpy.ops.mesh.primitive_cone_add(radius1=0.9, radius2=0.3, depth=0.5, location=(0, 0, 0.35))\njuicer_top = bpy.context.object\njuicer_top.name = \"JuicerTop\"\njuicer_top.data.materials.append(base_color)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.1, 0, 0.1), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(spout_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.175781782061733, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "be7e1ac7-05ea-4b96-89e4-b466cb5014e9", "name": "Picture Frame", "instruction": "Create a picture frame. It should be rectangular.", "category": "Medical and laboratory equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"FrameColor\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (cutout)\nbpy.ops.mesh.primitive_cube_add(size=1.6, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (0.8, 0.1, 1.2)\n\n# Step 4: Boolean Modifier to create the frame\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_frame\n\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner frame\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "c884af58-3bd0-4d50-8896-b2977d1cf267", "name": "Electric Kettle", "instruction": "Generate a 3D model of an electric kettle with a handle and a spout.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nkettle_color = bpy.data.materials.new(name=\"KettleColor\")\nkettle_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Body of the Kettle\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nkettle_body = bpy.context.object\nkettle_body.name = \"KettleBody\"\nkettle_body.data.materials.append(kettle_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.7, location=(1.2, 0, 1), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(kettle_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(-1.2, 0, 1), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.26993295426843, "unit_n": 3, "param_ratio": 10.333333333333334}
{"id": "ef8f4a2d-aae4-482e-8b31-127d73bd37d4", "name": "Hat", "instruction": "Let's create a hat. The hat should have a round crown and a wide brim. The crown should be about 4 inches tall, and the brim should extend about 3 inches from the base of the crown. Keep the design plain and simple, without any additional features.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 5.0}
{"id": "094b985f-11ae-4af0-94d2-4437ccefb74c", "name": "Scarf", "instruction": "Create a long, rectangular piece of fabric.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Fabric\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nfabric = bpy.context.object\nfabric.scale = (5, 0.1, 0.01)  # Scale to make it long and flat\nfabric.name = \"Fabric\"\n\n# Optionally, you can add a material to the fabric\nfabric_material = bpy.data.materials.new(name=\"Fabric Material\")\nfabric_material.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nfabric.data.materials.append(fabric_material)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "e835cafe-907c-4095-85c3-da2cd0baae83", "name": "Pattern", "instruction": "Create a pattern of interlocking hexagons.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon size and spacing\nhex_radius = 1\nhex_height = 0.1\nspacing = 1.5 * hex_radius\n\n# Define the number of hexagons in the pattern\nrows = 5\ncols = 5\n\n# Step 2: Create the Hexagons\nfor row in range(rows):\n    for col in range(cols):\n        x_offset = col * spacing\n        y_offset = row * spacing * math.sqrt(3) / 2\n        if col % 2 == 1:\n            y_offset += spacing * math.sqrt(3) / 4\n        \n        # Create a hexagon\n        bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=hex_radius, depth=hex_height, location=(x_offset, y_offset, 0))\n        hexagon = bpy.context.object\n        hexagon.name = f\"Hexagon_{row}_{col}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.085613313378763, "unit_n": 1, "param_ratio": 4.0}
{"id": "1811b1c3-19f1-4266-b400-24d9c0c84d17", "name": "Geometric Pattern", "instruction": "Design a geometric pattern. It should consist of repeating hexagons arranged in a grid.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon creation function\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    return hexagon\n\n# Step 2: Create the Hexagon Grid\nrows = 5\ncols = 5\nhex_height = math.sqrt(3)\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5\n        y = row * hex_height\n        if col % 2 == 1:\n            y += hex_height / 2\n        create_hexagon((x, y, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.450002547309176, "unit_n": 1, "param_ratio": 3.0}
{"id": "a8af818a-e0f7-4ad4-bc78-a0b0658bd4a4", "name": "Fedora Hat", "instruction": "Design a fedora hat with a wide brim and a ribbon around the crown. Ensure it has a pinched front.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Pinch the Front\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\ncrown.data.vertices[0].select = True\ncrown.data.vertices[1].select = True\ncrown.data.vertices[2].select = True\ncrown.data.vertices[3].select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, -0.2, 0))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 0.8))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.620199518283522, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "5ed9c755-8331-4473-a3d2-3daafd3aa77d", "name": "Chess Board", "instruction": "How about designing a chess board? Compare it to a standard board with alternating light and dark squares. Make it a square with eight rows and eight columns.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chess Board\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Combine the squares into a single mesh\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.context.view_layer.objects.active = bpy.context.selected_objects[0]\nbpy.ops.object.join()\nbpy.context.object.name = \"Chess Board\"", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "67c891f6-266e-488f-b927-eb467bfac0f3", "name": "Geometric Pattern vs. Floral Pattern", "instruction": "Compare a geometric pattern and a floral pattern. The geometric pattern should consist of repeating shapes such as squares, triangles, and circles arranged in a symmetrical layout. The floral pattern should feature various flowers, leaves, and stems arranged in a natural, flowing design. Highlight the differences in their shapes, symmetry, and overall appearance.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\n\n# Step 2: Create Geometric Pattern (Squares, Triangles, Circles)\n# Squares\nfor i in range(3):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(i * 2, 0, 0))\n    square = bpy.context.object\n    square.name = f\"Square {i + 1}\"\n    square.data.materials.append(color1)\n\n# Triangles\nfor i in range(3):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=1, depth=0.1, location=(i * 2, 2, 0))\n    triangle = bpy.context.object\n    triangle.name = f\"Triangle {i + 1}\"\n    triangle.data.materials.append(color2)\n\n# Circles\nfor i in range(3):\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, location=(i * 2, 4, 0))\n    circle = bpy.context.object\n    circle.name = f\"Circle {i + 1}\"\n    circle.data.materials.append(color1)\n\n# Step 3: Create Floral Pattern (Flowers, Leaves, Stems)\n# Flower\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(-2, -2, 0))\nflower_center = bpy.context.object\nflower_center.name = \"Flower Center\"\nflower_center.data.materials.append(color2)\n\nfor i in range(6):\n    angle = i * math.pi / 3\n    x = -2 + math.cos(angle)\n    y = -2 + math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, 0))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(color1)\n\n# Leaves\nfor i in range(2):\n    x = -2 + (i * 2 - 1) * 1.5\n    bpy.ops.mesh.primitive_plane_add(size=0.5, location=(x, -3, 0), rotation=(0, math.pi/4, 0))\n    leaf = bpy.context.object\n    leaf.name = f\"Leaf {i + 1}\"\n    leaf.data.materials.append(color2)\n\n# Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(-2, -3, -1))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(color2)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6110106013575214, "unit_n": 19, "param_ratio": 2.3157894736842106}
{"id": "4b8bfa7a-2777-407c-aba8-f7e65003455e", "name": "Drum Set", "instruction": "Let's create a drum set. Start with a bass drum at the center. Add a kick pedal in front of the bass drum.\n\nNext, place a snare drum to the left of the bass drum. Add two tom-toms above the bass drum, mounted on a stand.\n\nNow, add a floor tom to the right of the bass drum. Place a hi-hat stand with cymbals to the left of the snare drum.\n\nFinally, add a ride cymbal and a crash cymbal on stands to the right of the drum set.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_color = bpy.data.materials.new(name=\"DrumColor\")\ndrum_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\nmetal_color = bpy.data.materials.new(name=\"MetalColor\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Bass Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbass_drum = bpy.context.object\nbass_drum.name = \"Bass Drum\"\nbass_drum.data.materials.append(drum_color)\n\n# Step 3: Create the Kick Pedal\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.4, 0.05))\nkick_pedal = bpy.context.object\nkick_pedal.name = \"Kick Pedal\"\nkick_pedal.data.materials.append(metal_color)\n\n# Step 4: Create the Snare Drum\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(-0.7, 0, 0.2))\nsnare_drum = bpy.context.object\nsnare_drum.name = \"Snare Drum\"\nsnare_drum.data.materials.append(drum_color)\n\n# Step 5: Create the Tom-Toms\nfor i in range(2):\n    x = -0.2 + i * 0.4\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(x, 0.4, 0.5))\n    tom_tom = bpy.context.object\n    tom_tom.name = f\"Tom-Tom {i + 1}\"\n    tom_tom.data.materials.append(drum_color)\n\n# Step 6: Create the Floor Tom\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.15, location=(0.7, 0, 0.2))\nfloor_tom = bpy.context.object\nfloor_tom.name = \"Floor Tom\"\nfloor_tom.data.materials.append(drum_color)\n\n# Step 7: Create the Hi-Hat Stand with Cymbals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1, location=(-1, 0, 0.5))\nhi_hat_stand = bpy.context.object\nhi_hat_stand.name = \"Hi-Hat Stand\"\nhi_hat_stand.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.02, location=(-1, 0, 1))\nhi_hat_cymbal_top = bpy.context.object\nhi_hat_cymbal_top.name = \"Hi-Hat Cymbal Top\"\nhi_hat_cymbal_top.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.02, location=(-1, 0, 0.98))\nhi_hat_cymbal_bottom = bpy.context.object\nhi_hat_cymbal_bottom.name = \"Hi-Hat Cymbal Bottom\"\nhi_hat_cymbal_bottom.data.materials.append(metal_color)\n\n# Step 8: Create the Ride Cymbal Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(1, 0.5, 0.6))\nride_cymbal_stand = bpy.context.object\nride_cymbal_stand.name = \"Ride Cymbal Stand\"\nride_cymbal_stand.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.35, depth=0.02, location=(1, 0.5, 1.2))\nride_cymbal = bpy.context.object\nride_cymbal.name = \"Ride Cymbal\"\nride_cymbal.data.materials.append(metal_color)\n\n# Step 9: Create the Crash Cymbal Stand\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.2, location=(1, -0.5, 0.6))\ncrash_cymbal_stand = bpy.context.object\ncrash_cymbal_stand.name = \"Crash Cymbal Stand\"\ncrash_cymbal_stand.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(1, -0.5, 1.2))\ncrash_cymbal = bpy.context.object\ncrash_cymbal.name = \"Crash Cymbal\"\ncrash_cymbal.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.386682244039599, "unit_n": 13, "param_ratio": 5.3076923076923075}
{"id": "fb030a9e-37a0-4cbc-a597-a9b3c2b38b99", "name": "Smartphone", "instruction": "Imagine you are holding a brand new smartphone. Describe the feel of its sleek body and the smoothness of the touchscreen. Create a 3D model that captures this sense of modernity and sophistication.", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.05, 0.05, 0.05, 1)  # Very dark gray color\n\n# Step 2: Create the Body of the Smartphone\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Smartphone Body\"\nbody.scale = (0.4, 0.8, 0.02)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Screen of the Smartphone\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.021))\nscreen = bpy.context.object\nscreen.name = \"Smartphone Screen\"\nscreen.scale = (0.38, 0.78, 1)\nscreen.data.materials.append(screen_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.484906649788001, "unit_n": 2, "param_ratio": 9.0}
{"id": "6c7f5876-0a3d-48c3-8123-d6ed2d2a5446", "name": "Sandwich", "instruction": "Generate a 3D model of a sandwich. The sandwich should consist of two slices of bread with lettuce, tomato, cheese, and a slice of ham in between. The layers should be clearly visible, with the ingredients slightly overlapping each other. The top slice of bread should be slightly askew to show the contents inside.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.84, 0.0, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce\nbpy.ops.mesh.primitive_plane_add(size=2.1, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 0.45))\nham = bpy.context.object\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0.1, 0.1, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.rotation_euler[2] = 0.1  # Slightly askew\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.552211877616755, "unit_n": 6, "param_ratio": 8.5}
{"id": "61f0fe83-a475-46b0-8af4-9644bf3231cc", "name": "Espresso Tamper", "instruction": "Let's create a 3D model of an espresso tamper. The handle should be a simple, cylindrical shape, about 3 inches tall. The base should be flat and circular, with a diameter of 2 inches.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=3, location=(0, 0, 1.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.126180074374387, "unit_n": 2, "param_ratio": 5.0}
{"id": "2fd09398-8d0d-43c9-9d2e-ccfb2955ad73", "name": "Chess Board", "instruction": "Design a chess board. It should be a square with alternating black and white squares.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\n\nfor i in range(board_size):\n    for j in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n            \n# Step 3: Move the board to the center\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.transform.translate(value=(-3.5, -3.5, 0))\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 1, "param_ratio": 13.0}
{"id": "400a6396-ad40-4a8e-a262-6eab31d60413", "name": "Screwdriver", "instruction": "Envision a 3D model of a screwdriver. The screwdriver should have a long, thin shaft with a flat or Phillips head at the end. The handle should be ergonomic and easy to grip.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray metal color\nhandle_color = bpy.data.materials.new(name=\"Handle\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray handle color\n\n# Step 2: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(0, 0, 2.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Phillips Head (simplified as a cone for this example)\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0, 0, 0.1))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metal_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.066165304888272, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "0122d2c8-0b92-433e-8d97-d4f347d7230f", "name": "Umbrella", "instruction": "Please make a simple 3D model of an umbrella. It should have a collapsible shaft and a canopy with a manual open/close mechanism.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\ncanopy_color = bpy.data.materials.new(name=\"CanopyColor\")\ncanopy_color.diffuse_color = (0.1, 0.1, 0.8, 1)  # Dark blue color for the canopy\n\n# Step 2: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 3: Create the Canopy\nbpy.ops.mesh.primitive_cone_add(radius1=1, radius2=0, depth=0.5, location=(0, 0, 2.25))\ncanopy = bpy.context.object\ncanopy.name = \"Canopy\"\ncanopy.data.materials.append(canopy_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.3, location=(0, 0, -0.15))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(shaft_color)\n\n# Step 5: Create the Manual Open/Close Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.07, depth=0.2, location=(0, 0, 1.5))\nmechanism = bpy.context.object\nmechanism.name = \"Mechanism\"\nmechanism.data.materials.append(shaft_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.2193325888982174, "unit_n": 4, "param_ratio": 7.75}
{"id": "41190720-37af-4622-8782-02eb8e8508e6", "name": "Geometric Pattern", "instruction": "Create a geometric pattern. It should consist of repeating hexagons and triangles arranged in a symmetrical layout.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhex_color = bpy.data.materials.new(name=\"Hex Color\")\nhex_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\ntri_color = bpy.data.materials.new(name=\"Tri Color\")\ntri_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Medium red color\n\n# Function to create a hexagon\ndef create_hexagon(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=6, radius=1, fill_type='NGON', location=location)\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hex_color)\n\n# Function to create a triangle\ndef create_triangle(location):\n    bpy.ops.mesh.primitive_circle_add(vertices=3, radius=0.5, fill_type='NGON', location=location)\n    triangle = bpy.context.object\n    triangle.data.materials.append(tri_color)\n\n# Step 2: Create the pattern\nfor i in range(3):\n    for j in range(3):\n        x = i * 2\n        y = j * math.sqrt(3)\n        if (i + j) % 2 == 0:\n            create_hexagon((x, y, 0))\n        else:\n            create_triangle((x, y, 0))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.737669618283368, "unit_n": 2, "param_ratio": 8.0}
{"id": "fe7881ac-a1b8-4fdd-8d6c-b7e77aba3537", "name": "Power Adapter", "instruction": "Design a simple 3D power adapter with two USB ports and a compact form factor.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nadapter_color = bpy.data.materials.new(name=\"Adapter Color\")\nadapter_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\nusb_port_color = bpy.data.materials.new(name=\"USB Port Color\")\nusb_port_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Adapter Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nadapter_body = bpy.context.object\nadapter_body.name = \"Adapter Body\"\nadapter_body.scale = (1, 0.5, 0.3)\nadapter_body.data.materials.append(adapter_color)\n\n# Step 3: Create the USB Ports\nfor i in range(2):\n    x = -0.5 + i * 1.0\n    bpy.ops.mesh.primitive_cube_add(size=0.4, location=(x, 0.55, 0))\n    usb_port = bpy.context.object\n    usb_port.name = f\"USB Port {i + 1}\"\n    usb_port.scale = (0.5, 0.1, 0.2)\n    usb_port.data.materials.append(usb_port_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.947004770161298, "unit_n": 3, "param_ratio": 6.0}
{"id": "e2787295-1f6c-41b0-b685-0060016ce173", "name": "Wallpaper Pattern", "instruction": "Create a wallpaper pattern featuring geometric shapes. The design should include a mix of triangles, squares, and circles arranged in a repeating pattern. Use a limited color palette with contrasting colors to make the shapes stand out. The pattern should be seamless and suitable for covering large wall areas.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolor1 = bpy.data.materials.new(name=\"Color1\")\ncolor1.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red\ncolor2 = bpy.data.materials.new(name=\"Color2\")\ncolor2.diffuse_color = (0.1, 0.8, 0.1, 1)  # Green\ncolor3 = bpy.data.materials.new(name=\"Color3\")\ncolor3.diffuse_color = (0.1, 0.1, 0.8, 1)  # Blue\n\n# Function to create a triangle\ndef create_triangle(location, material):\n    bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=location)\n    triangle = bpy.context.object\n    triangle.data.materials.append(material)\n\n# Function to create a square\ndef create_square(location, material):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=location)\n    square = bpy.context.object\n    square.data.materials.append(material)\n\n# Function to create a circle\ndef create_circle(location, material):\n    bpy.ops.mesh.primitive_circle_add(radius=0.5, location=location, fill_type='NGON')\n    circle = bpy.context.object\n    circle.data.materials.append(material)\n\n# Create the repeating pattern\nfor i in range(3):\n    for j in range(3):\n        x = i * 2\n        y = j * 2\n        create_triangle((x, y, 0), color1)\n        create_square((x + 1, y, 0), color2)\n        create_circle((x + 0.5, y + 1, 0), color3)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.313036117120965, "unit_n": 3, "param_ratio": 7.0}
{"id": "427649ec-ceab-417d-a793-e6fe65614378", "name": "Power Supply Unit", "instruction": "Design a power supply unit. It should have a rectangular box shape with a fan on one side and multiple connectors on the opposite side for different types of cables.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\ngray_material = bpy.data.materials.new(name=\"Gray\")\ngray_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark black color\n\n# Step 2: Create the Main Box\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_box = bpy.context.object\nmain_box.scale = (1.5, 1, 0.5)\nmain_box.name = \"Main Box\"\nmain_box.data.materials.append(gray_material)\n\n# Step 3: Create the Fan\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.1, location=(0, -1.1, 0))\nfan = bpy.context.object\nfan.rotation_euler = (1.5708, 0, 0)  # Rotate to be on the side\nfan.name = \"Fan\"\nfan.data.materials.append(black_material)\n\n# Step 4: Create the Connectors\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.6 * (i - 1), 1.1, 0.1))\n    connector = bpy.context.object\n    connector.name = f\"Connector {i + 1}\"\n    connector.data.materials.append(black_material)", "color_brightness": "Dark", "verify": "human", "entropy": 3.572699568046943, "unit_n": 5, "param_ratio": 4.6}
{"id": "29806764-2af5-4900-8802-29af9948ac03", "name": "Wallpaper Design", "instruction": "Could you design a 3D model of a wallpaper pattern? It should feature a repeating geometric motif.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\npattern_color = bpy.data.materials.new(name=\"Pattern Color\")\npattern_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the geometric motif\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_cube_add(size=0.5, location=(i, j, 0))\n        cube = bpy.context.object\n        cube.name = f\"Cube_{i}_{j}\"\n        cube.data.materials.append(pattern_color)\n\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(i + 0.5, j + 0.5, 0))\n        sphere = bpy.context.object\n        sphere.name = f\"Sphere_{i}_{j}\"\n        sphere.data.materials.append(pattern_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.464361155823566, "unit_n": 50, "param_ratio": 0.26}
{"id": "8c0d83a6-8a61-4cad-90c9-be051aff17b5", "name": "Corporate Logo", "instruction": "Could you quickly generate a 3D model of a corporate logo that consists of three interlocking geometric shapes?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define colors for the geometric shapes\ncolor_1 = bpy.data.materials.new(name=\"Color 1\")\ncolor_1.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red\ncolor_2 = bpy.data.materials.new(name=\"Color 2\")\ncolor_2.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green\ncolor_3 = bpy.data.materials.new(name=\"Color 3\")\ncolor_3.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue\n\n# Create the first shape (Cube)\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nshape1 = bpy.context.object\nshape1.name = \"Shape 1\"\nshape1.data.materials.append(color_1)\n\n# Create the second shape (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0.8, 0.8, 0))\nshape2 = bpy.context.object\nshape2.name = \"Shape 2\"\nshape2.data.materials.append(color_2)\n\n# Create the third shape (Torus)\nbpy.ops.mesh.primitive_torus_add(location=(-0.8, -0.8, 0))\nshape3 = bpy.context.object\nshape3.name = \"Shape 3\"\nshape3.data.materials.append(color_3)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.345662480543195, "unit_n": 3, "param_ratio": 8.666666666666666}
{"id": "e72c21a5-8a0e-4666-8d8a-fd8b66e1992f", "name": "Generator", "instruction": "Design a generator with a cylindrical body.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Generator Body\"\n\n# Step 3: Assign a Material to the Body\nmaterial = bpy.data.materials.new(name=\"Generator Material\")\nmaterial.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nbody.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "74cca014-6d5c-45d9-94b5-5f54f4045a6f", "name": "Bird Feeder", "instruction": "Create a bird feeder with a cylindrical shape. It should have a perch and a small roof to protect the seeds.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metal color\n\n# Step 2: Create the Feeder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(0, 0, 0.3))\nfeeder_body = bpy.context.object\nfeeder_body.name = \"Feeder Body\"\nfeeder_body.data.materials.append(wood_color)\n\n# Step 3: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.35, depth=0.2, location=(0, 0, 0.7))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(metal_color)\n\n# Step 4: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.4, location=(0.3, 0, 0.1), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\nperch.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6835134097093416, "unit_n": 3, "param_ratio": 9.333333333333334}
{"id": "0154ab9a-c41c-4bfa-8837-c4bfe31f739d", "name": "Drum", "instruction": "Can you make a 3D model of a drum? Focus on the shape and structure, including the drumhead and body.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, 0.75))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 10.0}
{"id": "9228984d-244a-4583-948b-ee6de997f05a", "name": "Coffee Pot", "instruction": "Design a coffee pot with a round base and a spout. Include a handle on one side and a lid on top.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npot_color = bpy.data.materials.new(name=\"PotColor\")\npot_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Medium brown color\n\n# Step 2: Create the Base of the Coffee Pot\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pot_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(1.2, 0, 1.5), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(pot_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.1, location=(-1.2, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(pot_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(pot_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.825094979751954, "unit_n": 4, "param_ratio": 7.5}
{"id": "98e5160f-0cf8-418c-be18-f8ec57bed1a1", "name": "Pizza", "instruction": "Visualize a classic pizza with a circular shape, about 14 inches in diameter. The crust should be slightly raised, and the surface should display an even distribution of pepperoni slices.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.35, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for pepperoni\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1778, depth=0.02, location=(0, 0, 0))  # 14 inches in diameter (0.1778 meters)\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(cheese_color)\n\n# Step 3: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1778, depth=0.02, location=(0, 0, 0.01))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.scale[0] = 1.05\ncrust.scale[1] = 1.05\ncrust.scale[2] = 0.1\nbpy.ops.object.transform_apply(scale=True)\ncrust.data.materials.append(crust_color)\n\n# Step 4: Create Pepperoni Slices\npepperoni_radius = 0.02  # Approximate radius for pepperoni slices\npepperoni_positions = [\n    (0.05, 0.05), (-0.05, 0.05), (0.05, -0.05), (-0.05, -0.05),\n    (0.1, 0), (-0.1, 0), (0, 0.1), (0, -0.1),\n    (0.1, 0.1), (-0.1, 0.1), (0.1, -0.1), (-0.1, -0.1)\n]\n\nfor pos in pepperoni_positions:\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.005, location=(pos[0], pos[1], 0.015))\n    pepperoni = bpy.context.object\n    pepperoni.name = \"Pepperoni\"\n    pepperoni.data.materials.append(pepperoni_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.793447538177533, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "a504cbaf-3447-4160-be3b-1f2e37b8fecc", "name": "Screwdriver", "instruction": "Create a 3D model of a screwdriver. It should have a long, slender shaft and a handle for grip.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nshaft_color = bpy.data.materials.new(name=\"Shaft Color\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the shaft\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the handle\n\n# Step 2: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 1))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.6, location=(0, 0, 2.3))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.212823471944381, "unit_n": 2, "param_ratio": 10.0}
{"id": "1f501812-837b-4f9c-8704-a005c4bb2d96", "name": "Dog Bed", "instruction": "Could you create a dog bed that is round with raised edges? The bed should be large enough for a medium-sized dog to curl up in. Add a removable cushion in the center.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(0, 0, 0.2))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Removable Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.15, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.62013642412378, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "9d1d3458-4bb9-4b5f-95d1-fe44c181db9d", "name": "Flute", "instruction": "Create a 3D model of a flute. The flute should be a long, slender tube with multiple finger holes along its length.", "category": "Musical instruments", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Flute Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\nflute_body = bpy.context.object\nflute_body.name = \"Flute Body\"\n\n# Step 3: Create the Finger Holes\nhole_distance = 0.3\nfor i in range(6):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.1, location=(0, 0, -0.9 + i * hole_distance), rotation=(1.5708, 0, 0))\n    finger_hole = bpy.context.object\n    finger_hole.name = f\"Finger Hole {i + 1}\"\n\n    # Boolean modifier to create the holes in the flute body\n    mod_bool = flute_body.modifiers.new(name=f\"Boolean {i + 1}\", type='BOOLEAN')\n    mod_bool.operation = 'DIFFERENCE'\n    mod_bool.object = finger_hole\n    bpy.context.view_layer.objects.active = flute_body\n    bpy.ops.object.modifier_apply(modifier=mod_bool.name)\n    bpy.data.objects.remove(finger_hole)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.901046613051714, "unit_n": 7, "param_ratio": 1.8571428571428572}
{"id": "87b68734-e00f-4f56-9af4-410795442be1", "name": "Desk Lamp", "instruction": "Compare a desk lamp with a floor lamp.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlamp_base_color = bpy.data.materials.new(name=\"Lamp Base Color\")\nlamp_base_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlamp_shade_color = bpy.data.materials.new(name=\"Lamp Shade Color\")\nlamp_shade_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Desk Lamp\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, 0.01))\ndesk_lamp_base = bpy.context.object\ndesk_lamp_base.name = \"Desk Lamp Base\"\ndesk_lamp_base.data.materials.append(lamp_base_color)\n\n# Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.3, location=(0, 0, 0.16))\ndesk_lamp_pole = bpy.context.object\ndesk_lamp_pole.name = \"Desk Lamp Pole\"\ndesk_lamp_pole.data.materials.append(lamp_base_color)\n\n# Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.1, radius2=0.05, depth=0.15, location=(0, 0, 0.38))\ndesk_lamp_shade = bpy.context.object\ndesk_lamp_shade.name = \"Desk Lamp Shade\"\ndesk_lamp_shade.data.materials.append(lamp_shade_color)\n\n# Step 3: Create the Floor Lamp\n# Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(1, 0, 0.01))\nfloor_lamp_base = bpy.context.object\nfloor_lamp_base.name = \"Floor Lamp Base\"\nfloor_lamp_base.data.materials.append(lamp_base_color)\n\n# Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=1.5, location=(1, 0, 0.76))\nfloor_lamp_pole = bpy.context.object\nfloor_lamp_pole.name = \"Floor Lamp Pole\"\nfloor_lamp_pole.data.materials.append(lamp_base_color)\n\n# Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.2, radius2=0.1, depth=0.3, location=(1, 0, 1.61))\nfloor_lamp_shade = bpy.context.object\nfloor_lamp_shade.name = \"Floor Lamp Shade\"\nfloor_lamp_shade.data.materials.append(lamp_shade_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.015490664440334, "unit_n": 6, "param_ratio": 7.0}
{"id": "42484a58-f40f-446f-af24-b30b3fc4808c", "name": "Sandwich", "instruction": "Can you create a sandwich with layers of lettuce, tomato, cheese, and ham, showing it cut in half?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.85, 0.1, 1)  # Yellow color\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.9, 0.5, 0.5, 1)  # Pink color\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\n\n# Step 2: Create the Bottom Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.05\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)\n\n# Step 8: Cut the Sandwich in Half\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.duplicate()\nbpy.ops.transform.translate(value=(1, 0, 0))\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.origin_set(type='ORIGIN_GEOMETRY', center='BOUNDS')\nbpy.ops.transform.resize(value=(0.5, 1, 1))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.10225007109454, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "81a9c6db-b464-449b-a1c7-d0fd7f7ea1de", "name": "Coffee Grinder", "instruction": "Can you design a 3D model of a coffee grinder? Compare it to a hand-crank grinder, but make it electric with a simple on/off switch.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark plastic color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(plastic)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 1.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(plastic)\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.9, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(plastic)\n", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.723484379674705, "unit_n": 4, "param_ratio": 7.25}
{"id": "3f85fad1-d163-4447-b092-9429df0684e6", "name": "Thermometer", "instruction": "Create a 3D model of a thermometer. It should have a long, narrow body with a digital display on the front. There should be a small button below the display to turn it on and off.", "category": "Foodstuffs", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndisplay_color = bpy.data.materials.new(name=\"Display Color\")\ndisplay_color.diffuse_color = (0, 0, 0, 1)  # Black color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Display\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.12, 0.5))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.scale[1] = 0.05  # Make it flat\ndisplay.data.materials.append(display_color)\n\n# Step 4: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(0, 0.12, 0.3))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(button_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9286985699404307, "unit_n": 3, "param_ratio": 9.666666666666666}
{"id": "9d1dac42-50af-4771-8312-834ca7ec2d9e", "name": "Power Generator", "instruction": "Design a power generator. It should have a rectangular base, a cylindrical body, and a control panel on one side. The top should feature a handle for portability.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1.5, 1, 0.2)\n\n# Step 3: Create the Cylindrical Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.25, 0, 0))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (0.2, 0.5, 0.5)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(0, 0, 1.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to stand vertically\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4113333508381776, "unit_n": 4, "param_ratio": 4.5}
{"id": "357ab744-5fbd-4988-ac4d-104ac7180342", "name": "Desk Organizer", "instruction": "Create a 3D model of a desk organizer. It should have compartments for pens, papers, and a slot for a phone. Ensure it is rectangular and functional for office use.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\nplastic = bpy.data.materials.new(name=\"Plastic\")\nplastic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray plastic color\n\n# Step 2: Create the base of the desk organizer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.5, 0.1)  # Rectangular base\nbase.data.materials.append(plastic)\n\n# Step 3: Create the pen compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.75, 0, 0.55))\npen_compartment = bpy.context.object\npen_compartment.name = \"Pen Compartment\"\npen_compartment.scale = (0.2, 0.4, 0.5)  # Tall, narrow compartment for pens\npen_compartment.data.materials.append(plastic)\n\n# Step 4: Create the paper compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.25, 0, 0.3))\npaper_compartment = bpy.context.object\npaper_compartment.name = \"Paper Compartment\"\npaper_compartment.scale = (0.4, 0.4, 0.3)  # Wider, shorter compartment for papers\npaper_compartment.data.materials.append(plastic)\n\n# Step 5: Create the phone slot\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.75, 0, 0.4))\nphone_slot = bpy.context.object\nphone_slot.name = \"Phone Slot\"\nphone_slot.scale = (0.1, 0.4, 0.2)  # Narrow slot for phone\nphone_slot.data.materials.append(plastic)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 5.25}
{"id": "420afcc8-3b32-4e16-a929-1a25bf0211b3", "name": "Chair vs. Stool", "instruction": "Create a 3D model comparing a chair and a stool. The chair should have a backrest and four legs, while the stool should have three legs and no backrest. Place both side by side.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Chair\n\n# Chair Legs\nfor i in range(4):\n    x = 0.7 * (i % 2) - 0.35\n    y = 0.7 * (i // 2) - 0.35\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.9, location=(x, y, -0.45))\n    leg = bpy.context.object\n    leg.name = f\"Chair Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Chair Seat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nseat = bpy.context.object\nseat.name = \"Chair Seat\"\nseat.data.materials.append(wood_color)\n\n# Chair Backrest\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, -0.5, 0.45))\nbackrest = bpy.context.object\nbackrest.scale = (0.5, 0.05, 0.45)\nbackrest.name = \"Chair Backrest\"\nbackrest.data.materials.append(wood_color)\n\n# Step 3: Create the Stool\n\n# Stool Legs\nfor i in range(3):\n    angle = i * (2 * math.pi / 3)\n    x = 0.35 * math.cos(angle) + 2  # Shift stool to the right\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.9, location=(x, y, -0.45))\n    leg = bpy.context.object\n    leg.name = f\"Stool Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Stool Seat\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(2, 0, 0))\nseat = bpy.context.object\nseat.name = \"Stool Seat\"\nseat.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.6585691310174413, "unit_n": 10, "param_ratio": 2.9}
{"id": "499bd42c-bf8c-4783-8604-2dcdf289086e", "name": "Bookshelf", "instruction": "Let's design a 3D model of a bookshelf. The bookshelf should have five shelves, evenly spaced. Place a few books on each shelf, some standing upright and others lying flat. Add a couple of small decorative items, like a photo frame and a small plant, on the top shelf.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define materials\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color for the bookshelf\n\nbook_material = bpy.data.materials.new(name=\"Book\")\nbook_material.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for books\n\nphoto_frame_material = bpy.data.materials.new(name=\"Photo Frame\")\nphoto_frame_material.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color for photo frame\n\nplant_pot_material = bpy.data.materials.new(name=\"Plant Pot\")\nplant_pot_material.diffuse_color = (0.2, 0.6, 0.2, 1)  # Green color for plant pot\n\n# Step 2: Create the Bookshelf\nshelf_height = 2.0\nshelf_width = 1.0\nshelf_depth = 0.3\nnum_shelves = 5\nshelf_thickness = 0.05\n\n# Create the sides\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-shelf_width/2, 0, shelf_height/2))\nleft_side = bpy.context.object\nleft_side.scale = (shelf_thickness, shelf_depth, shelf_height)\nleft_side.data.materials.append(wood_material)\n\nbpy.ops.mesh.primitive_cube_add(size=1, location=(shelf_width/2, 0, shelf_height/2))\nright_side = bpy.context.object\nright_side.scale = (shelf_thickness, shelf_depth, shelf_height)\nright_side.data.materials.append(wood_material)\n\n# Create the shelves\nfor i in range(num_shelves):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, (i + 0.5) * (shelf_height / num_shelves)))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width, shelf_depth, shelf_thickness)\n    shelf.data.materials.append(wood_material)\n\n# Step 3: Add Books\ndef add_book(location, rotation=(0, 0, 0)):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location, rotation=rotation)\n    book = bpy.context.object\n    book.scale = (0.1, 0.2, 0.3)\n    book.data.materials.append(book_material)\n\n# Books on each shelf\nfor i in range(num_shelves):\n    z = (i + 0.5) * (shelf_height / num_shelves)\n    add_book(location=(-0.3, 0.1, z))\n    add_book(location=(0, 0.1, z), rotation=(0, 0, 1.57))\n    add_book(location=(0.3, 0.1, z))\n\n# Step 4: Add Decorative Items\n# Photo Frame\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(-0.3, 0.15, shelf_height - 0.1))\nphoto_frame = bpy.context.object\nphoto_frame.data.materials.append(photo_frame_material)\n\n# Plant Pot\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0.3, 0.15, shelf_height - 0.1))\nplant_pot = bpy.context.object\nplant_pot.data.materials.append(plant_pot_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.062511005640987, "unit_n": 6, "param_ratio": 7.0}
{"id": "3fa39b26-1f1c-435a-b178-a1ec3438e6c7", "name": "Stapler", "instruction": "Design a 3D model of a stapler. The stapler should have a lever for pressing down and a slot for inserting staples. Add a small compartment at the bottom for storing extra staples.", "category": "Tools and hardware", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal_gray = bpy.data.materials.new(name=\"Metal Gray\")\nmetal_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metal gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 0.3, 0.1)\nbase.data.materials.append(metal_gray)\n\n# Step 3: Create the Lever\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nlever = bpy.context.object\nlever.name = \"Lever\"\nlever.scale = (1, 0.25, 0.1)\nlever.rotation_euler = (0, 0, 0.1)  # Slightly tilted\nlever.data.materials.append(black)\n\n# Step 4: Create the Slot for Staples\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.7))\nslot = bpy.context.object\nslot.name = \"Slot\"\nslot.scale = (0.8, 0.2, 0.05)\nslot.data.materials.append(metal_gray)\n\n# Step 5: Create the Compartment for Extra Staples\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.4, 0.25))\ncompartment = bpy.context.object\ncompartment.name = \"Compartment\"\ncompartment.scale = (0.6, 0.2, 0.05)\ncompartment.data.materials.append(black)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 6.5}
{"id": "caae2534-b4ce-4b7c-ab9d-fc5210b2627c", "name": "Sofa vs. Loveseat", "instruction": "Design a 3D model comparing a sofa and a loveseat. The sofa should seat three people, while the loveseat should seat two.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium dark red color\n\nloveseat_color = bpy.data.materials.new(name=\"Loveseat Color\")\nloveseat_color.diffuse_color = (0.2, 0.5, 0.2, 1)  # Medium dark green color\n\n# Step 2: Create the Sofa (3-seater)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nsofa_base = bpy.context.object\nsofa_base.scale = (1.5, 0.5, 0.25)\nsofa_base.name = \"Sofa Base\"\nsofa_base.data.materials.append(sofa_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1))\nsofa_back = bpy.context.object\nsofa_back.scale = (1.5, 0.1, 0.5)\nsofa_back.name = \"Sofa Back\"\nsofa_back.data.materials.append(sofa_color)\n\n# Step 3: Create the Loveseat (2-seater)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(4, 0, 0.5))\nloveseat_base = bpy.context.object\nloveseat_base.scale = (1, 0.5, 0.25)\nloveseat_base.name = \"Loveseat Base\"\nloveseat_base.data.materials.append(loveseat_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(4, -0.75, 1))\nloveseat_back = bpy.context.object\nloveseat_back.scale = (1, 0.1, 0.5)\nloveseat_back.name = \"Loveseat Back\"\nloveseat_back.data.materials.append(loveseat_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.4657359027997265, "unit_n": 4, "param_ratio": 6.5}
{"id": "bbdd978f-7075-4fdc-9629-61466e3286f9", "name": "Apple", "instruction": "Could you make a 3D apple for me? Thanks!", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\n\n# Define the apple color\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple_body.data.materials.append(apple_material)\n\n# Step 3: Create the Apple Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\n\n# Define the stem color\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "75a1cde4-f417-46cf-9f5c-6dddd52eaa24", "name": "Pencil", "instruction": "Could you create a 3D model of a pencil? It should be a standard hexagonal pencil with an eraser on one end.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Pink color for eraser\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metallic color for ferrule\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.1, depth=2, location=(0, 0, 1))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(yellow)\n\n# Step 3: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.1, depth=0.2, location=(0, 0, 2.1))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)\n\n# Step 4: Create the Ferrule\nbpy.ops.mesh.primitive_cylinder_add(vertices=32, radius=0.11, depth=0.1, location=(0, 0, 2))\nferrule = bpy.context.object\nferrule.name = \"Ferrule\"\nferrule.data.materials.append(metallic)\n\n# Step 5: Create the Pencil Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.1, radius2=0, depth=0.2, location=(0, 0, 0))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(yellow)", "color_brightness": "Bright", "verify": "human", "entropy": 4.340225768918098, "unit_n": 4, "param_ratio": 10.0}
{"id": "3cea0992-540f-4f8b-be97-edf082bbfadb", "name": "Power Strip", "instruction": "Can you design a power strip? It should have a rectangular base with six outlets and a power switch.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"BaseColor\")\nbase_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\noutlet_color = bpy.data.materials.new(name=\"OutletColor\")\noutlet_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.scale = (2, 0.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Outlets\nfor i in range(6):\n    x = -1.5 + i * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(x, 0, 0.1))\n    outlet = bpy.context.object\n    outlet.scale = (0.3, 0.1, 0.05)\n    outlet.name = f\"Outlet {i + 1}\"\n    outlet.data.materials.append(outlet_color)\n\n# Step 4: Create the Power Switch\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(1.8, 0, 0.1))\npower_switch = bpy.context.object\npower_switch.scale = (0.2, 0.1, 0.05)\npower_switch.name = \"Power Switch\"\npower_switch.data.materials.append(switch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.639022697939713, "unit_n": 8, "param_ratio": 3.375}
{"id": "55cd2844-b1aa-4dfb-8f26-b54e437ff1fc", "name": "Workbench", "instruction": "Design a workbench with a large, flat surface and sturdy legs. Add a lower shelf for storage and ensure there are no additional features.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Workbench Surface\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nsurface = bpy.context.object\nsurface.name = \"Workbench Surface\"\nsurface.scale[2] = 0.1  # Make it flat\nsurface.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_positions = [(-0.9, -0.9, 0.5), (0.9, -0.9, 0.5), (-0.9, 0.9, 0.5), (0.9, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 5  # Make it tall\n    leg.data.materials.append(wood_color)\n\n# Step 4: Create the Lower Shelf\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.25))\nshelf = bpy.context.object\nshelf.name = \"Lower Shelf\"\nshelf.scale[2] = 0.05  # Make it flat\nshelf.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.8314802400679735, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "a21f11ee-f418-45bb-b2b9-85675ed5fd7b", "name": "Desk Organizer", "instruction": "How would you design a desk organizer that keeps pens, pencils, and small office supplies neatly arranged?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make the base thinner\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Pen Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(-0.6, 0, 1))\npen_holder = bpy.context.object\npen_holder.name = \"Pen Holder\"\npen_holder.data.materials.append(wood_color)\n\n# Step 4: Create the Pencil Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 1))\npencil_holder = bpy.context.object\npencil_holder.name = \"Pencil Holder\"\npencil_holder.data.materials.append(wood_color)\n\n# Step 5: Create the Small Supplies Holder\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0.6, 0, 0.75))\nsupplies_holder = bpy.context.object\nsupplies_holder.name = \"Supplies Holder\"\nsupplies_holder.scale[2] = 0.5  # Make it shorter\nsupplies_holder.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1179394966234852, "unit_n": 4, "param_ratio": 5.75}
{"id": "90f36091-b784-4a0c-accf-252bcfab21a4", "name": "Apple", "instruction": "Create a 3D model of an apple. The apple should be round and about 3 inches in diameter. It should have a small stem at the top and a leaf attached to the stem.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (1, 0, 0, 1)  # Red color\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nleaf_green = bpy.data.materials.new(name=\"Leaf Green\")\nleaf_green.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\n\n# Step 2: Create the Apple (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.5, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem (Cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 1.75))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)\n\n# Step 4: Create the Leaf (Plane)\nbpy.ops.mesh.primitive_plane_add(size=0.6, location=(0.3, 0, 1.9))\nleaf = bpy.context.object\nleaf.name = \"Leaf\"\nleaf.data.materials.append(leaf_green)\n\n# Rotate and shape the leaf\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.rotate(value=math.radians(45), orient_axis='X')\nbpy.ops.object.mode_set(mode='OBJECT')\nbpy.ops.object.modifier_add(type='SUBSURF')\nbpy.ops.object.shade_smooth()\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1, 0.5, 0.1))\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.31760600506477, "unit_n": 4, "param_ratio": 7.25}
{"id": "d133a9a1-0c30-43f0-af0f-70ed5f70d1fa", "name": "Birthday Cake", "instruction": "Begin with a round base layer, about 10 inches in diameter. Stack a slightly smaller layer on top, followed by an even smaller top layer. Add a border around each layer's edge. On the top layer, place a set of candles. Around the sides, add small decorative elements.", "category": "Musical instruments", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (1, 0.8, 0.6, 1)  # Light beige color\nborder_color = bpy.data.materials.new(name=\"Border Color\")\nborder_color.diffuse_color = (0.8, 0.5, 0.2, 1)  # Brown color\ncandle_color = bpy.data.materials.new(name=\"Candle Color\")\ncandle_color.diffuse_color = (1, 1, 0.8, 1)  # Light yellow color\ndecor_color = bpy.data.materials.new(name=\"Decor Color\")\ndecor_color.diffuse_color = (0.5, 0.2, 0.8, 1)  # Purple color\n\n# Step 2: Create the Base Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=1, location=(0, 0, 0))\nbase_layer = bpy.context.object\nbase_layer.name = \"Base Layer\"\nbase_layer.data.materials.append(base_color)\n\n# Step 3: Create the Middle Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=4, depth=1, location=(0, 0, 1))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(base_color)\n\n# Step 4: Create the Top Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=1, location=(0, 0, 2))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(base_color)\n\n# Step 5: Add Borders\nfor i, radius in enumerate([5, 4, 3]):\n    bpy.ops.mesh.primitive_torus_add(major_radius=radius, minor_radius=0.1, location=(0, 0, i + 0.5))\n    border = bpy.context.object\n    border.name = f\"Border {i + 1}\"\n    border.data.materials.append(border_color)\n\n# Step 6: Add Candles on Top Layer\nfor i in range(5):\n    angle = i * (2 * 3.14159 / 5)\n    x = 2.5 * math.cos(angle)\n    y = 2.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=1, location=(x, y, 3))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n\n# Step 7: Add Decorative Elements\nfor i in range(10):\n    angle = i * (2 * 3.14159 / 10)\n    x = 5.5 * math.cos(angle)\n    y = 5.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(x, y, 0.5))\n    decor = bpy.context.object\n    decor.name = f\"Decor {i + 1}\"\n    decor.data.materials.append(decor_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.901692020756088, "unit_n": 19, "param_ratio": 2.526315789473684}
{"id": "648af593-6000-4cce-aad9-482b46d987cd", "name": "Drum", "instruction": "Create a 3D model of a drum with a cylindrical body and drumheads on both ends. Add some decorative elements around the body.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color for the drum body\nhead_color = bpy.data.materials.new(name=\"Head Color\")\nhead_color.diffuse_color = (1, 1, 1, 1)  # White color for the drumheads\ndecor_color = bpy.data.materials.new(name=\"Decor Color\")\ndecor_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for decorative elements\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(body_color)\n\n# Step 3: Create the Drumheads\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 1.05))\ndrumhead_top = bpy.context.object\ndrumhead_top.name = \"Drumhead Top\"\ndrumhead_top.data.materials.append(head_color)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, -1.05))\ndrumhead_bottom = bpy.context.object\ndrumhead_bottom.name = \"Drumhead Bottom\"\ndrumhead_bottom.data.materials.append(head_color)\n\n# Step 4: Add Decorative Elements\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 0.5))\n    decor = bpy.context.object\n    decor.name = f\"Decor {i + 1}\"\n    decor.data.materials.append(decor_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.158036143773526, "unit_n": 11, "param_ratio": 3.090909090909091}
{"id": "456c52af-77ab-4885-862f-cf103572c9c1", "name": "Sofa", "instruction": "Construct a sofa with three cushions on the seat and a backrest. Add armrests on both sides and four legs for support.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # A brown color for the sofa\n\n# Step 2: Create the Legs\nleg_height = 0.3\nleg_radius = 0.05\nfor i in range(4):\n    x = 1 * (i % 2) - 0.5\n    y = 0.5 * (i // 2) - 0.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=(x, y, -leg_height / 2))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(sofa_color)\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.scale[0] = 1\nbase.scale[1] = 0.5\nbase.scale[2] = 0.1\nbase.name = \"Base\"\nbase.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.45, 0.5))\nbackrest = bpy.context.object\nbackrest.scale[0] = 1\nbackrest.scale[1] = 0.1\nbackrest.scale[2] = 0.5\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = 0.95 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.3))\n    armrest = bpy.context.object\n    armrest.scale[0] = 0.1\n    armrest.scale[1] = 0.5\n    armrest.scale[2] = 0.4\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_color)\n\n# Step 6: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.25))\n    cushion = bpy.context.object\n    cushion.scale[0] = 0.3\n    cushion.scale[1] = 0.45\n    cushion.scale[2] = 0.1\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.573209477710657, "unit_n": 11, "param_ratio": 2.1818181818181817}
{"id": "f1fa00db-43cb-48f2-adf7-743a5912edbc", "name": "Coffee Grinder", "instruction": "Could you create a coffee grinder with a hopper on top, a grinding mechanism, and a container at the bottom?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nglass = bpy.data.materials.new(name=\"Glass\")\nglass.diffuse_color = (0.7, 0.7, 0.7, 0.5)  # Semi-transparent glass color\n\n# Step 2: Create the Hopper\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, radius2=0.1, depth=0.6, location=(0, 0, 1.3))\nhopper = bpy.context.object\nhopper.name = \"Hopper\"\nhopper.data.materials.append(glass)\n\n# Step 3: Create the Grinding Mechanism\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.4, location=(0, 0, 0.8))\ngrinding_mechanism = bpy.context.object\ngrinding_mechanism.name = \"Grinding Mechanism\"\ngrinding_mechanism.data.materials.append(metal)\n\n# Step 4: Create the Container\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.6, location=(0, 0, 0.3))\ncontainer = bpy.context.object\ncontainer.name = \"Container\"\ncontainer.data.materials.append(glass)", "color_brightness": "Bright", "verify": "human", "entropy": 4.771548880960564, "unit_n": 3, "param_ratio": 9.0}
{"id": "2e44a674-7f49-4155-9bec-b610277218f6", "name": "Birthday Cake", "instruction": "Create a 3D model of a birthday cake. The cake should be two-tiered with smooth frosting. Add a few candles on the top tier and some simple decorations around the sides. The bottom tier should be larger than the top tier, and both tiers should be circular. The top tier should have five candles evenly spaced around the edge. The sides of both tiers should have simple, evenly spaced decorations like dots or small shapes. The cake should be placed on a round cake board.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nfrosting_color = bpy.data.materials.new(name=\"Frosting\")\nfrosting_color.diffuse_color = (1, 0.8, 0.8, 1)  # Light pink color\ncandle_color = bpy.data.materials.new(name=\"Candle\")\ncandle_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\nflame_color = bpy.data.materials.new(name=\"Flame\")\nflame_color.diffuse_color = (1, 0.5, 0, 1)  # Orange color\ndecoration_color = bpy.data.materials.new(name=\"Decoration\")\ndecoration_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nboard_color = bpy.data.materials.new(name=\"Board\")\nboard_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Cake Board\nbpy.ops.mesh.primitive_cylinder_add(radius=2.5, depth=0.1, location=(0, 0, -0.05))\nboard = bpy.context.object\nboard.name = \"Cake Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0.5))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"Bottom Tier\"\nbottom_tier.data.materials.append(frosting_color)\n\n# Step 4: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.8, location=(0, 0, 1.4))\ntop_tier = bpy.context.object\ntop_tier.name = \"Top Tier\"\ntop_tier.data.materials.append(frosting_color)\n\n# Step 5: Create the Candles\nimport math\nfor i in range(5):\n    angle = i * (2 * math.pi / 5)\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, y, 1.8))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(candle_color)\n    \n    # Create the flame\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 2.05))\n    flame = bpy.context.object\n    flame.name = f\"Flame {i + 1}\"\n    flame.data.materials.append(flame_color)\n\n# Step 6: Create the Decorations\nfor i in range(12):\n    angle = i * (2 * math.pi / 12)\n    x = 2 * math.cos(angle)\n    y = 2 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.5))\n    decoration = bpy.context.object\n    decoration.name = f\"Bottom Decoration {i + 1}\"\n    decoration.data.materials.append(decoration_color)\n\nfor i in range(8):\n    angle = i * (2 * math.pi / 8)\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 1.4))\n    decoration = bpy.context.object\n    decoration.name = f\"Top Decoration {i + 1}\"\n    decoration.data.materials.append(decoration_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.480741375273289, "unit_n": 33, "param_ratio": 1.7272727272727273}
{"id": "b1123c1f-a999-460d-ac10-747d0cf8f07a", "name": "Hat", "instruction": "Create a hat with a round crown and a short brim.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358369883281068, "unit_n": 2, "param_ratio": 7.0}
{"id": "8b2cfa30-5a79-4c4b-97a6-94d1ba767c66", "name": "Hat", "instruction": "Create a 3D model of a wide-brimmed hat. The hat should have a round crown and a wide, flat brim extending all around. The color should be a neutral shade.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nneutral_color = bpy.data.materials.new(name=\"Neutral Color\")\nneutral_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Neutral gray color\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(neutral_color)\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(neutral_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.492695588688132, "unit_n": 2, "param_ratio": 7.0}
{"id": "95cfac50-21ef-4b11-841d-f25f8f64e9bd", "name": "Vintage Radio", "instruction": "Could you create a 3D model of a vintage radio? The design should reflect the 1950s era with a rectangular body, large dials on the front for tuning and volume, and a mesh section where the speaker is located.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ndial_color = bpy.data.materials.new(name=\"Dial Color\")\ndial_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nmesh_color = bpy.data.materials.new(name=\"Mesh Color\")\nmesh_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Radio Body\"\nbody.scale = (1.5, 0.5, 0.8)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Dials\n# Tuning Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(-0.7, 0.51, 0.3))\ntuning_dial = bpy.context.object\ntuning_dial.name = \"Tuning Dial\"\ntuning_dial.rotation_euler = (1.5708, 0, 0)\ntuning_dial.data.materials.append(dial_color)\n\n# Volume Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(-0.7, 0.51, -0.3))\nvolume_dial = bpy.context.object\nvolume_dial.name = \"Volume Dial\"\nvolume_dial.rotation_euler = (1.5708, 0, 0)\nvolume_dial.data.materials.append(dial_color)\n\n# Step 4: Create the Speaker Mesh\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.5, 0.51, 0))\nspeaker_mesh = bpy.context.object\nspeaker_mesh.name = \"Speaker Mesh\"\nspeaker_mesh.scale = (0.8, 0.05, 0.6)\nspeaker_mesh.data.materials.append(mesh_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2187001587576, "unit_n": 4, "param_ratio": 8.25}
{"id": "703e8e19-8b97-43f9-b3c6-db9bb8ba7c24", "name": "Coffee Table", "instruction": "Create a 3D model of a coffee table. The table should have a rectangular top surface and four legs. Ensure the height is suitable for use in a living room setting. The design should be simple and functional, with enough space underneath for storage. Consider the proportions and stability of the table to ensure it fits well with standard seating arrangements.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntable_top = bpy.context.object\ntable_top.scale[0] = 1.5  # Length\ntable_top.scale[1] = 0.75  # Width\ntable_top.scale[2] = 0.05  # Thickness\ntable_top.name = \"Table Top\"\ntable_top.data.materials.append(wood_color)\n\n# Step 3: Create the Legs\nleg_height = 0.45\nleg_radius = 0.05\npositions = [(1.4, 0.7, leg_height / 2), (-1.4, 0.7, leg_height / 2), (1.4, -0.7, leg_height / 2), (-1.4, -0.7, leg_height / 2)]\n\nfor i, pos in enumerate(positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=leg_height, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.147338521055633, "unit_n": 2, "param_ratio": 4.5}
{"id": "14529b35-6e05-4fd6-ba87-5f25b3013d5b", "name": "Eraser", "instruction": "Generate an eraser for me.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\neraser_color = bpy.data.materials.new(name=\"Eraser Color\")\neraser_color.diffuse_color = (0.8, 0.4, 0.4, 1)  # Light red color\n\n# Step 2: Create the Eraser\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.scale = (2, 1, 0.5)  # Scale to make it rectangular\neraser.data.materials.append(eraser_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 1, "param_ratio": 9.0}
{"id": "0d07c04b-c9e4-47bf-b805-8a32473aca63", "name": "Hat", "instruction": "Design a 3D model of a hat that can be used for both casual and formal occasions. The hat should have a wide brim and a simple band around the base of the crown. Include small details like stitching on the brim and a subtle logo on the band.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nband_color = bpy.data.materials.new(name=\"BandColor\")\nband_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Slightly lighter gray color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 0.55))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 1))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)\n\n# Step 5: Add Stitching Details on the Brim\nfor i in range(12):\n    angle = i * (360 / 12)\n    x = 1.5 * math.cos(math.radians(angle))\n    y = 1.5 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, y, 0.05), rotation=(0, 0, math.radians(angle)))\n    stitch = bpy.context.object\n    stitch.name = f\"Stitch {i + 1}\"\n    stitch.data.materials.append(hat_color)\n\n# Step 6: Add a Subtle Logo on the Band\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0.8, 0, 1.05))\nlogo = bpy.context.object\nlogo.name = \"Logo\"\nlogo.data.materials.append(band_color)\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.02)})\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.9820369489858334, "unit_n": 16, "param_ratio": 2.3125}
{"id": "3be6f5d2-d06a-4db1-a717-59d53909fafc", "name": "Centrifuge", "instruction": "Create a centrifuge. Start with a rectangular base that houses the motor. Add a cylindrical chamber on top with a lid. Inside the chamber, include a rotor with slots for test tubes. Add a simple control panel on the front.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nchamber_color = bpy.data.materials.new(name=\"Chamber Color\")\nchamber_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.25  # Flatten the base\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Chamber\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1.5, location=(0, 0, 0.5))\nchamber = bpy.context.object\nchamber.name = \"Chamber\"\nchamber.data.materials.append(chamber_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 1.25))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(chamber_color)\n\n# Step 5: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.75))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(base_color)\n\n# Step 6: Create the Slots for Test Tubes\nfor i in range(6):\n    angle = i * (360 / 6)\n    x = 0.35 * math.cos(math.radians(angle))\n    y = 0.35 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(x, y, 0.75))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(base_color)\n\n# Step 7: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, -1.1, -0.25))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale[1] = 0.1  # Flatten the control panel\ncontrol_panel.data.materials.append(control_panel_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.118066711528451, "unit_n": 11, "param_ratio": 3.909090909090909}
{"id": "1f498f64-e58a-4775-9806-eb6265ad0e8f", "name": "Cheeseburger", "instruction": "Can you generate a 3D model that compares a cheeseburger to a veggie burger in size and layers?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbun_color = bpy.data.materials.new(name=\"Bun\")\nbun_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Bun color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.8, 0, 1)  # Cheese color\npatty_color = bpy.data.materials.new(name=\"Patty\")\npatty_color.diffuse_color = (0.4, 0.2, 0.1, 1)  # Patty color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Lettuce color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Tomato color\n\n# Step 2: Create the Cheeseburger\n# Bottom bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(-1.5, 0, 0.1))\nbottom_bun = bpy.context.object\nbottom_bun.data.materials.append(bun_color)\n\n# Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(-1.5, 0, 0.3))\npatty = bpy.context.object\npatty.data.materials.append(patty_color)\n\n# Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.1, location=(-1.5, 0, 0.45))\ncheese = bpy.context.object\ncheese.data.materials.append(cheese_color)\n\n# Top bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(-1.5, 0, 0.6))\ntop_bun = bpy.context.object\ntop_bun.data.materials.append(bun_color)\n\n# Step 3: Create the Veggie Burger\n# Bottom bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(1.5, 0, 0.1))\nbottom_bun_v = bpy.context.object\nbottom_bun_v.data.materials.append(bun_color)\n\n# Lettuce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(1.5, 0, 0.25))\nlettuce = bpy.context.object\nlettuce.data.materials.append(lettuce_color)\n\n# Tomato\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(1.5, 0, 0.35))\ntomato = bpy.context.object\ntomato.data.materials.append(tomato_color)\n\n# Patty\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.2, location=(1.5, 0, 0.45))\npatty_v = bpy.context.object\npatty_v.data.materials.append(patty_color)\n\n# Top bun\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(1.5, 0, 0.6))\ntop_bun_v = bpy.context.object\ntop_bun_v.data.materials.append(bun_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.348974043063896, "unit_n": 9, "param_ratio": 7.777777777777778}
{"id": "d88c1fcc-a382-41ab-9e4e-dcbb86d70d47", "name": "Dog Bed", "instruction": "Can you create a 3D model of a dog bed? It should be circular with a soft cushion in the middle. Around the cushion, there should be raised edges for added comfort. Decorate it with a paw print pattern on the cushion.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.9, 0.8, 0.7, 1)  # Light beige color\npaw_print_color = bpy.data.materials.new(name=\"PawPrintColor\")\npaw_print_color.diffuse_color = (0.3, 0.2, 0.1, 1)  # Dark brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1.4, depth=0.1, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)\n\n# Step 4: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(0, 0, 0.2))\nedges = bpy.context.object\nedges.name = \"Edges\"\nedges.data.materials.append(bed_color)\n\n# Step 5: Create the Paw Print Pattern\n# Paw base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0.4, 0.2))\npaw_base = bpy.context.object\npaw_base.name = \"PawBase\"\npaw_base.data.materials.append(paw_print_color)\n\n# Paw toes\ntoe_positions = [(0.2, 0.6, 0.2), (-0.2, 0.6, 0.2), (0.1, 0.8, 0.2), (-0.1, 0.8, 0.2)]\nfor i, pos in enumerate(toe_positions):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.08, location=pos)\n    toe = bpy.context.object\n    toe.name = f\"PawToe{i + 1}\"\n    toe.data.materials.append(paw_print_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.228371466282574, "unit_n": 5, "param_ratio": 7.0}
{"id": "c82f678f-4faa-4fab-8c9a-d9f636fe2782", "name": "Screwdriver", "instruction": "How would a screwdriver with an interchangeable head system look? Create a 3D model showing the screwdriver with multiple heads for different screw types, and demonstrate how the heads can be attached and detached.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1, location=(0, 0, 0.5))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.7, location=(0, 0, 1.35))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(metal_color)\n\n# Step 4: Create the Interchangeable Heads\n# Flathead\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(0, 0, 1.75))\nflathead = bpy.context.object\nflathead.name = \"Flathead\"\nbpy.ops.transform.resize(value=(1, 0.2, 1))\nflathead.data.materials.append(metal_color)\n\n# Phillips\nbpy.ops.mesh.primitive_cone_add(radius1=0.03, radius2=0, depth=0.2, location=(0.3, 0, 1.75))\nphillips = bpy.context.object\nphillips.name = \"Phillips\"\nphillips.data.materials.append(metal_color)\n\n# Torx\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.2, location=(-0.3, 0, 1.75))\ntorx = bpy.context.object\ntorx.name = \"Torx\"\nbpy.ops.transform.resize(value=(1, 1, 0.5))\ntorx.data.materials.append(metal_color)\n\n# Step 5: Demonstrate Attachment/Detachment\n# Create a placeholder for attachment point\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(0, 0, 1.55))\nattachment_point = bpy.context.object\nattachment_point.name = \"Attachment Point\"\nattachment_point.data.materials.append(metal_color)\n\n# Position heads slightly above the attachment point to show they can be attached\nflathead.location.z += 0.1\nphillips.location.z += 0.1\ntorx.location.z += 0.1", "color_brightness": "Bright", "verify": "human", "entropy": 3.721548969766312, "unit_n": 6, "param_ratio": 6.833333333333333}
{"id": "5f24cbd4-bf40-4c9c-bc35-1e2b6986ae40", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. The sandwich should have two slices of bread with layers of filling in between, such as lettuce, cheese, and a slice of tomato.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (1.0, 0.0, 0.0, 1)  # Red color for tomato\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05  # Make it flat\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Make it flat\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Tomato Slice\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.4))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.55))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8493990049177014, "unit_n": 5, "param_ratio": 8.2}
{"id": "a901bd0e-7a38-4952-98b8-32ed9e8a95c5", "name": "Pizza", "instruction": "Create a 3D model of a pizza. The pizza should be round, with a diameter of about 12 inches. It should have a golden-brown crust and be topped with tomato sauce, mozzarella cheese, pepperoni slices, and a sprinkle of green herbs.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Golden-brown color\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Tomato sauce color\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Mozzarella cheese color\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Pepperoni color\nherb_color = bpy.data.materials.new(name=\"Herb Color\")\nherb_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green herbs color\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15 * 12, depth=0.05, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14 * 12, depth=0.02, location=(0, 0, 0.03))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Sauce Layer\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.135 * 12, depth=0.01, location=(0, 0, 0.04))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese Layer\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_radius = 0.015 * 12\nfor i in range(8):\n    angle = i * (360 / 8)\n    x = 0.1 * 12 * math.cos(math.radians(angle))\n    y = 0.1 * 12 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_cylinder_add(radius=pepperoni_radius, depth=0.01, location=(x, y, 0.045))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Herbs\nherb_radius = 0.005 * 12\nfor i in range(10):\n    angle = i * (360 / 10)\n    x = 0.12 * 12 * math.cos(math.radians(angle))\n    y = 0.12 * 12 * math.sin(math.radians(angle))\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=herb_radius, location=(x, y, 0.05))\n    herb = bpy.context.object\n    herb.name = f\"Herb {i + 1}\"\n    herb.data.materials.append(herb_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.003340229082019, "unit_n": 21, "param_ratio": 2.238095238095238}
{"id": "0ce7bbe0-c01b-43b5-ae1b-b99f3afec787", "name": "Syringe", "instruction": "Let's create a syringe. It should have a clear barrel, a plunger, and a needle. Make sure the plunger has a thumb rest at the end.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear_material = bpy.data.materials.new(name=\"Clear\")\nclear_material.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Clear color with some transparency\nplunger_material = bpy.data.materials.new(name=\"Plunger\")\nplunger_material.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_material = bpy.data.materials.new(name=\"Needle\")\nneedle_material.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Barrel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\nbarrel = bpy.context.object\nbarrel.name = \"Barrel\"\nbarrel.data.materials.append(clear_material)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=1.8, location=(0, 0, -0.1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_material)\n\n# Step 4: Create the Thumb Rest\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.1, location=(0, 0, -1))\nthumb_rest = bpy.context.object\nthumb_rest.name = \"Thumb Rest\"\nthumb_rest.data.materials.append(plunger_material)\n\n# Step 5: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 1.25))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.574769445056558, "unit_n": 4, "param_ratio": 8.75}
{"id": "f4be9ede-52c4-4afb-a3bb-b48ef3313aab", "name": "Blender", "instruction": "Create a blender with a base and a detachable jar. The base should have a control panel with buttons.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (0.8, 0.8, 0.8, 0.5)  # Light gray color with some transparency\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0, 0, 1)  # Red color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0, 0.6, 0.3))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(base_color)\n\n# Step 4: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.02, location=(-0.1 + i * 0.1, 0.75, 0.32))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 5: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.8, location=(0, 0, 0.75))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.36623578430463, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "fea66131-55a8-46c9-95d9-a041d2a8e96d", "name": "Sofa", "instruction": "Let's design a sofa. It should have a backrest, armrests, and a cushioned seat.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brownish color\n\n# Step 2: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.scale[0] = 1.5  # Length\nseat.scale[1] = 0.5  # Width\nseat.scale[2] = 0.2  # Height\nseat.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.75, 1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 1.5  # Length\nbackrest.scale[1] = 0.1  # Width\nbackrest.scale[2] = 0.5  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.1  # Length\n    armrest.scale[1] = 0.5  # Width\n    armrest.scale[2] = 0.4  # Height\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "a9b616dd-1e32-4763-ae4c-ecbcd3e7f865", "name": "Pizza Slice", "instruction": "Can we create a 3D model of a pizza slice? It should be triangular, with a base of 8 inches and a height of 10 inches. Add a layer of tomato sauce, cheese, and pepperoni slices on top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndough_color = bpy.data.materials.new(name=\"Dough\")\ndough_color.diffuse_color = (0.94, 0.87, 0.73, 1)  # Light brown color for dough\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Pizza Slice Base\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=4, radius2=0, depth=0.2, location=(0, 0, 0))\npizza_base = bpy.context.object\npizza_base.name = \"Pizza Base\"\npizza_base.data.materials.append(dough_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=3.8, radius2=0, depth=0.05, location=(0, 0, 0.1))\nsauce_layer = bpy.context.object\nsauce_layer.name = \"Tomato Sauce\"\nsauce_layer.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=3.6, radius2=0, depth=0.05, location=(0, 0, 0.15))\ncheese_layer = bpy.context.object\ncheese_layer.name = \"Cheese\"\ncheese_layer.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(1, 0.5, 0.2), (-1, 0.5, 0.2), (0, -1, 0.2)]\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=pos)\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.7085819329856617, "unit_n": 4, "param_ratio": 10.75}
{"id": "b3a70670-a0c2-49da-8b66-72216c17dade", "name": "Router", "instruction": "Design a router with multiple antennas, a few LED indicators on the front, and several ports on the back.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Router Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nrouter_body = bpy.context.object\nrouter_body.name = \"Router Body\"\nrouter_body.scale = (2, 1, 0.2)\nrouter_body.data.materials.append(black)\n\n# Step 3: Create the Antennas\nfor i in range(3):\n    x = (i - 1) * 1.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(x, 0.9, 1))\n    antenna = bpy.context.object\n    antenna.name = f\"Antenna {i + 1}\"\n    antenna.data.materials.append(black)\n\n# Step 4: Create the LED Indicators\nfor i in range(3):\n    x = (i - 1) * 0.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 1.1, 0.6))\n    led = bpy.context.object\n    led.name = f\"LED {i + 1}\"\n    led.data.materials.append(green)\n\n# Step 5: Create the Ports\nfor i in range(4):\n    x = (i - 1.5) * 0.6\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, -1.1, 0.5))\n    port = bpy.context.object\n    port.name = f\"Port {i + 1}\"\n    port.scale = (0.5, 0.1, 0.3)\n    port.data.materials.append(blue)", "color_brightness": "Dark", "verify": "human", "entropy": 1.9747223085434427, "unit_n": 11, "param_ratio": 2.909090909090909}
{"id": "05afffd8-e46c-4760-af3f-f02a292e7b9f", "name": "Chessboard", "instruction": "Create a 3D model of a chessboard. Ensure each square is 2 inches by 2 inches. How would you position the pieces for the start of a game?", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chessboard\nsquare_size = 2\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{row}_{col}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Position the Chess Pieces (simplified as cylinders)\npiece_height = 1\npiece_radius = 0.5\n\n# White pieces\nfor col in range(8):\n    bpy.ops.mesh.primitive_cylinder_add(radius=piece_radius, depth=piece_height, location=(col * square_size, 1 * square_size, piece_height / 2))\n    piece = bpy.context.object\n    piece.name = f\"White_Pawn_{col + 1}\"\n    piece.data.materials.append(white)\n\n# Black pieces\nfor col in range(8):\n    bpy.ops.mesh.primitive_cylinder_add(radius=piece_radius, depth=piece_height, location=(col * square_size, 6 * square_size, piece_height / 2))\n    piece = bpy.context.object\n    piece.name = f\"Black_Pawn_{col + 1}\"\n    piece.data.materials.append(black)\n\n# Note: For simplicity, only pawns are added. Other pieces can be added similarly.", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.586460768382515, "unit_n": 80, "param_ratio": 0.2375}
{"id": "b6589ca5-f89b-4623-b70d-d7c3f2d125ec", "name": "Apple", "instruction": "Create an apple. It should be round with a small stem at the top.", "category": "Foodstuffs", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple_material = bpy.data.materials.new(name=\"Apple Material\")\napple_material.diffuse_color = (1, 0, 0, 1)  # Red color\napple.data.materials.append(apple_material)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem_material = bpy.data.materials.new(name=\"Stem Material\")\nstem_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\nstem.data.materials.append(stem_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "ecf1b2a7-0aef-411f-a5d3-9fce3851e18e", "name": "Passport Holder", "instruction": "Design a passport holder that can securely hold a single passport.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ndark_blue = bpy.data.materials.new(name=\"Dark Blue\")\ndark_blue.diffuse_color = (0.0, 0.0, 0.5, 1)  # Dark blue color\n\n# Step 2: Create the Main Body of the Passport Holder\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.1, 0.7, 1)  # Scale to make it look like a passport holder\nmain_body.data.materials.append(dark_blue)\n\n# Step 3: Create the Inner Slot for the Passport\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0.05))\ninner_slot = bpy.context.object\ninner_slot.name = \"Inner Slot\"\ninner_slot.scale = (0.08, 0.65, 0.95)  # Scale to fit inside the main body\ninner_slot.data.materials.append(dark_blue)\n\n# Step 4: Boolean Modifier to create the slot\nbool_mod = main_body.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nbool_mod.operation = 'DIFFERENCE'\nbool_mod.object = inner_slot\nbpy.context.view_layer.objects.active = main_body\nbpy.ops.object.modifier_apply(modifier=bool_mod.name)\n\n# Remove the inner slot object\nbpy.data.objects.remove(inner_slot, do_unlink=True)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 6.5}
{"id": "322f2926-aa8a-464c-9fe9-b6764ae7894d", "name": "Pencil Holder", "instruction": "Design a 3D model of a pencil holder. It should be cylindrical with multiple slots for holding pencils and pens.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nholder_color = bpy.data.materials.new(name=\"Holder Color\")\nholder_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Main Cylinder (Pencil Holder)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nholder = bpy.context.object\nholder.name = \"Pencil Holder\"\nholder.data.materials.append(holder_color)\n\n# Step 3: Create the Slots for Pencils\nslot_radius = 0.1\nslot_depth = 2.1\nnum_slots = 8\nangle_step = 360 / num_slots\n\nfor i in range(num_slots):\n    angle = math.radians(i * angle_step)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=slot_radius, depth=slot_depth, location=(x, y, 1))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(holder_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9157088470334376, "unit_n": 2, "param_ratio": 6.5}
{"id": "0777cca8-8bf4-4d75-9fee-657a178e5dbc", "name": "Dog Collar", "instruction": "Create a simple dog collar with a buckle and a D-ring.", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncollar_color = bpy.data.materials.new(name=\"Collar Color\")\ncollar_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\nmetal_color = bpy.data.materials.new(name=\"Metal Color\")\nmetal_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Collar\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(collar_color)\n\n# Step 3: Create the Buckle\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(1.1, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Buckle\"\nbuckle.scale = (1, 0.5, 0.1)\nbuckle.data.materials.append(metal_color)\n\n# Step 4: Create the D-ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.15, minor_radius=0.05, location=(-1.1, 0, 0))\nd_ring = bpy.context.object\nd_ring.name = \"D-ring\"\nd_ring.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.7205193842202755, "unit_n": 3, "param_ratio": 8.0}
{"id": "d185b3c5-33d0-4b4b-b1d8-e22649dc2f5b", "name": "Cookie", "instruction": "Design a cookie with a circular shape and slightly raised edges. Add a few small chocolate chips scattered on top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncookie_color = bpy.data.materials.new(name=\"Cookie Color\")\ncookie_color.diffuse_color = (0.82, 0.71, 0.55, 1)  # Light brown color\n\nchocolate_chip_color = bpy.data.materials.new(name=\"Chocolate Chip Color\")\nchocolate_chip_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color\n\n# Step 2: Create the Cookie Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\ncookie_base = bpy.context.object\ncookie_base.name = \"Cookie Base\"\ncookie_base.data.materials.append(cookie_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.1))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(cookie_color)\n\n# Step 4: Create Chocolate Chips\nfor _ in range(10):\n    x = random.uniform(-0.8, 0.8)\n    y = random.uniform(-0.8, 0.8)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 0.2))\n    chocolate_chip = bpy.context.object\n    chocolate_chip.name = \"Chocolate Chip\"\n    chocolate_chip.data.materials.append(chocolate_chip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.254897014942564, "unit_n": 12, "param_ratio": 2.0}
{"id": "720440eb-8187-462a-bd70-43be9931f342", "name": "Blender", "instruction": "Can you generate a 3D model of a blender? The blender should have a base with buttons and a clear pitcher with a lid. Consider how this blender would look on a kitchen counter.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\npitcher_color = bpy.data.materials.new(name=\"Pitcher Color\")\npitcher_color.diffuse_color = (0.8, 0.8, 0.8, 0.3)  # Clear color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.3, location=(0, 0, 0.15))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Buttons\nfor i in range(3):\n    x = 0.2 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.45, 0.1))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 4: Create the Pitcher\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.8, location=(0, 0, 0.65))\npitcher = bpy.context.object\npitcher.name = \"Pitcher\"\npitcher.data.materials.append(pitcher_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.32, depth=0.05, location=(0, 0, 1.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.597762380978017, "unit_n": 6, "param_ratio": 6.5}
{"id": "04cae118-957a-422f-bd43-2524166e7ae3", "name": "Top Hat", "instruction": "Create a 3D model of a top hat. The hat should be tall and cylindrical with a flat brim. The hatband is a simple ribbon tied around the base of the crown.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for the ribbon\n\n# Step 2: Create the Crown (tall cylindrical part of the hat)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=3, location=(0, 0, 1.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(black)\n\n# Step 3: Create the Brim (flat part of the hat)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(black)\n\n# Step 4: Create the Ribbon (simple band around the base of the crown)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.2, location=(0, 0, 1.1))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.8531595167011465, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "0c76e034-d998-42a8-8047-c4c3bf025f5d", "name": "Table Lamp", "instruction": "Imagine a table lamp with a cylindrical base and a conical shade. The lamp should have a single switch on the base for turning it on and off. The design should be straightforward and functional.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Lamp Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Shade\nbpy.ops.mesh.primitive_cone_add(radius1=0.3, depth=0.7, location=(0, 0, 1.35))\nshade = bpy.context.object\nshade.name = \"Shade\"\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.05, location=(0.25, 0, 0.1))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.475514970054688, "unit_n": 4, "param_ratio": 4.75}
{"id": "e152fd41-8025-4b20-b810-17b8b5e0be85", "name": "Orange", "instruction": "Create a 3D model of an orange. The orange should be spherical, approximately 7 centimeters in diameter. It should have a small, slightly indented spot at the top where the stem was attached.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\norange_color = bpy.data.materials.new(name=\"Orange\")\norange_color.diffuse_color = (1.0, 0.55, 0.0, 1)  # Orange color\n\n# Step 2: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=3.5, location=(0, 0, 0))\norange = bpy.context.object\norange.name = \"Orange\"\norange.data.materials.append(orange_color)\n\n# Step 3: Create the Indentation for the Stem\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 3.4))\nindentation = bpy.context.object\nindentation.name = \"Indentation\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1, 1, 0.2))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Boolean difference to create the indentation\nmod_bool = orange.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = indentation\nbpy.context.view_layer.objects.active = orange\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Remove the indentation object\nbpy.data.objects.remove(indentation)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.139826854204224, "unit_n": 2, "param_ratio": 6.5}
{"id": "85ba4a79-34fa-48b4-85a9-4ec0ec651219", "name": "Bird Cage", "instruction": "Could you design a bird cage? It should be rectangular with vertical bars and a door on one side.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cage\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Base and Top of the Cage\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.05\nbase.data.materials.append(metal_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 2))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.scale[2] = 0.05\ntop.data.materials.append(metal_color)\n\n# Step 3: Create the Vertical Bars\nbar_spacing = 0.2\nnum_bars = int(2 / bar_spacing)\n\nfor i in range(num_bars + 1):\n    x = -1 + i * bar_spacing\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(x, -1, 1))\n    bar = bpy.context.object\n    bar.name = f\"Bar Front {i + 1}\"\n    bar.data.materials.append(metal_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(x, 1, 1))\n    bar = bpy.context.object\n    bar.name = f\"Bar Back {i + 1}\"\n    bar.data.materials.append(metal_color)\n\nfor i in range(num_bars + 1):\n    y = -1 + i * bar_spacing\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(-1, y, 1), rotation=(0, 0, 1.5708))\n    bar = bpy.context.object\n    bar.name = f\"Bar Left {i + 1}\"\n    bar.data.materials.append(metal_color)\n    \n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=2, location=(1, y, 1), rotation=(0, 0, 1.5708))\n    bar = bpy.context.object\n    bar.name = f\"Bar Right {i + 1}\"\n    bar.data.materials.append(metal_color)\n\n# Step 4: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.scale[2] = 1\ndoor.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.152434855056287, "unit_n": 7, "param_ratio": 6.142857142857143}
{"id": "25b0a0c5-5df1-40ac-ae48-d74290218692", "name": "USB Flash Drive", "instruction": "Create a 3D model of a USB flash drive. ", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_material = bpy.data.materials.new(name=\"Black\")\nblack_material.diffuse_color = (0, 0, 0, 1)  # Black color\n\nsilver_material = bpy.data.materials.new(name=\"Silver\")\nsilver_material.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Main Body of the USB Flash Drive\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (0.2, 0.6, 0.1)\nmain_body.data.materials.append(black_material)\n\n# Step 3: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.35, 0))\nusb_connector = bpy.context.object\nusb_connector.name = \"USB Connector\"\nusb_connector.scale = (0.15, 0.15, 0.05)\nusb_connector.data.materials.append(silver_material)\n\n# Step 4: Create the Metal Part of the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.5, 0))\nmetal_part = bpy.context.object\nmetal_part.name = \"Metal Part\"\nmetal_part.scale = (0.1, 0.05, 0.05)\nmetal_part.data.materials.append(silver_material)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.1780538303479453, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "ae5821d9-dca6-4f0c-9fb0-fcddb03240c9", "name": "Hat", "instruction": "Design a basic hat. It should have a rounded crown and a wide brim extending evenly around the base.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.852478066159039, "unit_n": 2, "param_ratio": 4.5}
{"id": "05406d14-fac0-4768-b6b0-3951419c2175", "name": "Percussion Instrument", "instruction": "Please create a small hand-held drum with a circular frame.", "category": "Articles for the care and handling of animals", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.3, 0.1, 1)  # Brown color for the frame\n\n# Step 2: Create the Drum Frame\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Drum Frame\"\nframe.data.materials.append(frame_color)\n\n# Step 3: Create the Drum Skin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.01, location=(0, 0, 0.03))\nskin = bpy.context.object\nskin.name = \"Drum Skin\"\nskin.data.materials.append(frame_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.3321698784996565, "unit_n": 2, "param_ratio": 7.5}
{"id": "ed2b348a-6bae-483a-86c7-f5abefef7695", "name": "Smart Speaker", "instruction": "Create a 3D model of a smart speaker. It should be cylindrical with a smooth surface. The top should have touch-sensitive controls, and there should be a microphone array around the top edge. Include a small LED light ring near the top that can change colors. The bottom should have a non-slip base.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nspeaker_body_color = bpy.data.materials.new(name=\"Speaker Body Color\")\nspeaker_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\ntouch_controls_color = bpy.data.materials.new(name=\"Touch Controls Color\")\ntouch_controls_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nmicrophone_color = bpy.data.materials.new(name=\"Microphone Color\")\nmicrophone_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\nled_light_color = bpy.data.materials.new(name=\"LED Light Color\")\nled_light_color.diffuse_color = (0, 1, 0, 1)  # Green color\nnon_slip_base_color = bpy.data.materials.new(name=\"Non-Slip Base Color\")\nnon_slip_base_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Speaker Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nspeaker_body = bpy.context.object\nspeaker_body.name = \"Speaker Body\"\nspeaker_body.data.materials.append(speaker_body_color)\n\n# Step 3: Create the Touch Controls\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.05, location=(0, 0, 2.025))\ntouch_controls = bpy.context.object\ntouch_controls.name = \"Touch Controls\"\ntouch_controls.data.materials.append(touch_controls_color)\n\n# Step 4: Create the Microphone Array\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 0.95 * math.cos(angle)\n    y = 0.95 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, y, 2))\n    microphone = bpy.context.object\n    microphone.name = f\"Microphone {i + 1}\"\n    microphone.data.materials.append(microphone_color)\n\n# Step 5: Create the LED Light Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=0.9, minor_radius=0.05, location=(0, 0, 2.05))\nled_light_ring = bpy.context.object\nled_light_ring.name = \"LED Light Ring\"\nled_light_ring.data.materials.append(led_light_color)\n\n# Step 6: Create the Non-Slip Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.05))\nnon_slip_base = bpy.context.object\nnon_slip_base.name = \"Non-Slip Base\"\nnon_slip_base.data.materials.append(non_slip_base_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.9343296954977593, "unit_n": 12, "param_ratio": 4.083333333333333}
{"id": "e9d4b663-fba8-41f8-84a5-7107989bf7a4", "name": "Centrifuge", "instruction": "I need a 3D model of a centrifuge. It should have a circular base with slots for holding test tubes and a lid that can be opened and closed. The control panel should be on the front.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Slots for Test Tubes\nnum_slots = 8\nslot_radius = 0.1\nslot_depth = 0.3\nfor i in range(num_slots):\n    angle = i * (2 * math.pi / num_slots)\n    x = 0.7 * math.cos(angle)\n    y = 0.7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=slot_radius, depth=slot_depth, location=(x, y, 0.4))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.data.materials.append(base_color)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.75))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, -1, 0.3))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(control_panel_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 4.337683628608653, "unit_n": 4, "param_ratio": 6.75}
{"id": "b5ae44b1-2c82-498a-a480-f5a76371bca7", "name": "Hat", "instruction": "Create a basic 3D model of a hat with a rounded crown and a wide brim.", "category": "Means of transport or hoisting", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\n\n# Step 3: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0.05))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.852478066159039, "unit_n": 2, "param_ratio": 4.5}
{"id": "b498b797-cf8e-4fa9-ab3d-ea0d7b0948d8", "name": "Hat Band", "instruction": "Can you make a 3D model of a simple hat band? Just a thin, plain band that fits around the base of a hat.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Hat Band\nbpy.ops.mesh.primitive_torus_add(major_radius=1.0, minor_radius=0.05, location=(0, 0, 0))\nhat_band = bpy.context.object\nhat_band.name = \"Hat Band\"\n\n# Optional: Add a material to the hat band\nmaterial = bpy.data.materials.new(name=\"HatBandMaterial\")\nmaterial.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\nhat_band.data.materials.append(material)", "color_brightness": "Dark", "verify": "human", "entropy": 5.08477320327856, "unit_n": 1, "param_ratio": 10.0}
{"id": "31ab7ad7-9be0-4c26-a382-7da1d95a196b", "name": "Pizza", "instruction": "Let's create a 3D model of a pizza. Start with a circular base representing the crust, about 12 inches in diameter. Spread a layer of tomato sauce evenly over the crust. Then, add a layer of cheese that covers the entire surface. Now, place pepperoni slices evenly distributed across the pizza. Add a few basil leaves on top for garnish. Ensure the pizza looks appetizing and ready to eat.", "category": "Articles of clothing and haberdashery", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Light yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for basil\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=6, depth=0.5, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.8, depth=0.1, location=(0, 0, 0.3))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=5.7, depth=0.1, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [(2, 2), (-2, 2), (2, -2), (-2, -2), (0, 3), (3, 0), (-3, 0), (0, -3)]\nfor i, (x, y) in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(x, y, 0.5))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 6: Create the Basil Leaves\nbasil_positions = [(1, 1), (-1, -1), (1, -1), (-1, 1)]\nfor i, (x, y) in enumerate(basil_positions):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(x, y, 0.6))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(0.5, 1, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.966104938276877, "unit_n": 5, "param_ratio": 9.8}
{"id": "3a2dd6b4-19ab-4f24-a818-f85e5a5b2b5b", "name": "Cake", "instruction": "Design a simple 3D model of a cake. It should be round and have a few layers.", "category": "Foodstuffs", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the cake color\ncake_color = bpy.data.materials.new(name=\"Cake Color\")\ncake_color.diffuse_color = (0.94, 0.76, 0.62, 1)  # Light brown color\n\n# Step 2: Create the Bottom Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, 0))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(cake_color)\n\n# Step 3: Create the Middle Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.3, location=(0, 0, 0.3))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(cake_color)\n\n# Step 4: Create the Top Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.3, location=(0, 0, 0.6))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(cake_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.986664176322707, "unit_n": 3, "param_ratio": 6.666666666666667}
{"id": "5236cc1c-94d6-4c7e-90ff-ab70a137c29c", "name": "Sticky Note Pad", "instruction": "Create a sticky note pad with lines for writing.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1.0, 1.0, 0.0, 1)  # Bright yellow color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Blue color for lines\n\n# Step 2: Create the Sticky Note Pad\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nsticky_note = bpy.context.object\nsticky_note.name = \"Sticky Note\"\nsticky_note.scale[2] = 0.05  # Make it flat\nsticky_note.data.materials.append(yellow)\n\n# Step 3: Create the Lines\nline_height = 0.15\nfor i in range(5):\n    y = (i - 2) * line_height\n    bpy.ops.mesh.primitive_plane_add(size=2, location=(0, y, 0.051))\n    line = bpy.context.object\n    line.name = f\"Line {i + 1}\"\n    line.scale[1] = 0.02  # Make it thin\n    line.data.materials.append(blue)", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.8613706721745853, "unit_n": 6, "param_ratio": 3.0}
{"id": "609d84d8-4093-407d-862b-94cf980b469e", "name": "Flute", "instruction": "Can you create a 3D model of a flute? It should be a straight, cylindrical instrument with evenly spaced holes.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Body of the Flute\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0, 0))\nflute_body = bpy.context.object\nflute_body.name = \"Flute Body\"\n\n# Step 3: Create the Holes\nhole_distance = 0.3\nhole_radius = 0.01\nnum_holes = 6\n\nfor i in range(num_holes):\n    bpy.ops.mesh.primitive_cylinder_add(radius=hole_radius, depth=0.1, location=(0, 0, -0.9 + i * hole_distance), rotation=(1.5708, 0, 0))\n    hole = bpy.context.object\n    hole.name = f\"Hole {i + 1}\"\n\n    # Boolean modifier to subtract the hole from the flute body\n    mod_bool = flute_body.modifiers.new(name=f\"Boolean {i + 1}\", type='BOOLEAN')\n    mod_bool.operation = 'DIFFERENCE'\n    mod_bool.object = hole\n    bpy.context.view_layer.objects.active = flute_body\n    bpy.ops.object.modifier_apply(modifier=mod_bool.name)\n    bpy.data.objects.remove(hole)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.901046613051714, "unit_n": 2, "param_ratio": 6.0}
{"id": "de37bd0f-4abf-43cd-850a-420df3fc5fca", "name": "Pencil Cup", "instruction": "Create a pencil cup with a cylindrical shape.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Pencil Cup\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0.6))\npencil_cup = bpy.context.object\npencil_cup.name = \"Pencil Cup\"\n\n# Create a material for the pencil cup\ncup_material = bpy.data.materials.new(name=\"CupMaterial\")\ncup_material.diffuse_color = (0.6, 0.4, 0.2, 1)  # A medium brown color\npencil_cup.data.materials.append(cup_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 10.0}
{"id": "0b344deb-e6e8-4640-8bcb-da72b2c1f2dc", "name": "Beanie", "instruction": "Please create a 3D model of a beanie with a simple folded brim.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbeanie_color = bpy.data.materials.new(name=\"Beanie Color\")\nbeanie_color.diffuse_color = (0.5, 0.1, 0.1, 1)  # Dark red color\n\n# Step 2: Create the Main Part of the Beanie\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))\nbeanie = bpy.context.object\nbeanie.name = \"Beanie\"\nbeanie.scale[2] = 0.6  # Flatten the sphere to make it more beanie-shaped\nbeanie.data.materials.append(beanie_color)\n\n# Step 3: Create the Folded Brim\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.2, location=(0, 0, 0.6))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(beanie_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.845001048297757, "unit_n": 2, "param_ratio": 7.0}
{"id": "04c64379-c00d-489a-9c8d-7fcdc8a0cc70", "name": "Petri Dish", "instruction": "Could you make a petri dish?", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nglass_color = bpy.data.materials.new(name=\"Glass\")\nglass_color.diffuse_color = (0.7, 0.7, 0.7, 0.1)  # Transparent glass-like color\n\n# Step 2: Create the Base of the Petri Dish\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Petri Dish Base\"\nbase.data.materials.append(glass_color)\n\n# Step 3: Create the Lid of the Petri Dish\nbpy.ops.mesh.primitive_cylinder_add(radius=3.1, depth=0.1, location=(0, 0, 0.15))\nlid = bpy.context.object\nlid.name = \"Petri Dish Lid\"\nlid.data.materials.append(glass_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.3321698784996565, "unit_n": 2, "param_ratio": 7.5}
{"id": "a802ba58-e09b-4c23-92dc-3ad93d6fdc20", "name": "Travel Mug", "instruction": "Can you model a travel mug with a screw-on lid and a handle? It should have a simple design.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# Define the color\nmug_color = bpy.data.materials.new(name=\"MugColor\")\nmug_color.diffuse_color = (0.6, 0.6, 0.6, 1)  # Gray color\n\n# Step 2: Create the Mug Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2.5, location=(0, 0, 1.25))\nmug_body = bpy.context.object\nmug_body.name = \"Mug Body\"\nmug_body.data.materials.append(mug_color)\n\n# Step 3: Create the Screw-on Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.2, location=(0, 0, 2.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(mug_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.8, minor_radius=0.15, location=(1.4, 0, 1.25), rotation=(1.5708, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mug_color)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.467911987509192, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "068fcdd4-e9d9-439c-9b0d-49457191edc1", "name": "Notebook", "instruction": "Create a notebook. The notebook should be rectangular with lined pages. It should have a spiral binding along one side.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"Cover Color\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\npage_color = bpy.data.materials.new(name=\"Page Color\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color\nspiral_color = bpy.data.materials.new(name=\"Spiral Color\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncover = bpy.context.object\ncover.scale = (1, 1.5, 0.05)\ncover.name = \"Cover\"\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1.9, location=(0, 0, 0))\npages = bpy.context.object\npages.scale = (0.95, 1.45, 0.04)\npages.name = \"Pages\"\npages.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(-1, -0.75 + i * 0.15, 0.1))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.data.materials.append(spiral_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.3070888881144067, "unit_n": 12, "param_ratio": 2.3333333333333335}
{"id": "c2020905-2cef-4cd6-86c4-86ad07453df3", "name": "Pizza", "instruction": "Create a 3D model of a pizza. It should have a round crust, tomato sauce, cheese, and pepperoni slices on top.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Tomato Sauce\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.3, 1)  # Yellow color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Tomato Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.02, location=(0, 0, 0.06))\nsauce = bpy.context.object\nsauce.name = \"Tomato Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.88, depth=0.02, location=(0, 0, 0.08))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.1))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.872397643120323, "unit_n": 4, "param_ratio": 10.0}
{"id": "789a1896-ee6f-4041-bd89-882c9bde80b9", "name": "Circuit Breaker", "instruction": "Please design a circuit breaker. It should have a rectangular body with a switch on the front. The switch should be easily movable between 'on' and 'off' positions. There should also be a small indicator light above the switch.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"BodyColor\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nswitch_color = bpy.data.materials.new(name=\"SwitchColor\")\nswitch_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nindicator_color = bpy.data.materials.new(name=\"IndicatorColor\")\nindicator_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Rectangular Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.5, 0.75, 1)\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Switch\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.8, 0))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.scale = (0.2, 0.1, 0.4)\nswitch.data.materials.append(switch_color)\n\n# Step 4: Create the Indicator Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0.9, 0.6))\nindicator = bpy.context.object\nindicator.name = \"Indicator\"\nindicator.data.materials.append(indicator_color)", "color_brightness": "Dark", "verify": "human", "entropy": 1.8582230148460068, "unit_n": 3, "param_ratio": 9.0}
{"id": "aa3ce1bb-62a4-4918-89b0-64b0f42cbad7", "name": "Chess Piece", "instruction": "Design a simple pawn chess piece. It should have a rounded top and a cylindrical body that tapers slightly towards the base.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Rounded Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 1.2))\ntop = bpy.context.object\ntop.name = \"Pawn_Top\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=1, location=(0, 0, 0.5))\nbody = bpy.context.object\nbody.name = \"Pawn_Body\"\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Pawn_Base\"\n\n# Step 5: Taper the Body\nbpy.context.view_layer.objects.active = body\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.transform.shrink_fatten(value=-0.05)\nbpy.ops.object.mode_set(mode='OBJECT')", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.358521901057199, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "412a8158-3f95-4bd7-ac79-b72265ee0128", "name": "Chocolate Cake", "instruction": "Create a 3D model of a chocolate cake. The cake should be round with three layers. Each layer should have a thin layer of icing between them. The top should be covered with icing and decorated with chocolate shavings.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate color\nicing = bpy.data.materials.new(name=\"Icing\")\nicing.diffuse_color = (0.55, 0.27, 0.07, 1)  # Icing color\n\n# Step 2: Create the Cake Layers\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.3, location=(0, 0, i * 0.35))\n    layer = bpy.context.object\n    layer.name = f\"Cake Layer {i + 1}\"\n    layer.data.materials.append(chocolate)\n\n# Step 3: Create the Icing Layers\nfor i in range(2):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.05, location=(0, 0, i * 0.35 + 0.3))\n    icing_layer = bpy.context.object\n    icing_layer.name = f\"Icing Layer {i + 1}\"\n    icing_layer.data.materials.append(icing)\n\n# Step 4: Create the Top Icing\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.05))\ntop_icing = bpy.context.object\ntop_icing.name = \"Top Icing\"\ntop_icing.data.materials.append(icing)\n\n# Step 5: Create the Chocolate Shavings\nfor i in range(10):\n    angle = i * (2 * 3.14159 / 10)\n    x = 0.8 * math.cos(angle)\n    y = 0.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, 1.1))\n    shaving = bpy.context.object\n    shaving.name = f\"Shaving {i + 1}\"\n    shaving.data.materials.append(chocolate)", "color_brightness": "Dark", "verify": "human", "entropy": 5.3538265192341985, "unit_n": 16, "param_ratio": 1.8125}
{"id": "f3f1cabc-67a3-4a55-a21a-6814d47e9dd9", "name": "Sofa vs. Loveseat", "instruction": "Compare a sofa and a loveseat. Show the differences in their sizes and seating capacities. Highlight the sofa's longer length and the loveseat's more compact design.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"Sofa Color\")\nsofa_color.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium red color\nloveseat_color = bpy.data.materials.new(name=\"Loveseat Color\")\nloveseat_color.diffuse_color = (0.2, 0.5, 0.2, 1)  # Medium green color\n\n# Step 2: Create the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, 0, 0.5))\nsofa_seat = bpy.context.object\nsofa_seat.scale = (2, 1, 0.5)\nsofa_seat.name = \"Sofa Seat\"\nsofa_seat.data.materials.append(sofa_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(2, -1.2, 1.5))\nsofa_backrest = bpy.context.object\nsofa_backrest.scale = (2, 0.2, 1)\nsofa_backrest.name = \"Sofa Backrest\"\nsofa_backrest.data.materials.append(sofa_color)\n\n# Step 3: Create the Loveseat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, 0, 0.5))\nloveseat_seat = bpy.context.object\nloveseat_seat.scale = (1.5, 1, 0.5)\nloveseat_seat.name = \"Loveseat Seat\"\nloveseat_seat.data.materials.append(loveseat_color)\n\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-2, -1.2, 1.5))\nloveseat_backrest = bpy.context.object\nloveseat_backrest.scale = (1.5, 0.2, 1)\nloveseat_backrest.name = \"Loveseat Backrest\"\nloveseat_backrest.data.materials.append(loveseat_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 6.5}
{"id": "8d692696-ea52-46fa-9116-2ffc907a1714", "name": "Cat Toy", "instruction": "Create a simple cat toy. It should be a small ball with a diameter of 5 centimeters.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.025, location=(0, 0, 0))\nball = bpy.context.object\nball.name = \"Cat Toy Ball\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.45347497737784, "unit_n": 1, "param_ratio": 4.0}
{"id": "55d279fe-f2f2-42a8-8faa-f168459a895e", "name": "Bird Perch", "instruction": "Create a bird perch and compare it to a bird cage. The perch should be a simple horizontal bar supported by two vertical posts. The bird cage should be a closed structure with bars and a door.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the perch and cage\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color\n\n# Step 2: Create the Perch\n# Create the horizontal bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5), rotation=(0, 1.57, 0))\nperch_bar = bpy.context.object\nperch_bar.name = \"Perch Bar\"\nperch_bar.data.materials.append(wood_color)\n\n# Create the vertical posts\nfor i in range(2):\n    x = 0.45 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(x, 0, 0))\n    post = bpy.context.object\n    post.name = f\"Post {i + 1}\"\n    post.data.materials.append(wood_color)\n\n# Step 3: Create the Bird Cage\n# Create the base of the cage\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Cage Base\"\nbase.data.materials.append(metal_color)\n\n# Create the top of the cage\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.0, location=(0, 0, 1.5))\ntop = bpy.context.object\ntop.name = \"Cage Top\"\ntop.data.materials.append(metal_color)\n\n# Create the vertical bars of the cage\nfor i in range(12):\n    angle = i * 3.14 / 6\n    x = 0.95 * math.cos(angle)\n    y = 0.95 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(x, y, 0.75))\n    bar = bpy.context.object\n    bar.name = f\"Cage Bar {i + 1}\"\n    bar.data.materials.append(metal_color)\n\n# Create the door of the cage\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1.0, 0, 0.75))\ndoor = bpy.context.object\ndoor.name = \"Cage Door\"\ndoor.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.892449971261174, "unit_n": 18, "param_ratio": 2.2777777777777777}
{"id": "25132c23-1fcd-4199-b85b-676f12098019", "name": "Couch", "instruction": "Can you design a 3D model of a couch?", "category": "Furnishing", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncouch_color = bpy.data.materials.new(name=\"Couch Color\")\ncouch_color.diffuse_color = (0.5, 0.25, 0.25, 1)  # Medium brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (2, 1, 0.5)\nbase.data.materials.append(couch_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1, 1.25))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale = (2, 0.1, 0.75)\nbackrest.data.materials.append(couch_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale = (0.1, 1, 0.5)\n    armrest.data.materials.append(couch_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.0325189149497596, "unit_n": 4, "param_ratio": 4.25}
{"id": "d7c8fa7b-f49e-465b-b762-51a4d306001b", "name": "Bulletin Board", "instruction": "Create a bulletin board that can be used for pinning notes, photos, and reminders. Include a border and a few push pins.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nboard_color = bpy.data.materials.new(name=\"Board Color\")\nboard_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the board\nborder_color = bpy.data.materials.new(name=\"Border Color\")\nborder_color.diffuse_color = (0.2, 0.1, 0.05, 1)  # Dark brown color for the border\npush_pin_color = bpy.data.materials.new(name=\"Push Pin Color\")\npush_pin_color.diffuse_color = (1, 0, 0, 1)  # Red color for the push pins\n\n# Step 2: Create the Board\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Bulletin Board\"\nboard.data.materials.append(board_color)\n\n# Step 3: Create the Border\nborder_thickness = 0.1\nbpy.ops.mesh.primitive_cube_add(size=2 + border_thickness, location=(0, 0, 0))\nborder = bpy.context.object\nborder.name = \"Border\"\nborder.scale = (1 + border_thickness, 1 + border_thickness, border_thickness)\nborder.data.materials.append(border_color)\n\n# Step 4: Create Push Pins\npush_pin_positions = [(0.7, 0.7, 0), (-0.7, 0.7, 0), (0.7, -0.7, 0), (-0.7, -0.7, 0)]\nfor i, pos in enumerate(push_pin_positions):\n    bpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.1, location=pos)\n    push_pin = bpy.context.object\n    push_pin.name = f\"Push Pin {i + 1}\"\n    push_pin.data.materials.append(push_pin_color)\n    bpy.ops.transform.translate(value=(0, 0, 0.05))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1179394966234852, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "2a3750d9-f261-4d23-8bc3-1d8e3040b42d", "name": "Light Bulb", "instruction": "Design a light bulb with a standard screw base and a rounded glass top that houses the filament.", "category": "Tools and hardware", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglass_color = bpy.data.materials.new(name=\"Glass\")\nglass_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent white for glass\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray for metal screw base\n\n# Step 2: Create the Glass Top\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1.5))\nglass_top = bpy.context.object\nglass_top.name = \"Glass Top\"\nglass_top.data.materials.append(glass_color)\n\n# Step 3: Create the Screw Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 0.5))\nscrew_base = bpy.context.object\nscrew_base.name = \"Screw Base\"\nscrew_base.data.materials.append(metal_color)\n\n# Step 4: Create the Filament\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.02, location=(0, 0, 1.5))\nfilament = bpy.context.object\nfilament.name = \"Filament\"\nfilament.data.materials.append(metal_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.794703246320113, "unit_n": 3, "param_ratio": 8.0}
{"id": "52370ddb-783d-48a9-a4a8-877770bd3e5d", "name": "Laundry Basket", "instruction": "Create a 3D model of a laundry basket with handles on both sides and a perforated design for ventilation.", "category": "Furnishing", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbasket_color = bpy.data.materials.new(name=\"BasketColor\")\nbasket_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Basket Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbasket_body = bpy.context.object\nbasket_body.name = \"BasketBody\"\nbasket_body.data.materials.append(basket_color)\n\n# Step 3: Create the Perforations\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.inset(thickness=0.1)\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, -0.1)})\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 1.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(x, 0, 1.25), rotation=(0, math.pi/2, 0))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(basket_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.062801225412763, "unit_n": 3, "param_ratio": 6.0}
{"id": "53262648-c9d8-400a-a6f5-887c7e8f6cde", "name": "Mop Bucket", "instruction": "Design a mop bucket with a handle for easy carrying. Include a wringer attachment on the top edge for squeezing out excess water.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbucket_color = bpy.data.materials.new(name=\"Bucket Color\")\nbucket_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nwringer_color = bpy.data.materials.new(name=\"Wringer Color\")\nwringer_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Bucket\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\nbucket = bpy.context.object\nbucket.name = \"Bucket\"\nbucket.data.materials.append(bucket_color)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=1.2, minor_radius=0.05, location=(0, 0, 1.5), rotation=(1.57, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 4: Create the Wringer\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 1, 1.5))\nwringer = bpy.context.object\nwringer.name = \"Wringer\"\nwringer.scale[0] = 2\nwringer.data.materials.append(wringer_color)\n", "color_brightness": "Dark", "verify": "human", "entropy": 3.8718290563734477, "unit_n": 3, "param_ratio": 10.666666666666666}
{"id": "abe2eefc-4930-4f06-b9c5-e0f8a4631e8d", "name": "Meditation Space", "instruction": "Envision a meditation space that evokes a sense of tranquility and focus. The area is open, with a layout that encourages a natural flow of movement and thought. It includes elements that subtly define personal space without creating barriers. Soft, indirect lighting complements the serene atmosphere. The design should facilitate a connection with one's inner self while being inviting to all who enter.", "category": "Articles for the care and handling of animals", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsoft_light = bpy.data.materials.new(name=\"Soft Light\")\nsoft_light.diffuse_color = (0.8, 0.8, 0.7, 1)  # Soft, indirect lighting color\n\n# Step 2: Create a Floor\nbpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))\nfloor = bpy.context.object\nfloor.name = \"Floor\"\nfloor.data.materials.append(soft_light)\n\n# Step 3: Create a Central Meditation Mat\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nmat = bpy.context.object\nmat.name = \"Meditation Mat\"\nmat.scale = (1, 1.5, 0.05)\nmat.data.materials.append(soft_light)\n\n# Step 4: Create Soft Lighting\nbpy.ops.object.light_add(type='AREA', radius=5, location=(0, 0, 5))\nlight = bpy.context.object\nlight.name = \"Soft Light\"\nlight.data.energy = 100\nlight.data.color = (0.8, 0.8, 0.7)\n\n# Step 5: Set World Background to a Soft Color\nbpy.context.scene.world.color = (0.9, 0.9, 0.85)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 2.484906649788001, "unit_n": 3, "param_ratio": 6.0}
{"id": "ebf5a910-e98f-4d6f-a079-ead67619c9be", "name": "Desktop Printer", "instruction": "Design a desktop printer with a paper tray at the bottom and an output tray at the top. Include a control panel with buttons and a small display screen. The printer should have a lid that can be lifted to access the ink cartridges and paper feed mechanism.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nprinter_body_color = bpy.data.materials.new(name=\"Printer Body Color\")\nprinter_body_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\npaper_tray_color = bpy.data.materials.new(name=\"Paper Tray Color\")\npaper_tray_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ncontrol_panel_color = bpy.data.materials.new(name=\"Control Panel Color\")\ncontrol_panel_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\nbutton_color = bpy.data.materials.new(name=\"Button Color\")\nbutton_color.diffuse_color = (0.9, 0.1, 0.1, 1)  # Red color\nscreen_color = bpy.data.materials.new(name=\"Screen Color\")\nscreen_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Very dark gray color\n\n# Step 2: Create the Printer Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nprinter_body = bpy.context.object\nprinter_body.name = \"Printer Body\"\nprinter_body.scale = (1.5, 1, 0.5)\nprinter_body.data.materials.append(printer_body_color)\n\n# Step 3: Create the Paper Tray\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.1, 0.25))\npaper_tray = bpy.context.object\npaper_tray.name = \"Paper Tray\"\npaper_tray.scale = (1.4, 0.2, 0.1)\npaper_tray.data.materials.append(paper_tray_color)\n\n# Step 4: Create the Output Tray\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.1, 1.1))\noutput_tray = bpy.context.object\noutput_tray.name = \"Output Tray\"\noutput_tray.scale = (1.4, 0.2, 0.1)\noutput_tray.data.materials.append(paper_tray_color)\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0.7, 0, 1.2))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (0.5, 0.2, 0.05)\ncontrol_panel.data.materials.append(control_panel_color)\n\n# Step 6: Create the Buttons\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.7 + 0.15 * i, 0, 1.25))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(button_color)\n\n# Step 7: Create the Display Screen\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.7, 0, 1.15))\nscreen = bpy.context.object\nscreen.name = \"Display Screen\"\nscreen.scale = (0.3, 0.1, 0.02)\nscreen.data.materials.append(screen_color)\n\n# Step 8: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.scale = (1.5, 1, 0.05)\nlid.data.materials.append(printer_body_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 3.184399863744156, "unit_n": 9, "param_ratio": 5.888888888888889}
{"id": "3e8ee1e0-4e9c-41ac-a872-4c54592f0e3b", "name": "Drum", "instruction": "Create a 3D model of a drum with a cylindrical body and a drumhead stretched across the top.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0.75))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 1.5))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.edge_face_add()\nbpy.ops.object.mode_set(mode='OBJECT')\ndrumhead.data.materials.append(drumhead_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.928963275954553, "unit_n": 3, "param_ratio": 6.333333333333333}
{"id": "57a2c8f0-04e0-43e1-831d-75d58b0f9f3d", "name": "Dog Bed", "instruction": "Design a 3D model of a dog bed that is suitable for medium-sized dogs. The bed should be rectangular with raised edges on all sides. Include a cushion in the center for added comfort.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"BedColor\")\nbed_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"CushionColor\")\ncushion_color.diffuse_color = (0.8, 0.7, 0.6, 1)  # Light brown color\n\n# Step 2: Create the Base of the Bed\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.scale = (1, 1.5, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.6, 0.3))\nfront_edge = bpy.context.object\nfront_edge.scale = (1, 0.1, 0.3)\nfront_edge.name = \"Front Edge\"\nfront_edge.data.materials.append(bed_color)\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.6, 0.3))\nback_edge = bpy.context.object\nback_edge.scale = (1, 0.1, 0.3)\nback_edge.name = \"Back Edge\"\nback_edge.data.materials.append(bed_color)\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.1, 0, 0.3))\nleft_edge = bpy.context.object\nleft_edge.scale = (0.1, 1.5, 0.3)\nleft_edge.name = \"Left Edge\"\nleft_edge.data.materials.append(bed_color)\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.1, 0, 0.3))\nright_edge = bpy.context.object\nright_edge.scale = (0.1, 1.5, 0.3)\nright_edge.name = \"Right Edge\"\nright_edge.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\ncushion = bpy.context.object\ncushion.scale = (0.9, 1.4, 0.1)\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.7385037603537192, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "10fa61d3-4eb7-42ca-ba03-53abad514427", "name": "Bookshelf", "instruction": "Imagine a tall bookshelf with five shelves. It should be rectangular and have a back panel. The shelves should be evenly spaced and fixed in place. The overall design should be simple and functional, without any decorative elements.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nback_panel = bpy.context.object\nback_panel.scale = (1, 0.05, 2.5)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)\n\n# Step 3: Create the Shelves\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5 + i * 0.5))\n    shelf = bpy.context.object\n    shelf.scale = (1, 0.25, 0.05)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 4: Create the Side Panels\nfor i in range(2):\n    x = 1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    side_panel = bpy.context.object\n    side_panel.scale = (0.05, 0.25, 2.5)\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7256660955097067, "unit_n": 8, "param_ratio": 2.125}
{"id": "f470da11-07a4-4516-9265-67506f50664f", "name": "Ottoman Pouf", "instruction": "Create a circular ottoman pouf with a flat top and a diameter of 20 inches.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Ottoman Pouf\n# Diameter of 20 inches is approximately 0.508 meters\ndiameter = 0.508\nradius = diameter / 2\nheight = 0.3  # Arbitrary height for the pouf\n\nbpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=(0, 0, height / 2))\nottoman = bpy.context.object\nottoman.name = \"Ottoman Pouf\"\n\n# Optional: Set a basic material for the pouf\nmaterial = bpy.data.materials.new(name=\"PoufMaterial\")\nmaterial.diffuse_color = (0.8, 0.5, 0.3, 1)  # Light brown color\nottoman.data.materials.append(material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9855962882196856, "unit_n": 1, "param_ratio": 8.0}
{"id": "886e88e7-910e-48b2-add7-212e247a5de4", "name": "Cutting Board", "instruction": "Design a rectangular cutting board with a juice groove around the edge. Include a handle on one side for easy carrying.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cutting Board\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\ncutting_board = bpy.context.object\ncutting_board.scale = (1, 0.6, 0.05)\ncutting_board.name = \"Cutting Board\"\n\n# Step 3: Create the Juice Groove\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\njuice_groove = bpy.context.object\njuice_groove.scale = (0.95, 0.55, 0.02)\njuice_groove.name = \"Juice Groove\"\n\n# Boolean difference to create the groove\nmod_bool = cutting_board.modifiers.new(name=\"Juice Groove Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = juice_groove\nbpy.context.view_layer.objects.active = cutting_board\nbpy.ops.object.modifier_apply(modifier=\"Juice Groove Boolean\")\nbpy.data.objects.remove(juice_groove)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(1.1, 0, 0.1), rotation=(1.5708, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\n\n# Boolean union to attach the handle\nmod_bool = cutting_board.modifiers.new(name=\"Handle Boolean\", type='BOOLEAN')\nmod_bool.operation = 'UNION'\nmod_bool.object = handle\nbpy.context.view_layer.objects.active = cutting_board\nbpy.ops.object.modifier_apply(modifier=\"Handle Boolean\")\nbpy.data.objects.remove(handle)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.285069774168554, "unit_n": 3, "param_ratio": 5.333333333333333}
{"id": "a1e88b8e-b4e9-4042-8483-f6d433db6290", "name": "Flower Arrangement", "instruction": "Design a 3D model of a flower arrangement. The arrangement should be in a vase with a mix of different flowers. Include flowers of varying heights and colors, arranged in a balanced and visually appealing manner.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = {\n    \"Red\": (1, 0, 0, 1),\n    \"Yellow\": (1, 1, 0, 1),\n    \"Pink\": (1, 0.75, 0.8, 1),\n    \"Purple\": (0.5, 0, 0.5, 1),\n    \"White\": (1, 1, 1, 1)\n}\n\n# Step 2: Create the Vase\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, -0.75))\nvase = bpy.context.object\nvase.name = \"Vase\"\nvase_material = bpy.data.materials.new(name=\"Vase Material\")\nvase_material.diffuse_color = (0.3, 0.3, 0.3, 1)  # Gray color\nvase.data.materials.append(vase_material)\n\n# Step 3: Create Flowers\ndef create_flower(x, y, z, color):\n    # Stem\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=z, location=(x, y, z/2))\n    stem = bpy.context.object\n    stem.name = \"Stem\"\n    stem_material = bpy.data.materials.new(name=\"Stem Material\")\n    stem_material.diffuse_color = (0, 0.5, 0, 1)  # Green color\n    stem.data.materials.append(stem_material)\n    \n    # Flower\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, z))\n    flower = bpy.context.object\n    flower.name = \"Flower\"\n    flower_material = bpy.data.materials.new(name=f\"Flower Material {color}\")\n    flower_material.diffuse_color = colors[color]\n    flower.data.materials.append(flower_material)\n\n# Generate random flowers\nflower_positions = [\n    (0.1, 0.1, 1.5),\n    (-0.1, -0.1, 1.2),\n    (0.2, -0.2, 1.7),\n    (-0.2, 0.2, 1.4),\n    (0, 0, 1.6)\n]\n\nfor pos in flower_positions:\n    create_flower(pos[0], pos[1], pos[2], random.choice(list(colors.keys())))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.6230169956364, "unit_n": 3, "param_ratio": 8.0}
{"id": "9aab4336-603e-45dd-aa7e-78c1f6d2e733", "name": "External Hard Drive", "instruction": "Can you create an external hard drive with a sleek, compact design? Include a USB-C port for connectivity.", "category": "Articles of clothing and haberdashery", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrive_color = bpy.data.materials.new(name=\"Drive Color\")\ndrive_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nusb_color = bpy.data.materials.new(name=\"USB Color\")\nusb_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Light gray color\n\n# Step 2: Create the Main Body of the Hard Drive\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.scale = (1, 0.5, 0.1)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(drive_color)\n\n# Step 3: Create the USB-C Port\nbpy.ops.mesh.primitive_cube_add(size=0.1, location=(0.95, 0, -0.05))\nusb_port = bpy.context.object\nusb_port.scale = (0.1, 0.05, 0.02)\nusb_port.name = \"USB-C Port\"\nusb_port.data.materials.append(usb_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.4260151319598084, "unit_n": 2, "param_ratio": 9.0}
{"id": "d35df6c2-e258-4f37-8110-f92de1ec2976", "name": "Webcam", "instruction": "Create a 3D model of a webcam. It should have a spherical camera lens housed in a cylindrical body, with a flat base for stable placement on a desk or monitor.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.6, location=(0, 0, 0.3))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Camera Lens\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 0.6))\nlens = bpy.context.object\nlens.name = \"Lens\"", "color_brightness": "Dark", "verify": "human", "entropy": 4.25051999268394, "unit_n": 3, "param_ratio": 4.666666666666667}
{"id": "2eae86a8-9b0c-4fc1-b552-cec3292392e6", "name": "Coffee Maker", "instruction": "Design a 3D model of a coffee maker. It should have a cylindrical body, a spout on one side, and a handle on the opposite side. Include a removable lid on top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nspout_color = bpy.data.materials.new(name=\"Spout Color\")\nspout_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nlid_color = bpy.data.materials.new(name=\"Lid Color\")\nlid_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(1.1, 0, 1.5), rotation=(0, math.pi/4, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(spout_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(-1.5, 0, 1.5), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 2.05))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(lid_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.179679676066883, "unit_n": 4, "param_ratio": 11.5}
{"id": "04ec0af2-b632-4ed2-886c-863995f59598", "name": "Syringe", "instruction": "Let's create a 3D model of a syringe. The syringe should have a cylindrical body with a plunger at one end and a needle at the other. The body should have measurement markings along its length. The plunger should have a flat end for pushing. The needle should be thin and extend from the tip of the body.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\nplunger_color = bpy.data.materials.new(name=\"Plunger Color\")\nplunger_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nneedle_color = bpy.data.materials.new(name=\"Needle Color\")\nneedle_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Almost white color\n\n# Step 2: Create the Syringe Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\nbody = bpy.context.object\nbody.name = \"Syringe Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.09, depth=1.8, location=(0, 0, 1))\nplunger = bpy.context.object\nplunger.name = \"Plunger\"\nplunger.data.materials.append(plunger_color)\n\n# Create the flat end of the plunger\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.1, location=(0, 0, 1.95))\nplunger_end = bpy.context.object\nplunger_end.name = \"Plunger End\"\nplunger_end.data.materials.append(plunger_color)\n\n# Step 4: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1, location=(0, 0, -0.5))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(needle_color)\n\n# Step 5: Create Measurement Markings (simplified as small cubes)\nfor i in range(1, 10):\n    bpy.ops.mesh.primitive_cube_add(size=0.01, location=(0.11, 0, 0.2 * i - 1))\n    marking = bpy.context.object\n    marking.name = f\"Marking {i}\"\n    marking.data.materials.append(plunger_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.51840479835806, "unit_n": 13, "param_ratio": 3.0}
{"id": "d3b30777-aecb-4db4-99d4-c293a31815ec", "name": "Pen Holder", "instruction": "Construct a cylindrical pen holder with vertical slots. The holder should be able to accommodate multiple pens.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Main Cylinder (Pen Holder)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\nholder = bpy.context.object\nholder.name = \"Pen Holder\"\n\n# Step 3: Create Slots\nnum_slots = 8\nslot_width = 0.1\nslot_height = 2.2\nslot_depth = 0.2\n\nfor i in range(num_slots):\n    angle = (2 * math.pi / num_slots) * i\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 1))\n    slot = bpy.context.object\n    slot.scale = (slot_width, slot_depth, slot_height)\n    slot.rotation_euler = (0, 0, angle)\n    slot.name = f\"Slot {i + 1}\"\n    # Boolean modifier to cut the slot out of the holder\n    mod_bool = holder.modifiers.new(type=\"BOOLEAN\", name=f\"Boolean {i + 1}\")\n    mod_bool.operation = 'DIFFERENCE'\n    mod_bool.object = slot\n    bpy.context.view_layer.objects.active = holder\n    bpy.ops.object.modifier_apply(modifier=mod_bool.name)\n    bpy.data.objects.remove(slot, do_unlink=True)\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8515809301173647, "unit_n": 2, "param_ratio": 4.5}
{"id": "88f79817-90b9-4473-aef7-e3fb480646ad", "name": "Coffee Maker", "instruction": "Could you make a coffee maker for me?", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.5, location=(0, 0, 0.85))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(silver)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.1, location=(0, 0, 1.55))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(black)\n\n# Step 5: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0.8, 0, 1.2), rotation=(0, 1.57, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(silver)\n\n# Step 6: Create the Handle\nbpy.ops.mesh.primitive_torus_add(align='WORLD', location=(-0.8, 0, 1.2), rotation=(1.57, 0, 0), major_radius=0.3, minor_radius=0.05)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.232667560262889, "unit_n": 5, "param_ratio": 8.4}
{"id": "3c418659-1248-4c6d-b60d-8425fcd4c83d", "name": "Sandwich", "instruction": "Design a sandwich with two slices of bread and a filling.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.5))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=1.8, location=(0, 0, 0))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.scale[2] = 0.2  # Make it flat\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.6287476860138907, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "63ad9dc0-d602-4087-8ab3-2cab13597712", "name": "Pet Bed", "instruction": "Design a pet bed with a rectangular shape and raised edges. The bed should have a cushioned base and be large enough for a medium-sized pet. Add a small, removable pillow in the center.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color\npillow_color = bpy.data.materials.new(name=\"Pillow Color\")\npillow_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Bed Base\"\nbase.scale = (1.5, 1, 0.1)\nbase.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\n# Front edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -1.1, 0.35))\nfront_edge = bpy.context.object\nfront_edge.name = \"Front Edge\"\nfront_edge.scale = (1.5, 0.1, 0.25)\nfront_edge.data.materials.append(bed_color)\n\n# Back edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 1.1, 0.35))\nback_edge = bpy.context.object\nback_edge.name = \"Back Edge\"\nback_edge.scale = (1.5, 0.1, 0.25)\nback_edge.data.materials.append(bed_color)\n\n# Left edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.6, 0, 0.35))\nleft_edge = bpy.context.object\nleft_edge.name = \"Left Edge\"\nleft_edge.scale = (0.1, 1, 0.25)\nleft_edge.data.materials.append(bed_color)\n\n# Right edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.6, 0, 0.35))\nright_edge = bpy.context.object\nright_edge.name = \"Right Edge\"\nright_edge.scale = (0.1, 1, 0.25)\nright_edge.data.materials.append(bed_color)\n\n# Step 4: Create the Pillow\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\npillow = bpy.context.object\npillow.name = \"Pillow\"\npillow.scale = (0.5, 0.3, 0.1)\npillow.data.materials.append(pillow_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.947004770161297, "unit_n": 6, "param_ratio": 5.666666666666667}
{"id": "b2ca8068-82a9-4595-82f5-ae3557b93991", "name": "Bookshelf", "instruction": "Construct a 3D model of a bookshelf. It should have five shelves, evenly spaced. The shelves should be supported by two vertical sides and a back panel. The top of the bookshelf should be flat.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete(use_global=False)\n\n# Define the dimensions\nshelf_width = 2\nshelf_height = 0.1\nshelf_depth = 0.4\nshelf_spacing = 0.5\nside_thickness = 0.1\nback_thickness = 0.05\ntotal_height = 5 * shelf_spacing\n\n# Create the shelves\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, i * shelf_spacing))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n\n# Create the sides\nfor x in (-shelf_width / 2 + side_thickness / 2, shelf_width / 2 - side_thickness / 2):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, (total_height - shelf_height) / 2))\n    side = bpy.context.object\n    side.scale = (side_thickness / 2, shelf_depth / 2, total_height / 2)\n    side.name = f\"Side {'Left' if x < 0 else 'Right'}\"\n\n# Create the back panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -shelf_depth / 2 + back_thickness / 2, (total_height - shelf_height) / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, back_thickness / 2, total_height / 2)\nback_panel.name = \"Back Panel\"\n\n# Create the top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, total_height))\ntop = bpy.context.object\ntop.scale = (shelf_width / 2, shelf_depth / 2, shelf_height / 2)\ntop.name = \"Top\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.537992107891232, "unit_n": 8, "param_ratio": 2.0}
{"id": "0bf1d9a7-427e-41e3-95d8-a0004cbd47c4", "name": "Drum", "instruction": "Design a drum with a cylindrical body and a circular drumhead stretched across the top.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Drum Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 0.75))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.02)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrumhead.data.materials.append(drumhead_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "5a7bc0aa-57b9-4c8b-ba6d-a08e51bd11fa", "name": "Bird Perch", "instruction": "Create a 3D model of a bird perch. It should be a simple horizontal bar supported by two vertical stands, suitable for a small bird to rest on.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Horizontal Bar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.0, location=(0, 0, 0.5), rotation=(0, 1.5708, 0))\nbar = bpy.context.object\nbar.name = \"Horizontal Bar\"\n\n# Step 3: Create the Vertical Stands\nfor i in range(2):\n    x = 0.45 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, 0, 0.25))\n    stand = bpy.context.object\n    stand.name = f\"Vertical Stand {i + 1}\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8815333803662035, "unit_n": 3, "param_ratio": 4.333333333333333}
{"id": "90ffe7c9-8c21-4650-a1a4-94a53e771616", "name": "Dog Bed", "instruction": "Could you please create a 3D model of a dog bed? The bed should be round with raised edges and a soft cushion in the center. Add a cute paw print design on the cushion.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\npaw_color = bpy.data.materials.new(name=\"Paw Color\")\npaw_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.2, location=(0, 0, 0.2))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=1.3, depth=0.1, location=(0, 0, 0.15))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(cushion_color)\n\n# Step 5: Create the Paw Print Design\n# Paw base\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0.5, 0.25))\npaw_base = bpy.context.object\npaw_base.name = \"Paw Base\"\npaw_base.data.materials.append(paw_color)\n\n# Paw toes\nfor i in range(4):\n    angle = math.pi / 4 * (i - 1.5)\n    x = 0.3 * math.cos(angle)\n    y = 0.5 + 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.07, location=(x, y, 0.25))\n    paw_toe = bpy.context.object\n    paw_toe.name = f\"Paw Toe {i + 1}\"\n    paw_toe.data.materials.append(paw_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.978198431482008, "unit_n": 8, "param_ratio": 4.75}
{"id": "ce96579b-5269-4be4-80f5-6b9994ab6d3a", "name": "Fedora Hat", "instruction": "Create a 3D fedora hat with a creased crown and a brim that goes all the way around. The hat should have a ribbon wrapped around the base of the crown.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"HatColor\")\nhat_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\nribbon_color = bpy.data.materials.new(name=\"RibbonColor\")\nribbon_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Black color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=1, radius2=0.5, depth=1.5, location=(0, 0, 0.75))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Crease the Crown\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\ncrown.data.vertices[32].select = True\ncrown.data.vertices[33].select = True\ncrown.data.vertices[34].select = True\ncrown.data.vertices[35].select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, 0, -0.3))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 5: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.5))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.495684923426079, "unit_n": 3, "param_ratio": 9.0}
{"id": "3f3ad69f-988a-428f-94c9-8fe971d15266", "name": "Drum", "instruction": "Design a drum. It should be cylindrical with a taut surface on the top for striking.", "category": "Tools and hardware", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\ndrum_surface_color = bpy.data.materials.new(name=\"Drum Surface Color\")\ndrum_surface_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light grey color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 1))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drum Surface\nbpy.ops.mesh.primitive_circle_add(radius=1, location=(0, 0, 2))\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.05)})\nbpy.ops.object.mode_set(mode='OBJECT')\ndrum_surface = bpy.context.object\ndrum_surface.name = \"Drum Surface\"\ndrum_surface.data.materials.append(drum_surface_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 9.5}
{"id": "0019e944-14bf-4517-83a1-4b87cb5b38b4", "name": "Drumsticks", "instruction": "Create a 3D model of drumsticks. They should be cylindrical and taper towards one end, which is rounded.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Drumstick\ndef create_drumstick(location):\n    # Create the main cylinder part of the drumstick\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=location)\n    drumstick = bpy.context.object\n    drumstick.name = \"Drumstick Body\"\n    \n    # Create the tapered end\n    bpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(location[0], location[1], location[2] + 0.6))\n    tapered_end = bpy.context.object\n    tapered_end.name = \"Tapered End\"\n    \n    # Create the rounded tip\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(location[0], location[1], location[2] + 0.7))\n    rounded_tip = bpy.context.object\n    rounded_tip.name = \"Rounded Tip\"\n    \n    # Join all parts into a single object\n    bpy.ops.object.select_all(action='DESELECT')\n    drumstick.select_set(True)\n    tapered_end.select_set(True)\n    rounded_tip.select_set(True)\n    bpy.context.view_layer.objects.active = drumstick\n    bpy.ops.object.join()\n\n# Create two drumsticks\ncreate_drumstick(location=(0, 0, 0))\ncreate_drumstick(location=(0.2, 0, 0))\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.918104698319852, "unit_n": 3, "param_ratio": 4.0}
{"id": "f0131cef-983c-4bb7-8d74-957aec06d066", "name": "Chess Set", "instruction": "Design a chess set complete with a board and all the pieces. The board should be an 8x8 grid with alternating black and white squares. Each piece should be distinct and recognizable, with the standard pieces including pawns, rooks, knights, bishops, a queen, and a king. Ensure the pieces are appropriately sized relative to the board.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\nfor i in range(board_size):\n    for j in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(i * square_size, j * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square_{i}_{j}\"\n        if (i + j) % 2 == 0:\n            square.data.materials.append(white)\n        else:\n            square.data.materials.append(black)\n\n# Step 3: Create a simple pawn piece\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0.2))\npawn_head = bpy.context.object\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.4, location=(0, 0, 0))\npawn_body = bpy.context.object\n\n# Combine the pawn head and body into one object\nbpy.ops.object.select_all(action='DESELECT')\npawn_head.select_set(True)\npawn_body.select_set(True)\nbpy.context.view_layer.objects.active = pawn_body\nbpy.ops.object.join()\npawn = bpy.context.object\npawn.name = \"Pawn\"\n\n# Step 4: Duplicate pawns for all positions\npawn_positions = [(x, y) for x in range(board_size) for y in [1, 6]]\nfor pos in pawn_positions:\n    new_pawn = pawn.copy()\n    new_pawn.location = (pos[0] * square_size, pos[1] * square_size, 0)\n    bpy.context.collection.objects.link(new_pawn)\n\n# Step 5: Create other pieces (simplified versions)\n# Rook\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 0, 0.2))\nrook = bpy.context.object\nrook.name = \"Rook\"\n\n# Knight\nbpy.ops.mesh.primitive_cone_add(radius1=0.2, depth=0.6, location=(0, 0, 0.3))\nknight = bpy.context.object\nknight.name = \"Knight\"\n\n# Bishop\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0.3))\nbishop = bpy.context.object\nbishop.name = \"Bishop\"\n\n# Queen\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(0, 0, 0.4))\nqueen = bpy.context.object\nqueen.name = \"Queen\"\n\n# King\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0.5))\nking = bpy.context.object\nking.name = \"King\"\n\n# Step 6: Place the pieces on the board\npiece_positions = {\n    \"Rook\": [(0, 0), (7, 0), (0, 7), (7, 7)],\n    \"Knight\": [(1, 0), (6, 0), (1, 7), (6, 7)],\n    \"Bishop\": [(2, 0), (5, 0), (2, 7), (5, 7)],\n    \"Queen\": [(3, 0), (3, 7)],\n    \"King\": [(4, 0), (4, 7)]\n}\n\nfor piece_name, positions in piece_positions.items():\n    piece = bpy.data.objects[piece_name]\n    for pos in positions:\n        new_piece = piece.copy()\n        new_piece.location = (pos[0] * square_size, pos[1] * square_size, 0)\n        bpy.context.collection.objects.link(new_piece)\n\n# Remove the original pieces\nbpy.data.objects.remove(pawn)\nbpy.data.objects.remove(rook)\nbpy.data.objects.remove(knight)\nbpy.data.objects.remove(bishop)\nbpy.data.objects.remove(queen)\nbpy.data.objects.remove(king)", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.614069774833867, "unit_n": 8, "param_ratio": 5.375}
{"id": "bad57969-f818-4468-a2ce-005782552e66", "name": "Notebook", "instruction": "Can you create a 3D model of a spiral-bound notebook? The notebook should have a cover and several pages, with the spiral binding on the left side. The cover should be plain, with no text or images.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncover_color = bpy.data.materials.new(name=\"CoverColor\")\ncover_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color for the cover\npage_color = bpy.data.materials.new(name=\"PageColor\")\npage_color.diffuse_color = (1, 1, 1, 1)  # White color for the pages\nspiral_color = bpy.data.materials.new(name=\"SpiralColor\")\nspiral_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the spiral\n\n# Step 2: Create the Cover\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\ncover = bpy.context.object\ncover.name = \"Cover\"\ncover.scale[1] = 1.5\ncover.data.materials.append(cover_color)\n\n# Step 3: Create the Pages\nfor i in range(10):\n    bpy.ops.mesh.primitive_plane_add(size=1.95, location=(0, 0, 0.01 * (i + 1)))\n    page = bpy.context.object\n    page.name = f\"Page {i + 1}\"\n    page.scale[1] = 1.45\n    page.data.materials.append(page_color)\n\n# Step 4: Create the Spiral Binding\nfor i in range(10):\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(-1.05, 0.15 * (i - 4.5), 0.05))\n    spiral = bpy.context.object\n    spiral.name = f\"Spiral {i + 1}\"\n    spiral.rotation_euler[1] = math.pi / 2\n    spiral.data.materials.append(spiral_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9839086001808304, "unit_n": 21, "param_ratio": 1.3333333333333333}
{"id": "2609925b-e8bd-4654-a7be-b2076c6d533e", "name": "Soap Dish", "instruction": "Create a simple soap dish. It should be rectangular with slightly raised edges to hold the soap in place.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Base of the Soap Dish\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbpy.ops.transform.resize(value=(1, 0.6, 0.1))\n\n# Step 3: Create the Raised Edges\n# Front Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.65, 0.25))\nfront_edge = bpy.context.object\nfront_edge.name = \"Front Edge\"\nbpy.ops.transform.resize(value=(1, 0.05, 0.15))\n\n# Back Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0.65, 0.25))\nback_edge = bpy.context.object\nback_edge.name = \"Back Edge\"\nbpy.ops.transform.resize(value=(1, 0.05, 0.15))\n\n# Left Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(-1.05, 0, 0.25))\nleft_edge = bpy.context.object\nleft_edge.name = \"Left Edge\"\nbpy.ops.transform.resize(value=(0.05, 0.6, 0.15))\n\n# Right Edge\nbpy.ops.mesh.primitive_cube_add(size=2, location=(1.05, 0, 0.25))\nright_edge = bpy.context.object\nright_edge.name = \"Right Edge\"\nbpy.ops.transform.resize(value=(0.05, 0.6, 0.15))", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.5798439652180236, "unit_n": 5, "param_ratio": 4.0}
{"id": "962ed8cc-1d8a-4d32-9595-6e613491ba54", "name": "Dog Bed", "instruction": "Create a cozy dog bed. The bed should be round with raised edges. Add a soft cushion in the center. Ensure the size is suitable for a medium-sized dog. The bed should have a simple, inviting look.", "category": "Medical and laboratory equipment", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\ncushion_color = bpy.data.materials.new(name=\"Cushion Color\")\ncushion_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 0.1))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edges\nbpy.ops.mesh.primitive_torus_add(major_radius=1.5, minor_radius=0.3, location=(0, 0, 0.35))\nraised_edges = bpy.context.object\nraised_edges.name = \"Raised Edges\"\nraised_edges.data.materials.append(bed_color)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1.2, location=(0, 0, 0.3))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.scale[2] = 0.2  # Flatten the sphere to make it look like a cushion\ncushion.data.materials.append(cushion_color)", "color_brightness": "Bright", "verify": "human", "entropy": 5.637153840370645, "unit_n": 3, "param_ratio": 8.0}
{"id": "6b400bda-ec04-42c2-85a9-202ae7f9f103", "name": "Chessboard", "instruction": "Can you design a chessboard? Include an 8x8 grid with alternating light and dark squares. Make sure the squares are evenly sized.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square = bpy.data.materials.new(name=\"Light Square\")\nlight_square.diffuse_color = (1, 1, 1, 1)  # White color\ndark_square = bpy.data.materials.new(name=\"Dark Square\")\ndark_square.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Chessboard\nsquare_size = 1\nfor row in range(8):\n    for col in range(8):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        square.name = f\"Square {row * 8 + col + 1}\"\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square)\n        else:\n            square.data.materials.append(dark_square)\n\n# Step 3: Adjust the origin of the chessboard to the center\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')\nbpy.ops.object.select_all(action='DESELECT')", "color_brightness": "Very Dark", "verify": "human", "entropy": 4.332169878499658, "unit_n": 64, "param_ratio": 0.203125}
{"id": "e3fac979-68f9-4775-97ef-17bf565bef16", "name": "Sandwich", "instruction": "Create a simple sandwich. Start with two slices of bread. Place a slice of cheese and a slice of ham between them. Add a leaf of lettuce and a slice of tomato. Close the sandwich with the second slice of bread.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.85, 0.35, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.36, 0.72, 0.36, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.15, 1)  # Red color for tomato\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Cheese\nbpy.ops.mesh.primitive_cube_add(size=0.9, location=(0, 0, 0.2))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create the Ham\nbpy.ops.mesh.primitive_cube_add(size=0.9, location=(0, 0, 0.3))\nham = bpy.context.object\nham.scale[2] = 0.05\nham.name = \"Ham\"\nham.data.materials.append(ham_color)\n\n# Step 5: Create the Lettuce\nbpy.ops.mesh.primitive_cube_add(size=0.9, location=(0, 0, 0.4))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 6: Create the Tomato\nbpy.ops.mesh.primitive_cube_add(size=0.9, location=(0, 0, 0.5))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.1344498183675666, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "784955e9-a9e7-4488-b8f8-f28238b1447e", "name": "Pet Food Bowl", "instruction": "Can you generate a simple bowl for pet food?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nbowl_color = bpy.data.materials.new(name=\"BowlColor\")\nbowl_color.diffuse_color = (0.8, 0.3, 0.1, 1)  # A reddish-orange color\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 3: Hollow out the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=0.4, location=(0, 0, 0.05))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"InnerBowl\"\n\n# Boolean modifier to hollow out the bowl\nbpy.context.view_layer.objects.active = bowl\nmod_bool = bowl.modifiers.new(name=\"Boolean\", type='BOOLEAN')\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.use_self = True\nmod_bool.object = inner_bowl\nbpy.ops.object.modifier_apply(modifier=\"Boolean\")\n\n# Delete the inner cylinder used for hollowing\nbpy.data.objects.remove(inner_bowl, do_unlink=True)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.705713663071983, "unit_n": 2, "param_ratio": 7.5}
{"id": "d0ce95eb-a803-4442-9e53-027475547a51", "name": "Sandwich", "instruction": "Let's design a sandwich. Start with two slices of bread, each about 1cm thick. Add a layer of lettuce on the bottom slice, followed by three slices of tomato. Place two slices of cheese on top, and then add five slices of ham. Close the sandwich with the top slice of bread.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.76, 0.53, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.1, 0.1, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1, 0.83, 0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nbottom_bread = bpy.context.object\nbottom_bread.scale.z = 0.05\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.55))\nlettuce = bpy.context.object\nlettuce.scale.z = 0.02\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Slices\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.05, location=(0, 0.3 * (i - 1), 0.6))\n    tomato = bpy.context.object\n    tomato.name = f\"Tomato {i + 1}\"\n    tomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Slices\nfor i in range(2):\n    bpy.ops.mesh.primitive_cube_add(size=0.8, location=(0, 0, 0.65 + i * 0.05))\n    cheese = bpy.context.object\n    cheese.scale.z = 0.01\n    cheese.name = f\"Cheese {i + 1}\"\n    cheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Slices\nfor i in range(5):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.02, location=(0, 0, 0.75 + i * 0.02))\n    ham = bpy.context.object\n    ham.name = f\"Ham {i + 1}\"\n    ham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.9))\ntop_bread = bpy.context.object\ntop_bread.scale.z = 0.05\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.72062274995087, "unit_n": 13, "param_ratio": 3.923076923076923}
{"id": "996458d6-9621-420c-a9fa-b422afa2df74", "name": "Dog Bed", "instruction": "Create a 3D model of a dog bed. The bed should be circular with a raised edge. Add a small, chew toy inside.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbed_color = bpy.data.materials.new(name=\"Bed Color\")\nbed_color.diffuse_color = (0.5, 0.3, 0.2, 1)  # Brown color for the bed\ntoy_color = bpy.data.materials.new(name=\"Toy Color\")\ntoy_color.diffuse_color = (1, 0, 0, 1)  # Red color for the chew toy\n\n# Step 2: Create the Bed Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbed_base = bpy.context.object\nbed_base.name = \"Bed Base\"\nbed_base.data.materials.append(bed_color)\n\n# Step 3: Create the Raised Edge\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.1, location=(0, 0, 0.1))\nraised_edge = bpy.context.object\nraised_edge.name = \"Raised Edge\"\nraised_edge.data.materials.append(bed_color)\n\n# Step 4: Create the Chew Toy\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0.3, 0.3, 0.2))\nchew_toy = bpy.context.object\nchew_toy.name = \"Chew Toy\"\nchew_toy.data.materials.append(toy_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.17467404091681, "unit_n": 3, "param_ratio": 8.0}
{"id": "a279fe91-e74c-4dc1-beb5-ca4efbcfc125", "name": "Portable Hard Drive", "instruction": "Please design a portable hard drive with USB connectivity. It should have an LED indicator to show data transfer status.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color for LED\n\n# Step 2: Create the Hard Drive Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Hard Drive Body\"\nbody.scale = (1, 0.5, 0.1)\nbody.data.materials.append(black)\n\n# Step 3: Create the USB Connector\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, -0.6, 0))\nusb_connector = bpy.context.object\nusb_connector.name = \"USB Connector\"\nusb_connector.scale = (0.2, 0.1, 0.05)\nusb_connector.data.materials.append(black)\n\n# Step 4: Create the LED Indicator\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.9, 0.4, 0.1))\nled_indicator = bpy.context.object\nled_indicator.name = \"LED Indicator\"\nled_indicator.data.materials.append(blue)", "color_brightness": "Very Dark", "verify": "human", "entropy": 2.104782031504307, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "b3dfc0e7-4346-4676-854d-9efeb89d8e41", "name": "Sofa", "instruction": "Please create a 3D model of a sofa. It should have three cushions on the seat, two armrests, and a backrest. Make it look comfortable and inviting.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # A comfortable brown color\n\n# Step 2: Create the Base of the Sofa\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.name = \"Sofa Base\"\nbase.scale[0] = 2\nbase.scale[1] = 1\nbase.scale[2] = 0.2\nbase.data.materials.append(sofa_color)\n\n# Step 3: Create the Cushions\nfor i in range(3):\n    x = (i - 1) * 1.3\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.scale[0] = 1\n    cushion.scale[1] = 0.9\n    cushion.scale[2] = 0.2\n    cushion.data.materials.append(sofa_color)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.2))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2\nbackrest.scale[1] = 0.2\nbackrest.scale[2] = 0.8\nbackrest.data.materials.append(sofa_color)\n\n# Step 5: Create the Armrests\nfor i in range(2):\n    x = (i * 4 - 2) * 1.1\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.9))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2\n    armrest.scale[1] = 1\n    armrest.scale[2] = 0.5\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.7777991262494544, "unit_n": 7, "param_ratio": 3.0}
{"id": "d09f9a98-8dd8-4d62-bcfa-0e4570f1aec1", "name": "Paper Clip", "instruction": "Create a simple 3D model of a paper clip. It should be a single piece of bent wire, approximately 1 inch long.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Paper Clip\n# Define the curve data\ncurve_data = bpy.data.curves.new(name='PaperClipCurve', type='CURVE')\ncurve_data.dimensions = '3D'\ncurve_data.resolution_u = 12\n\n# Define the spline\nspline = curve_data.splines.new(type='BEZIER')\nspline.bezier_points.add(7)  # 8 points in total\n\n# Set the points\npoints = [\n    (0, 0, 0),\n    (0.1, 0.2, 0),\n    (0.3, 0.3, 0),\n    (0.5, 0.2, 0),\n    (0.6, 0, 0),\n    (0.5, -0.2, 0),\n    (0.3, -0.3, 0),\n    (0.1, -0.2, 0)\n]\n\nfor i, point in enumerate(points):\n    bp = spline.bezier_points[i]\n    bp.co = point\n    bp.handle_left_type = bp.handle_right_type = 'AUTO'\n\n# Create the curve object\ncurve_object = bpy.data.objects.new('PaperClip', curve_data)\nbpy.context.collection.objects.link(curve_object)\n\n# Step 3: Add a bevel to give it thickness\ncurve_data.bevel_depth = 0.02\ncurve_data.bevel_resolution = 4", "color_brightness": "Very Bright", "verify": "human", "entropy": 0.0, "unit_n": 1, "param_ratio": 1.0}
{"id": "a4c130ef-4e7c-40f9-9292-9b29f4ef04b4", "name": "Light Bulb", "instruction": "Can you create a simple light bulb for me? Thanks!", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Bulb (Sphere)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0.75))\nbulb = bpy.context.object\nbulb.name = \"Bulb\"\nbulb_material = bpy.data.materials.new(name=\"BulbMaterial\")\nbulb_material.diffuse_color = (1, 1, 1, 1)  # White color\nbulb.data.materials.append(bulb_material)\n\n# Step 3: Create the Base (Cylinder)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase_material = bpy.data.materials.new(name=\"BaseMaterial\")\nbase_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nbase.data.materials.append(base_material)", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.499851640222841, "unit_n": 2, "param_ratio": 9.5}
{"id": "a27c3355-9d07-451d-ba42-a9a59ab06432", "name": "Sandwich", "instruction": "Craft a 3D model of a sandwich with layers of bread, lettuce, tomato, and cheese.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.89, 0.15, 0.07, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color\n\n# Step 2: Create the Bottom Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.2\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.1\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.1\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.8))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.1\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1.0))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.2\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2729911457779695, "unit_n": 5, "param_ratio": 8.0}
{"id": "9f884d01-a501-45ad-8c62-5fecfe3e0928", "name": "Pet Bowl", "instruction": "Create a round pet bowl with a slightly raised rim. It should have a non-slip base.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbowl_color = bpy.data.materials.new(name=\"Bowl Color\")\nbowl_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the bowl\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the non-slip base\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(bowl_color)\n\n# Step 3: Create the Inner Part of the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.4, location=(0, 0, 0.45))\ninner_bowl = bpy.context.object\ninner_bowl.name = \"Inner Bowl\"\ninner_bowl.data.materials.append(bowl_color)\n\n# Boolean difference to create the hollow part\nbpy.context.view_layer.objects.active = bowl\nmod_bool = bowl.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nmod_bool.operation = 'DIFFERENCE'\nmod_bool.object = inner_bowl\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\nbpy.data.objects.remove(inner_bowl)\n\n# Step 4: Create the Raised Rim\nbpy.ops.mesh.primitive_torus_add(major_radius=1.05, minor_radius=0.05, location=(0, 0, 0.5))\nrim = bpy.context.object\nrim.name = \"Rim\"\nrim.data.materials.append(bowl_color)\n\n# Step 5: Create the Non-Slip Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.715142278955222, "unit_n": 4, "param_ratio": 7.5}
{"id": "a7e72b50-2f98-4b98-951d-6bac8194b78f", "name": "Blender", "instruction": "Design a blender with a simple base and a transparent jar on top.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\njar_color = bpy.data.materials.new(name=\"Jar Color\")\njar_color.diffuse_color = (1, 1, 1, 0.1)  # Transparent color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 0.25))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Jar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=2, location=(0, 0, 1.5))\njar = bpy.context.object\njar.name = \"Jar\"\njar.data.materials.append(jar_color)\n\n# Step 4: Create the Jar Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.85, depth=0.1, location=(0, 0, 2.55))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(base_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.659885851703786, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "b02daa09-4413-4a65-b21b-f73a603e230e", "name": "Herringbone vs. Chevron", "instruction": "Can you model two wood flooring patterns side by side, one herringbone and one chevron, for comparison?", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the wood color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Function to create a plank\ndef create_plank(name, location, rotation):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=location, rotation=rotation)\n    plank = bpy.context.object\n    plank.scale = (0.1, 1, 0.02)\n    plank.name = name\n    plank.data.materials.append(wood_color)\n    return plank\n\n# Step 2: Create Herringbone Pattern\nherringbone_offset = 0.6\nfor i in range(5):\n    for j in range(5):\n        x = i * herringbone_offset\n        y = j * herringbone_offset\n        create_plank(f\"Herringbone Plank {i}-{j}A\", (x, y, 0), (0, 0, math.radians(45)))\n        create_plank(f\"Herringbone Plank {i}-{j}B\", (x + herringbone_offset / 2, y, 0), (0, 0, math.radians(-45)))\n\n# Step 3: Create Chevron Pattern\nchevron_offset = 0.6\nchevron_x_offset = 3.5  # Offset to place Chevron pattern next to Herringbone\nfor i in range(5):\n    for j in range(5):\n        x = chevron_x_offset + i * chevron_offset\n        y = j * chevron_offset\n        create_plank(f\"Chevron Plank {i}-{j}A\", (x, y, 0), (0, 0, math.radians(45)))\n        create_plank(f\"Chevron Plank {i}-{j}B\", (x + chevron_offset / 2, y, 0), (0, 0, math.radians(-45)))\n", "color_brightness": "Dark", "verify": "human", "entropy": 5.029707606315181, "unit_n": 1, "param_ratio": 6.0}
{"id": "fce2d8e4-5d00-41dd-a9e6-0a6b04785ad4", "name": "Birthday Cake", "instruction": "Design a birthday cake with three layers. The bottom layer is chocolate, the middle layer is vanilla, and the top layer is strawberry. Add decorative icing around the edges and place candles on top.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nchocolate = bpy.data.materials.new(name=\"Chocolate\")\nchocolate.diffuse_color = (0.24, 0.15, 0.10, 1)  # Chocolate color\nvanilla = bpy.data.materials.new(name=\"Vanilla\")\nvanilla.diffuse_color = (1.0, 0.98, 0.8, 1)  # Vanilla color\nstrawberry = bpy.data.materials.new(name=\"Strawberry\")\nstrawberry.diffuse_color = (1.0, 0.36, 0.36, 1)  # Strawberry color\nicing = bpy.data.materials.new(name=\"Icing\")\nicing.diffuse_color = (1.0, 1.0, 1.0, 1)  # White icing color\n\n# Step 2: Create the Bottom Layer (Chocolate)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.5, location=(0, 0, 0.25))\nbottom_layer = bpy.context.object\nbottom_layer.name = \"Bottom Layer\"\nbottom_layer.data.materials.append(chocolate)\n\n# Step 3: Create the Middle Layer (Vanilla)\nbpy.ops.mesh.primitive_cylinder_add(radius=1.2, depth=0.5, location=(0, 0, 0.75))\nmiddle_layer = bpy.context.object\nmiddle_layer.name = \"Middle Layer\"\nmiddle_layer.data.materials.append(vanilla)\n\n# Step 4: Create the Top Layer (Strawberry)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.5, location=(0, 0, 1.25))\ntop_layer = bpy.context.object\ntop_layer.name = \"Top Layer\"\ntop_layer.data.materials.append(strawberry)\n\n# Step 5: Add Decorative Icing Around the Edges\nfor i in range(3):\n    radius = 1.5 - i * 0.3\n    bpy.ops.mesh.primitive_torus_add(major_radius=radius, minor_radius=0.05, location=(0, 0, 0.5 + i * 0.5))\n    icing_layer = bpy.context.object\n    icing_layer.name = f\"Icing Layer {i + 1}\"\n    icing_layer.data.materials.append(icing)\n\n# Step 6: Add Candles on Top\nfor i in range(8):\n    angle = i * (3.14159 / 4)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(x, y, 1.55))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(icing)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.242842652705162, "unit_n": 14, "param_ratio": 3.142857142857143}
{"id": "bf51e6d4-7d62-4c30-8304-771bd83d9570", "name": "Coffee Grinder", "instruction": "Model a coffee grinder. It should have a cylindrical body with a detachable top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbody_color = bpy.data.materials.new(name=\"Body Color\")\nbody_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Medium brown color\ntop_color = bpy.data.materials.new(name=\"Top Color\")\ntop_color.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(body_color)\n\n# Step 3: Create the Detachable Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.2, location=(0, 0, 1.3))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(top_color)", "color_brightness": "Bright", "verify": "human", "entropy": 4.41881327606965, "unit_n": 2, "param_ratio": 10.0}
{"id": "a32ee573-d5fa-4fa2-8c0f-63efee1c12e5", "name": "Floral Pattern", "instruction": "Could you design a floral pattern?", "category": "Games, toys, tents and sports goods", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npetal_color = bpy.data.materials.new(name=\"Petal Color\")\npetal_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\ncenter_color = bpy.data.materials.new(name=\"Center Color\")\ncenter_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\n\n# Step 2: Create the Petals\nnum_petals = 8\nradius = 1\nfor i in range(num_petals):\n    angle = i * (2 * math.pi / num_petals)\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(x, y, 0))\n    petal = bpy.context.object\n    petal.name = f\"Petal {i + 1}\"\n    petal.data.materials.append(petal_color)\n\n# Step 3: Create the Center\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Center\"\ncenter.data.materials.append(center_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.665763001399995, "unit_n": 2, "param_ratio": 9.0}
{"id": "e6c13c94-17a2-48f7-85bf-cb2f9ca0b6ef", "name": "Puzzle Cube", "instruction": "Generate a 3D model of a puzzle cube with six faces, each divided into nine smaller squares.", "category": "Furnishing", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors for each face (using standard Rubik's Cube colors)\ncolors = {\n    \"White\": (1, 1, 1, 1),\n    \"Yellow\": (1, 1, 0, 1),\n    \"Red\": (1, 0, 0, 1),\n    \"Orange\": (1, 0.5, 0, 1),\n    \"Blue\": (0, 0, 1, 1),\n    \"Green\": (0, 1, 0, 1)\n}\n\n# Create materials for each color\nmaterials = {}\nfor color_name, color_value in colors.items():\n    mat = bpy.data.materials.new(name=color_name)\n    mat.diffuse_color = color_value\n    materials[color_name] = mat\n\n# Step 2: Create the Puzzle Cube\nsize = 2.0\ngap = 0.02\nsmall_cube_size = (size - 2 * gap) / 3\n\n# Create the 3x3x3 smaller cubes\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            bpy.ops.mesh.primitive_cube_add(size=small_cube_size, location=(\n                x * (small_cube_size + gap) - size / 2 + small_cube_size / 2,\n                y * (small_cube_size + gap) - size / 2 + small_cube_size / 2,\n                z * (small_cube_size + gap) - size / 2 + small_cube_size / 2\n            ))\n            small_cube = bpy.context.object\n            small_cube.name = f\"Small Cube ({x},{y},{z})\"\n\n            # Assign materials to the faces of the small cubes\n            if x == 0:\n                small_cube.data.materials.append(materials[\"Red\"])\n            if x == 2:\n                small_cube.data.materials.append(materials[\"Orange\"])\n            if y == 0:\n                small_cube.data.materials.append(materials[\"White\"])\n            if y == 2:\n                small_cube.data.materials.append(materials[\"Yellow\"])\n            if z == 0:\n                small_cube.data.materials.append(materials[\"Blue\"])\n            if z == 2:\n                small_cube.data.materials.append(materials[\"Green\"])", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.9889840465642736, "unit_n": 27, "param_ratio": 0.1111111111111111}
{"id": "99ea369c-1d3d-4642-a759-9cc4c1b54237", "name": "Soccer Ball", "instruction": "Please create a 3D model of a soccer ball.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Soccer Ball\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsoccer_ball = bpy.context.object\nsoccer_ball.name = \"Soccer Ball\"\n\n# Step 3: Add a basic white material to the ball\nwhite_material = bpy.data.materials.new(name=\"White Material\")\nwhite_material.diffuse_color = (1, 1, 1, 1)  # White color\nsoccer_ball.data.materials.append(white_material)\n", "color_brightness": "Very Bright", "verify": "human", "entropy": 5.454179952634252, "unit_n": 1, "param_ratio": 9.0}
{"id": "ab6c939b-835e-4ef2-bcb4-fc90b311b153", "name": "Cat Scratching Post", "instruction": "Create a cat scratching post. It should have a sturdy base, a vertical post covered in a material suitable for scratching, and a small platform on top.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors/materials\nwood_material = bpy.data.materials.new(name=\"Wood\")\nwood_material.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown color\n\nscratch_material = bpy.data.materials.new(name=\"ScratchMaterial\")\nscratch_material.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, -0.1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale[2] = 0.1  # Make it flat\nbase.data.materials.append(wood_material)\n\n# Step 3: Create the Vertical Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=3, location=(0, 0, 1.5))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(scratch_material)\n\n# Step 4: Create the Top Platform\nbpy.ops.mesh.primitive_cube_add(size=1.5, location=(0, 0, 3.1))\nplatform = bpy.context.object\nplatform.name = \"Platform\"\nplatform.scale[2] = 0.1  # Make it flat\nplatform.data.materials.append(wood_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.950574812279168, "unit_n": 3, "param_ratio": 7.666666666666667}
{"id": "c9296df5-fcaa-4363-86df-7d84deb216c0", "name": "Pizza", "instruction": "I need a 3D model of a pizza. It should have a round shape with a thin crust. The toppings should include pepperoni slices, melted cheese, and a few basil leaves.", "category": "Furnishing", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for the crust\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.2, 1)  # Yellow color for the cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni\")\npepperoni_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the pepperoni\nbasil_color = bpy.data.materials.new(name=\"Basil\")\nbasil_color.diffuse_color = (0.0, 0.5, 0.0, 1)  # Green color for the basil\n\n# Step 2: Create the Pizza Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1.0, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Pizza Base\"\nbase.data.materials.append(crust_color)\n\n# Step 3: Create the Cheese Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.06))\ncheese = bpy.context.object\ncheese.name = \"Cheese Layer\"\ncheese.data.materials.append(cheese_color)\n\n# Step 4: Create Pepperoni Slices\nnum_pepperoni = 8\nfor i in range(num_pepperoni):\n    angle = i * (2 * math.pi / num_pepperoni)\n    x = 0.6 * math.cos(angle)\n    y = 0.6 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(x, y, 0.08))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)\n\n# Step 5: Create Basil Leaves\nnum_basil = 4\nfor i in range(num_basil):\n    angle = i * (2 * math.pi / num_basil) + math.pi / num_basil\n    x = 0.3 * math.cos(angle)\n    y = 0.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_plane_add(size=0.2, location=(x, y, 0.09))\n    basil = bpy.context.object\n    basil.name = f\"Basil {i + 1}\"\n    basil.data.materials.append(basil_color)\n    bpy.ops.transform.rotate(value=math.pi / 4, orient_axis='X')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.7630628506304316, "unit_n": 4, "param_ratio": 9.75}
{"id": "f75b596c-cd7e-43f5-bee6-21c71f2a714e", "name": "Sofa", "instruction": "Create a sofa with a rectangular base and a backrest. It should have armrests on both sides.", "category": "Furnishing", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_material = bpy.data.materials.new(name=\"SofaMaterial\")\nsofa_material.diffuse_color = (0.5, 0.2, 0.2, 1)  # Medium bright reddish color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nbase = bpy.context.object\nbase.scale = (1.5, 0.5, 0.2)\nbase.name = \"Base\"\nbase.data.materials.append(sofa_material)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.7, 1.1))\nbackrest = bpy.context.object\nbackrest.scale = (1.5, 0.1, 0.6)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(sofa_material)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 1.55 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.8))\n    armrest = bpy.context.object\n    armrest.scale = (0.05, 0.5, 0.4)\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.data.materials.append(sofa_material)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2924491076597393, "unit_n": 4, "param_ratio": 4.25}
{"id": "c817ecea-0457-4563-8062-b3df18ce8ba8", "name": "Bookshelf", "instruction": "Could you create a 3D model of a bookshelf? It should have three shelves and be about 4 feet tall.", "category": "Household goods, not elsewhere specified", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Shelves\nshelf_height = 1.2  # 4 feet in Blender units\nshelf_thickness = 0.1\nshelf_width = 1.0\nshelf_depth = 0.3\n\nfor i in range(3):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, i * (shelf_height / 3)))\n    shelf = bpy.context.object\n    shelf.scale = (shelf_width / 2, shelf_depth / 2, shelf_thickness / 2)\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(wood_color)\n\n# Step 3: Create the Side Panels\npanel_thickness = 0.1\npanel_height = shelf_height\npanel_depth = shelf_depth\n\nfor i in range(2):\n    x = (shelf_width / 2) * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, panel_height / 2))\n    panel = bpy.context.object\n    panel.scale = (panel_thickness / 2, panel_depth / 2, panel_height / 2)\n    panel.name = f\"Side Panel {i + 1}\"\n    panel.data.materials.append(wood_color)\n\n# Step 4: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -panel_depth / 2, panel_height / 2))\nback_panel = bpy.context.object\nback_panel.scale = (shelf_width / 2, panel_thickness / 2, panel_height / 2)\nback_panel.name = \"Back Panel\"\nback_panel.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.48102340864754, "unit_n": 6, "param_ratio": 2.8333333333333335}
{"id": "a6cb9ded-b4fa-4c80-8a76-247bab100ab4", "name": "Bird Feeder", "instruction": "Let's design a bird feeder. It should have a cylindrical body with a perch extending from the bottom. The top should have a small roof to protect the feed from rain. Include a hook at the top for hanging.", "category": "Medical and laboratory equipment", "instruction_type": "Decoration Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0.6))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Perch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(0.55, 0, 0.1), rotation=(0, math.pi/2, 0))\nperch = bpy.context.object\nperch.name = \"Perch\"\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.5))\nroof = bpy.context.object\nroof.name = \"Roof\"\n\n# Step 5: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 1.7), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.8819685854608084, "unit_n": 4, "param_ratio": 6.5}
{"id": "ede6a860-64c8-47d7-9c33-fe50d8c29ee6", "name": "Geometric Pattern", "instruction": "Generate a geometric pattern featuring interlocking hexagons in a repeating arrangement. The pattern should be simple and uniform.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the hexagon size\nhex_radius = 1\nhex_height = 0.1\n\n# Define the hexagon material\nhex_material = bpy.data.materials.new(name=\"HexMaterial\")\nhex_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Function to create a hexagon\ndef create_hexagon(x, y):\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=hex_radius, depth=hex_height, location=(x, y, 0))\n    hexagon = bpy.context.object\n    hexagon.data.materials.append(hex_material)\n\n# Step 2: Create the pattern of interlocking hexagons\nrows = 5\ncols = 5\nfor row in range(rows):\n    for col in range(cols):\n        x = col * 1.5 * hex_radius\n        y = row * math.sqrt(3) * hex_radius\n        if col % 2 == 1:\n            y += math.sqrt(3) * hex_radius / 2\n        create_hexagon(x, y)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.143149727869119, "unit_n": 1, "param_ratio": 9.0}
{"id": "b801c002-175a-4fde-9005-3832f84f5f5f", "name": "Bird Cage", "instruction": "Model a simple bird cage. It should be circular with vertical bars and a small door on one side.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the cage\ncage_color = bpy.data.materials.new(name=\"Cage Color\")\ncage_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Medium gray color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(cage_color)\n\n# Step 3: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 2))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(cage_color)\n\n# Step 4: Create the Vertical Bars\nnum_bars = 12\nfor i in range(num_bars):\n    angle = (2 * math.pi / num_bars) * i\n    x = math.cos(angle)\n    y = math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(x, y, 1))\n    bar = bpy.context.object\n    bar.name = f\"Bar {i + 1}\"\n    bar.data.materials.append(cage_color)\n\n# Step 5: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(1, 0, 1))\ndoor = bpy.context.object\ndoor.name = \"Door\"\ndoor.data.materials.append(cage_color)\n\n# Step 6: Rotate the Door\ndoor.rotation_euler = (0, math.pi / 2, 0)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.862586190854676, "unit_n": 4, "param_ratio": 6.0}
{"id": "db85d9cc-2695-44ce-84b4-f3673fdd904c", "name": "Birthday Cake", "instruction": "Let's design a 3D model of a birthday cake. The cake should be two tiers high. The bottom tier should be a larger cylinder, and the top tier a smaller cylinder. Each tier should have a smooth surface. Place a series of evenly spaced candles on the top tier. Add a simple, flat circular base beneath the bottom tier. The cake should be primarily white with some colorful decorations like dots or stripes. Ensure the candles are upright and evenly distributed. Finally, add a few simple, small decorations around the base of the cake.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ncolorful = bpy.data.materials.new(name=\"Colorful\")\ncolorful.diffuse_color = (1, 0, 0, 1)  # Red color for decorations\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=2.5, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(white)\n\n# Step 3: Create the Bottom Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=1, location=(0, 0, 0.5))\nbottom_tier = bpy.context.object\nbottom_tier.name = \"Bottom Tier\"\nbottom_tier.data.materials.append(white)\n\n# Step 4: Create the Top Tier\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.8, location=(0, 0, 1.4))\ntop_tier = bpy.context.object\ntop_tier.name = \"Top Tier\"\ntop_tier.data.materials.append(white)\n\n# Step 5: Create the Candles\nnum_candles = 8\nfor i in range(num_candles):\n    angle = i * (2 * math.pi / num_candles)\n    x = 1 * math.cos(angle)\n    y = 1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.4, location=(x, y, 1.8))\n    candle = bpy.context.object\n    candle.name = f\"Candle {i + 1}\"\n    candle.data.materials.append(colorful)\n\n# Step 6: Add Decorations to the Cake\n# Adding some dots on the bottom tier\nnum_dots = 12\nfor i in range(num_dots):\n    angle = i * (2 * math.pi / num_dots)\n    x = 1.8 * math.cos(angle)\n    y = 1.8 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.5))\n    dot = bpy.context.object\n    dot.name = f\"Dot {i + 1}\"\n    dot.data.materials.append(colorful)\n\n# Step 7: Add Decorations around the Base\n# Adding some small spheres around the base\nnum_base_decorations = 16\nfor i in range(num_base_decorations):\n    angle = i * (2 * math.pi / num_base_decorations)\n    x = 2.3 * math.cos(angle)\n    y = 2.3 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0.05))\n    decoration = bpy.context.object\n    decoration.name = f\"Base Decoration {i + 1}\"\n    decoration.data.materials.append(colorful)", "color_brightness": "Bright", "verify": "human", "entropy": 4.444237572515544, "unit_n": 6, "param_ratio": 6.333333333333333}
{"id": "a9c30961-6a03-4171-a62a-58b75a28e8f1", "name": "Apple", "instruction": "Could you create a 3D model of an apple? Make it look freshly picked.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\n\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple_body = bpy.context.object\napple_body.name = \"Apple Body\"\napple_body.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "e203904a-6e67-4ca8-ad4e-8058c0c3d524", "name": "Coffee Table Comparison", "instruction": "Could you generate two 3D models of coffee tables for comparison? The first should have a round top with four straight legs, while the second should have a square top with a lower shelf for storage. Both tables should be about 18 inches tall. This comparison will help me decide which design is more practical for a living room setup.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Function to clear the scene\ndef clear_scene():\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\nclear_scene()\n\n# Define the dimensions\nheight = 0.45  # 18 inches in meters\nleg_radius = 0.03\ntop_thickness = 0.05\nshelf_thickness = 0.03\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Create the first coffee table (round top with four straight legs)\n# Step 1: Create the round top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=top_thickness, location=(0, 0, height - top_thickness / 2))\nround_top = bpy.context.object\nround_top.name = \"Round Table Top\"\nround_top.data.materials.append(wood_color)\n\n# Step 2: Create the legs for the round table\nfor i in range(4):\n    angle = i * (3.14 / 2)\n    x = 0.35 * math.cos(angle)\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=height - top_thickness, location=(x, y, (height - top_thickness) / 2))\n    leg = bpy.context.object\n    leg.name = f\"Round Table Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Create the second coffee table (square top with a lower shelf)\n# Step 1: Create the square top\nbpy.ops.mesh.primitive_cube_add(size=0.8, location=(1.5, 0, height - top_thickness / 2))\nsquare_top = bpy.context.object\nsquare_top.scale[2] = top_thickness / 2\nsquare_top.name = \"Square Table Top\"\nsquare_top.data.materials.append(wood_color)\n\n# Step 2: Create the legs for the square table\nfor i in range(4):\n    x = 1.5 + 0.35 * (1 if i % 2 == 0 else -1)\n    y = 0.35 * (1 if i < 2 else -1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=leg_radius, depth=height - top_thickness, location=(x, y, (height - top_thickness) / 2))\n    leg = bpy.context.object\n    leg.name = f\"Square Table Leg {i + 1}\"\n    leg.data.materials.append(wood_color)\n\n# Step 3: Create the lower shelf for the square table\nbpy.ops.mesh.primitive_cube_add(size=0.7, location=(1.5, 0, (height - top_thickness - shelf_thickness) / 2))\nlower_shelf = bpy.context.object\nlower_shelf.scale[2] = shelf_thickness / 2\nlower_shelf.name = \"Lower Shelf\"\nlower_shelf.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.3258246514664833, "unit_n": 11, "param_ratio": 2.272727272727273}
{"id": "cefe8b00-f1e2-4270-826d-582304eb7606", "name": "Apple", "instruction": "Create a 3D model of an apple. Ensure it has a small stem on top.", "category": "Musical instruments", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\napple_red = bpy.data.materials.new(name=\"Apple Red\")\napple_red.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the apple\nstem_brown = bpy.data.materials.new(name=\"Stem Brown\")\nstem_brown.diffuse_color = (0.3, 0.15, 0.05, 1)  # Brown color for the stem\n\n# Step 2: Create the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.data.materials.append(apple_red)\n\n# Step 3: Create the Stem\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 1.15))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(stem_brown)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 5.324896898459229, "unit_n": 2, "param_ratio": 9.5}
{"id": "af2dcfbc-2863-4a7d-888f-3eff1719f311", "name": "Sofa", "instruction": "Create a 3D model of a sofa. It should have a spacious seating area, comfortable backrest, and armrests. The sofa should look inviting and perfect for relaxing.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsofa_color = bpy.data.materials.new(name=\"SofaColor\")\nsofa_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # A warm brown color\n\n# Step 2: Create the Seating Area\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nseating_area = bpy.context.object\nseating_area.name = \"Seating Area\"\nseating_area.scale[0] = 2  # Length\nseating_area.scale[1] = 1  # Width\nseating_area.scale[2] = 0.2  # Height\nseating_area.data.materials.append(sofa_color)\n\n# Step 3: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, -0.9, 1.1))\nbackrest = bpy.context.object\nbackrest.name = \"Backrest\"\nbackrest.scale[0] = 2  # Length\nbackrest.scale[1] = 0.2  # Width\nbackrest.scale[2] = 0.6  # Height\nbackrest.data.materials.append(sofa_color)\n\n# Step 4: Create the Armrests\nfor i in range(2):\n    x = 2 * (i * 2 - 1)  # Position on x-axis\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 0.75))\n    armrest = bpy.context.object\n    armrest.name = f\"Armrest {i + 1}\"\n    armrest.scale[0] = 0.2  # Length\n    armrest.scale[1] = 1  # Width\n    armrest.scale[2] = 0.4  # Height\n    armrest.data.materials.append(sofa_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.1731027011044626, "unit_n": 4, "param_ratio": 4.25}
{"id": "c48bb336-1f4c-4a54-a5bb-efe35b075b79", "name": "Bookshelf", "instruction": "Create a bookshelf with five evenly spaced shelves. Ensure it has a back panel and is sturdy enough to hold several books. Add a small drawer at the bottom for extra storage.", "category": "Games, toys, tents and sports goods", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Wood color\n\n# Step 2: Create the Back Panel\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nback_panel = bpy.context.object\nback_panel.name = \"Back Panel\"\nback_panel.scale = (1, 0.05, 2.5)\nback_panel.data.materials.append(wood_color)\n\n# Step 3: Create the Shelves\nfor i in range(5):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5 + i * 0.5))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale = (1, 0.3, 0.05)\n    shelf.data.materials.append(wood_color)\n\n# Step 4: Create the Side Panels\nfor i in range(2):\n    x = 1.05 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(x, 0, 1))\n    side_panel = bpy.context.object\n    side_panel.name = f\"Side Panel {i + 1}\"\n    side_panel.scale = (0.05, 0.3, 2.5)\n    side_panel.data.materials.append(wood_color)\n\n# Step 5: Create the Drawer\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\ndrawer = bpy.context.object\ndrawer.name = \"Drawer\"\ndrawer.scale = (0.9, 0.3, 0.2)\ndrawer.data.materials.append(wood_color)\n\n# Step 6: Create the Drawer Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0.35, 0.25))\nhandle = bpy.context.object\nhandle.name = \"Drawer Handle\"\nhandle.rotation_euler = (1.5708, 0, 0)\nhandle.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 3.2981067071793158, "unit_n": 10, "param_ratio": 2.6}
{"id": "a16c844d-e9b3-4839-bcda-d9278cbe243f", "name": "Sandwich", "instruction": "Imagine a delicious sandwich. It consists of two slices of bread with layers of lettuce, tomato, cheese, and ham in between. The sandwich is cut diagonally.", "category": "Foodstuffs", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.96, 0.76, 0.53, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.84, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.5))\nham = bpy.context.object\nham.scale[2] = 0.05\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.7))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)\n\n# Step 8: Cut the Sandwich Diagonally\nbpy.ops.object.select_all(action='DESELECT')\nbpy.context.view_layer.objects.active = bottom_bread\nbottom_bread.select_set(True)\nlettuce.select_set(True)\ntomato.select_set(True)\ncheese.select_set(True)\nham.select_set(True)\ntop_bread.select_set(True)\nbpy.ops.object.join()\n\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.bisect(plane_co=(0, 0, 0), plane_no=(1, 1, 0))\nbpy.ops.object.mode_set(mode='OBJECT')\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.2935783604412703, "unit_n": 6, "param_ratio": 8.166666666666666}
{"id": "c85155f3-2644-43bb-b404-acc994b26e04", "name": "Mandala Pattern", "instruction": "Please generate a mandala pattern that can serve as a focal point for a meditation space, with intricate details radiating from the center in a symmetrical fashion.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmandala_color = bpy.data.materials.new(name=\"Mandala Color\")\nmandala_color.diffuse_color = (0.8, 0.8, 0.2, 1)  # Light yellow color\n\n# Function to create a circular pattern\ndef create_mandala_layer(radius, num_elements, z_location, scale=1.0):\n    for i in range(num_elements):\n        angle = (2 * math.pi / num_elements) * i\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        bpy.ops.mesh.primitive_plane_add(size=0.2*scale, location=(x, y, z_location))\n        element = bpy.context.object\n        element.rotation_euler = (0, 0, angle)\n        element.data.materials.append(mandala_color)\n\n# Create multiple layers of the mandala pattern\nfor i in range(1, 6):\n    create_mandala_layer(radius=i, num_elements=12*i, z_location=0, scale=1/i)\n\n# Create a central element\nbpy.ops.mesh.primitive_circle_add(radius=0.3, location=(0, 0, 0))\ncenter_element = bpy.context.object\ncenter_element.data.materials.append(mandala_color)", "color_brightness": "Very Bright", "verify": "human", "entropy": 4.427391950797379, "unit_n": 2, "param_ratio": 6.5}
{"id": "bddfe034-c44d-414c-8b95-f1e6410df726", "name": "Sun Hat", "instruction": "Design a wide-brimmed sun hat with a rounded crown. Add a ribbon around the base of the crown, tied into a bow at the back.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Comparing Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhat_color = bpy.data.materials.new(name=\"Hat Color\")\nhat_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\nribbon_color = bpy.data.materials.new(name=\"Ribbon Color\")\nribbon_color.diffuse_color = (1, 0, 0, 1)  # Red color\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=0.1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(hat_color)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0.6))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(hat_color)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.1, location=(0, 0, 0.6))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(ribbon_color)\n\n# Step 5: Create the Bow\n# Left loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(-0.25, -1.05, 0.6), rotation=(math.pi/2, 0, 0))\nleft_loop = bpy.context.object\nleft_loop.name = \"Left Loop\"\nleft_loop.data.materials.append(ribbon_color)\n\n# Right loop\nbpy.ops.mesh.primitive_torus_add(major_radius=0.2, minor_radius=0.05, location=(0.25, -1.05, 0.6), rotation=(math.pi/2, 0, 0))\nright_loop = bpy.context.object\nright_loop.name = \"Right Loop\"\nright_loop.data.materials.append(ribbon_color)\n\n# Knot\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, -1.05, 0.6))\nknot = bpy.context.object\nknot.name = \"Knot\"\nknot.data.materials.append(ribbon_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.384214827235193, "unit_n": 6, "param_ratio": 7.333333333333333}
{"id": "c75e06f5-eb66-483e-896a-298355937d18", "name": "Clipboard", "instruction": "I need a 3D model of a clipboard. The clipboard should be rectangular with a clip at the top to hold papers.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclipboard_color = bpy.data.materials.new(name=\"Clipboard Color\")\nclipboard_color.diffuse_color = (0.6, 0.4, 0.2, 1)  # Brown clipboard color\nclip_color = bpy.data.materials.new(name=\"Clip Color\")\nclip_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray clip color\n\n# Step 2: Create the Clipboard\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nclipboard = bpy.context.object\nclipboard.name = \"Clipboard\"\nclipboard.scale = (1, 1.5, 0.05)  # Make it rectangular and flat\nclipboard.data.materials.append(clipboard_color)\n\n# Step 3: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, 1.5, 0.1))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.scale = (0.5, 0.1, 0.2)  # Make it thin and wide\nclip.data.materials.append(clip_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "cd54b3eb-b93e-4fd5-bf8f-ec669e2cf190", "name": "Picture Frame", "instruction": "Design a 3D model of a rectangular picture frame.", "category": "Games, toys, tents and sports goods", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the frame\nframe_color = bpy.data.materials.new(name=\"Frame Color\")\nframe_color.diffuse_color = (0.5, 0.25, 0.1, 1)  # Brown color\n\n# Step 2: Create the Outer Frame\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nouter_frame = bpy.context.object\nouter_frame.name = \"Outer Frame\"\nouter_frame.scale = (1, 0.1, 1.5)\nouter_frame.data.materials.append(frame_color)\n\n# Step 3: Create the Inner Frame (cutout)\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ninner_frame = bpy.context.object\ninner_frame.name = \"Inner Frame\"\ninner_frame.scale = (0.8, 0.11, 1.3)\n\n# Step 4: Boolean Modifier to create the frame cutout\nbool_mod = outer_frame.modifiers.new(type=\"BOOLEAN\", name=\"bool_mod\")\nbool_mod.object = inner_frame\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = outer_frame\nbpy.ops.object.modifier_apply(modifier=\"bool_mod\")\n\n# Remove the inner frame object\nbpy.data.objects.remove(inner_frame, do_unlink=True)", "color_brightness": "Dark", "verify": "human", "entropy": 2.0794415416798357, "unit_n": 2, "param_ratio": 6.5}
{"id": "f86b9548-69e2-42dd-9b1c-6910c6d39690", "name": "Drum", "instruction": "Design a drum. It should be cylindrical with two drumheads on the top and bottom, and tension rods around the sides.", "category": "Musical instruments", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body\")\ndrum_body_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color for the drum body\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead\")\ndrumhead_color.diffuse_color = (1, 1, 1, 1)  # White color for the drumheads\ntension_rod_color = bpy.data.materials.new(name=\"Tension Rod\")\ntension_rod_color.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark gray color for the tension rods\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1.5, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Top Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, 0.775))\ntop_drumhead = bpy.context.object\ntop_drumhead.name = \"Top Drumhead\"\ntop_drumhead.data.materials.append(drumhead_color)\n\n# Step 4: Create the Bottom Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1.05, depth=0.05, location=(0, 0, -0.775))\nbottom_drumhead = bpy.context.object\nbottom_drumhead.name = \"Bottom Drumhead\"\nbottom_drumhead.data.materials.append(drumhead_color)\n\n# Step 5: Create the Tension Rods\nnum_rods = 8\nfor i in range(num_rods):\n    angle = i * (2 * 3.14159 / num_rods)\n    x = 1.1 * math.cos(angle)\n    y = 1.1 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(x, y, 0))\n    tension_rod = bpy.context.object\n    tension_rod.name = f\"Tension Rod {i + 1}\"\n    tension_rod.data.materials.append(tension_rod_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 3.5830257682223516, "unit_n": 4, "param_ratio": 8.75}
{"id": "aa810f66-41b4-439b-8a9f-ae4f3d1bb5c3", "name": "Bird Feeder", "instruction": "Let's create a bird feeder that is simple and easy to refill.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.55, 0.27, 0.07, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood_color)\n\n# Step 3: Create the Pillar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0, 0, 0.55))\npillar = bpy.context.object\npillar.name = \"Pillar\"\npillar.data.materials.append(wood_color)\n\n# Step 4: Create the Roof\nbpy.ops.mesh.primitive_cone_add(radius1=0.6, depth=0.3, location=(0, 0, 1.1))\nroof = bpy.context.object\nroof.name = \"Roof\"\nroof.data.materials.append(wood_color)\n\n# Step 5: Create the Feeding Tray\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(0, 0, 0.1))\ntray = bpy.context.object\ntray.name = \"Tray\"\ntray.data.materials.append(wood_color)", "color_brightness": "Dark", "verify": "human", "entropy": 4.40127048820696, "unit_n": 4, "param_ratio": 6.25}
{"id": "ba76d5d9-c7c6-4691-bf1f-7d912a20be0a", "name": "Pencil", "instruction": "What do you envision when you think of a classic wooden pencil?", "category": "Means of transport or hoisting", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.76, 0.60, 0.42, 1)  # Light brown color\ngraphite_color = bpy.data.materials.new(name=\"Graphite\")\ngraphite_color.diffuse_color = (0.20, 0.20, 0.20, 1)  # Dark gray color\neraser_color = bpy.data.materials.new(name=\"Eraser\")\neraser_color.diffuse_color = (0.95, 0.45, 0.45, 1)  # Pink color\nmetal_color = bpy.data.materials.new(name=\"Metal\")\nmetal_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color\n\n# Step 2: Create the Pencil Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0))\npencil_body = bpy.context.object\npencil_body.name = \"Pencil Body\"\npencil_body.data.materials.append(wood_color)\n\n# Step 3: Create the Graphite Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, radius2=0.01, depth=0.2, location=(0, 0, -0.85))\ngraphite_tip = bpy.context.object\ngraphite_tip.name = \"Graphite Tip\"\ngraphite_tip.data.materials.append(graphite_color)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.1, location=(0, 0, 0.8))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(eraser_color)\n\n# Step 5: Create the Metal Ferrule\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.1, location=(0, 0, 0.75))\nferrule = bpy.context.object\nferrule.name = \"Ferrule\"\nferrule.data.materials.append(metal_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.205420928598406, "unit_n": 4, "param_ratio": 10.25}
{"id": "9c425662-8a53-414a-b1f5-99d5b1e56180", "name": "Modular Shelving Unit", "instruction": "I need a 3D model of a modular shelving unit. It should consist of multiple cube-shaped sections that can be arranged in various configurations. Each cube should have a back panel, and the unit should be able to be expanded with additional cubes.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the size of each cube\ncube_size = 2.0\n\n# Define the number of cubes in each dimension\nnum_cubes_x = 3\nnum_cubes_y = 2\nnum_cubes_z = 2\n\n# Define the material for the cubes\nmaterial = bpy.data.materials.new(name=\"ShelfMaterial\")\nmaterial.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Function to create a single cube with a back panel\ndef create_cube(location):\n    bpy.ops.mesh.primitive_cube_add(size=cube_size, location=location)\n    cube = bpy.context.object\n    cube.name = \"Cube\"\n    cube.data.materials.append(material)\n    \n    # Create the back panel\n    bpy.ops.mesh.primitive_plane_add(size=cube_size, location=(location[0], location[1] - cube_size / 2, location[2]))\n    back_panel = bpy.context.object\n    back_panel.name = \"Back Panel\"\n    back_panel.data.materials.append(material)\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.transform.resize(value=(1, 0.1, 1))\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Create the modular shelving unit\nfor x in range(num_cubes_x):\n    for y in range(num_cubes_y):\n        for z in range(num_cubes_z):\n            location = (x * cube_size, y * cube_size, z * cube_size)\n            create_cube(location)", "color_brightness": "Bright", "verify": "human", "entropy": 3.9300925287360826, "unit_n": 2, "param_ratio": 4.0}
{"id": "f8113510-9639-48a7-9c6c-28cc02946307", "name": "Sushi Roll", "instruction": "Can you describe the process of assembling a sushi roll? Focus on the placement of rice, fish, and vegetables on the seaweed before rolling.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nseaweed_color = bpy.data.materials.new(name=\"Seaweed\")\nseaweed_color.diffuse_color = (0.0, 0.2, 0.1, 1)  # Dark green color\nrice_color = bpy.data.materials.new(name=\"Rice\")\nrice_color.diffuse_color = (1, 1, 1, 1)  # White color\nfish_color = bpy.data.materials.new(name=\"Fish\")\nfish_color.diffuse_color = (1, 0.3, 0.3, 1)  # Salmon color\nvegetable_color = bpy.data.materials.new(name=\"Vegetable\")\nvegetable_color.diffuse_color = (0.1, 0.6, 0.1, 1)  # Green color\n\n# Step 2: Create the Seaweed\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 0))\nseaweed = bpy.context.object\nseaweed.name = \"Seaweed\"\nseaweed.data.materials.append(seaweed_color)\n\n# Step 3: Create the Rice\nbpy.ops.mesh.primitive_plane_add(size=1.8, location=(0, 0, 0.01))\nrice = bpy.context.object\nrice.name = \"Rice\"\nrice.data.materials.append(rice_color)\n\n# Step 4: Create the Fish\nbpy.ops.mesh.primitive_cube_add(size=0.5, location=(0, 0.3, 0.05))\nfish = bpy.context.object\nfish.name = \"Fish\"\nfish.scale = (1, 0.2, 0.1)\nfish.data.materials.append(fish_color)\n\n# Step 5: Create the Vegetables\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(-0.5, -0.3, 0.05))\nvegetable1 = bpy.context.object\nvegetable1.name = \"Vegetable1\"\nvegetable1.scale = (0.5, 0.1, 0.1)\nvegetable1.data.materials.append(vegetable_color)\n\nbpy.ops.mesh.primitive_cube_add(size=0.3, location=(0.5, -0.3, 0.05))\nvegetable2 = bpy.context.object\nvegetable2.name = \"Vegetable2\"\nvegetable2.scale = (0.5, 0.1, 0.1)\nvegetable2.data.materials.append(vegetable_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.772588722239781, "unit_n": 5, "param_ratio": 8.0}
{"id": "ab282580-5cfd-42bb-bc10-17019c8f39c6", "name": "Puzzle Cube", "instruction": "Generate a 3D puzzle cube. The cube should be divided into smaller squares that can rotate. Each face of the cube should have a different color. Include visible dividing lines between the smaller squares to indicate their separateness.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors for each face\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1),  # Yellow\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 1, 1)   # White\n]\n\n# Step 2: Create the Cube\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\ncube = bpy.context.object\ncube.name = \"Puzzle Cube\"\n\n# Step 3: Create the Smaller Squares\nfor x in range(-1, 2):\n    for y in range(-1, 2):\n        for z in range(-1, 2):\n            if x == 0 and y == 0 and z == 0:\n                continue\n            bpy.ops.mesh.primitive_cube_add(size=0.6, location=(x * 0.7, y * 0.7, z * 0.7))\n            small_cube = bpy.context.object\n            small_cube.name = f\"Small Cube ({x}, {y}, {z})\"\n\n            # Assign colors to the small cubes based on their position\n            if x == 1:\n                mat = bpy.data.materials.new(name=\"Red\")\n                mat.diffuse_color = colors[0]\n                small_cube.data.materials.append(mat)\n            elif x == -1:\n                mat = bpy.data.materials.new(name=\"Orange\")\n                mat.diffuse_color = colors[4]\n                small_cube.data.materials.append(mat)\n            if y == 1:\n                mat = bpy.data.materials.new(name=\"Green\")\n                mat.diffuse_color = colors[1]\n                small_cube.data.materials.append(mat)\n            elif y == -1:\n                mat = bpy.data.materials.new(name=\"Blue\")\n                mat.diffuse_color = colors[2]\n                small_cube.data.materials.append(mat)\n            if z == 1:\n                mat = bpy.data.materials.new(name=\"Yellow\")\n                mat.diffuse_color = colors[3]\n                small_cube.data.materials.append(mat)\n            elif z == -1:\n                mat = bpy.data.materials.new(name=\"White\")\n                mat.diffuse_color = colors[5]\n                small_cube.data.materials.append(mat)\n\n# Step 4: Add Dividing Lines\nbpy.ops.mesh.primitive_cube_add(size=2.1, location=(0, 0, 0))\nouter_cube = bpy.context.object\nouter_cube.name = \"Outer Cube\"\nouter_cube.display_type = 'WIRE'\nouter_cube.hide_render = True", "color_brightness": "Bright", "verify": "human", "entropy": 4.064802361633973, "unit_n": 3, "param_ratio": 6.0}
{"id": "af45b13b-db7c-486f-ba0a-f0e657fe68b2", "name": "Chess Set", "instruction": "Create a chess set with a simple and clean design. The board should have alternating light and dark squares. The pieces should be easily distinguishable by their shapes and sizes.", "category": "Articles for the care and handling of animals", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_square_color = bpy.data.materials.new(name=\"LightSquare\")\nlight_square_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ndark_square_color = bpy.data.materials.new(name=\"DarkSquare\")\ndark_square_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Chess Board\nboard_size = 8\nsquare_size = 1\n\nfor row in range(board_size):\n    for col in range(board_size):\n        bpy.ops.mesh.primitive_plane_add(size=square_size, location=(col * square_size, row * square_size, 0))\n        square = bpy.context.object\n        if (row + col) % 2 == 0:\n            square.data.materials.append(light_square_color)\n        else:\n            square.data.materials.append(dark_square_color)\n\n# Step 3: Create Simple Chess Pieces\n# Define piece colors\nwhite_piece_color = bpy.data.materials.new(name=\"WhitePiece\")\nwhite_piece_color.diffuse_color = (1, 1, 1, 1)  # White color\nblack_piece_color = bpy.data.materials.new(name=\"BlackPiece\")\nblack_piece_color.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Function to create a piece\ndef create_piece(shape, size, location, color):\n    if shape == 'cylinder':\n        bpy.ops.mesh.primitive_cylinder_add(radius=size, depth=size*2, location=location)\n    elif shape == 'cone':\n        bpy.ops.mesh.primitive_cone_add(radius1=size, depth=size*2, location=location)\n    piece = bpy.context.object\n    piece.data.materials.append(color)\n\n# Create pawns\nfor i in range(board_size):\n    create_piece('cylinder', 0.2, (i * square_size, 1 * square_size, 0.1), white_piece_color)\n    create_piece('cylinder', 0.2, (i * square_size, 6 * square_size, 0.1), black_piece_color)\n\n# Create rooks\ncreate_piece('cylinder', 0.3, (0 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cylinder', 0.3, (7 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cylinder', 0.3, (0 * square_size, 7 * square_size, 0.15), black_piece_color)\ncreate_piece('cylinder', 0.3, (7 * square_size, 7 * square_size, 0.15), black_piece_color)\n\n# Create knights\ncreate_piece('cone', 0.2, (1 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cone', 0.2, (6 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cone', 0.2, (1 * square_size, 7 * square_size, 0.15), black_piece_color)\ncreate_piece('cone', 0.2, (6 * square_size, 7 * square_size, 0.15), black_piece_color)\n\n# Create bishops\ncreate_piece('cylinder', 0.25, (2 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cylinder', 0.25, (5 * square_size, 0 * square_size, 0.15), white_piece_color)\ncreate_piece('cylinder', 0.25, (2 * square_size, 7 * square_size, 0.15), black_piece_color)\ncreate_piece('cylinder', 0.25, (5 * square_size, 7 * square_size, 0.15), black_piece_color)\n\n# Create queens\ncreate_piece('cylinder', 0.35, (3 * square_size, 0 * square_size, 0.2), white_piece_color)\ncreate_piece('cylinder', 0.35, (3 * square_size, 7 * square_size, 0.2), black_piece_color)\n\n# Create kings\ncreate_piece('cylinder', 0.4, (4 * square_size, 0 * square_size, 0.25), white_piece_color)\ncreate_piece('cylinder', 0.4, (4 * square_size, 7 * square_size, 0.25), black_piece_color)", "color_brightness": "Very Dark", "verify": "human", "entropy": 5.058978772796117, "unit_n": 3, "param_ratio": 8.333333333333334}
{"id": "b9901453-5389-4219-a3c5-c237f9d50348", "name": "Power Socket", "instruction": "Design a 3D model of a power socket. It should be a small, rectangular outlet with two vertical slots and a grounding hole.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nsocket_color = bpy.data.materials.new(name=\"Socket Color\")\nsocket_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\n\n# Step 2: Create the Socket Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nsocket_base = bpy.context.object\nsocket_base.name = \"Socket Base\"\nsocket_base.scale = (1.5, 0.1, 2)\nsocket_base.data.materials.append(socket_color)\n\n# Step 3: Create the Vertical Slots\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0.11, 0.3))\n    slot = bpy.context.object\n    slot.name = f\"Slot {i + 1}\"\n    slot.scale = (0.1, 0.05, 0.5)\n    slot.data.materials.append(socket_color)\n\n# Step 4: Create the Grounding Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0.11, -0.5))\ngrounding_hole = bpy.context.object\ngrounding_hole.name = \"Grounding Hole\"\ngrounding_hole.data.materials.append(socket_color)", "color_brightness": "Bright", "verify": "human", "entropy": 2.8275038631903495, "unit_n": 4, "param_ratio": 4.5}
{"id": "e43697d1-33cb-4782-9de6-4f45ac790c56", "name": "Wall Mural", "instruction": "Could you design a wall mural featuring a geometric pattern? Compare the use of triangles and hexagons in the design.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ntriangle_color = bpy.data.materials.new(name=\"Triangle Color\")\ntriangle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red color\nhexagon_color = bpy.data.materials.new(name=\"Hexagon Color\")\nhexagon_color.diffuse_color = (0.2, 0.2, 0.8, 1)  # Blue color\n\n# Step 2: Create Triangles\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.5, depth=0.1, location=(i, j, 0))\n        triangle = bpy.context.object\n        triangle.name = f\"Triangle {i}-{j}\"\n        triangle.data.materials.append(triangle_color)\n\n# Step 3: Create Hexagons\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.5, depth=0.1, location=(i + 5, j, 0))\n        hexagon = bpy.context.object\n        hexagon.name = f\"Hexagon {i}-{j}\"\n        hexagon.data.materials.append(hexagon_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.9514050004336045, "unit_n": 50, "param_ratio": 0.44}
{"id": "ecf6be49-8e0b-4178-a307-94bbe6ec09a4", "name": "Light Switch", "instruction": "Let's create a light switch. It should be a simple rectangular plate with a single toggle switch in the center.", "category": "Musical instruments", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nplate_color = bpy.data.materials.new(name=\"Plate Color\")\nplate_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Light gray color\ntoggle_color = bpy.data.materials.new(name=\"Toggle Color\")\ntoggle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Plate\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nplate = bpy.context.object\nplate.scale = (1, 0.1, 1.5)\nplate.name = \"Plate\"\nplate.data.materials.append(plate_color)\n\n# Step 3: Create the Toggle Switch\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0.15, 0))\ntoggle = bpy.context.object\ntoggle.scale = (0.2, 0.1, 0.5)\ntoggle.name = \"Toggle Switch\"\ntoggle.data.materials.append(toggle_color)", "color_brightness": "Dark", "verify": "human", "entropy": 2.772588722239781, "unit_n": 2, "param_ratio": 9.0}
{"id": "ebf42700-ec5f-484c-a7e8-3ce1e5584720", "name": "Coffee Table", "instruction": "Design a coffee table. It should have a rectangular top and four legs. The legs should be positioned at the corners.", "category": "Means of transport or hoisting", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Table Top\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\ntable_top = bpy.context.object\ntable_top.name = \"Table Top\"\ntable_top.scale[0] = 2  # Scale along X-axis\ntable_top.scale[1] = 1  # Scale along Y-axis\ntable_top.scale[2] = 0.1  # Scale along Z-axis\n\n# Step 3: Create the Legs\nleg_positions = [(-1.9, -0.9, 0.5), (1.9, -0.9, 0.5), (-1.9, 0.9, 0.5), (1.9, 0.9, 0.5)]\nfor i, pos in enumerate(leg_positions):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=pos)\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.scale[2] = 5  # Scale along Z-axis to make it longer\n", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9911460217996475, "unit_n": 2, "param_ratio": 2.5}
{"id": "e52685ca-07a6-4d05-85c9-9d4e782db2b1", "name": "Sandwich", "instruction": "Make a simple sandwich. Use two slices of bread with layers of lettuce, tomato, cheese, and ham in between.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread Color\")\nbread_color.diffuse_color = (0.96, 0.76, 0.53, 1)  # Light brown color for bread\nlettuce_color = bpy.data.materials.new(name=\"Lettuce Color\")\nlettuce_color.diffuse_color = (0.13, 0.55, 0.13, 1)  # Green color for lettuce\ntomato_color = bpy.data.materials.new(name=\"Tomato Color\")\ntomato_color.diffuse_color = (0.89, 0.26, 0.20, 1)  # Red color for tomato\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1.0, 0.83, 0.0, 1)  # Yellow color for cheese\nham_color = bpy.data.materials.new(name=\"Ham Color\")\nham_color.diffuse_color = (0.91, 0.59, 0.48, 1)  # Light pink color for ham\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_plane_add(size=2.2, location=(0, 0, 0.15))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0.25))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.35))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05  # Make it flat\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Ham Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.45))\nham = bpy.context.object\nham.name = \"Ham\"\nham.scale[2] = 0.1  # Make it flat\nham.data.materials.append(ham_color)\n\n# Step 7: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.306981388013531, "unit_n": 6, "param_ratio": 8.333333333333334}
{"id": "febb3bc3-e6ff-422e-ab0c-95d62aa2d7ae", "name": "Sandwich", "instruction": "Please design a 3D model of a sandwich. It should have two slices of bread with layers of ingredients such as lettuce, tomato, and cheese in between. The ingredients should be visible from the sides.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"Bread\")\nbread_color.diffuse_color = (0.9, 0.7, 0.5, 1)  # Light brown color\nlettuce_color = bpy.data.materials.new(name=\"Lettuce\")\nlettuce_color.diffuse_color = (0.2, 0.8, 0.2, 1)  # Green color\ntomato_color = bpy.data.materials.new(name=\"Tomato\")\ntomato_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color\ncheese_color = bpy.data.materials.new(name=\"Cheese\")\ncheese_color.diffuse_color = (1.0, 0.9, 0.1, 1)  # Yellow color\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.scale[2] = 0.1\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Lettuce Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.2))\nlettuce = bpy.context.object\nlettuce.name = \"Lettuce\"\nlettuce.scale[2] = 0.05\nlettuce.data.materials.append(lettuce_color)\n\n# Step 4: Create the Tomato Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntomato = bpy.context.object\ntomato.name = \"Tomato\"\ntomato.scale[2] = 0.05\ntomato.data.materials.append(tomato_color)\n\n# Step 5: Create the Cheese Layer\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.4))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.scale[2] = 0.05\ncheese.data.materials.append(cheese_color)\n\n# Step 6: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.6))\ntop_bread = bpy.context.object\ntop_bread.name = \"Top Bread\"\ntop_bread.scale[2] = 0.1\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9957322735539913, "unit_n": 5, "param_ratio": 8.0}
{"id": "b6cb7bf5-f660-4793-bd86-06b9d6133419", "name": "Apple Pie", "instruction": "Please generate a round apple pie with a crisscross pattern on the top crust.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.87, 0.72, 0.53, 1)  # Light brown crust color\n\n# Step 2: Create the Base of the Pie\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.2, location=(0, 0, 0))\npie_base = bpy.context.object\npie_base.name = \"Pie Base\"\npie_base.data.materials.append(crust_color)\n\n# Step 3: Create the Crisscross Pattern\n# Horizontal strips\nfor i in range(-4, 5):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(i * 0.25, 0, 0.15))\n    strip = bpy.context.object\n    strip.scale[1] = 1.2  # Extend the strip to cover the pie\n    strip.data.materials.append(crust_color)\n\n# Vertical strips\nfor i in range(-4, 5):\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, i * 0.25, 0.15))\n    strip = bpy.context.object\n    strip.scale[0] = 1.2  # Extend the strip to cover the pie\n    strip.data.materials.append(crust_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.751028926919824, "unit_n": 9, "param_ratio": 2.0}
{"id": "b299a1dc-5663-492e-94dc-4e9dfe939bdd", "name": "Wall Art", "instruction": "Create a 3D model of a piece of wall art that feels abstract and contemporary. It should feature geometric shapes and patterns.", "category": "Musical instruments", "instruction_type": "Feature Question", "script": "import bpy\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define some colors\ncolors = [\n    (1, 0.5, 0.5, 1),  # Light Red\n    (0.5, 1, 0.5, 1),  # Light Green\n    (0.5, 0.5, 1, 1),  # Light Blue\n    (1, 1, 0.5, 1),    # Light Yellow\n    (1, 0.5, 1, 1)     # Light Pink\n]\n\ndef create_material(color):\n    mat = bpy.data.materials.new(name=f\"Color{color}\")\n    mat.diffuse_color = color\n    return mat\n\nmaterials = [create_material(color) for color in colors]\n\n# Step 2: Create geometric shapes\nfor i in range(5):\n    # Create a random geometric shape (cube, sphere, cone, cylinder, torus)\n    shape_type = random.choice(['CUBE', 'SPHERE', 'CONE', 'CYLINDER', 'TORUS'])\n    \n    if shape_type == 'CUBE':\n        bpy.ops.mesh.primitive_cube_add(location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    elif shape_type == 'SPHERE':\n        bpy.ops.mesh.primitive_uv_sphere_add(location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    elif shape_type == 'CONE':\n        bpy.ops.mesh.primitive_cone_add(location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    elif shape_type == 'CYLINDER':\n        bpy.ops.mesh.primitive_cylinder_add(location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    elif shape_type == 'TORUS':\n        bpy.ops.mesh.primitive_torus_add(location=(random.uniform(-2, 2), random.uniform(-2, 2), 0))\n    \n    obj = bpy.context.object\n    obj.scale = (random.uniform(0.5, 1.5), random.uniform(0.5, 1.5), random.uniform(0.1, 0.5))\n    obj.data.materials.append(random.choice(materials))\n\n# Step 3: Adjust the objects to make it more abstract and contemporary\nfor obj in bpy.context.scene.objects:\n    if obj.type == 'MESH':\n        obj.rotation_euler = (random.uniform(0, 3.14), random.uniform(0, 3.14), random.uniform(0, 3.14))\n        obj.location.z += random.uniform(-0.5, 0.5)\n", "color_brightness": "Bright", "verify": "human", "entropy": 4.021902197443719, "unit_n": 25, "param_ratio": 0.64}
{"id": "bc7bf4e7-b058-488a-8ffd-a27c92a170bb", "name": "Sandwich", "instruction": "Create a 3D model of a sandwich. It should be rectangular with two slices of bread. The filling should be visible between the slices.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbread_color = bpy.data.materials.new(name=\"BreadColor\")\nbread_color.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light brown color for bread\nfilling_color = bpy.data.materials.new(name=\"FillingColor\")\nfilling_color.diffuse_color = (0.80, 0.13, 0.13, 1)  # Red color for filling\n\n# Step 2: Create the Bottom Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nbottom_bread = bpy.context.object\nbottom_bread.scale[2] = 0.1  # Make it flat\nbottom_bread.name = \"Bottom Bread\"\nbottom_bread.data.materials.append(bread_color)\n\n# Step 3: Create the Filling\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.15))\nfilling = bpy.context.object\nfilling.scale[2] = 0.05  # Make it thinner\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 4: Create the Top Slice of Bread\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0.3))\ntop_bread = bpy.context.object\ntop_bread.scale[2] = 0.1  # Make it flat\ntop_bread.name = \"Top Bread\"\ntop_bread.data.materials.append(bread_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.6287476860138907, "unit_n": 3, "param_ratio": 7.333333333333333}
{"id": "ff2e825f-9474-4fde-9106-1f30aafffed6", "name": "Drum", "instruction": "Can you create a drum? It should be cylindrical with a drumhead on the top.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndrum_body_color = bpy.data.materials.new(name=\"Drum Body Color\")\ndrum_body_color.diffuse_color = (0.6, 0.3, 0.2, 1)  # Brownish color\ndrumhead_color = bpy.data.materials.new(name=\"Drumhead Color\")\ndrumhead_color.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light gray color\n\n# Step 2: Create the Drum Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(0, 0, 0))\ndrum_body = bpy.context.object\ndrum_body.name = \"Drum Body\"\ndrum_body.data.materials.append(drum_body_color)\n\n# Step 3: Create the Drumhead\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 1.05))\ndrumhead = bpy.context.object\ndrumhead.name = \"Drumhead\"\ndrumhead.data.materials.append(drumhead_color)", "color_brightness": "Bright", "verify": "human", "entropy": 3.8547842522785487, "unit_n": 2, "param_ratio": 10.0}
{"id": "b4e409ba-ffb4-44e2-9c2f-c74219158e38", "name": "Pizza", "instruction": "Design a pizza with a classic round shape. The pizza should have a thin crust, evenly spread tomato sauce, and a layer of melted cheese. Add pepperoni slices arranged in a circular pattern.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.8, 0.6, 0.4, 1)  # Light brown color for crust\nsauce_color = bpy.data.materials.new(name=\"Sauce Color\")\nsauce_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for tomato sauce\ncheese_color = bpy.data.materials.new(name=\"Cheese Color\")\ncheese_color.diffuse_color = (1, 0.9, 0.5, 1)  # Yellowish color for cheese\npepperoni_color = bpy.data.materials.new(name=\"Pepperoni Color\")\npepperoni_color.diffuse_color = (0.6, 0.1, 0.1, 1)  # Dark red color for pepperoni\n\n# Step 2: Create the Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1.1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Crust\"\ncrust.data.materials.append(crust_color)\n\n# Step 3: Create the Sauce\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.02, location=(0, 0, 0.05))\nsauce = bpy.context.object\nsauce.name = \"Sauce\"\nsauce.data.materials.append(sauce_color)\n\n# Step 4: Create the Cheese\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.02, location=(0, 0, 0.07))\ncheese = bpy.context.object\ncheese.name = \"Cheese\"\ncheese.data.materials.append(cheese_color)\n\n# Step 5: Create the Pepperoni Slices\npepperoni_positions = [\n    (0.5, 0.5), (-0.5, 0.5), (0.5, -0.5), (-0.5, -0.5),\n    (0.7, 0), (-0.7, 0), (0, 0.7), (0, -0.7)\n]\n\nfor i, pos in enumerate(pepperoni_positions):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(pos[0], pos[1], 0.09))\n    pepperoni = bpy.context.object\n    pepperoni.name = f\"Pepperoni {i + 1}\"\n    pepperoni.data.materials.append(pepperoni_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.847573479358143, "unit_n": 4, "param_ratio": 10.0}
{"id": "ed86057e-3c48-4523-8219-fd97cbfaf6ef", "name": "Screwdriver", "instruction": "Create a 3D model of a screwdriver. The handle should be cylindrical with a few grip lines. The shaft should be straight and end in a flat-head tip.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nhandle_color = bpy.data.materials.new(name=\"HandleColor\")\nhandle_color.diffuse_color = (0.8, 0.2, 0.2, 1)  # Red handle color\nshaft_color = bpy.data.materials.new(name=\"ShaftColor\")\nshaft_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray shaft color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.5, location=(0, 0, 0.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)\n\n# Step 3: Add grip lines to the Handle\nfor i in range(3):\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=0.02, location=(0, 0, 0.1 + i * 0.15))\n    grip = bpy.context.object\n    grip.name = f\"Grip Line {i + 1}\"\n    grip.data.materials.append(handle_color)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.6, location=(0, 0, -0.3))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(shaft_color)\n\n# Step 5: Create the Flat-Head Tip\nbpy.ops.mesh.primitive_cube_add(size=0.06, location=(0, 0, -0.6))\ntip = bpy.context.object\ntip.name = \"Flat-Head Tip\"\ntip.scale[2] = 0.1  # Flatten the tip\ntip.data.materials.append(shaft_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.879757540491085, "unit_n": 6, "param_ratio": 4.833333333333333}
{"id": "f9b56638-25b1-441e-a2ea-3c8452c7a643", "name": "Coffee Grinder", "instruction": "Design a 3D model of a coffee grinder.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray metal color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.4, 0.2, 0.1, 1)  # Brown wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood)\n\n# Step 3: Create the Grinder Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.8, depth=1.5, location=(0, 0, 2.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1, location=(0.9, 0, 3.5), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metal)\n\n# Step 5: Create the Handle Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(1.4, 0, 3.5))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(wood)\n\n# Step 6: Create the Grinder Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=0.1, location=(0, 0, 3.5))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(metal)", "color_brightness": "Dark", "verify": "human", "entropy": 2.0340535543671168, "unit_n": 5, "param_ratio": 7.2}
{"id": "f655e748-c70d-423f-9e69-a74b88e116a7", "name": "Pizza", "instruction": "Create a pizza with a thin crust.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color for the pizza crust\ncrust_color = bpy.data.materials.new(name=\"Crust Color\")\ncrust_color.diffuse_color = (0.9, 0.7, 0.4, 1)  # Light brown color for the crust\n\n# Step 2: Create the Pizza Crust\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\ncrust = bpy.context.object\ncrust.name = \"Pizza Crust\"\ncrust.data.materials.append(crust_color)\n\n# Define the color for the pizza topping\ntopping_color = bpy.data.materials.new(name=\"Topping Color\")\ntopping_color.diffuse_color = (0.8, 0.1, 0.1, 1)  # Red color for the topping\n\n# Step 3: Create the Pizza Topping\nbpy.ops.mesh.primitive_cylinder_add(radius=0.95, depth=0.05, location=(0, 0, 0.05))\ntopping = bpy.context.object\ntopping.name = \"Pizza Topping\"\ntopping.data.materials.append(topping_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.67874346877963, "unit_n": 2, "param_ratio": 10.0}
{"id": "f7be3d29-8b8c-40ba-be6d-8e9c1b4ed9d9", "name": "Toy Blocks", "instruction": "Create a 3D model of toy blocks arranged in a simple tower.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (1, 1, 0, 1)   # Yellow\n]\n\n# Step 2: Create the Blocks\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, i))\n    block = bpy.context.object\n    block.name = f\"Block {i + 1}\"\n    mat = bpy.data.materials.new(name=f\"Color {i + 1}\")\n    mat.diffuse_color = colors[i]\n    block.data.materials.append(mat)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 2.9458755173797675, "unit_n": 4, "param_ratio": 1.25}
{"id": "b25433ee-7b25-432d-9348-6aaa21aad4f9", "name": "Sushi Roll", "instruction": "Create a sushi roll. It should be a simple cylindrical shape with visible layers of rice, seaweed, and filling.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feeling Question", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nrice_color = bpy.data.materials.new(name=\"Rice\")\nrice_color.diffuse_color = (1, 1, 1, 1)  # White color for rice\nseaweed_color = bpy.data.materials.new(name=\"Seaweed\")\nseaweed_color.diffuse_color = (0, 0.2, 0, 1)  # Dark green color for seaweed\nfilling_color = bpy.data.materials.new(name=\"Filling\")\nfilling_color.diffuse_color = (1, 0, 0, 1)  # Red color for filling\n\n# Step 2: Create the Seaweed (outer layer)\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=1, location=(0, 0, 0))\nseaweed = bpy.context.object\nseaweed.name = \"Seaweed\"\nseaweed.data.materials.append(seaweed_color)\n\n# Step 3: Create the Rice (middle layer)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.9, depth=1.1, location=(0, 0, 0))\nrice = bpy.context.object\nrice.name = \"Rice\"\nrice.data.materials.append(rice_color)\n\n# Step 4: Create the Filling (inner layer)\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.2, location=(0, 0, 0))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)", "color_brightness": "Medium Bright", "verify": "human", "entropy": 4.600308450524309, "unit_n": 3, "param_ratio": 10.0}
{"id": "e94753b2-f3e8-4c12-b199-9a058d66e8c1", "name": "Pencil", "instruction": "Create a 3D model of a pencil. The pencil should be a standard size and shape, with a cylindrical body and a pointed tip. The eraser should be attached to the opposite end of the tip. The body should be plain with no additional designs or markings.", "category": "Musical instruments", "instruction_type": "Design Question", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Pink color\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(yellow)\n\n# Step 3: Create the Tip\nbpy.ops.mesh.primitive_cone_add(radius1=0.05, depth=0.2, location=(0, 0, 1.6))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(gray)\n\n# Step 4: Create the Eraser Holder\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.1, location=(0, 0, 0.05))\nholder = bpy.context.object\nholder.name = \"Holder\"\nholder.data.materials.append(gray)\n\n# Step 5: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, -0.05))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)", "color_brightness": "Bright", "verify": "human", "entropy": 4.337751001036699, "unit_n": 4, "param_ratio": 8.75}
