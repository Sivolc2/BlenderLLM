{"id": "seed_tasks_0", "name": "Watering Can", "instruction": "Could you create a watering can with a Victorian-era design? The watering can should feature intricate patterns and have a brass finish.", "category": "Tools and hardware", "instruction_type": "Comparing Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.71, 0.65, 0.26, 1)  # Brass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.4, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(brass)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0.2), rotation=(math.pi/2, 0, 0), major_radius=0.15, minor_radius=0.02)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(brass)\n\n# Step 4: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.35, location=(0, -0.3, 0.1), rotation=(math.pi/4, 0, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(brass)\n\n# Step 5: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.02, location=(0, 0, 0.2))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(brass)"}
{"id": "seed_tasks_1", "name": "Cabinet", "instruction": "Alright, let's create a visually impressive cabinet. The cabinet is a rectangular prism with a height of 20, length of 10, and width of 6, all in a deep mahogany color. Add doors to the front, proportional to the cabinet, in the same mahogany color. Finally, add round, brass handles to the doors.", "category": "Furnishing", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Deep, rich mahogany color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.71, 0.65, 0.26, 1)  # Shiny brass color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.scale = (0.5, 0.3, 1)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(mahogany)\n\n# Step 3: Create the Doors\nfor i in range(2):\n    x = 0.13 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0.15, 1))\n    door = bpy.context.object\n    door.scale = (0.25, 0.01, 1)\n    door.name = f\"Door {i + 1}\"\n    door.data.materials.append(mahogany)\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0.13 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(x, 0.151, 1))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(brass)"}
{"id": "seed_tasks_2", "name": "Keys (for pianos and wind instruments)", "instruction": "Let's begin with the piano keys. The white keys are elongated rectangles, 23.5 mm wide and 150 mm long. The black keys are 13.7 mm wide and 100 mm long. Both types are slightly curved at the top.\n\nNow, let's move on to the keys for wind instruments. These keys are circular or oval, about 10-15 mm in diameter, and slightly concave.\n\nThe colors should be white and black for the piano keys, and silver or gold for the wind instrument keys.", "category": "Musical instruments", "instruction_type": "Design Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the White Piano Keys\nfor i in range(52):\n    x = i * 0.025\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0))\n    bpy.ops.transform.resize(value=(0.0235, 0.15, 0.02))\n    key = bpy.context.object\n    key.name = f\"White Key {i + 1}\"\n    key.data.materials.append(white)\n\n# Step 3: Create the Black Piano Keys\nfor i in range(36):\n    x = (i // 5 + i // 3) * 0.025 + 0.0125\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.025))\n    bpy.ops.transform.resize(value=(0.0137, 0.1, 0.025))\n    key = bpy.context.object\n    key.name = f\"Black Key {i + 1}\"\n    key.data.materials.append(black)\n\n# Step 4: Create the Wind Instrument Keys\nfor i in range(16):\n    y = i * 0.02\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01 + i % 2 * 0.005, depth=0.005, location=(1, y, 0))\n    key = bpy.context.object\n    key.name = f\"Wind Key {i + 1}\"\n    key.data.materials.append(silver)"}
{"id": "seed_tasks_3", "name": "Microwave Oven", "instruction": "Craft a 3D model of a modern microwave oven. It is rectangular with a prominent window on the front. The body is silver, and the door is black. Include a digital panel with buttons on the right side of the door.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nclear = bpy.data.materials.new(name=\"Clear\")\nclear.diffuse_color = (1, 1, 1, 0)  # Clear color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale.x = 2\nbody.scale.y = 1.6\nbody.scale.z = 1.2\nbody.name = \"Body\"\nbody.data.materials.append(silver)\n\n# Step 3: Create the Door\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ndoor = bpy.context.object\ndoor.scale.x = 1.9\ndoor.scale.y = 1.5\ndoor.scale.z = 1.1\ndoor.name = \"Door\"\ndoor.data.materials.append(black)\n\n# Step 4: Create the Window\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nwindow = bpy.context.object\nwindow.scale.x = 1.3\nwindow.scale.y = 1\nwindow.scale.z = 0.9\nwindow.name = \"Window\"\nwindow.data.materials.append(clear)\n\n# Step 5: Create the Digital Panel\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0.8, -0.7, 0.3))\npanel = bpy.context.object\npanel.name = \"Digital Panel\"\npanel.data.materials.append(black)\n\n# Step 6: Create the Buttons\nfor i in range(10):\n    x = 0.8 + (i % 2) * 0.05\n    y = -0.7 + (i // 2) * 0.05\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.01, location=(x, y, 0.3))\n    button = bpy.context.object\n    button.name = f\"Button {i + 1}\"\n    button.data.materials.append(silver)"}
{"id": "seed_tasks_4", "name": "Photocopiers", "instruction": "I want you to recreate a photocopier. The photocopier should have a rectangular exterior with  plastic surfaces. It features a control panel with buttons and emits a soft vibration when in use.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feeling Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Exterior\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nexterior = bpy.context.object\nexterior.name = \"Exterior\"\nexterior.scale.x = 24\nexterior.scale.y = 20\nexterior.scale.z = 18\nexterior.data.materials.append(gray)\n\n# Step 3: Create the Buttons\nfor i in range(4):\n    for j in range(5):\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.1, location=(i-1.5, j-2, 9))\n        button = bpy.context.object\n        button.name = f\"Button {i * 5 + j + 1}\"\n        button.data.materials.append(gray)\n\n# Step 4: Create the Paper Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -9))\npaper_tray = bpy.context.object\npaper_tray.name = \"Paper Tray\"\npaper_tray.scale.x = 8.27\npaper_tray.scale.y = 11.69\npaper_tray.scale.z = 0.5\npaper_tray.data.materials.append(gray)\n\n# Step 5: Create the Output Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 9))\noutput_tray = bpy.context.object\noutput_tray.name = \"Output Tray\"\noutput_tray.scale.x = 8.27\noutput_tray.scale.y = 11.69\noutput_tray.scale.z = 0.5\noutput_tray.data.materials.append(gray)\n\n# Step 6: Create the Display Screen\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 2.5, 8))\ndisplay_screen = bpy.context.object\ndisplay_screen.name = \"Display Screen\"\ndisplay_screen.scale.x = 5\ndisplay_screen.scale.y = 2.5\ndisplay_screen.scale.z = 0.1\ndisplay_screen.data.materials.append(black)"}
{"id": "seed_tasks_5", "name": "Pet Bed", "instruction": "Oh darling, we're going to create a pet bed. First, let's start with a circular base, measuring about 24 inches in diameter, upholstered in royal blue velvet. Add a golden trim around the edge, about an inch wide.\n\nNext, create walls about 8 inches high with a slight inward curve, upholstered in royal blue velvet with white faux fur on the inside.\n\nFinally, add a plush cushion in champagne gold.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nroyal_blue = bpy.data.materials.new(name=\"Royal Blue\")\nroyal_blue.diffuse_color = (0.0, 0.0, 0.5, 1)  # Royal blue color\ngolden = bpy.data.materials.new(name=\"Golden\")\ngolden.diffuse_color = (1.0, 0.84, 0.0, 1)  # Golden color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1.0, 1.0, 1.0, 1)  # White color\nchampagne_gold = bpy.data.materials.new(name=\"Champagne Gold\")\nchampagne_gold.diffuse_color = (0.97, 0.91, 0.81, 1)  # Champagne gold color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(royal_blue)\n\n# Step 3: Create the Trim\nbpy.ops.mesh.primitive_torus_add(major_radius=0.6, minor_radius=0.05, major_segments=48, minor_segments=12, location=(0, 0, 0.05))\ntrim = bpy.context.object\ntrim.name = \"Trim\"\ntrim.data.materials.append(golden)\n\n# Step 4: Create the Walls\nbpy.ops.mesh.primitive_cylinder_add(radius=0.55, depth=0.2, location=(0, 0, 0.15))\nwalls = bpy.context.object\nwalls.name = \"Walls\"\nwalls.data.materials.append(royal_blue)\nwalls.data.materials.append(white)\n\n# Step 5: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.1, location=(0, 0, 0.1))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(champagne_gold)\n\n# Step 6: Create the Nameplate\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.55, 0.2))\nnameplate = bpy.context.object\nnameplate.name = \"Nameplate\"\nnameplate.scale = (0.2, 0.05, 0.1)\nnameplate.data.materials.append(golden)"}
{"id": "seed_tasks_6", "name": "Transformer", "instruction": "Let's begin with the body structure of the transformer. It should stands at about 20 feet tall. \n\nNow, let's move on to the head. It should be rectangular with a visor-style eye feature and a horizontal mouthplate.\n\nFor its arms, they should be bulky with built-in weaponry and hands with individual fingers.\n\nAs for its legs, they should be sturdy and capable of transforming into vehicle components like wheels or treads.\n\nNow, let's discuss color. The primary color scheme should be red and blue, with secondary colors of white and black.\n\nFinally, it should be able to transform into a vehicle like a truck or a car.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body Structure\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 1))  # Body structure\nbody = bpy.context.object\nbody.scale = (1, 0.5, 2)  # Scale to the desired size\nbody.data.materials.append(blue)\n\n# Steps 3-5: Create the Head, Arms, and Legs\n# Due to the complexity of these parts, they are not included in this simplified script.\n\n# Step 6: Apply the Color Scheme\n# The color scheme is applied in the creation of each part.\n\n# Steps 7-8: Implement the Transformation Feature and Position the Components\n# These steps require advanced rigging and animation techniques and are not included in this simplified script."}
{"id": "seed_tasks_7", "name": "Drumsticks (for drums)", "instruction": "Alright, let's get a move on with creating some drumsticks. Imagine a pair of long, wooden drumsticks. They should be tilted at an angle, with one slightly ahead of the other, to give a sense of motion.", "category": "Musical instruments", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_wood = bpy.data.materials.new(name=\"Light Wood\")\nlight_wood.diffuse_color = (0.71, 0.6, 0.43, 1)  # Light wood color\n\n# Step 2: Create the Drumsticks\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.8, location=(x, 0, 0), rotation=(0, math.pi/4, 0))\n    drumstick = bpy.context.object\n    drumstick.name = f\"Drumstick {i + 1}\"\n    drumstick.data.materials.append(light_wood)"}
{"id": "seed_tasks_8", "name": "Recliner", "instruction": "Hey, could you make me a 3D model of a recliner in the middle of a reclining action, with the footrest coming up and the back going down? Thanks.", "category": "Furnishing", "instruction_type": "Verbal Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_brown = bpy.data.materials.new(name=\"Dark Brown\")\ndark_brown.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark brown color\nbeige = bpy.data.materials.new(name=\"Beige\")\nbeige.diffuse_color = (0.96, 0.87, 0.70, 1)  # Beige color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.scale = (1.5, 1.75, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(dark_brown)\n\n# Step 3: Create the Seat\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.1))\nseat = bpy.context.object\nseat.scale = (1.1, 1.0, 0.2)\nseat.name = \"Seat\"\nseat.data.materials.append(beige)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.55, 0.85))\nbackrest = bpy.context.object\nbackrest.scale = (1.1, 0.1, 1.35)\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(beige)\n\n# Step 5: Create the Footrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.875, -0.05))\nfootrest = bpy.context.object\nfootrest.scale = (1.1, 0.75, 0.1)\nfootrest.name = \"Footrest\"\nfootrest.data.materials.append(beige)\n\n# Step 6: Create the Arms\nfor i in range(2):\n    x = 0.75 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.3))\n    arm = bpy.context.object\n    arm.scale = (0.15, 1.0, 0.6)\n    arm.name = f\"Arm {i + 1}\"\n    arm.data.materials.append(beige)"}
{"id": "seed_tasks_9", "name": "Forklift Tines", "instruction": "Hey there, I was hoping you could whip up a 3D object for me. Let's focus on forklift tines, alright? I'd like them to be long and thin, with a slight curvature at the end. Make sure they're spaced properly to fit a standard pallet.", "category": "Means of transport or hoisting", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_gray = bpy.data.materials.new(name=\"Metallic Gray\")\nmetallic_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic gray color\n\n# Step 2: Create the Tines\nfor i in range(2):\n    x = 0.8 * (i - 0.5)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0))\n    tine = bpy.context.object\n    tine.scale = (0.1, 2.4, 0.05)\n    tine.name = f\"Tine {i + 1}\"\n    tine.data.materials.append(metallic_gray)\n\n# Step 3: Add Curvature to the Tines\n# This step requires manual intervention and cannot be done through bpy scripting\n\n# Step 4: Add Wear and Tear\n# This step requires manual intervention and cannot be done through bpy scripting\n\n# Step 5: Rename Objects for Clarity\n# This step has been done in step 2"}
{"id": "seed_tasks_10", "name": "Chopping board", "instruction": "Darling, let's make a chopping board that will be the envy of every kitchen. The chopping board is rectangular with rounded edges, made from deep-toned walnut wood.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Decoration Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwalnut = bpy.data.materials.new(name=\"Walnut\")\nwalnut.diffuse_color = (0.4, 0.26, 0.13, 1)  # Deep-toned walnut color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nboard = bpy.context.object\nboard.name = \"Chopping Board\"\nboard.dimensions = (0.18, 0.12, 0.01)\nboard.data.materials.append(walnut)\n\n# Step 3: Create the Rounded Edges\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.mesh.bevel(offset_type='PERCENT', offset=0.1, segments=5, profile=0.5)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Floral Pattern\n# Note: The floral pattern requires manual texture painting in Blender, which cannot be scripted.\n# The pattern should be painted on the top right corner of the chopping board, with a size of about 0.03 units by 0.03 units."}
{"id": "seed_tasks_11", "name": "Hexahedron inside a sphere", "instruction": "Create a hexahedron (cube) with each edge half the diameter of a sphere. Position the hexahedron inside the sphere, ensuring the sphere's diameter equals the diagonal of the cube's face. Align the hexahedron at the center of the sphere.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Hexahedron\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nhexahedron = bpy.context.object\nhexahedron.name = \"Hexahedron\"\nhexahedron.data.materials.append(bpy.data.materials.new(name=\"Rough Material\"))\n\n# Step 3: Create the Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=math.sqrt(2)/2, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\nsphere.data.materials.append(bpy.data.materials.new(name=\"Glossy Material\"))\n\n# Step 4: Apply Textures\n# This step is dependent on the specific textures used and may vary.\n\n# Step 5: Add Lighting\nbpy.ops.object.light_add(type='POINT', location=(0, 0, 2))\nlight = bpy.context.object\nlight.data.energy = 1000"}
{"id": "seed_tasks_12", "name": "Inductor", "instruction": "Alright, let's get down to business. I need an inductor. It should handle high frequencies (1 to 5 GHz) with tight coil winding and a high permeability core. The size should be no more than 10mm in diameter and 20mm in length, using heat-resistant materials. Terminals should be silver or gold for good conductivity, and the coil must be properly insulated. The color can be metallic grey, and it should be labeled properly.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_grey = bpy.data.materials.new(name=\"Metallic Grey\")\nmetallic_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic grey color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Core\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\ncore = bpy.context.object\ncore.name = \"Core\"\ncore.data.materials.append(metallic_grey)\n\n# Step 3: Create the Coil Winding\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=0.5, minor_radius=0.05)\ncoil = bpy.context.object\ncoil.name = \"Coil Winding\"\ncoil.data.materials.append(metallic_grey)\n\n# Step 4: Create the Terminals\nfor i in range(2):\n    z = 1.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, z))\n    terminal = bpy.context.object\n    terminal.name = f\"Terminal {i + 1}\"\n    terminal.data.materials.append(silver)"}
{"id": "seed_tasks_13", "name": "Erhu", "instruction": "Can you please create an erhu for me? The erhu should have a resonator covered with python skin, a wooden neck, and strings. The bow should be crafted with horsehair.", "category": "Musical instruments", "instruction_type": "Feeling Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nnatural_beige = bpy.data.materials.new(name=\"Natural Beige\")\nnatural_beige.diffuse_color = (0.76, 0.7, 0.5, 1)  # Natural beige color\nmetallic_silver = bpy.data.materials.new(name=\"Metallic Silver\")\nmetallic_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic silver color\nrich_brown = bpy.data.materials.new(name=\"Rich Brown\")\nrich_brown.diffuse_color = (0.35, 0.16, 0.14, 1)  # Rich brown color\nnatural_wood = bpy.data.materials.new(name=\"Natural Wood\")\nnatural_wood.diffuse_color = (0.64, 0.5, 0.38, 1)  # Natural wood color\n\n# Step 2: Create the Resonator\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 0))\nresonator = bpy.context.object\nresonator.name = \"Resonator\"\nresonator.data.materials.append(natural_beige)\n\n# Step 3: Create the Strings\nfor i in range(2):\n    x = 0.02 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=1.6, location=(x, 0, 0.8))\n    string = bpy.context.object\n    string.name = f\"String {i + 1}\"\n    string.data.materials.append(metallic_silver)\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.6, location=(0, 0, 0.8))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(rich_brown)\n\n# Step 5: Create the Bow\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1.5, location=(0.1, 0, 0.8))\nbow = bpy.context.object\nbow.name = \"Bow\"\nbow.data.materials.append(natural_wood)"}
{"id": "seed_tasks_14", "name": "Crutch", "instruction": "Hello there. I am looking to design a 3D object that will serve a specific need in the real world. I need a crutch. You know, a support typically used by people with an injury or disability. \n\nLet's start from the top. The handle of the crutch should be ergonomically designed. \n\nNext, the arm cuff. It needs to be adjustable. \n\nNow, the shaft of the crutch. It should be made of lightweight, sturdy material like aluminum and be adjustable in length. \n\nFinally, the tip of the crutch. It must be made of a non-slip material, like rubber. \n\nRemember, the crutch must be designed for practical use.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\nrubber = bpy.data.materials.new(name=\"Rubber\")\nrubber.diffuse_color = (0.1, 0.1, 0.1, 1)  # Dark color for rubber\nfoam = bpy.data.materials.new(name=\"Foam\")\nfoam.diffuse_color = (0.9, 0.9, 0.9, 1)  # Light color for foam\naluminum = bpy.data.materials.new(name=\"Aluminum\")\naluminum.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metallic color for aluminum\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.075, depth=0.25, location=(0, 0, 1.25))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(rubber)\n\n# Step 3: Create the Arm Cuff\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 1.1), major_radius=0.1, minor_radius=0.05)\ncuff = bpy.context.object\ncuff.name = \"Arm Cuff\"\ncuff.data.materials.append(foam)\n\n# Step 4: Create the Shaft\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0.5))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\nshaft.data.materials.append(aluminum)\n\n# Step 5: Create the Tip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0, -0.1))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(rubber)"}
{"id": "seed_tasks_15", "name": "Shelf", "instruction": "Let's start with the basic structure. It should be a three-tiered rectangular shelf, with each tier being 6 feet long and about 1 foot wide. \n\nNow, let's talk about the material. I'm thinking a rich, dark mahogany wood. Each corner should be adorned with a delicate gold leaf trim.\n\nThe tiers themselves should have a slight curve to them, bowing out just slightly in the middle. Now, for the supports. They should be carved into intricate designs.\n\nLastly, let's add a bit of functionality to this piece. The bottom tier should have a set of small drawers built into it with small gold knobs.", "category": "Furnishing", "instruction_type": "Decoration Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1, 0.84, 0, 1)  # Gold color\n\n# Step 2: Create the Tiers\nfor i in range(3):\n    z = 1 * i\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z))\n    tier = bpy.context.object\n    tier.scale.x = 6\n    tier.scale.y = 1\n    tier.scale.z = 0.1\n    tier.name = f\"Tier {i + 1}\"\n    tier.data.materials.append(mahogany)\n\n# Step 3: Create the Supports\nfor i in range(4):\n    x = 3 * (i % 2) - 1.5\n    y = 1 * (i // 2) - 0.5\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=3, location=(x, y, 1.5))\n    support = bpy.context.object\n    support.name = f\"Support {i + 1}\"\n    support.data.materials.append(mahogany)\n\n# Step 4: Create the Drawers\nfor i in range(2):\n    x = 3 * i - 1.5\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0))\n    drawer = bpy.context.object\n    drawer.scale.x = 2.5\n    drawer.scale.y = 0.9\n    drawer.scale.z = 0.3\n    drawer.name = f\"Drawer {i + 1}\"\n    drawer.data.materials.append(mahogany)\n\n# Step 5: Create the Knobs\nfor i in range(2):\n    x = 3 * i - 1.5\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(x, 0.45, 0.15))\n    knob = bpy.context.object\n    knob.name = f\"Knob {i + 1}\"\n    knob.data.materials.append(gold)"}
{"id": "seed_tasks_16", "name": "Pads", "instruction": "Create a pad with a vibrant red color. It should be a perfect rectangle with rounded corners.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglossy_red = bpy.data.materials.new(name=\"Glossy Red\")\nglossy_red.diffuse_color = (1, 0, 0, 1)  # Vibrant red color\nglossy_red.specular_intensity = 0.5  # Glossy effect\n\n# Step 2: Create the Pad\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\npad = bpy.context.object\npad.name = \"Pad\"\npad.scale.x = 0.4\npad.scale.y = 0.25\npad.scale.z = 0.01\npad.data.materials.append(glossy_red)\n\n# Apply a Subdivision Surface modifier to make the corners rounded\nsubsurf = pad.modifiers.new(name=\"Subsurf\", type='SUBSURF')\nsubsurf.levels = 2\nsubsurf.render_levels = 2"}
{"id": "seed_tasks_17", "name": "Precipitator", "instruction": "Create a 3D model of a Precipitator. The exterior should be geometric with clean lines and sharp angles, in either bold black or chic white. Add subtle metallic accents. The interior should contrast with the exterior color. The Precipitator should be lit from within with ambient lighting.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Decoration Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nrose_gold = bpy.data.materials.new(name=\"Rose Gold\")\nrose_gold.diffuse_color = (0.717, 0.412, 0.475, 1)  # Rose gold color\nbrushed_nickel = bpy.data.materials.new(name=\"Brushed Nickel\")\nbrushed_nickel.diffuse_color = (0.662, 0.662, 0.662, 1)  # Brushed nickel color\n\n# Step 2: Create the Exterior\nbpy.ops.mesh.primitive_cube_add(size=3, location=(0, 0, 0))\nexterior = bpy.context.object\nexterior.name = \"Exterior\"\nexterior.data.materials.append(black)  # or white\n\n# Step 3: Create the Embellishments\nfor i in range(8):\n    x = 1.5 * ((i % 2) * 2 - 1)\n    y = 1.5 * (((i // 2) % 2) * 2 - 1)\n    z = 1.5 * ((i // 4) * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, z))\n    embellishment = bpy.context.object\n    embellishment.name = f\"Embellishment {i + 1}\"\n    embellishment.data.materials.append(rose_gold)  # or brushed_nickel\n\n# Step 4: Create the Interior\nbpy.ops.mesh.primitive_cube_add(size=2.9, location=(0, 0, 0))\ninterior = bpy.context.object\ninterior.name = \"Interior\"\ninterior.data.materials.append(white)  # or black\n\n# Step 5: Add the Lighting\nbpy.ops.object.light_add(type='POINT', location=(0, 0, 0))\nlight = bpy.context.object\nlight.name = \"Light\"\nlight.data.energy = 10  # Adjust as needed"}
{"id": "seed_tasks_18", "name": "Plant Stands", "instruction": "Could you create a plant stand?", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_wood = bpy.data.materials.new(name=\"Light Wood\")\nlight_wood.diffuse_color = (0.71, 0.6, 0.43, 1)  # Light wood color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0, -0.3))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(light_wood)\n\n# Step 3: Create the Legs\nfor i in range(4):\n    x = 0.6 * (i % 2) - 0.3\n    y = 0.6 * (i // 2) - 0.3\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(x, y, 0.3))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(light_wood)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.02, location=(0, 0, 0.6))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(light_wood)\n\n# Step 5: Create the Ornate Detailing\n# Note: This step is not easily achievable through a bpy script and would be better done manually using Blender's sculpting tools.\n\n# Step 6: Rename Objects for Clarity\n# This step is already done in the previous steps."}
{"id": "seed_tasks_19", "name": "Chalk Pastels", "instruction": "Create a set of chalk pastels. The pastels should be tapered and arranged in a gradient of vibrant colors. They are placed in a velvet-lined wooden box.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [bpy.data.materials.new(name=f\"Color {i}\") for i in range(10)]\nfor i, color in enumerate(colors):\n    hue = i / 10\n    color.diffuse_color = (hue, 1 - hue, hue / 2, 1)  # Gradient of colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Pastels\nfor i in range(10):\n    x = i * 0.07 - 0.315\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.15, location=(x, 0, 0.075))\n    pastel = bpy.context.object\n    pastel.name = f\"Pastel {i + 1}\"\n    pastel.data.materials.append(colors[i])\n\n# Step 3: Create the Wooden Box\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbox = bpy.context.object\nbox.name = \"Box\"\nbox.scale.x = 0.8\nbox.scale.y = 0.15\nbox.scale.z = 0.1\nbox.data.materials.append(mahogany)\n\n# Step 4: Create the Velvet Lining\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nlining = bpy.context.object\nlining.name = \"Lining\"\nlining.scale.x = 0.39\nlining.scale.y = 0.14\nlining.scale.z = 0.09\nlining.data.materials.append(black)"}
{"id": "seed_tasks_20", "name": "Solar Panel", "instruction": "Could you generate a 3D object that represents a solar panel with an array of rectangular photovoltaic cells?", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\nblue_black = bpy.data.materials.new(name=\"Blue Black\")\nblue_black.diffuse_color = (0.0, 0.0, 0.3, 1)  # Blue-black color\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.diffuse_color = (1.0, 1.0, 1.0, 0.5)  # Transparent color\n\n# Step 2: Create the Panel Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nframe = bpy.context.object\nframe.scale = (1.65, 0.99, 0.01)\nframe.name = \"Frame\"\nframe.data.materials.append(silver)\n\n# Step 3: Create the Photovoltaic Cells\ncell_length = 0.06\ncell_width = 0.03\nnum_rows = int(frame.scale.x / cell_length)\nnum_cols = int(frame.scale.y / cell_width)\nfor i in range(num_rows):\n    for j in range(num_cols):\n        x = frame.location.x + (i - num_rows / 2) * cell_length\n        y = frame.location.y + (j - num_cols / 2) * cell_width\n        bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.001))\n        cell = bpy.context.object\n        cell.scale = (cell_length, cell_width, 0.001)\n        cell.name = f\"Cell {i * num_cols + j + 1}\"\n        cell.data.materials.append(blue_black)\n\n# Step 4: Create the Glass Cover\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.002))\ncover = bpy.context.object\ncover.scale = (1.65, 0.99, 0.002)\ncover.name = \"Cover\"\ncover.data.materials.append(transparent)"}
{"id": "seed_tasks_21", "name": "Needles", "instruction": "Create a collection of 3D needles. Each needle is thin and sharp with a curved eye at the end. Arrange them in a circular or star-like formation.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Needle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.5, location=(0, 0, 0))\nneedle_body = bpy.context.object\nneedle_body.name = \"Needle Body\"\nneedle_body.data.materials.append(silver)\n\nbpy.ops.mesh.primitive_cone_add(radius1=0.005, radius2=0, depth=0.05, location=(0, 0, 0.275))\nneedle_point = bpy.context.object\nneedle_point.name = \"Needle Point\"\nneedle_point.data.materials.append(silver)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.01, minor_radius=0.005, location=(0, 0, -0.275))\nneedle_eye = bpy.context.object\nneedle_eye.name = \"Needle Eye\"\nneedle_eye.data.materials.append(silver)\nneedle_eye.rotation_euler[1] = math.pi / 2\n\n# Step 3: Duplicate and Arrange the Needles\nfor i in range(10):\n    angle = i * math.pi / 5\n    x = math.cos(angle) * 0.6\n    y = math.sin(angle) * 0.6\n    bpy.ops.object.duplicate_move(OBJECT_OT_duplicate={\"linked\":False, \"mode\":'TRANSLATION'}, TRANSFORM_OT_translate={\"value\":(x, y, 0)})\n    needle = bpy.context.object\n    needle.name = f\"Needle {i + 1}\"\n\n# Step 4: Rename Objects for Clarity\nneedle_body.name = \"Needle 1\""}
{"id": "seed_tasks_22", "name": "Brushes", "instruction": "Alright, I'd like to start with the handle of the brush. Create a long, cylindrical shape, 10cm long and 2cm in diameter, in a deep mahogany color.\n\nNow, moving on to the bristles of the brush. They should be arranged in a 3cm by 1cm rectangle at the end of the handle, with each bristle about 1mm in diameter, in a mix of black and white.\n\nLastly, let's put a silver band, 1cm wide, where the handle meets the bristles.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.5, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mahogany)\n\n# Step 3: Create the Bristles\nfor i in range(30):\n    for j in range(10):\n        x = i * 0.001 - 0.015\n        y = j * 0.001 - 0.005\n        bpy.ops.mesh.primitive_cylinder_add(radius=0.0005, depth=0.05, location=(x, y, -0.275))\n        bristle = bpy.context.object\n        bristle.name = f\"Bristle {i * 10 + j + 1}\"\n        bristle.data.materials.append(black if (i + j) % 2 == 0 else white)\n\n# Step 4: Create the Silver Band\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, -0.25), major_radius=0.01, minor_radius=0.005)\nband = bpy.context.object\nband.name = \"Silver Band\"\nband.data.materials.append(silver)"}
{"id": "seed_tasks_23", "name": "Chopsticks", "instruction": "Generate a pair of elongated chopsticks. They should be cherry-red. The tips are sharply pointed, and the upper ends are subtly thicker, tapering smoothly to the pointed lower ends.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\ncherry_red = bpy.data.materials.new(name=\"Cherry Red\")\ncherry_red.diffuse_color = (0.8, 0.04, 0.04, 1)  # Cherry red color\n\n# Step 2: Create the Chopsticks\nfor i in range(2):\n    x = 0.1 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.015, radius2=0.005, depth=0.9, location=(x, 0, 0))\n    chopstick = bpy.context.object\n    chopstick.name = f\"Chopstick {i + 1}\"\n    chopstick.data.materials.append(cherry_red)"}
{"id": "seed_tasks_24", "name": "Soccer", "instruction": "Create a 3D object of a soccer ball. It is perfectly round with a radius of 10cm, featuring a pattern of black pentagons and white hexagons evenly distributed.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nsoccer_ball = bpy.context.object\nsoccer_ball.name = \"Soccer Ball\"\nsoccer_ball.data.materials.append(white)\n\n# Steps 3, 4, and 5: Create the Pentagons and Hexagons and Add Texture\n# These steps require advanced scripting and cannot be achieved with simple bpy commands.\n\n# Step 6: Rename Objects for Clarity\n# This step is not necessary as we only have one object - the soccer ball."}
{"id": "seed_tasks_25", "name": "Building Blocks (for toys)", "instruction": "Alright, let's start by focusing on the shape of these building blocks. Create cubes, cylinders, pyramids, and spheres. \n\nNow, let's move onto the size. The cubes are 2x2x2 inches, the cylinders have a diameter of 2 inches and a height of 2 inches, the pyramids have a base of 2x2 inches and a height of 2 inches, and the spheres have a diameter of 2 inches.\n\nNext is the color. Use red, blue, yellow, and green. Each shape should come in all four colors.\n\nLet's create some visually appealing building blocks!", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Yellow color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\n\ncolors = [red, blue, yellow, green]\n\n# Step 2: Create the Cubes\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=2, location=(i*3, 0, 0))\n    cube = bpy.context.object\n    cube.name = f\"{colors[i].name} Cube\"\n    cube.data.materials.append(colors[i])\n\n# Step 3: Create the Cylinders\nfor i in range(4):\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=2, location=(i*3, -3, 0))\n    cylinder = bpy.context.object\n    cylinder.name = f\"{colors[i].name} Cylinder\"\n    cylinder.data.materials.append(colors[i])\n\n# Step 4: Create the Pyramids\nfor i in range(4):\n    bpy.ops.mesh.primitive_cone_add(vertices=4, radius1=1.414, depth=2, location=(i*3, -6, 0))\n    pyramid = bpy.context.object\n    pyramid.name = f\"{colors[i].name} Pyramid\"\n    pyramid.data.materials.append(colors[i])\n\n# Step 5: Create the Spheres\nfor i in range(4):\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(i*3, -9, 0))\n    sphere = bpy.context.object\n    sphere.name = f\"{colors[i].name} Sphere\"\n    sphere.data.materials.append(colors[i])"}
{"id": "seed_tasks_26", "name": "Rug", "instruction": "Design a rug with a rectangular shape, 10 by 10 inches at the bottom, and 15 inches in height, featuring a vibrant color scheme.", "category": "Household goods, not elsewhere specified", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbase_color = bpy.data.materials.new(name=\"Base Color\")\nbase_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Neutral color\npattern_colors = [bpy.data.materials.new(name=f\"Pattern Color {i}\") for i in range(5)]\nfor i, color in enumerate(pattern_colors):\n    color.diffuse_color = ((i + 1) / 5, (i + 2) % 5 / 5, (i + 3) % 5 / 5, 1)  # Vibrant colors\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.075))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale = (1, 1, 0.15)\nbase.data.materials.append(base_color)\n\n# Step 3: Create the Patterns\nfor i in range(5):\n    for j in range(5):\n        bpy.ops.mesh.primitive_cone_add(vertices=3 + i % 3, radius1=0.1, depth=0.01, location=(i / 5 - 0.45, j / 5 - 0.45, -0.05))\n        pattern = bpy.context.object\n        pattern.name = f\"Pattern {i * 5 + j + 1}\"\n        pattern.data.materials.append(pattern_colors[i % 5])"}
{"id": "seed_tasks_27", "name": "ball bearing", "instruction": "Create a ball bearing with a metallic sphere, showing the inner race, outer race, and balls in between.", "category": "Means of transport or hoisting", "instruction_type": "Comparing Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_grey = bpy.data.materials.new(name=\"Metallic Grey\")\nmetallic_grey.diffuse_color = (0.75, 0.75, 0.75, 1)  # Shiny metallic grey color\n\n# Step 2: Create the Inner Race\nbpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.025, location=(0, 0, 0))\ninner_race = bpy.context.object\ninner_race.name = \"Inner Race\"\ninner_race.data.materials.append(metallic_grey)\n\n# Step 3: Create the Outer Race\nbpy.ops.mesh.primitive_torus_add(major_radius=0.75, minor_radius=0.025, location=(0, 0, 0))\nouter_race = bpy.context.object\nouter_race.name = \"Outer Race\"\nouter_race.data.materials.append(metallic_grey)\n\n# Step 4: Create the Balls\nfor i in range(10):\n    angle = 2 * math.pi * i / 10\n    x = 0.625 * math.cos(angle)\n    y = 0.625 * math.sin(angle)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(x, y, 0))\n    ball = bpy.context.object\n    ball.name = f\"Ball {i + 1}\"\n    ball.data.materials.append(metallic_grey)"}
{"id": "seed_tasks_28", "name": "Sofa", "instruction": "Start with the base, make it wide and sturdy. \n\nNext, let's move on to the cushions. They should be plush and velvety, with a rich, deep color.\n\nThe arms of the sofa should be padded and rounded.\n\nLastly, add a few throw pillows, soft but slightly firm.", "category": "Furnishing", "instruction_type": "Feeling Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.64, 0.42, 0.26, 1)  # Wood color\nvelvet = bpy.data.materials.new(name=\"Velvet\")\nvelvet.diffuse_color = (0.58, 0.0, 0.08, 1)  # Velvet color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.scale = (3.5, 1.5, 0.5)\nbase.name = \"Base\"\nbase.data.materials.append(wood)\n\n# Step 3: Create the Cushions\nfor i in range(3):\n    x = 1.2 * (i - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, -0.5, 0))\n    cushion = bpy.context.object\n    cushion.scale = (1, 0.3, 1)\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(velvet)\n\n# Step 4: Create the Arms\nfor i in range(2):\n    x = 1.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, -0.1))\n    arm = bpy.context.object\n    arm.scale = (0.5, 1.5, 0.3)\n    arm.name = f\"Arm {i + 1}\"\n    arm.data.materials.append(velvet)\n\n# Step 5: Create the Throw Pillows\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0.5, -0.1))\n    pillow = bpy.context.object\n    pillow.scale = (0.5, 0.5, 0.3)\n    pillow.name = f\"Pillow {i + 1}\"\n    pillow.data.materials.append(velvet)"}
{"id": "seed_tasks_29", "name": "Coat Rack", "instruction": "Alright, let's get this show on the road. I need a coat rack, but not just any coat rack. This thing needs to be practical and functional. Let's start from the ground up.\n\nBase: The base should be 15 inches in diameter and heavy for stability.\n\nPole: The pole should be 6 feet tall and 3 inches in diameter.\n\nHooks: I need at least 8 hooks, each 5 inches long and curved at the end.\n\nMaterial: The coat rack should be made of durable metal or solid wood.\n\nAppearance: It should be painted in a neutral color like black or white.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Pole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=3, location=(0, 0, 1.5))\npole = bpy.context.object\npole.name = \"Pole\"\npole.data.materials.append(black)\n\n# Step 4: Create the Hooks\nfor i in range(8):\n    angle = 2 * math.pi * i / 8\n    x = 0.15 * math.cos(angle)\n    y = 0.15 * math.sin(angle)\n    bpy.ops.mesh.primitive_torus_add(location=(x, y, 3), rotation=(0, 0, angle), major_radius=0.15, minor_radius=0.02)\n    hook = bpy.context.object\n    hook.name = f\"Hook {i + 1}\"\n    hook.data.materials.append(black)"}
{"id": "seed_tasks_30", "name": "Laptops", "instruction": "Alright, let's create a 3D model of a laptop. The laptop should be rectangular and thin, with dimensions of 12 inches in width, 8 inches in depth, and 0.6 inches in height when closed. The outer shell should be silver with a metallic finish. The inner parts, including the keyboard and trackpad area, should be the same color.\n\nThe keyboard should have a standard QWERTY layout with small rectangular keys in a slightly darker shade of silver and black letters. The trackpad should be centered below the keyboard, rectangular with rounded corners, and the same color as the keys.\n\nThe screen should be a 13.3-inch rectangle with minimal black bezels (0.5 inches). A small round black webcam should be at the top center of the screen. The outer top side should have a black logo in the center.\n\nThe laptop should be standing on a simple rectangular base, in a slightly open position.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\ndark_silver = bpy.data.materials.new(name=\"Dark Silver\")\ndark_silver.diffuse_color = (0.5, 0.5, 0.5, 1)  # Dark silver color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Laptop Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nlaptop_body = bpy.context.object\nlaptop_body.scale.x = 12\nlaptop_body.scale.y = 8\nlaptop_body.scale.z = 0.6\nlaptop_body.data.materials.append(silver)\n\n# Steps 3-8 are not included due to the complexity of modeling the keyboard, trackpad, screen, webcam, logo, and base.\n\n# Step 9: Position the Laptop\nlaptop_body.rotation_euler.x = 0.1  # Slightly open position"}
{"id": "seed_tasks_31", "name": "Armoire", "instruction": "Darling, let's create a divine armoire with a classic French silhouette, tall and gracefully carved. The body should be in a richly hued mahogany with cream-colored trimmings. The doors should have ornate, hand-carved floral motifs. Add vintage-inspired brass knobs. Inside, include shelves and drawers lined with jewel-toned velvet, and an etched mirror on the inside of one door.", "category": "Furnishing", "instruction_type": "Decoration Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\ncream = bpy.data.materials.new(name=\"Cream\")\ncream.diffuse_color = (0.96, 0.90, 0.70, 1)  # Cream color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.71, 0.47, 0.22, 1)  # Brass color\nvelvet = bpy.data.materials.new(name=\"Velvet\")\nvelvet.diffuse_color = (0.58, 0.0, 0.08, 1)  # Jewel-toned velvet color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale.x = 1.5\nbody.scale.y = 1\nbody.scale.z = 3\nbody.name = \"Body\"\nbody.data.materials.append(mahogany)\n\n# Steps 3-8 would involve more complex operations like importing models for the floral motifs, creating the trimmings, doors, knobs, shelves, drawers, and mirror. These steps are not straightforward to implement using bpy and would require a more advanced understanding of the Blender API.\n\n# Step 9: Rename Objects for Clarity\n# This step would be implemented throughout the script by assigning a name to each object immediately after it's created."}
{"id": "seed_tasks_32", "name": "Futon", "instruction": "Let's create a futon with a standard rectangular base and a slight ergonomic curve. Add hexagonal cushions in a deep teal color. The frame is black metal. The futon can fold into a bed, and the backrest is slightly inclined.", "category": "Furnishing", "instruction_type": "Design Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0, 0, 0, 1)  # Matte black color\ndeep_teal = bpy.data.materials.new(name=\"Deep Teal\")\ndeep_teal.diffuse_color = (0, 0.5, 0.5, 1)  # Deep teal color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.scale = (2, 1, 0.1)\nbase.name = \"Base\"\nbase.data.materials.append(matte_black)\n\n# Step 3: Create the Cushions\nfor i in range(14):\n    x = 0.3 * (i % 7 - 3)\n    y = 0.3 * (i // 7 - 0.5)\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.1, depth=0.1, location=(x, y, 0.05))\n    cushion = bpy.context.object\n    cushion.name = f\"Cushion {i + 1}\"\n    cushion.data.materials.append(deep_teal)\n\n# Step 4: Create the Backrest\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.5, 0.4))\nbackrest = bpy.context.object\nbackrest.scale = (2, 0.05, 0.8)\nbackrest.rotation_euler = (math.radians(10), 0, 0)  # Slightly inclined\nbackrest.name = \"Backrest\"\nbackrest.data.materials.append(matte_black)"}
{"id": "seed_tasks_33", "name": "Drill", "instruction": "Hey, can you create a 3D model of a drill for me?", "category": "Tools and hardware", "instruction_type": "Verbal Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbright_color = bpy.data.materials.new(name=\"Bright Color\")\nbright_color.diffuse_color = (1, 1, 0, 1)  # Yellow color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.35, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(bright_color)\n\n# Step 3: Create the Trigger\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, -0.04, -0.1))\ntrigger = bpy.context.object\ntrigger.name = \"Trigger\"\ntrigger.data.materials.append(black)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.2, location=(0, -0.1, -0.15), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(bright_color)\n\n# Step 5: Create the Chuck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 0.225))\nchuck = bpy.context.object\nchuck.name = \"Chuck\"\nchuck.data.materials.append(silver)\n\n# Step 6: Create the Drill Bit\nbpy.ops.mesh.primitive_cone_add(vertices=12, radius1=0.01, radius2=0, depth=0.25, location=(0, 0, 0.35))\ndrill_bit = bpy.context.object\ndrill_bit.name = \"Drill Bit\"\ndrill_bit.data.materials.append(silver)"}
{"id": "seed_tasks_34", "name": "Torus wrapping sphere", "instruction": "Could you please generate a 3D object that would embody a Torus wrapping a sphere? The object consists of a sphere enveloped by a rough-textured Torus.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feeling Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Sphere\nbpy.ops.mesh.primitive_uv_sphere_add(radius=5, location=(0, 0, 0))\nsphere = bpy.context.object\nsphere.name = \"Sphere\"\nsphere.data.materials.append(white)\n\n# Step 3: Create the Torus\nbpy.ops.mesh.primitive_torus_add(major_radius=7.5, minor_radius=2.5, location=(0, 0, 0))\ntorus = bpy.context.object\ntorus.name = \"Torus\"\ntorus.data.materials.append(dark_gray)\n\n# Add roughness to the torus\ndark_gray.roughness = 0.8"}
{"id": "seed_tasks_35", "name": "Chimney", "instruction": "Hey there, I'm looking to create a 3D model of a chimney. The chimney is a classic red brick design with a smokestack.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred_brick = bpy.data.materials.new(name=\"Red Brick\")\nred_brick.diffuse_color = (0.5, 0.1, 0.1, 1)  # Red brick color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.7, 0.7, 0.7, 1)  # Light gray color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.3, 0.3, 0.3, 1)  # Dark gray color\n\n# Step 2: Create the Chimney Body\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 0))\nchimney_body = bpy.context.object\nchimney_body.name = \"Chimney Body\"\nchimney_body.data.materials.append(red_brick)\n\n# Step 3: Create the Smokestack\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1, location=(0, 0, 1.5))\nsmokestack = bpy.context.object\nsmokestack.name = \"Smokestack\"\nsmokestack.data.materials.append(red_brick)\n\n# Step 4: Create the Smoke\n# Note: Creating a cloud-like shape requires more advanced techniques, so this is a simplified representation\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.5, location=(0, 0, 2.5))\nsmoke = bpy.context.object\nsmoke.name = \"Smoke\"\nsmoke.data.materials.append(light_gray)\n\n# Step 5: Create the Bird\n# Note: Creating a bird shape requires more advanced techniques, so this is a simplified representation\nbpy.ops.mesh.primitive_cone_add(vertices=1, radius1=0.1, depth=0.2, location=(1, 0, 1.5))\nbird = bpy.context.object\nbird.name = \"Bird\"\nbird.data.materials.append(dark_gray)"}
{"id": "seed_tasks_36", "name": "Oil Pastels", "instruction": "Create a set of oil pastels as used by Impressionist painters in the late 19th century. The pastels should have a historical shape and size, with a varied color range. The body material could be wood or another period-appropriate material. Package them in a tin or wooden box, or bundled with string. Show signs of use and wear.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "instruction_length": "extended", "script": "import bpy\nimport math\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    bpy.data.materials.new(name=\"Cadmium Yellow\"),\n    bpy.data.materials.new(name=\"Vermilion\"),\n    bpy.data.materials.new(name=\"Cobalt Blue\"),\n    bpy.data.materials.new(name=\"Viridian\"),\n]\nfor color in colors:\n    color.diffuse_color = (random.random(), random.random(), random.random(), 1)  # Random colors for simplicity\nlight_wood = bpy.data.materials.new(name=\"Light Wood\")\nlight_wood.diffuse_color = (0.71, 0.6, 0.43, 1)  # Light wood color\n\n# Step 2: Create the Pastels\nfor i in range(12):\n    x = 0.1 * (i % 6) - 0.25\n    y = 0.1 * (i // 6) - 0.05\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.15, location=(x, y, 0))\n    pastel = bpy.context.object\n    pastel.name = f\"Pastel {i + 1}\"\n    pastel.data.materials.append(random.choice(colors))  # Assign a random color from the defined range\n\n# Step 3: Create the Wooden Box\nbpy.ops.mesh.primitive_cube_add(size=0.6, location=(0, 0, -0.05))\nbox = bpy.context.object\nbox.scale.z = 0.25  # Adjust the height of the box\nbox.name = \"Box\"\nbox.data.materials.append(light_wood)\n\n# Step 4: Add Wear and Tear\n# This step is more complex and requires manual sculpting, so it is not included in this script\n\n# Step 5: Rename Objects for Clarity\n# This step is already covered in the previous steps"}
{"id": "seed_tasks_37", "name": "Chess Pieces (for chess)", "instruction": "Alright, we're going to be creating some chess pieces today. Let's start with the pawn. It should be a small, round piece with a ball-like top, about one-third the height of the king, in white.\n\nNow, let's move on to the rook. It should be cylindrical with battlements on top, about half the height of the king, in black.\n\nNext up is the knight. It should have the shape of a horse's head, the same height as the rook, in white.\n\nThe bishop should be tall and slender with a split top, about the same height as the king, in black.\n\nThe queen should be the second tallest piece with a crown-like top, in white.\n\nLastly, the king should be the tallest piece with a cross on top, in black.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "instruction_length": "extended", "script": "import bpy\n\n# Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Create the Pawn\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\nbpy.ops.mesh.primitive_cylinder_add(location=(0, 0, -1))\nbpy.context.object.data.materials.append(white)\n\n# Create the Rook\nbpy.ops.mesh.primitive_cylinder_add(location=(2, 0, 0))\nbpy.ops.mesh.primitive_cube_add(location=(2, 0, 1))\nbpy.context.object.data.materials.append(black)\n\n# Create the Bishop\nbpy.ops.mesh.primitive_cylinder_add(location=(4, 0, 0))\nbpy.ops.mesh.primitive_cone_add(location=(4, 0, 1))\nbpy.context.object.data.materials.append(black)\n\n# Create the Queen\nbpy.ops.mesh.primitive_cylinder_add(location=(6, 0, 0))\nbpy.ops.mesh.primitive_cone_add(location=(6, 0, 1.5))\nbpy.context.object.data.materials.append(white)\n\n# Create the King\nbpy.ops.mesh.primitive_cylinder_add(location=(8, 0, 0))\nbpy.ops.mesh.primitive_cube_add(location=(8, 0, 2))\nbpy.context.object.data.materials.append(black)"}
{"id": "seed_tasks_38", "name": "Cylindrical Leg Chair", "instruction": "Let's start with the main body of our chair. The seat is a cylinder with a height of 18 inches and a diameter of 14 inches, in a rich mahogany color.\n\nMoving on to the chair's legs. There are four cylindrical legs, each 14 inches long and 2 inches in diameter, positioned at equal distances on the bottom surface of the seat, in a matte black finish. The legs are angled slightly outward for better balance.\n\nLastly, let's add some comfort to our chair. There is a cylindrical cushion on the seat, with a diameter of 14 inches and a height of 2 inches, in a warm beige color.", "category": "Furnishing", "instruction_type": "Feature Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Rich mahogany color\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0, 0, 0, 1)  # Matte black color\nbeige = bpy.data.materials.new(name=\"Beige\")\nbeige.diffuse_color = (0.96, 0.96, 0.86, 1)  # Warm, inviting beige color\n\n# Step 2: Create the Main Body/Seat\nbpy.ops.mesh.primitive_cylinder_add(radius=7, depth=2, location=(0, 0, 0))\nseat = bpy.context.object\nseat.name = \"Seat\"\nseat.data.materials.append(mahogany)\n\n# Step 3: Create the Legs\nfor i in range(4):\n    angle = i * math.pi / 2\n    x = 7 * math.cos(angle)\n    y = 7 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=1, depth=14, location=(x, y, -7), rotation=(0, 0, angle + math.pi/4))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(matte_black)\n\n# Step 4: Create the Cushion\nbpy.ops.mesh.primitive_cylinder_add(radius=7, depth=2, location=(0, 0, 2))\ncushion = bpy.context.object\ncushion.name = \"Cushion\"\ncushion.data.materials.append(beige)"}
{"id": "seed_tasks_39", "name": "Conjoined cubes with a truncated cone", "instruction": "Generate two identical cubes, each 5 units on each side, sharing a common face. Construct a truncated cone with a base diameter of 5 units, a top diameter of 2.5 units, and a height of 5 units. Position the truncated cone on the top face of the conjoined cubes, centered where the two cubes meet, with the smaller diameter end pointing upwards.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Design Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cubes\nfor i in range(2):\n    x = 5 * i\n    bpy.ops.mesh.primitive_cube_add(size=5, location=(x, 0, 0))\n    cube = bpy.context.object\n    cube.name = f\"Cube {i + 1}\"\n\n# Step 3: Create the Truncated Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=2.5, radius2=1.25, depth=5, location=(2.5, 0, 7.5))\ntruncated_cone = bpy.context.object\ntruncated_cone.name = \"Truncated Cone\""}
{"id": "seed_tasks_40", "name": "Battery", "instruction": "Let's start with a standard cylindrical shape. Add a positive terminal on the top and a flat negative base at the bottom.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (0.83, 0.69, 0.22, 1)  # Gold color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=1.9, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(silver)\n\n# Step 3: Create the Positive Terminal\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(0, 0, 1))\npositive_terminal = bpy.context.object\npositive_terminal.name = \"Positive Terminal\"\npositive_terminal.data.materials.append(gold)\n\n# Step 4: Create the Negative Terminal\n# The negative terminal is the base of the battery body itself, so no additional object needs to be created.\n\n# Step 5: Create the Label\nbpy.ops.mesh.primitive_torus_add(major_radius=0.4, minor_radius=0.05, location=(0, 0, 0.5))\nlabel = bpy.context.object\nlabel.name = \"Label\"\nlabel.data.materials.append(blue)"}
{"id": "seed_tasks_41", "name": "Knife", "instruction": "Alright, let's get started with this. Create a 3D model of a chef's knife. The blade should be 8 inches long with a slight curve towards the tip. The handle should be black pakkawood with a slight curve and riveted. \n\nNow, animate the knife slicing a tomato, dicing an onion, and chopping herbs. Place the knife on a cutting board with diced onions, sliced tomatoes, and chopped herbs around it.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Verbal Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_silver = bpy.data.materials.new(name=\"Metallic Silver\")\nmetallic_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic silver color\npolished_black = bpy.data.materials.new(name=\"Polished Black\")\npolished_black.diffuse_color = (0.02, 0.02, 0.02, 1)  # Polished black color\n\n# Step 2: Create the Blade\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nblade = bpy.context.object\nblade.scale.x = 0.1\nblade.scale.y = 0.4\nblade.name = \"Blade\"\nblade.data.materials.append(metallic_silver)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, -0.25, 0))\nhandle = bpy.context.object\nhandle.scale.x = 0.07\nhandle.scale.y = 0.2\nhandle.name = \"Handle\"\nhandle.data.materials.append(polished_black)\n\n# Step 4: Join the Blade and Handle\nbpy.ops.object.select_all(action='DESELECT')\nblade.select_set(True)\nhandle.select_set(True)\nbpy.context.view_layer.objects.active = blade\nbpy.ops.object.join()\n\n# Steps 5, 6, and 7: Create the Animation and the Cutting Board and Ingredients\n# These steps require more complex operations and are not covered in this basic script."}
{"id": "seed_tasks_42", "name": "Pan", "instruction": "Start with a circular base, then extend the sides upwards to create a shallow depth. Add a long, curved handle on one side.", "category": "Tools and hardware", "instruction_type": "Design Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npan_color = bpy.data.materials.new(name=\"Pan Color\")\npan_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color for the pan\nhandle_color = bpy.data.materials.new(name=\"Handle Color\")\nhandle_color.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark color for the handle\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_circle_add(radius=0.6, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(pan_color)\n\n# Step 3: Create the Sides\nbpy.ops.object.mode_set(mode = 'EDIT')\nbpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={\"value\":(0, 0, 0.1)})\nbpy.ops.object.mode_set(mode = 'OBJECT')\nsides = bpy.context.object\nsides.name = \"Sides\"\nsides.data.materials.append(pan_color)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.65, 0, 0.05), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(handle_color)"}
{"id": "seed_tasks_43", "name": "Toy Building Blocks", "instruction": "Hey there, can we make some toy building blocks? The blocks are colorful and arranged in a playful mess.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "instruction_length": "short", "script": "import bpy\nimport random\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = ['Red', 'Blue', 'Yellow', 'Green', 'Orange', 'Purple']\ncolor_values = [(1, 0, 0, 1), (0, 0, 1, 1), (1, 1, 0, 1), (0, 1, 0, 1), (1, 0.5, 0, 1), (0.5, 0, 1, 1)]\nmaterials = []\nfor i in range(6):\n    mat = bpy.data.materials.new(name=colors[i])\n    mat.diffuse_color = color_values[i]\n    materials.append(mat)\n\n# Step 2: Create the Blocks\nfor i in range(20):\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    z = random.uniform(0, 2)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, y, z))\n    block = bpy.context.object\n    block.name = f\"Block {i + 1}\"\n    block.data.materials.append(random.choice(materials))\n\n# Step 3: Add the Spinning Mechanism\nfor i in range(5):\n    block = bpy.data.objects[f\"Block {i + 1}\"]\n    block.rotation_mode = 'XYZ'\n    block.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n    block.rotation_euler = (0, 0, random.uniform(0, 2*math.pi))\n    block.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Step 4: Round the Edges\nfor i in range(20):\n    block = bpy.data.objects[f\"Block {i + 1}\"]\n    bevel = block.modifiers.new(name=\"Bevel\", type='BEVEL')\n    bevel.width = 0.01"}
{"id": "seed_tasks_44", "name": "Lamp", "instruction": "Could you generate a 3D model of a lamp for me please? The lamp features an adjustable neck, a compact and heavy base, a simple switch, and a lampshade designed to diffuse light evenly. It should accommodate LED bulbs.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Specific Usage Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0.02, 0.02, 0.02, 1)  # Matte black color\ntranslucent_white = bpy.data.materials.new(name=\"Translucent White\")\ntranslucent_white.diffuse_color = (1, 1, 1, 0.5)  # Translucent white color\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.05, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(matte_black)\n\n# Step 3: Create the Neck\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.6, location=(0, 0, 0.3))\nneck = bpy.context.object\nneck.name = \"Neck\"\nneck.data.materials.append(matte_black)\n\n# Step 4: Create the Lampshade\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0.9))\nlampshade = bpy.context.object\nlampshade.name = \"Lampshade\"\nlampshade.data.materials.append(translucent_white)\n\n# Step 5: Create the Switch\nbpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.01, location=(0.3, 0, 0.025))\nswitch = bpy.context.object\nswitch.name = \"Switch\"\nswitch.data.materials.append(matte_black)\n\n# Step 6: Create the Bulb Socket\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(0, 0, 0.85))\nbulb_socket = bpy.context.object\nbulb_socket.name = \"Bulb Socket\"\nbulb_socket.data.materials.append(metallic)"}
{"id": "seed_tasks_45", "name": "Office Desk", "instruction": "Can you create an office desk that with elements reminiscent of ornate, hand-carved Victorian desks?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Comparing Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_wood = bpy.data.materials.new(name=\"Light Wood\")\nlight_wood.diffuse_color = (0.71, 0.6, 0.43, 1)  # Light wood color\n\n# Step 2: Create the Desk Surface\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\ndesk_surface = bpy.context.object\ndesk_surface.scale.x = 1.5\ndesk_surface.scale.y = 0.75\ndesk_surface.scale.z = 0.05\ndesk_surface.name = \"Desk Surface\"\ndesk_surface.data.materials.append(light_wood)\n\n# Step 3: Create the Desk Legs\nfor i in range(4):\n    x = 1.5 * (i % 2) - 0.75\n    y = 0.75 * (i // 2) - 0.375\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.7, location=(x, y, 0.25))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(light_wood)\n\n# Step 4: Create the Drawers\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0.2, 0.4))\n    drawer = bpy.context.object\n    drawer.scale.x = 0.3\n    drawer.scale.y = 0.45\n    drawer.scale.z = 0.15\n    drawer.name = f\"Drawer {i + 1}\"\n    drawer.data.materials.append(light_wood)\n\n# Step 5: Create the Desk Back\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.4, 0.25))\ndesk_back = bpy.context.object\ndesk_back.scale.x = 1.5\ndesk_back.scale.y = 0.05\ndesk_back.scale.z = 0.7\ndesk_back.name = \"Desk Back\"\ndesk_back.data.materials.append(light_wood)"}
{"id": "seed_tasks_46", "name": "Blanket", "instruction": "Darling, let's create a blanket with a color palette of pastel hues including lavender, mint, and blush. It should feature a subtle geometric pattern and a fringe on all four sides.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Decoration Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlavender = bpy.data.materials.new(name=\"Lavender\")\nlavender.diffuse_color = (0.9, 0.7, 1, 1)  # Lavender color\nmint = bpy.data.materials.new(name=\"Mint\")\nmint.diffuse_color = (0.6, 1, 0.6, 1)  # Mint color\nblush = bpy.data.materials.new(name=\"Blush\")\nblush.diffuse_color = (1, 0.8, 0.9, 1)  # Blush color\n\n# Step 2: Create the Blanket\nbpy.ops.mesh.primitive_plane_add(size=8, location=(0, 0, 0))\nblanket = bpy.context.object\nblanket.name = \"Blanket\"\nblanket.scale.x = 0.75  # To make the blanket 60 inches wide\nblanket.data.materials.append(lavender)\nblanket.data.materials.append(mint)\nblanket.data.materials.append(blush)\n\n# Step 3: Create the Pattern\n# This step depends on the specific geometric pattern and may involve adding multiple objects or textures to the blanket\n\n# Step 4: Create the Fringe\n# This step depends on the specific fringe detailing and may involve adding multiple objects or textures to the blanket\n\n# Step 5: Rename Objects for Clarity\n# The objects have already been named in the previous steps"}
{"id": "seed_tasks_47", "name": "Waffle Maker", "instruction": "Let's start with the exterior. The waffle maker should have a hexagonal outer shell made of brushed stainless steel.\n\nNow, let's move on to the interior. The waffle grid should be a perfect square with a classic Belgian waffle design, featuring deep pockets about 2 centimeters deep.\n\nThe handle should be curved and made of a heat-resistant material.\n\nLastly, add a small LCD panel on the top to display the temperature and timer.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Design Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nstainless_steel = bpy.data.materials.new(name=\"Stainless Steel\")\nstainless_steel.diffuse_color = (0.75, 0.75, 0.75, 1)  # Brushed stainless steel color\nnonstick_coating = bpy.data.materials.new(name=\"Nonstick Coating\")\nnonstick_coating.diffuse_color = (0.1, 0.1, 0.1, 1)  # Non-stick coating color\nheat_resistant_material = bpy.data.materials.new(name=\"Heat Resistant Material\")\nheat_resistant_material.diffuse_color = (0.5, 0.5, 0.5, 1)  # Heat-resistant material color\nlcd_panel_color = bpy.data.materials.new(name=\"LCD Panel Color\")\nlcd_panel_color.diffuse_color = (0, 0, 0, 1)  # LCD panel color\n\n# Step 2: Create the Exterior\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.6, depth=0.1, location=(0, 0, 0))\nexterior = bpy.context.object\nexterior.name = \"Exterior\"\nexterior.data.materials.append(stainless_steel)\n\n# Step 3: Create the Interior\nbpy.ops.mesh.primitive_grid_add(size=0.8, location=(0, 0, 0))\ninterior = bpy.context.object\ninterior.name = \"Interior\"\ninterior.data.materials.append(nonstick_coating)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0.7, 0), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(heat_resistant_material)\n\n# Step 5: Create the LCD Panel\nbpy.ops.mesh.primitive_cube_add(size=0.15, location=(0, 0, 0.05))\nlcd_panel = bpy.context.object\nlcd_panel.scale.y = 0.1\nlcd_panel.scale.z = 0.01\nlcd_panel.name = \"LCD Panel\"\nlcd_panel.data.materials.append(lcd_panel_color)"}
{"id": "seed_tasks_48", "name": "Scratching Post (for cats)", "instruction": "Let's start by visualizing a sturdy cylindrical post, about one meter in height, covered in sisal rope. \n\nNow, let's add a wooden base at the bottom of the post for stability. \n\nFinally, envision a soft, plush top on the post for the cat to perch on.", "category": "Articles for the care and handling of animals", "instruction_type": "Feeling Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsisal_rope = bpy.data.materials.new(name=\"Sisal Rope\")\nsisal_rope.diffuse_color = (0.5, 0.35, 0.05, 1)  # Sisal rope color\nwood = bpy.data.materials.new(name=\"Wood\")\nwood.diffuse_color = (0.64, 0.42, 0.26, 1)  # Wood color\nplush = bpy.data.materials.new(name=\"Plush\")\nplush.diffuse_color = (0.8, 0.8, 0.8, 1)  # Plush color\n\n# Step 2: Create the Post\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 1))\npost = bpy.context.object\npost.name = \"Post\"\npost.data.materials.append(sisal_rope)\n\n# Step 3: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(wood)\n\n# Step 4: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(0, 0, 2.05))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(plush)"}
{"id": "seed_tasks_49", "name": "Tip", "instruction": "Please construct a 3D model of a tip for a writing instrument. The tip should be sharp.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.05, depth=0.2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(silver)\n\n# Step 3: Create the Point\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.001, depth=0.01, location=(0, 0, 0.2))\npoint = bpy.context.object\npoint.name = \"Point\"\npoint.data.materials.append(silver)\n\n# Step 4: Create the Ink Channel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.21, location=(0, 0, 0.105))\nink_channel = bpy.context.object\nink_channel.name = \"Ink Channel\"\nink_channel.data.materials.append(black)"}
{"id": "seed_tasks_50", "name": "Wall Artpiece", "instruction": "Design a wall artpiece that could also serve as a bookshelf, with a minimalist style in neutral colors.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_wood = bpy.data.materials.new(name=\"Light Wood\")\nlight_wood.diffuse_color = (0.71, 0.6, 0.43, 1)  # Light wood color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nframe = bpy.context.object\nframe.dimensions = (1.8, 0.3, 2.4)\nframe.name = \"Frame\"\nframe.data.materials.append(light_wood)\n\n# Step 3: Create the Shelves\nshelf_lengths = [1.5, 1.2, 0.9, 0.6]\nfor i, length in enumerate(shelf_lengths):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.15, 0))\n    shelf = bpy.context.object\n    shelf.dimensions = (length, 0.3, 0.1)\n    shelf.location.z = i * 0.6 - 0.8  # Arrange shelves evenly within the frame\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.data.materials.append(light_wood)"}
{"id": "seed_tasks_51", "name": "Cuboid", "instruction": "Alright, let's get this show on the road. Create a cuboid that is 5 units in length, 6 units in width, and 10 units in depth. Make it solid and matte black. Once it's done, have it rotate slowly on its axis.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0, 0, 0, 1)  # Matte black color\n\n# Step 2: Create the Cuboid\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncuboid = bpy.context.object\ncuboid.name = \"Cuboid\"\ncuboid.scale = (5, 6, 10)  # Set the dimensions of the cuboid\ncuboid.data.materials.append(matte_black)\n\n# Step 3: Add Rotation\nbpy.context.scene.frame_end = 200\ncuboid.rotation_mode = 'XYZ'\ncuboid.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ncuboid.rotation_euler = (0, 0, 6.28319)  # 360 degrees in radians\ncuboid.keyframe_insert(data_path=\"rotation_euler\", frame=200)"}
{"id": "seed_tasks_52", "name": "Diffusers", "instruction": "Let's kick off this creative endeavor with a unique design for a diffuser. Start with a cylindrical body. On the top, place a series of small, geometrically arranged holes. The base should be hexagonal. Lastly, incorporate an interactive interface on the front.", "category": "Household goods, not elsewhere specified", "instruction_type": "Design Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0.02, 0.02, 0.02, 1)  # Matte black color\ncool_silver = bpy.data.materials.new(name=\"Cool Silver\")\ncool_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Cool silver color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.8, location=(0, 0, 0.4))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(matte_black)\n\n# Step 3: Create the Diffusion Holes\nfor i in range(36):  # 36 holes arranged in a circular pattern\n    angle = 2 * math.pi * i / 36\n    x = 0.25 * math.cos(angle)\n    y = 0.25 * math.sin(angle)\n    bpy.ops.mesh.primitive_circle_add(radius=0.005, location=(x, y, 0.8))\n    hole = bpy.context.object\n    hole.name = f\"Diffusion Hole {i + 1}\"\n    hole.data.materials.append(matte_black)\n\n# Step 4: Create the Base\nbpy.ops.mesh.primitive_circle_add(vertices=6, radius=0.35, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(matte_black)\n\n# Step 5: Create the Interface\nbpy.ops.mesh.primitive_plane_add(size=0.2, location=(0, -0.3, 0.4))\ninterface = bpy.context.object\ninterface.name = \"Interface\"\ninterface.data.materials.append(cool_silver)"}
{"id": "seed_tasks_53", "name": "Waste Basket", "instruction": "Alright, let's get down to business. I need a 3D model of a waste basket.\n\n1. It needs to be tall and cylindrical.\n2. It should have a wide opening at the top.\n3. The material should be durable, like metal or hard plastic.\n4. It should have handles on the sides.\n5. The base should be wider than the top.\n6. Add a removable inner bin.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngray = bpy.data.materials.new(name=\"Gray\")\ngray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Gray color\nlight_gray = bpy.data.materials.new(name=\"Light Gray\")\nlight_gray.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light gray color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=0.9, radius2=0.75, depth=1.25, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.data.materials.append(gray)\n\n# Step 3: Create the Opening\n# No additional steps needed\n\n# Step 4: Create the Handles\nfor i in range(2):\n    x = 0.8 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 0.5))\n    bpy.ops.transform.resize(value=(1, 0.2, 2))\n    handle = bpy.context.object\n    handle.name = f\"Handle {i + 1}\"\n    handle.data.materials.append(gray)\n\n# Step 5: Create the Base\n# No additional steps needed\n\n# Step 6: Create the Inner Bin\nbpy.ops.mesh.primitive_cylinder_add(radius=0.7, depth=1.2, location=(0, 0, 0))\nbin = bpy.context.object\nbin.name = \"Inner Bin\"\nbin.data.materials.append(light_gray)"}
{"id": "seed_tasks_54", "name": "Cylinder", "instruction": "Hey there, buddy. I've got a job for you. I want you to whip up a 3D model of a cylinder. Make it 10 units high and 5 units in diameter with a smooth curved surface.\n\nNow, I want you to animate this cylinder. Make it rotate around its vertical axis with a slow, continuous spin.\n\nThen, make it cast a shadow on the ground with a light source above it and reflect some light.\n\nFinally, place the spinning cylinder on a plain table against a neutral background with good lighting.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=2.5, depth=10, location=(0, 0, 0))\ncylinder = bpy.context.object\n\n# Step 3: Create the Material\nmaterial = bpy.data.materials.new(name=\"Shiny Material\")\nmaterial.specular_intensity = 0.5  # Adjust to make the material shinier\n\n# Step 4: Apply the Material\ncylinder.data.materials.append(material)\n\n# Step 5: Create the Animation\ncylinder.rotation_mode = 'XYZ'\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=1, index=2)\ncylinder.rotation_euler[2] = 6.28319  # 360 degrees in radians\ncylinder.keyframe_insert(data_path=\"rotation_euler\", frame=100, index=2)\n\n# Step 6: Set Up the Lighting\nbpy.ops.object.light_add(type='POINT', location=(0, 0, 5))\n\n# Step 7: Create the Environment\nbpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, -5))\nbpy.context.scene.world.color = (0.5, 0.5, 0.5)  # Neutral gray background"}
{"id": "seed_tasks_55", "name": "Cardstock", "instruction": "Let's commence our journey of creation with the material of our choice, cardstock. The cardstock is a rectangular piece, 12 inches in length, 9 inches in breadth, and 0.01 inches thick. It is colored in a warm, earthy brown tone on both sides. \n\nNext, let's bring color into play. Fold the cardstock in the middle with a wavy crease. \n\nFinally, let's add some interest on the surface. Emboss small geometric shapes (triangles, squares, and circles, each 0.5 inches) randomly on one side.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nearthy_brown = bpy.data.materials.new(name=\"Earthy Brown\")\nearthy_brown.diffuse_color = (0.44, 0.26, 0.13, 1)  # Earthy brown color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncardstock = bpy.context.object\ncardstock.name = \"Cardstock\"\ncardstock.scale.x = 1.2\ncardstock.scale.y = 0.9\ncardstock.scale.z = 0.01\ncardstock.data.materials.append(earthy_brown)\n\n# The steps to create the crease and the embossed pattern are not straightforward in bpy and would require complex sculpting operations that are beyond the scope of this task.\n\n# Step 5: Rename Objects for Clarity\n# The object has already been named in step 2."}
{"id": "seed_tasks_56", "name": "Battery", "instruction": "Could you please create a 3D model of a battery? The battery should be cylindrical, with a black and brass color scheme. Include the positive and negative terminals on the top.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Comparing Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.71, 0.65, 0.26, 1)  # Brass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Top and Bottom\nfor i in range(2):\n    z = 1.02 * (i * 2 - 1) / 2\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.11, depth=0.02, location=(0, 0, z))\n    cap = bpy.context.object\n    cap.name = \"Top\" if i == 0 else \"Bottom\"\n    cap.data.materials.append(brass)\n\n# Step 4: Create the Terminals\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.02, location=(0, 0, 0.53))\npositive_terminal = bpy.context.object\npositive_terminal.name = \"Positive Terminal\"\npositive_terminal.data.materials.append(brass)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.01, location=(0, 0.03, 0.52))\nnegative_terminal = bpy.context.object\nnegative_terminal.name = \"Negative Terminal\"\nnegative_terminal.data.materials.append(brass)"}
{"id": "seed_tasks_57", "name": "Clarinet", "instruction": "Alright, let's start creating a 3D model of a Clarinet. The clarinet has a long, cylindrical body with a slight flare at the bottom end (the bell) and a tapered top end (the mouthpiece). \n\nNow, let's move on to the keys. They cover more than half of the clarinet's body and are silver, contrasting with the black body of the clarinet. \n\nThe mouthpiece is a bit wider than the main body and is glossy black. It connects to a thin, silver metal piece called the ligature. \n\nLastly, the bell at the bottom flares out slightly and is the same glossy black color as the rest of the body.", "category": "Musical instruments", "instruction_type": "Outlook Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.3, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Keys\nfor i in range(10):\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(0, 0, i * 0.23))\n    key = bpy.context.object\n    key.name = f\"Key {i + 1}\"\n    key.data.materials.append(silver)\n\n# Step 4: Create the Mouthpiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.06, depth=0.3, location=(0, 0, 1.15))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"\nmouthpiece.data.materials.append(black)\n\n# Step 5: Create the Ligature\nbpy.ops.mesh.primitive_cylinder_add(radius=0.055, depth=0.01, location=(0, 0, 1.1))\nligature = bpy.context.object\nligature.name = \"Ligature\"\nligature.data.materials.append(silver)\n\n# Step 6: Create the Bell\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=0.15, depth=0.4, location=(0, 0, -0.2))\nbell = bpy.context.object\nbell.name = \"Bell\"\nbell.data.materials.append(black)"}
{"id": "seed_tasks_58", "name": "Capacitor", "instruction": "Craft a capacitor with a cylindrical shape in cerulean blue, with silver leads protruding from the bottom.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncerulean_blue = bpy.data.materials.new(name=\"Cerulean Blue\")\ncerulean_blue.diffuse_color = (0.01, 0.72, 0.89, 1)  # Cerulean blue color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(cerulean_blue)\n\n# Step 3: Create the Leads\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.5, location=(x, 0, -0.75))\n    lead = bpy.context.object\n    lead.name = f\"Lead {i + 1}\"\n    lead.data.materials.append(silver)"}
{"id": "seed_tasks_59", "name": "Otoscope", "instruction": "Alright, let's get this otoscope design rolling. The otoscope should be about 6 inches long with a thin, straight handle. At the top, it has a small, circular attachment. Show a light beam coming out of it and being held by a doctor's hand.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic color\nbright_light = bpy.data.materials.new(name=\"Bright Light\")\nbright_light.diffuse_color = (1, 1, 0.88, 1)  # Bright light color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(metallic)\n\n# Step 3: Create the Top Attachment\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.2, location=(0, 0, 0.7))\ntop_attachment = bpy.context.object\ntop_attachment.name = \"Top Attachment\"\ntop_attachment.data.materials.append(metallic)\n\n# Step 4: Create the Light Beam\nbpy.ops.mesh.primitive_cone_add(vertices=16, radius1=0, radius2=0.1, depth=0.5, location=(0, 0, 1))\nlight_beam = bpy.context.object\nlight_beam.name = \"Light Beam\"\nlight_beam.data.materials.append(bright_light)\n\n# Step 5: Create the Doctor's Hand\n# Note: Creating a hand object is complex and requires a detailed model. This step is simplified for the purpose of this task.\nbpy.ops.mesh.primitive_cube_add(size=0.4, location=(0, -0.1, 0))\nhand = bpy.context.object\nhand.name = \"Doctor's Hand\"\nhand.data.materials.append(metallic)"}
{"id": "seed_tasks_60", "name": "Wire Brush", "instruction": "Start by designing the handle, make it long and slender, in mahogany wood. The end of the handle should have a small hook.\n\nNow, let's move on to the bristles. Use brass wires, thin and numerous, creating a dense, golden bouquet at the end of the brush. The overall shape of the bristles should be slightly tapered.", "category": "Tools and hardware", "instruction_type": "Decoration Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\nlight_mahogany = bpy.data.materials.new(name=\"Light Mahogany\")\nlight_mahogany.diffuse_color = (0.36, 0.24, 0.19, 1)  # Light mahogany color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.71, 0.65, 0.26, 1)  # Brass color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=1.2, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(mahogany)\n\n# Step 3: Create the Hook\nbpy.ops.mesh.primitive_torus_add(major_radius=0.05, minor_radius=0.01, location=(0, 0, 0.6))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(mahogany)\n\n# Step 4: Create the Bristles\nfor i in range(1000):\n    x = 0.075 * math.cos(i * 0.00628)\n    y = 0.075 * math.sin(i * 0.00628)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.001, depth=0.2, location=(x, y, -0.6), rotation=(math.pi/2, 0, 0))\n    bristle = bpy.context.object\n    bristle.name = f\"Bristle {i + 1}\"\n    bristle.data.materials.append(brass)\n\n# Step 5: Create the Engraved Pattern\n# This step is more complex and might require additional tools or plugins in Blender.\n# For simplicity, we will just change the color of the handle to represent the engraved pattern.\nhandle.data.materials.append(light_mahogany)"}
{"id": "seed_tasks_61", "name": "Buttons", "instruction": "Alright, let's jump right into this, shall we? We're going to create a button. It should be a perfect circle with a 2-inch diameter. \n\nNow, moving onto the color. I want it to be a rich, deep blue. \n\nNext, let's talk about the holes. Let's put four holes right in the middle, evenly spaced out, each about a quarter of an inch in diameter. The inside of the holes should be white. \n\nLastly, add a thin silver ring around the edge of the button. \n\nSo, that's what I'm envisioning. A perfect, deep blue, glossy button, with four white holes and a subtle silver ring.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_blue = bpy.data.materials.new(name=\"Deep Blue\")\ndeep_blue.diffuse_color = (0, 0, 0.5, 1)  # Deep blue color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Button\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbutton = bpy.context.object\nbutton.name = \"Button\"\nbutton.data.materials.append(deep_blue)\n\n# Step 3: Create the Holes\nfor i in range(4):\n    x = 0.7 * (i % 2) - 0.35\n    y = 0.7 * (i // 2) - 0.35\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.125, depth=0.15, location=(x, y, 0))\n    hole = bpy.context.object\n    hole.name = f\"Hole {i + 1}\"\n    hole.data.materials.append(white)\n\n# Step 4: Create the Silver Ring\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0))\nring = bpy.context.object\nring.name = \"Ring\"\nring.data.materials.append(silver)"}
{"id": "seed_tasks_62", "name": "Boom", "instruction": "Let's get to work on creating a 3D model of a Boom. First, create a long, cylindrical main body. Next, add an ergonomic handle at the top. Then, design a telescopic boom arm for adjustable length. Attach a sturdy hook at the end of the boom arm. Lastly, add large, durable wheels at the base for mobility.", "category": "Means of transport or hoisting", "instruction_type": "Specific Usage Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nindustrial_gray = bpy.data.materials.new(name=\"Industrial Gray\")\nindustrial_gray.diffuse_color = (0.5, 0.5, 0.5, 1)  # Industrial gray color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=2, location=(0, 0, 1))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(industrial_gray)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0, 0, 2))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)\n\n# Step 4: Create the Boom Arm\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2, location=(0, 0.5, 2), rotation=(math.pi/2, 0, 0))\nboom_arm = bpy.context.object\nboom_arm.name = \"Boom Arm\"\nboom_arm.data.materials.append(industrial_gray)\n\n# Step 5: Create the Hook\nbpy.ops.mesh.primitive_cone_add(vertices=12, radius1=0.1, depth=0.4, location=(0, 1.5, 2), rotation=(math.pi/2, 0, 0))\nhook = bpy.context.object\nhook.name = \"Hook\"\nhook.data.materials.append(industrial_gray)\n\n# Step 6: Create the Wheels\nfor i in range(4):\n    x = 0.3 * (i % 2) - 0.15\n    y = 0.3 * (i // 2) - 0.15\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=0.1, location=(x, y, 0))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)"}
{"id": "seed_tasks_63", "name": "Portable Charger", "instruction": "Create a compact, cylindrical portable charger. It features a textured surface, two USB ports on the top side, and a small LED light.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nneutral = bpy.data.materials.new(name=\"Neutral\")\nneutral.diffuse_color = (0.8, 0.8, 0.8, 1)  # Neutral color\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic color\nled_color = bpy.data.materials.new(name=\"LED Color\")\nled_color.diffuse_color = (0, 1, 0, 1)  # Green color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(neutral)\n\n# Step 3: Create the USB Ports\nfor i in range(2):\n    x = 0.2 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=0.1, location=(x, 0, 1))\n    usb_port = bpy.context.object\n    usb_port.name = f\"USB Port {i + 1}\"\n    usb_port.data.materials.append(metallic)\n    usb_port.scale = (1, 0.5, 0.2)\n\n# Step 4: Create the LED Light\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.01, location=(0, 0.1, 1))\nled_light = bpy.context.object\nled_light.name = \"LED Light\"\nled_light.data.materials.append(led_color)"}
{"id": "seed_tasks_64", "name": "Post-it Notes", "instruction": "Hey there, software buddy! I have a little project for you. I want to see a 3D model of a stack of Post-it Notes.\n\nI want a stack of five notes, each a different color. Start with yellow on the bottom, then pink, green, blue, and orange on top. Each note should be slightly skewed, not perfectly aligned.\n\nI want the top note, the orange one, to be in the process of peeling off from the stack, curling up at one corner.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [(1, 1, 0, 1), (1, 0.5, 0.5, 1), (0.5, 1, 0.5, 1), (0.5, 0.5, 1, 1), (1, 0.5, 0, 1)]  # Yellow, Pink, Green, Blue, Orange\n\n# Step 2: Create the Post-it Notes\nfor i in range(5):\n    bpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, i*0.01), rotation=(0, 0, i*math.pi/16))\n    note = bpy.context.object\n    note.name = f\"Note {i + 1}\"\n    color = bpy.data.materials.new(name=f\"Color {i + 1}\")\n    color.diffuse_color = colors[i]\n    note.data.materials.append(color)\n\n# Step 3: Create the Curling Effect\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\nnote.data.vertices[0].select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.translate(value=(0, 0, 0.1))\nbpy.ops.object.mode_set(mode='OBJECT')"}
{"id": "seed_tasks_65", "name": "Insect Repellent", "instruction": "To begin with, I'd like the shape of this 3D object to resemble a typical cylindrical aerosol can, with a slightly curved top for the spray nozzle. \n\nAs for the color, the main body should be deep forest green, with a lighter mint green cap and a vertical stripe of the same lighter green down the can.\n\nThe spray nozzle should match the lighter green of the cap.\n\nThe shape of the repellent shall be a cylinder with a 2-inch radius at the bottom.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nforest_green = bpy.data.materials.new(name=\"Forest Green\")\nforest_green.diffuse_color = (0.13, 0.26, 0.13, 1)  # Deep forest green color\nmint_green = bpy.data.materials.new(name=\"Mint Green\")\nmint_green.diffuse_color = (0.6, 1, 0.6, 1)  # Light mint green color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=4, location=(0, 0, 2))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(forest_green)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.5, location=(0, 0, 4.25))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(mint_green)\n\n# Step 4: Create the Stripe\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 1.01, 2))\nstripe = bpy.context.object\nstripe.name = \"Stripe\"\nstripe.scale.x = 0.25\nstripe.scale.y = 0.01\nstripe.scale.z = 1.75\nstripe.data.materials.append(mint_green)\n\n# Step 5: Create the Spray Nozzle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.125, depth=0.25, location=(0, 0, 4.625))\nnozzle = bpy.context.object\nnozzle.name = \"Spray Nozzle\"\nnozzle.data.materials.append(mint_green)"}
{"id": "seed_tasks_66", "name": "Refrigerator", "instruction": "Hey there, I'm thinking about a refrigerator. It should be a large, rectangular shape in a shiny steel color, with double doors. It should be about six feet tall, with a large freezer compartment on the left side.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsteel = bpy.data.materials.new(name=\"Steel\")\nsteel.diffuse_color = (0.75, 0.75, 0.75, 1)  # Shiny steel color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=6, location=(0, 0, 3))\nmain_body = bpy.context.object\nmain_body.scale.x = 1.5\nmain_body.scale.y = 1\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(steel)\n\n# Step 3: Create the Doors\nfor i in range(2):\n    x = 2.25 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=6, location=(x, 3.05, 3))\n    door = bpy.context.object\n    door.scale.x = 0.75\n    door.scale.y = 0.025\n    door.name = f\"Door {i + 1}\"\n    door.data.materials.append(steel)\n\n# Step 4: Create the Freezer Compartment\nbpy.ops.mesh.primitive_cube_add(size=3, location=(-0.75, -0.975, 4.5))\nfreezer = bpy.context.object\nfreezer.scale.x = 0.75\nfreezer.scale.y = 0.975\nfreezer.name = \"Freezer Compartment\"\nfreezer.data.materials.append(white)\n\n# Step 5: Create the Interior\n# This is a simplified representation. In a real scenario, you would add more complex models for the food items.\nfor i in range(10):\n    x = (i % 2) * 1.5 - 0.75\n    y = (i % 2) * 0.5 - 0.75\n    z = (i // 2) * 0.5 + 1\n    bpy.ops.mesh.primitive_cube_add(size=0.2, location=(x, y, z))\n    food_item = bpy.context.object\n    food_item.name = f\"Food Item {i + 1}\"\n\n# Step 6: Create the Light\nbpy.ops.object.light_add(type='POINT', location=(0, -0.975, 5.9))\nlight = bpy.context.object\nlight.name = \"Light\"\nlight.data.energy = 1000  # Adjust the brightness of the light"}
{"id": "seed_tasks_67", "name": "Magnet", "instruction": "Could you please form a 3D object of a magnet for me? It should be a horseshoe magnet with one end in vibrant red and the other in deep blue. The body is curvaceous, and there is a soft grey handle at the top.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic color\nvibrant_red = bpy.data.materials.new(name=\"Vibrant Red\")\nvibrant_red.diffuse_color = (1, 0, 0, 1)  # Vibrant red color\ndeep_blue = bpy.data.materials.new(name=\"Deep Blue\")\ndeep_blue.diffuse_color = (0, 0, 1, 1)  # Deep blue color\nsoft_grey = bpy.data.materials.new(name=\"Soft Grey\")\nsoft_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Soft grey color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_torus_add(major_radius=0.3, minor_radius=0.05, major_segments=48, minor_segments=12, location=(0, 0, 0), rotation=(math.pi/2, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metallic)\n\n# Step 3: Create the Poles\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(0.3, 0, 0))\nnorth_pole = bpy.context.object\nnorth_pole.name = \"North Pole\"\nnorth_pole.data.materials.append(vibrant_red)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.3, location=(-0.3, 0, 0))\nsouth_pole = bpy.context.object\nsouth_pole.name = \"South Pole\"\nsouth_pole.data.materials.append(deep_blue)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.2, location=(0, 0, 0.35))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(soft_grey)"}
{"id": "seed_tasks_68", "name": "Kettlebells", "instruction": "Alright, let's make this happen. I want you to create a 3D model of kettlebells. They have a handle at the top and a solid, round ball body. Create a few different sizes in a classic black color.", "category": "Games, toys, tents and sports goods", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body of the Kettlebell\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Kettlebell Body\"\nbody.data.materials.append(black)\n\n# Step 3: Create the Handle of the Kettlebell\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0.25), rotation=(math.pi/2, 0, 0), major_radius=0.1, minor_radius=0.025)\nhandle = bpy.context.object\nhandle.name = \"Kettlebell Handle\"\nhandle.data.materials.append(black)\n\n# Step 4: Create the Motion of the Kettlebell\nbpy.context.scene.frame_set(0)\nbody.location = (0, 0, 0)\nbody.keyframe_insert(data_path=\"location\", index=-1)\nhandle.location = (0, 0, 0.25)\nhandle.keyframe_insert(data_path=\"location\", index=-1)\n\nbpy.context.scene.frame_set(50)\nbody.location = (0, 0, 1)\nbody.keyframe_insert(data_path=\"location\", index=-1)\nhandle.location = (0, 0, 1.25)\nhandle.keyframe_insert(data_path=\"location\", index=-1)\n\nbpy.context.scene.frame_set(100)\nbody.location = (0, 0, 0)\nbody.keyframe_insert(data_path=\"location\", index=-1)\nhandle.location = (0, 0, 0.25)\nhandle.keyframe_insert(data_path=\"location\", index=-1)"}
{"id": "seed_tasks_69", "name": "Solar Panel", "instruction": "Create a solar panel with a glass surface. Surround it with a matte-finished aluminum framework.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Feeling Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors and textures\ndark_blue = bpy.data.materials.new(name=\"Dark Blue\")\ndark_blue.diffuse_color = (0, 0, 0.5, 1)  # Dark blue color\ndark_blue.specular_intensity = 0.5  # Add glossiness to the material\n\nmatte_silver = bpy.data.materials.new(name=\"Matte Silver\")\nmatte_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\nmatte_silver.specular_intensity = 0.0  # No glossiness\n\n# Step 2: Create the Solar Panel Surface\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nsolar_panel = bpy.context.object\nsolar_panel.name = \"Solar Panel Surface\"\nsolar_panel.scale.x = 1.65\nsolar_panel.scale.y = 0.99\nsolar_panel.data.materials.append(dark_blue)\n\n# Step 3: Create the Framework\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\n    frame = bpy.context.object\n    frame.name = f\"Framework {i + 1}\"\n    frame.scale.x = 1.65 if i < 2 else 0.015\n    frame.scale.y = 0.99 if i >= 2 else 0.015\n    frame.scale.z = 0.015\n    frame.location.x = 0 if i < 2 else (0.825 if i == 2 else -0.825)\n    frame.location.y = (0.495 if i == 0 else -0.495) if i < 2 else 0\n    frame.data.materials.append(matte_silver)"}
{"id": "seed_tasks_70", "name": "Belts", "instruction": "Let's create a 3D model of a belt. The belt features a thin, elongated rectangular strap in a neutral color like black or brown. The buckle is in rectangle shape.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic color\n\n# Step 2: Create the Belt Strap\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nstrap = bpy.context.object\nstrap.name = \"Belt Strap\"\nstrap.scale.x = 40\nstrap.scale.y = 1.5\nstrap.scale.z = 0.1\nstrap.data.materials.append(black)\n\n# Step 3: Create the Belt Buckle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(20, 0, 0))\nbuckle = bpy.context.object\nbuckle.name = \"Belt Buckle\"\nbuckle.scale.x = 2\nbuckle.scale.y = 1.5\nbuckle.scale.z = 0.2\nbuckle.data.materials.append(metallic)\n\n# Step 4: Position the Buckle\n# The buckle is already positioned at one end of the strap\n\n# Step 5: Create the Belt Drape\n# This step requires a 3D model of a human waist, which is beyond the scope of this script\n\n# Step 6: Rename Objects for Clarity\n# The objects have already been renamed during their creation"}
{"id": "seed_tasks_71", "name": "Cone", "instruction": "Alright, let's get to work. I'd like you to create a 3D object for me, a cone. The cone should be tall, narrow at the top, and wide at the bottom, in bright orange color with reflective stripes. Can you also animate it to spin slowly on its point?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\norange = bpy.data.materials.new(name=\"Orange\")\norange.diffuse_color = (1, 0.5, 0, 1)  # Bright orange color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Cone Body\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.35, depth=0.7, location=(0, 0, 0))\ncone = bpy.context.object\ncone.name = \"Cone Body\"\ncone.data.materials.append(orange)\n\n# Step 3: Animate the Cone\ncone.rotation_mode = 'XYZ'\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=1)\ncone.rotation_euler = (0, 0, 2 * math.pi)\ncone.keyframe_insert(data_path=\"rotation_euler\", frame=250)\nbpy.context.scene.frame_end = 250\nbpy.context.scene.frame_start = 1"}
{"id": "seed_tasks_72", "name": "Keyboards", "instruction": "Let's embark on an exciting journey of creating a 3D keyboard. Start by sketching a rectangle for the base with curved longer sides, in matte black aluminium alloy.\n\nNext, design the keys as soft-edged rectangles in a lighter grey shade. The letters should be backlit with a soft white light.\n\nAdd an engraved feather design on the space bar.\n\nLastly, integrate a touchpad on the right side of the keyboard, seamlessly embedded into the base with the same matte black finish.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Design Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\ngrey = bpy.data.materials.new(name=\"Grey\")\ngrey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0), scale=(17.5, 5.5, 1))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Keys\nfor i in range(4):\n    for j in range(12):\n        bpy.ops.mesh.primitive_plane_add(size=0.75, enter_editmode=False, align='WORLD', location=(j-5.5, i-1.5, 0.1), scale=(1, 1, 1))\n        key = bpy.context.object\n        key.name = f\"Key {i*12 + j + 1}\"\n        key.data.materials.append(grey)\n\n# Step 4: Create the Lettering\n# This step is not included as it is not possible to create lettering using bpy\n\n# Step 5: Create the Space Bar\nbpy.ops.mesh.primitive_plane_add(size=0.75, enter_editmode=False, align='WORLD', location=(0, -2.25, 0.1), scale=(5, 1, 1))\nspace_bar = bpy.context.object\nspace_bar.name = \"Space Bar\"\nspace_bar.data.materials.append(grey)\n\n# Step 6: Create the Touchpad\nbpy.ops.mesh.primitive_plane_add(size=0.75, enter_editmode=False, align='WORLD', location=(6, 1, 0.1), scale=(3, 2, 1))\ntouchpad = bpy.context.object\ntouchpad.name = \"Touchpad\"\ntouchpad.data.materials.append(black)"}
{"id": "seed_tasks_73", "name": "Wireless Speakers", "instruction": "Craft wireless speakers with an oval shape in black color. Ensure it has a touch-sensitive control panel on the top.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body\"\nmain_body.scale = (3, 1.75, 1)  # Scale the sphere to get an oval shape\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Control Panel\nbpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 1))\ncontrol_panel = bpy.context.object\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.scale = (2, 1, 0.1)  # Scale the sphere to get an oval shape\ncontrol_panel.data.materials.append(black)"}
{"id": "seed_tasks_74", "name": "Electric Motor", "instruction": "Let's start by conceptualizing an electric motor. The overall shape should be cylindrical with a honeycomb pattern on the outer casing. The color scheme should be matte black and chrome silver. The internals should be visible through a transparent section, with electric blue coils. When in operation, incorporate a 3D holographic display for data projection.", "category": "Equipment for production, distribution or transformation of electricity", "instruction_type": "Design Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack_chrome = bpy.data.materials.new(name=\"Black Chrome\")\nblack_chrome.diffuse_color = (0.02, 0.02, 0.02, 1)  # Black chrome color\nelectric_blue = bpy.data.materials.new(name=\"Electric Blue\")\nelectric_blue.diffuse_color = (0.13, 0.13, 0.7, 1)  # Electric blue color\nholographic = bpy.data.materials.new(name=\"Holographic\")\nholographic.diffuse_color = (0.7, 0.7, 0.7, 1)  # Holographic color\n\n# Step 2: Create the Outer Casing\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=12, location=(0, 0, 0))\ncasing = bpy.context.object\ncasing.name = \"Outer Casing\"\ncasing.data.materials.append(black_chrome)\n\n# Step 3: Create the Transparent Section\n# This step requires more advanced operations that are not easily achieved with bpy, such as boolean operations and material assignment to specific faces\n\n# Step 4: Create the Coils\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=12, location=(0, 0, 0))\nshaft = bpy.context.object\nshaft.name = \"Shaft\"\n# The creation of the coils around the shaft requires a more complex script, possibly involving a loop to create multiple torus shapes\n\n# Step 5: Create the Holographic Display\nbpy.ops.object.text_add(location=(0, 0, 7))\ndisplay = bpy.context.object\ndisplay.name = \"Holographic Display\"\ndisplay.data.body = \"RPM: 0, Power: 0, Efficiency: 0\"\ndisplay.data.materials.append(holographic)"}
{"id": "seed_tasks_75", "name": "Ballet flats", "instruction": "Let's commence by shaping the body of the ballet flats. They should have a delicate and slender shape. \n\nThe toe box should be rounded, yet not too wide. \n\nFor the color, let's opt for a soft blush pink. \n\nFinally, let's add a small bow detail on the front of each shoe, right above the toe box.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblush_pink = bpy.data.materials.new(name=\"Blush Pink\")\nblush_pink.diffuse_color = (0.98, 0.85, 0.87, 1)  # Soft blush pink color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (1, 0.3, 0.15)\nbody.data.materials.append(blush_pink)\n\n# Step 3: Create the Toe Box\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='DESELECT')\nbpy.ops.object.mode_set(mode='OBJECT')\nfor v in body.data.vertices:\n    if v.co.x > 0.5:\n        v.select = True\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.transform.resize(value=(1, 0.8, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Bow Detail\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.025, location=(0.5, 0, 0.15))\nbow = bpy.context.object\nbow.name = \"Bow Detail\"\nbow.data.materials.append(blush_pink)\n\n# Step 5: Create the Surface\nbpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, -0.15))\nsurface = bpy.context.object\nsurface.name = \"Surface\"\nsurface.data.materials.append(white)"}
{"id": "seed_tasks_76", "name": "stool", "instruction": "Create a 3D model of a stool with a flat top and three or four legs at a comfortable sitting height.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nnatural_wood = bpy.data.materials.new(name=\"Natural Wood\")\nnatural_wood.diffuse_color = (0.64, 0.42, 0.26, 1)  # Natural wood color\n\n# Step 2: Create the Top\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.05, location=(0, 0, 0))\ntop = bpy.context.object\ntop.name = \"Top\"\ntop.data.materials.append(natural_wood)\n\n# Step 3: Create the Legs\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 0.5 * math.cos(angle)\n    y = 0.5 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.9, location=(x, y, -0.45))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(natural_wood)"}
{"id": "seed_tasks_77", "name": "Ellipsoid", "instruction": "Create an ellipsoid. Ensure it is smooth and symmetrical with a glossy red finish.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nglossy_red = bpy.data.materials.new(name=\"Glossy Red\")\nglossy_red.diffuse_color = (1, 0, 0, 1)  # Red color\nglossy_red.specular_intensity = 0.5  # Increase specular intensity for a glossy finish\n\n# Step 2: Create the Ellipsoid\nbpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\nellipsoid = bpy.context.object\nellipsoid.name = \"Ellipsoid\"\nellipsoid.scale.x = 2  # Scale along the x-axis to create an elongated shape\nellipsoid.data.materials.append(glossy_red)"}
{"id": "seed_tasks_78", "name": "Vase", "instruction": "Could you create a 3D vase for me? The vase should have a curved shape with a wide base that narrows towards the top, then flares out again.", "category": "Household goods, not elsewhere specified", "instruction_type": "Verbal Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglossy_white = bpy.data.materials.new(name=\"Glossy White\")\nglossy_white.diffuse_color = (1, 1, 1, 1)  # Glossy white color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=5, depth=1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=5, radius2=1.5, depth=10, location=(0, 0, 5))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 4: Create the Neck\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=1.5, radius2=2, depth=3, location=(0, 0, 10))\nneck = bpy.context.object\nneck.name = \"Neck\"\n\n# Step 5: Create the Lip\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=1, location=(0, 0, 13))\nlip = bpy.context.object\nlip.name = \"Lip\"\n\n# Step 6: Apply the Rotation\nfor obj in [base, body, neck, lip]:\n    bpy.context.scene.frame_end = 100\n    obj.rotation_mode = 'XYZ'\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=1)\n    obj.rotation_euler[2] = math.radians(360)\n    obj.keyframe_insert(data_path=\"rotation_euler\", frame=100)\n\n# Step 7: Assign Material and Color\nfor obj in [base, body, neck, lip]:\n    obj.data.materials.append(glossy_white)"}
{"id": "seed_tasks_79", "name": "Litter Box", "instruction": "Start by crafting a rectangular box, 6 inches high, 15 inches wide, and 20 inches long, with rounded edges. Use polished wood, either rich mahogany or light oak. Line the inside with waterproof metallic silver material and add a removable tray. Adorn the sides with intricate carvings and add a decorative lid. Include small feet to elevate it from the ground.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwood_color = bpy.data.materials.new(name=\"Wood\")\nwood_color.diffuse_color = (0.64, 0.42, 0.26, 1)  # Wood color\nsilver_color = bpy.data.materials.new(name=\"Silver\")\nsilver_color.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Box\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbox = bpy.context.object\nbox.scale = (0.75, 1, 0.3)\nbox.modifiers.new('Bevel', 'BEVEL')\nbox.data.materials.append(wood_color)\n\n# Step 3: Create the Inside Lining\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nlining = bpy.context.object\nlining.scale = (0.73, 0.98, 0.28)\nlining.modifiers.new('Bevel', 'BEVEL')\nlining.data.materials.append(silver_color)\n\n# Step 4: Create the Removable Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ntray = bpy.context.object\ntray.scale = (0.73, 0.98, 0.1)\ntray.modifiers.new('Bevel', 'BEVEL')\ntray.data.materials.append(silver_color)\n\n# Step 5: Create the Carvings\n# This step would require more complex operations like boolean operations and texture mapping which can't be easily represented in a simple script.\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.15))\nlid = bpy.context.object\nlid.scale = (0.73, 0.98, 0.05)\nlid.modifiers.new('Bevel', 'BEVEL')\nlid.data.materials.append(wood_color)\n\n# Step 7: Create the Feet\nfor i in range(4):\n    x = 0.65 * (i % 2) - 0.325\n    y = 0.9 * (i // 2) - 0.45\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.1, location=(x, y, -0.15))\n    foot = bpy.context.object\n    foot.name = f\"Foot {i + 1}\"\n    foot.data.materials.append(wood_color)\n\n# Step 8: Rename Objects for Clarity\nbox.name = \"Box\"\nlining.name = \"Lining\"\ntray.name = \"Tray\"\nlid.name = \"Lid\""}
{"id": "seed_tasks_80", "name": "Water Bowls", "instruction": "Hello there, let's get to work on creating a practical and functional 3D model of water bowls. The bowls should be round with a flat bottom, 30 centimeters in diameter, and 10 centimeters deep. They should look like ceramic, with a smooth inner surface and slightly textured outer surface. The color should be a soft blue or off-white. Add a sturdy handle on one side, large enough to fit an adult's hand.", "category": "Articles for the care and handling of animals", "instruction_type": "Specific Usage Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsoft_blue = bpy.data.materials.new(name=\"Soft Blue\")\nsoft_blue.diffuse_color = (0.5, 0.5, 1, 1)  # Soft blue color\n\n# Step 2: Create the Bowl\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.05, location=(0, 0, 0))\nbowl = bpy.context.object\nbowl.name = \"Bowl\"\nbowl.data.materials.append(soft_blue)\n\n# Step 3: Create the Inner Surface\nbpy.ops.mesh.primitive_cylinder_add(radius=0.14, depth=0.049, location=(0, 0, 0))\ninner_surface = bpy.context.object\ninner_surface.name = \"Inner Surface\"\ninner_surface.data.materials.append(soft_blue)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(location=(0.15, 0, 0.025), major_radius=0.05, minor_radius=0.01)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(soft_blue)"}
{"id": "seed_tasks_81", "name": "Torus", "instruction": "Can you create a 3D model of a Torus with a hole in the center wide enough to be used as a lifebuoy?", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbright_orange = bpy.data.materials.new(name=\"Bright Orange\")\nbright_orange.diffuse_color = (1, 0.45, 0, 1)  # Bright orange color\n\n# Step 2: Create the Torus\nbpy.ops.mesh.primitive_torus_add(\n    align='WORLD', \n    location=(0, 0, 0), \n    rotation=(0, 0, 0), \n    major_radius=0.75, \n    minor_radius=0.15, \n    major_segments=48, \n    minor_segments=12)\ntorus = bpy.context.object\ntorus.name = \"Torus Lifebuoy\"\ntorus.data.materials.append(bright_orange)"}
{"id": "seed_tasks_82", "name": "Clock", "instruction": "Could you create a clock for me, please? The clock should blend Renaissance and modern digital elements. The Renaissance part includes hand-carved numbers and hands, intricate designs around the edges, and a small painting in the center. The modern part includes a small digital display for the date or temperature.", "category": "Household goods, not elsewhere specified", "instruction_type": "Comparing Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\nrandom_color = bpy.data.materials.new(name=\"Random Color\")\nrandom_color.diffuse_color = (0.5, 0.5, 0.5, 1)  # Random color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_circle_add(radius=0.6, location=(0, 0, 0))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.data.materials.append(mahogany)\n\n# Step 3: Create the Numbers\nfor i in range(12):\n    angle = math.radians(i * 30)\n    x = 0.55 * math.cos(angle)\n    y = 0.55 * math.sin(angle)\n    bpy.ops.mesh.primitive_cube_add(size=0.05, location=(x, y, 0))\n    number = bpy.context.object\n    number.name = f\"Number {i + 1}\"\n    number.data.materials.append(mahogany)\n\n# Step 4: Create the Hands\nbpy.ops.mesh.primitive_plane_add(size=0.4, location=(0, 0, 0.01))\nhour_hand = bpy.context.object\nhour_hand.name = \"Hour Hand\"\nhour_hand.data.materials.append(mahogany)\nbpy.ops.mesh.primitive_plane_add(size=0.55, location=(0, 0, 0.02))\nminute_hand = bpy.context.object\nminute_hand.name = \"Minute Hand\"\nminute_hand.data.materials.append(mahogany)\n\n# Step 5: Create the Center Painting\nbpy.ops.mesh.primitive_circle_add(radius=0.2, location=(0, 0, 0.03))\npainting = bpy.context.object\npainting.name = \"Painting\"\npainting.data.materials.append(random_color)\n\n# Step 6: Create the Digital Display\nbpy.ops.mesh.primitive_plane_add(size=0.6, location=(0, -0.45, 0.04))\ndisplay = bpy.context.object\ndisplay.name = \"Display\"\ndisplay.data.materials.append(black)"}
{"id": "seed_tasks_83", "name": "Mirror", "instruction": "Could we perhaps create a mirror with ornate gold filigree detailing around the frame, featuring elaborate curves and carvings? Incorporate cherub-like figures into the design.", "category": "Furnishing", "instruction_type": "Comparing Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (0.83, 0.68, 0.21, 1)  # Gold color\nmirror = bpy.data.materials.new(name=\"Mirror\")\nmirror.diffuse_color = (0.8, 0.8, 0.8, 1)  # Mirror color\nmirror.specular_intensity = 1.5  # Increase specular intensity to create a reflective surface\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nframe = bpy.context.object\nframe.scale.x = 1.5  # Set the width of the frame\nframe.scale.y = 2  # Set the height of the frame\nframe.scale.z = 0.05  # Set the depth of the frame\nframe.name = \"Frame\"\nframe.data.materials.append(gold)\n\n# Step 6: Create the Mirror\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0.05))\nmirror_plane = bpy.context.object\nmirror_plane.scale.x = 1  # Set the width of the mirror\nmirror_plane.scale.y = 1.5  # Set the height of the mirror\nmirror_plane.name = \"Mirror\"\nmirror_plane.data.materials.append(mirror)"}
{"id": "seed_tasks_84", "name": "Cone inside a cylinder", "instruction": "Alright, let's start this fascinating journey by creating a cylinder. The cylinder is tall, about twice the height of the cone we will be placing inside. The diameter of the cylinder's base is slightly larger than the base of the cone, creating a small gap around it. Now, let's picture the cone. The cone has a smooth surface, with its pointy end facing upwards. Place this cone inside the cylinder, aligning their bases. The cylinder is deep blue, and the cone is bright yellow.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Feature Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_blue = bpy.data.materials.new(name=\"Deep Blue\")\ndeep_blue.diffuse_color = (0, 0, 0.5, 1)  # Deep blue color\nbright_yellow = bpy.data.materials.new(name=\"Bright Yellow\")\nbright_yellow.diffuse_color = (1, 1, 0, 1)  # Bright yellow color\n\n# Step 2: Create the Cylinder\nbpy.ops.mesh.primitive_cylinder_add(radius=3, depth=20, location=(0, 0, 0))\ncylinder = bpy.context.object\ncylinder.name = \"Cylinder\"\ncylinder.data.materials.append(deep_blue)\n\n# Step 3: Create the Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=2.5, depth=10, location=(0, 0, 0))\ncone = bpy.context.object\ncone.name = \"Cone\"\ncone.data.materials.append(bright_yellow)"}
{"id": "seed_tasks_85", "name": "Kettle", "instruction": "Can you generate a kettle with a curvy spout?", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Comparing Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npolished_brass = bpy.data.materials.new(name=\"Polished Brass\")\npolished_brass.diffuse_color = (0.83, 0.69, 0.22, 1)  # Polished brass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(polished_brass)\n\n# Step 3: Create the Spout\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.25, location=(0.35, 0, 0.15), rotation=(0, math.pi/2, 0))\nspout = bpy.context.object\nspout.name = \"Spout\"\nspout.data.materials.append(polished_brass)\n\n# Step 4: Create the Handle\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0.3), rotation=(math.pi/2, 0, 0), major_radius=0.4, minor_radius=0.02)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(polished_brass)\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.02, location=(0, 0, 0.4))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(polished_brass)\n\n# Step 6: Create the Knob\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.03, location=(0, 0, 0.42))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(polished_brass)"}
{"id": "seed_tasks_86", "name": "chest", "instruction": "Let's start with a basic rectangular prism for the body of the chest. The length and width are in a 2:1 ratio, with the height being half the width. The lid is a slightly larger rectangular prism, curved at the top.\n\nNext, add an inverted teardrop-shaped keyhole in the center of the front.\n\nOn either side, add semi-circular handles attached at the top and bottom.\n\nThe color is a rich, deep mahogany. The keyhole, handles, and corners are brass.", "category": "Furnishing", "instruction_type": "Design Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.83, 0.68, 0.21, 1)  # Brass color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale = (2, 1, 0.5)\nbody.name = \"Body\"\nbody.data.materials.append(mahogany)\n\n# Step 3: Create the Lid\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.25))\nlid = bpy.context.object\nlid.scale = (2.05, 1.05, 0.25)\nlid.name = \"Lid\"\nlid.modifiers.new(name=\"Subsurf\", type='SUBSURF')\nlid.modifiers[\"Subsurf\"].levels = 3\nlid.modifiers[\"Subsurf\"].render_levels = 3\nlid.data.materials.append(mahogany)\n\n# Steps 4, 5, 6, and 7 would require more advanced techniques such as boolean operations, sculpting, and texture mapping, which are beyond the scope of this simple bpy script.\n\n# Step 8: Rename Objects\n# Objects have already been named during their creation."}
{"id": "seed_tasks_87", "name": "Flute", "instruction": "Alright, let's start creating a beautiful 3D model of a flute. The flute should be long and cylindrical, tapering slightly towards the end, in a shiny silver color. \n\nMoving on to the keys, they should be perfectly spaced along the body, in a slightly darker silver shade. \n\nNext, the mouthpiece should be slightly wider than the body, with a small hole in the middle, matching the color of the keys.\n\nFinally, the end of the flute should have a small, circular opening, with subtle lines and markings along the body.", "category": "Musical instruments", "instruction_type": "Outlook Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_silver = bpy.data.materials.new(name=\"Light Silver\")\nlight_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Light silver color\ndark_silver = bpy.data.materials.new(name=\"Dark Silver\")\ndark_silver.diffuse_color = (0.5, 0.5, 0.5, 1)  # Dark silver color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=2.6, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(light_silver)\n\n# Step 3: Create the Keys\nfor i in range(16):\n    z = 1.3 - i * 0.15\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.01, location=(0, 0, z))\n    key = bpy.context.object\n    key.name = f\"Key {i + 1}\"\n    key.data.materials.append(dark_silver)\n\n# Step 4: Create the Mouthpiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.075, depth=0.1, location=(0, 0, 1.35))\nmouthpiece = bpy.context.object\nmouthpiece.name = \"Mouthpiece\"\nmouthpiece.data.materials.append(dark_silver)\n\n# Step 5: Create the End\nbpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.01, location=(0, 0, -1.3))\nend = bpy.context.object\nend.name = \"End\"\nend.data.materials.append(light_silver)"}
{"id": "seed_tasks_88", "name": "TV stand", "instruction": "Design a TV stand that can accommodate a large flat screen TV, with additional storage for a DVD player, gaming console, and remote controls. Ensure it is sturdy, easy to move, and at a height suitable for viewing from a standard sofa.", "category": "Furnishing", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_wood = bpy.data.materials.new(name=\"Dark Wood\")\ndark_wood.diffuse_color = (0.2, 0.1, 0, 1)  # Dark wood color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Main Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.6))\nmain_frame = bpy.context.object\nmain_frame.scale = (3, 0.9, 1.2)\nmain_frame.name = \"Main Frame\"\nmain_frame.data.materials.append(dark_wood)\n\n# Step 3: Create the TV Platform\n# The top face of the main frame cube serves as the TV platform. No additional object creation is necessary for this step.\n\n# Step 4: Create the Storage Compartments\nfor i in range(3):\n    x = i - 1\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    compartment = bpy.context.object\n    compartment.scale = (0.9 if i != 1 else 1, 0.7, 0.7)\n    compartment.name = f\"Compartment {i + 1}\"\n    compartment.data.materials.append(dark_wood)\n\n# Step 5: Create the Wheels\nfor i in range(4):\n    x = 1.5 * (i % 2 * 2 - 1)\n    y = 0.45 * (i // 2 * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.1, location=(x, y, -0.05))\n    wheel = bpy.context.object\n    wheel.name = f\"Wheel {i + 1}\"\n    wheel.data.materials.append(black)"}
{"id": "seed_tasks_89", "name": "Water Dispenser", "instruction": "Darling, let's make this water dispenser truly delightful! Start with a sleek, silver base. The water tank is crystal clear. The tap is in a matching silver finish. Finally, add a delicate floral pattern around the base.", "category": "Articles for the care and handling of animals", "instruction_type": "Decoration Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.diffuse_color = (1, 1, 1, 0)  # Transparent color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.1, location=(0, 0, -0.05))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(silver)\n\n# Step 3: Create the Water Tank\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.9, location=(0, 0, 0.45))\ntank = bpy.context.object\ntank.name = \"Water Tank\"\ntank.data.materials.append(transparent)\n\n# Step 4: Create the Tap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.2, location=(0.55, 0, 0.2), rotation=(0, 0, math.pi/2))\ntap = bpy.context.object\ntap.name = \"Tap\"\ntap.data.materials.append(silver)\n\n# Step 5: Add the Floral Pattern\n# This step will depend on the specific method used to apply the pattern.\n\n# Step 6: Rename Objects for Clarity\n# This step has been done during the creation of each object."}
{"id": "seed_tasks_90", "name": "Envelope", "instruction": "Alright, let's get to business. We're creating an envelope here, a traditional one, with a definitive purpose. The envelope is rectangular, measuring 4.5 by 9.5 inches.\n\nThe top flap is triangular and folds over the body, closing at about 3/4ths down the rectangle. The flap has a thin layer of adhesive on the underside.\n\nThe material is light cream-colored paper, thin but sturdy enough to hold a few sheets of paper.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Specific Usage Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncream = bpy.data.materials.new(name=\"Cream\")\ncream.diffuse_color = (0.96, 0.90, 0.69, 1)  # Cream color\ndarker_cream = bpy.data.materials.new(name=\"Darker Cream\")\ndarker_cream.diffuse_color = (0.83, 0.77, 0.60, 1)  # Slightly darker cream color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.scale.x = 0.045\nbody.scale.y = 0.095\nbody.scale.z = 0.0025\nbody.name = \"Body\"\nbody.data.materials.append(cream)\n\n# Step 3: Create the Top Flap\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.02375, 0), rotation=(math.pi, 0, 0))\nflap = bpy.context.object\nflap.scale.x = 0.045\nflap.scale.y = 0.0475\nflap.name = \"Top Flap\"\nflap.data.materials.append(cream)\n\n# Step 4: Create the Adhesive\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0.02375, 0), rotation=(math.pi, 0, 0))\nadhesive = bpy.context.object\nadhesive.scale.x = 0.045\nadhesive.scale.y = 0.0475\nadhesive.name = \"Adhesive\"\nadhesive.data.materials.append(darker_cream)"}
{"id": "seed_tasks_91", "name": "Pencil", "instruction": "Let's start by creating the core of our pencil, shall we? The pencil should be 7.5 inches long and 0.3 inches in diameter. The body is hexagonal and vibrant yellow. The end is metallic silver, holding a soft pink cylindrical eraser with a flat top, extending 0.2 inches. The tip tapers to a sharp point, 0.7 inches long, in a dark, almost black color.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nyellow = bpy.data.materials.new(name=\"Yellow\")\nyellow.diffuse_color = (1, 1, 0, 1)  # Vibrant yellow color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic silver color\npink = bpy.data.materials.new(name=\"Pink\")\npink.diffuse_color = (1, 0.75, 0.8, 1)  # Soft pink color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Dark black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=0.15, depth=7.5, location=(0, 0, 3.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(yellow)\n\n# Step 3: Create the Ferrule\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(0, 0, 0))\nferrule = bpy.context.object\nferrule.name = \"Ferrule\"\nferrule.data.materials.append(silver)\n\n# Step 4: Create the Eraser\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(0, 0, -0.15))\neraser = bpy.context.object\neraser.name = \"Eraser\"\neraser.data.materials.append(pink)\n\n# Step 5: Create the Tip\nbpy.ops.mesh.primitive_cone_add(vertices=6, radius1=0.15, depth=0.7, location=(0, 0, 7.85))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(black)"}
{"id": "seed_tasks_92", "name": "Stacked toroids warpping a rectangular prism", "instruction": "Alright, let's start creating this 3D object, a stacked toroids wrapping a rectangular prism. The main structure is a rectangular prism with a sturdy base and long sides. Uniform-sized toroids are stacked around the prism, ensuring they hold tight and provide a protective layer. The final model should stand upright on its own.", "category": "Graphic symbols and logos, surface patterns, ornamentation, arrangement of interiors and exteriors", "instruction_type": "Specific Usage Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngrey = bpy.data.materials.new(name=\"Grey\")\ngrey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Rectangular Prism\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.5))\nprism = bpy.context.object\nprism.name = \"Prism\"\nprism.scale = (2, 1, 3)\nprism.data.materials.append(grey)\n\n# Step 3: Create the Toroids\nfor i in range(5):\n    z = 0.2 + i * 0.6\n    bpy.ops.mesh.primitive_torus_add(location=(0, 0, z), major_radius=1.2, minor_radius=0.1)\n    toroid = bpy.context.object\n    toroid.name = f\"Toroid {i + 1}\"\n    toroid.data.materials.append(black)"}
{"id": "seed_tasks_93", "name": "Wheels (for toy cars, skateboards)", "instruction": "Alright, let's start creating some wheels. Each wheel should be a perfect circle with a diameter of 1 inch. The wheels are cylindrical, vibrant red, and 0.25 inches thick with rounded edges. The center should be hollow with a smaller black circle, having a diameter of 0.25 inches.", "category": "Games, toys, tents and sports goods", "instruction_type": "Outlook Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Vibrant red color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Wheel\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.25, location=(0, 0, 0))\nwheel = bpy.context.object\nwheel.name = \"Wheel\"\nwheel.data.materials.append(red)\n\n# Step 3: Create the Hollow Center\nbpy.ops.mesh.primitive_cylinder_add(radius=0.125, depth=0.25, location=(0, 0, 0))\ncenter = bpy.context.object\ncenter.name = \"Center\"\ncenter.data.materials.append(black)\n\n# Step 4: Subtract the Hollow Center from the Wheel\nbool_mod = wheel.modifiers.new(name='Hollow', type='BOOLEAN')\nbool_mod.object = center\nbool_mod.operation = 'DIFFERENCE'\nbpy.context.view_layer.objects.active = wheel\nbpy.ops.object.modifier_apply(modifier='Hollow')\n\n# Step 5: Smooth the Edges\nbevel_mod = wheel.modifiers.new(name='Bevel', type='BEVEL')\nbevel_mod.width = 0.01\nbpy.ops.object.modifier_apply(modifier='Bevel')\n\n# Delete the center cylinder\nbpy.ops.object.select_all(action='DESELECT')\ncenter.select_set(True)\nbpy.ops.object.delete()"}
{"id": "seed_tasks_94", "name": "Hammer", "instruction": "Hey there, software! I need you to create a 3D image of a hammer. The hammer has a sturdy handle and a solid metal head.", "category": "Tools and hardware", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwarm_brown = bpy.data.materials.new(name=\"Warm Brown\")\nwarm_brown.diffuse_color = (0.65, 0.32, 0.16, 1)  # Warm brown color\nmetallic_grey = bpy.data.materials.new(name=\"Metallic Grey\")\nmetallic_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic grey color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=16, location=(0, 0, 7))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(warm_brown)\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_cube_add(size=2, location=(0, 0, 16))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(metallic_grey)\n\n# Step 4: Position the Hammer\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.transform.rotate(value=math.radians(-90), orient_axis='X')\n\n# Step 5: Apply Motion Blur\nbpy.context.scene.render.use_motion_blur = True\nbpy.context.scene.render.motion_blur_shutter = 0.5"}
{"id": "seed_tasks_95", "name": "Eraser", "instruction": "Start by creating a rectangular prism with rounded corners. The eraser is a soft, pastel pink color with a slightly textured surface. Add small, raised text on one side.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\npastel_pink = bpy.data.materials.new(name=\"Pastel Pink\")\npastel_pink.diffuse_color = (1, 0.713, 0.756, 1)  # Pastel pink color\n\n# Step 2: Create the Eraser Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\neraser_body = bpy.context.object\neraser_body.scale = (1, 0.5, 0.25)  # Dimensions of 2x1x0.5 inches\neraser_body.modifiers.new(name=\"Subsurf\", type='SUBSURF')  # Subdivision surface modifier for rounded corners\neraser_body.modifiers[\"Subsurf\"].levels = 2  # Increase subdivision levels for smoother rounding\neraser_body.name = \"Eraser Body\"\neraser_body.data.materials.append(pastel_pink)\n\n# Step 3: Create the Text\nbpy.ops.object.text_add(location=(0, 0, 0.26))  # Position the text slightly above the eraser surface\neraser_text = bpy.context.object\neraser_text.data.body = \"ERASER\"  # The label text\neraser_text.scale = (0.1, 0.1, 0.1)  # Make the text small\neraser_text.name = \"Eraser Text\"\neraser_text.data.materials.append(pastel_pink)"}
{"id": "seed_tasks_96", "name": "Rugby balls", "instruction": "Start with the basic shape of the rugby balls as an elongated sphere, resembling an egg with pointed ends. Include raised stitching details along the middle. Color the balls standard white with a surface pattern or design in blue, such as a swirl or wave.", "category": "Games, toys, tents and sports goods", "instruction_type": "Feature Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\n\n# Step 2: Create the Basic Shape\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.6, location=(0, 0, 0))\nrugby_ball = bpy.context.object\nrugby_ball.name = \"Rugby Ball\"\nrugby_ball.scale.x = 1.5  # Scale along the x-axis to create the elongated shape\n\n# Step 3: Create the Stitching\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1.2, location=(0, 0, 0), rotation=(math.pi/2, 0, 0))\nstitching = bpy.context.object\nstitching.name = \"Stitching\"\nstitching.data.materials.append(white)\n\n# Step 4: Create the Color and Design\nrugby_ball.data.materials.append(white)\n# Add the blue swirl or wave texture (this is a placeholder and should be replaced with the actual texture)\nrugby_ball.data.materials.append(blue)\n\n# Step 5: Create the Texture\n# Create the rough texture (this is a placeholder and should be replaced with the actual texture)\nrugby_ball.data.materials.append(white)"}
{"id": "seed_tasks_97", "name": "Cotton Swabs", "instruction": "Alright, let's get this show on the road, shall we? I need you to create a 3D model of a cotton swab. The cotton swab should be six inches long with fluffy, circular cotton ends in pure white. The stick should be clear plastic with a slight curve. I also want it to be animated, twirling around and moving up and down.", "category": "Medical and laboratory equipment", "instruction_type": "Verbal Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nclear = bpy.data.materials.new(name=\"Clear\")\nclear.diffuse_color = (1, 1, 1, 0.5)  # Clear color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Stick\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=2.5, location=(0, 0, 0))\nstick = bpy.context.object\nstick.name = \"Stick\"\nstick.data.materials.append(clear)\n\n# Step 3: Create the Cotton Ends\nfor i in range(2):\n    z = 1.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0, 0, z))\n    cotton_end = bpy.context.object\n    cotton_end.name = f\"Cotton End {i + 1}\"\n    cotton_end.data.materials.append(white)\n\n# Step 4: Create the Animation\nfor frame in range(0, 251, 10):\n    bpy.context.scene.frame_set(frame)\n    stick.rotation_euler = (0, 0, math.pi * 2 * frame / 250)\n    stick.keyframe_insert(data_path=\"rotation_euler\", index=2)\n    stick.location = (0, 0, 0.1 * math.sin(math.pi * 2 * frame / 250))\n    stick.keyframe_insert(data_path=\"location\", index=2)"}
{"id": "seed_tasks_98", "name": "Dictionary", "instruction": "Hey there, software. How's it going? I'm looking to create a 3D object and I need your help. The object I've got in mind is a dictionary. \n\nSo, let's start with the basics. Size? I'm thinking about the size of a regular hardcover book. Maybe around 9 inches tall, 6 inches wide, and 2 inches thick. Sound good? \n\nNow, onto the cover. I'd like it to be a rich, dark brown. \n\nAs for the pages, they should be a soft, creamy color. \n\nLet's make this dictionary dynamic, shall we? I want the pages to be flipping slowly. And every now and then, I want a word to pop out of the pages. The word should be 3D too, and it should slowly rotate before disappearing back into the pages. \n\nFor the wording on the cover, I'd like it to be embossed, with the word \"Dictionary\" on the front and the spine. The letters should be in gold color.\n\nAnd finally, I'd like a thin, red bookmark sticking out from the pages. \n\nSo, how about it? Can you create this 3D dictionary for me?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_brown = bpy.data.materials.new(name=\"Dark Brown\")\ndark_brown.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark brown color\ncreamy = bpy.data.materials.new(name=\"Creamy\")\ncreamy.diffuse_color = (0.96, 0.86, 0.7, 1)  # Creamy color\nshiny_gold = bpy.data.materials.new(name=\"Shiny Gold\")\nshiny_gold.diffuse_color = (0.83, 0.68, 0.21, 1)  # Shiny gold color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (0.8, 0.0, 0.0, 1)  # Red color\n\n# Step 2: Create the Book Cover\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncover = bpy.context.object\ncover.scale = (0.15, 0.06, 0.22)\ncover.name = \"Cover\"\ncover.data.materials.append(dark_brown)\n\n# Step 3: Create the Pages\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\npages = bpy.context.object\npages.scale = (0.14, 0.05, 0.21)\npages.name = \"Pages\"\npages.data.materials.append(creamy)\n\n# Step 4: Create the Words\n# This step requires more complex scripting for the animation and is not covered in this basic script\n\n# Step 5: Create the Cover Wording\n# This step requires more complex scripting for the 3D text and is not covered in this basic script\n\n# Step 6: Create the Bookmark\nbpy.ops.mesh.primitive_plane_add(size=1, location=(-0.0 3, 0, 0.09))\nbookmark = bpy.context.object\nbookmark.scale = (0.01, 0.1, 1)\nbookmark.rotation_euler = (math.pi/2, 0, 0)\nbookmark.name = \"Bookmark\"\nbookmark.data.materials.append(red)"}
{"id": "seed_tasks_99", "name": "Griddle", "instruction": "Could you create a 3D model of a griddle with a ribbed non-stick surface and a grease drainage system? Add a heat-resistant handle.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_grey = bpy.data.materials.new(name=\"Dark Grey\")\ndark_grey.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark grey color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Griddle Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ngriddle_body = bpy.context.object\ngriddle_body.scale = (2.0, 1.0, 0.1)\ngriddle_body.name = \"Griddle Body\"\ngriddle_body.data.materials.append(dark_grey)\n\n# Step 3: Create the Ribbed Surface\nfor i in range(-9, 10):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, i * 0.1, 0.05))\n    rib = bpy.context.object\n    rib.scale = (2.0, 0.01, 0.01)\n    rib.name = f\"Rib {i + 10}\"\n    rib.data.materials.append(dark_grey)\n\n# Step 4: Create the Grease Drainage System\nbpy.ops.mesh.primitive_cube_add(size=1, location=(1.0, 0, -0.05))\nchannel = bpy.context.object\nchannel.scale = (0.01, 1.0, 0.05)\nchannel.name = \"Drainage Channel\"\nchannel.data.materials.append(dark_grey)\n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(1.0, 0, -0.1))\nhole = bpy.context.object\nhole.name = \"Drainage Hole\"\nhole.data.materials.append(dark_grey)\n\n# Step 5: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.6, location=(-1.1, 0, 0), rotation=(math.pi/2, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(black)"}
{"id": "seed_tasks_100", "name": "Rake", "instruction": "Alright, let's start with the handle of our rake. It should be long and cylindrical, about 60 inches in length and 1 inch in diameter, in a dark brown color with a slight curve.\n\nNow, let's move onto the teeth of the rake. They should be about 6 inches long and 0.5 inches wide, evenly spaced 3 inches apart, with a total of 14 teeth in a bright metallic silver color.\n\nNext, the rake should have a crossbar connecting the handle to the teeth. It should be about 20 inches long and 1 inch thick, in the same dark brown color as the handle.", "category": "Tools and hardware", "instruction_type": "Feature Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndark_brown = bpy.data.materials.new(name=\"Dark Brown\")\ndark_brown.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark brown color\nmetallic_silver = bpy.data.materials.new(name=\"Metallic Silver\")\nmetallic_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic silver color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=1.2, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(dark_brown)\n# Add texture and arc to the handle\n\n# Step 3: Create the Teeth\nfor i in range(14):\n    x = 0.06 * (i - 6.5)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.11, location=(x, 0, -0.6))\n    tooth = bpy.context.object\n    tooth.name = f\"Tooth {i + 1}\"\n    tooth.data.materials.append(metallic_silver)\n\n# Step 4: Create the Crossbar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.8, location=(0, 0, -0.55), rotation=(0, math.pi/2, 0))\ncrossbar = bpy.context.object\ncrossbar.name = \"Crossbar\"\ncrossbar.data.materials.append(dark_brown)\n\n# Step 5: Add Details\n# Add worn spots and scratches to the handle and teeth"}
{"id": "seed_tasks_101", "name": "Nightstand", "instruction": "Start with a basic cube structure, about 3.5 feet tall, in dark walnut wood. Carve the top into a gentle, sloping curve. For the front face, cut out a rectangle for a drawer with smaller compartments of different shapes (circles, triangles, rectangles). Use thin, spiraled metal rod legs in cobalt blue. Etch horizontal lines of varying thickness on the sides.", "category": "Furnishing", "instruction_type": "Design Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwalnut = bpy.data.materials.new(name=\"Walnut\")\nwalnut.diffuse_color = (0.16, 0.09, 0.03, 1)  # Dark walnut color\ncobalt_blue = bpy.data.materials.new(name=\"Cobalt Blue\")\ncobalt_blue.diffuse_color = (0.0, 0.1, 0.6, 1)  # Cobalt blue color\n\n# Step 2: Create the Main Structure\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nmain_structure = bpy.context.object\nmain_structure.scale.z = 1.75  # Make it taller\nmain_structure.name = \"Main Structure\"\nmain_structure.data.materials.append(walnut)\n\n# Step 3: Carve the Top\n# This step requires manual sculpting in Blender\n\n# Step 4: Create the Front Face and Drawer\n# This step requires manual modeling and boolean operations in Blender\n\n# Step 5: Create the Legs\nfor i in range(4):\n    x = 0.5 * (i % 2) - 0.25\n    y = 0.5 * (i // 2) - 0.25\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=0.1, location=(x, y, -0.875))\n    leg = bpy.context.object\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(cobalt_blue)\n\n# Step 6: Etch the Sides\n# This step requires manual sculpting or texture mapping in Blender"}
{"id": "seed_tasks_102", "name": "Printer", "instruction": "Darling, let's create a printer with a modern design. The printer should have clean lines and soft curves, with a matte black or white finish and gold or silver accents.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Decoration Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0, 0, 0, 1)  # Matte black color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1, 0.84, 0, 1)  # Gold color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.dimensions = (1.8, 1.2, 0.6)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(matte_black)\n\n# Step 3: Create the Accents\nfor i in range(4):\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\n    accent = bpy.context.object\n    accent.dimensions = (1.8, 0.05, 0.05) if i < 2 else (0.05, 1.2, 0.05)\n    accent.location = (0, 0.6 * (i % 2), 0.3) if i < 2 else (0.9 * (i // 2), 0, 0.3)\n    accent.name = f\"Accent {i + 1}\"\n    accent.data.materials.append(gold)\n\n# Step 4: Create the Texture\n# Note: This step is more complex and depends on the specific pattern desired. It's not easily represented in a simple script.\n\n# Step 5: Create the Paper Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, -0.3))\npaper_tray = bpy.context.object\npaper_tray.dimensions = (1.1, 0.05, 0.85)\npaper_tray.name = \"Paper Tray\"\npaper_tray.data.materials.append(matte_black)\n\n# Step 6: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.6, 0.3))\ncontrol_panel = bpy.context.object\ncontrol_panel.dimensions = (1.6, 0.05, 0.6)\ncontrol_panel.name = \"Control Panel\"\ncontrol_panel.data.materials.append(matte_black)"}
{"id": "seed_tasks_103", "name": "Smart Watches", "instruction": "Create a smart watch with a round face, Roman numerals, and an antique gold finish.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Comparing Question", "instruction_length": "short", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nantique_gold = bpy.data.materials.new(name=\"Antique Gold\")\nantique_gold.diffuse_color = (0.8, 0.7, 0.3, 1)  # Antique gold color\n\n# Step 2: Create the Watch Face\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=0.05, location=(0, 0, 0))\nwatch_face = bpy.context.object\nwatch_face.name = \"Watch Face\"\nwatch_face.data.materials.append(black)\n\n# Step 3: Create the Watch Case\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 0), major_radius=0.8, minor_radius=0.05)\nwatch_case = bpy.context.object\nwatch_case.name = \"Watch Case\"\nwatch_case.data.materials.append(antique_gold)\n\n# Step 4: Create the Watch Band\nfor i in range(2):\n    y = 4.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(scale=(0.3, 3.75, 0.05), location=(0, y, 0))\n    watch_band = bpy.context.object\n    watch_band.name = f\"Watch Band {i + 1}\"\n    watch_band.data.materials.append(antique_gold)"}
{"id": "seed_tasks_104", "name": "Bookcase", "instruction": "Can you please design a bookcase with ample space for large and small books, a sturdy construction, and a lower shelf for oversized items?", "category": "Furnishing", "instruction_type": "Specific Usage Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nlight_oak = bpy.data.materials.new(name=\"Light Oak\")\nlight_oak.diffuse_color = (0.85, 0.71, 0.44, 1)  # Light oak color\n\n# Step 2: Create the Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 1.14))\nframe = bpy.context.object\nframe.name = \"Frame\"\nframe.scale.x = 1.14\nframe.scale.y = 0.44\nframe.scale.z = 2.28\nframe.data.materials.append(light_oak)\n\n# Step 3: Create the Shelves\nfor i in range(5):\n    z = 0.38 * (i - 2.5)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, z + 1.3))\n    shelf = bpy.context.object\n    shelf.name = f\"Shelf {i + 1}\"\n    shelf.scale.x = 1.14\n    shelf.scale.y = 0.44\n    shelf.scale.z = 0.04\n    shelf.data.materials.append(light_oak)\n\n# Step 4: Create the Lower Shelf\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.14))\nlower_shelf = bpy.context.object\nlower_shelf.name = \"Lower Shelf\"\nlower_shelf.scale.x = 1.14\nlower_shelf.scale.y = 0.44\nlower_shelf.scale.z = 0.56\nlower_shelf.data.materials.append(light_oak)"}
{"id": "seed_tasks_105", "name": "Rocket", "instruction": "Could you create a rocket for me, highlighting its pointed nose cone, cylindrical body, and with thrusters at the base, all in a vibrant red color?", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nvibrant_red = bpy.data.materials.new(name=\"Vibrant Red\")\nvibrant_red.diffuse_color = (1, 0, 0, 1)  # Vibrant red color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=1.5, location=(0, 0, 0.75))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(vibrant_red)\n\n# Step 3: Create the Nose Cone\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.5, depth=0.5, location=(0, 0, 1.75))\nnose_cone = bpy.context.object\nnose_cone.name = \"Nose Cone\"\nnose_cone.data.materials.append(vibrant_red)\n\n# Step 4: Create the Thrusters\nfor i in range(2):\n    x = 0.3 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.1, location=(x, 0, -0.05))\n    thruster = bpy.context.object\n    thruster.name = f\"Thruster {i + 1}\"\n    thruster.data.materials.append(vibrant_red)"}
{"id": "seed_tasks_106", "name": "Watercolors", "instruction": "Alright, let's begin crafting our 3D object. The watercolor set is rectangular, about the size of a small book, with a glossy dark wooden casing. Inside, there are 12 rectangular watercolor pans in two rows of six, with colors: red, orange, yellow, green, blue, indigo, violet, black, white, brown, pink, and gray. A small paintbrush with a slender wooden handle rests in a groove at the top. The lid doubles as a mixing palette with a smooth, white surface. There is also a small compartment on the side for a tiny sponge.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = [\n    (1, 0, 0, 1),  # Red\n    (1, 0.5, 0, 1),  # Orange\n    (1, 1, 0, 1),  # Yellow\n    (0, 1, 0, 1),  # Green\n    (0, 0, 1, 1),  # Blue\n    (0.3, 0, 0.5, 1),  # Indigo\n    (0.5, 0, 0.5, 1),  # Violet\n    (0, 0, 0, 1),  # Black\n    (1, 1, 1, 1),  # White\n    (0.6, 0.3, 0, 1),  # Brown\n    (1, 0.7, 0.7, 1),  # Pink\n    (0.5, 0.5, 0.5, 1)  # Gray\n]\n\n# Step 2: Create the Casing\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncasing = bpy.context.object\ncasing.name = \"Casing\"\ncasing.scale = (0.6, 0.4, 0.05)\n# Assign a glossy dark wood texture to the casing.\n\n# Step 3: Create the Watercolor Pans\nfor i in range(12):\n    x = -0.25 + 0.1 * (i % 6)\n    y = -0.15 + 0.3 * (i // 6)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, 0.05))\n    pan = bpy.context.object\n    pan.name = f\"Pan {i + 1}\"\n    pan.scale = (0.05, 0.03, 0.01)\n    color = bpy.data.materials.new(name=f\"Color {i + 1}\")\n    color.diffuse_color = colors[i]\n    pan.data.materials.append(color)\n\n# Step 4: Create the Paintbrush\nbpy.ops.mesh.primitive_cylinder_add(radius=0.005, depth=0.3, location=(0, 0.3, 0.05))\nhandle = bpy.context.object\nhandle.name = \"Paintbrush Handle\"\n# Assign a wood texture to the handle.\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.005, radius2=0, depth=0.05, location=(0, 0.3, 0.2))\nbristles = bpy.context.object\nbristles.name = \"Paintbrush Bristles\"\ncolor = bpy.data.materials.new(name=\"Bristles Color\")\ncolor.diffuse_color = (1, 1, 1, 1)\nbristles.data.materials.append(color)\n\n# Step 5: Create the Lid/Mixing Palette\nbpy.ops.object.duplicate_move(OBJECT_OT_duplicate={\"linked\":False, \"mode\":'TRANSLATION'}, TRANSFORM_OT_translate={\"value\":(0, 0, 0.1)})\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.rotation_euler = (math.pi, 0, 0)\n# Assign a white color to the inner surface of the lid.\n\n# Step 6: Create the Sponge Compartment\nbpy.ops.mesh.primitive_cube_add(size=1, location=(-0.35, 0.2, 0.05))\ncompartment = bpy.context.object\ncompartment.name = \"Sponge Compartment\"\ncompartment.scale = (0.1, 0.1, 0.05)\n# Assign a dark wood texture to the sponge compartment."}
{"id": "seed_tasks_107", "name": "Gloves", "instruction": "Design a pair of gloves with individual fingers in a vibrant red color.", "category": "Articles of clothing and haberdashery", "instruction_type": "Outlook Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the color\nvibrant_red = bpy.data.materials.new(name=\"Vibrant Red\")\nvibrant_red.diffuse_color = (1, 0, 0, 1)  # Vibrant red color\n\n# Step 2: Create the Fingers\nfinger_names = ['Thumb', 'Index Finger', 'Middle Finger', 'Ring Finger', 'Little Finger']\nfinger_lengths = [0.125, 0.175, 0.175, 0.175, 0.175]\nfor i in range(5):\n    x = 0.04 * (i - 2)\n    y = 0.0875 if i != 0 else 0\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=finger_lengths[i], location=(x, y, 0.0875), rotation=(math.pi/2, 0, 0))\n    finger = bpy.context.object\n    finger.name = finger_names[i]\n    finger.data.materials.append(vibrant_red)\n\n# Step 3: Create the Wrist\nbpy.ops.mesh.primitive_cylinder_add(radius=0.125, depth=0.125, location=(0, -0.1, 0.1))\nwrist = bpy.context.object\nwrist.name = \"Wrist\"\nwrist.data.materials.append(vibrant_red)"}
{"id": "seed_tasks_108", "name": "Microscope", "instruction": "Dear software, I would like you to create a 3D model of a microscope. The microscope should have a cylindrical body, a circular eyepiece slightly larger than the body, a prominent adjustment knob, and a heavy, sturdy base. Please place a slide under the lens.", "category": "Medical and laboratory equipment", "instruction_type": "Comparing Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbrass = bpy.data.materials.new(name=\"Brass\")\nbrass.diffuse_color = (0.8, 0.6, 0.3, 1)  # Brass color\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.diffuse_color = (1, 1, 1, 0)  # Transparent color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -0.5))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.scale.x = 2.5\nbase.scale.y = 1.5\nbase.data.materials.append(brass)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=10, location=(0, 0, 5))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(brass)\n\n# Step 4: Create the Eyepiece\nbpy.ops.mesh.primitive_cylinder_add(radius=0.75, depth=1, location=(0, 0, 10.5))\neyepiece = bpy.context.object\neyepiece.name = \"Eyepiece\"\neyepiece.data.materials.append(brass)\n\n# Step 5: Create the Adjustment Knob\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(0.75, 0, 7.5))\nknob = bpy.context.object\nknob.name = \"Adjustment Knob\"\nknob.data.materials.append(brass)\n\n# Step 6: Create the Slide\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.5))\nslide = bpy.context.object\nslide.name = \"Slide\"\nslide.scale.x = 1.5\nslide.scale.y = 0.5\nslide.data.materials.append(transparent)\n\n# Step 7: Create the Lens\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.25, location=(0, 0, 1))\nlens = bpy.context.object\nlens.name = \"Lens\"\nlens.data.materials.append(transparent)"}
{"id": "seed_tasks_109", "name": "Collars", "instruction": "Let's start the creative process of designing our 3D collar. Create a circular band with an inner diameter of 15 cm and a thickness of 1 cm.\n\nNow, let's move on to the design. Add a series of 3D triangles at the front, decreasing in size towards the back. Extrude the triangles out from the base band by 1 cm.\n\nLastly, carve a small spiral pattern on each triangle. The overall design should be symmetrical, and the material should be polished silver.", "category": "Articles for the care and handling of animals", "instruction_type": "Design Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Base Band\nbpy.ops.mesh.primitive_torus_add(major_radius=7.5, minor_radius=0.5, location=(0, 0, 0))\nbase_band = bpy.context.object\nbase_band.name = \"Base Band\"\nbase_band.data.materials.append(silver)"}
{"id": "seed_tasks_110", "name": "Bed", "instruction": "I'd like to see a 3D model of a bed. The bed is rectangular, 7 feet long and 4 feet wide. The bed frame and headboard are in a deep mahogany color. The mattress and two pillows are off-white. The bed covers are sky blue. The legs are sturdy and thick, also in mahogany.", "category": "Furnishing", "instruction_type": "Outlook Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmahogany = bpy.data.materials.new(name=\"Mahogany\")\nmahogany.diffuse_color = (0.26, 0.14, 0.09, 1)  # Dark mahogany color\noff_white = bpy.data.materials.new(name=\"Off White\")\noff_white.diffuse_color = (0.96, 0.96, 0.86, 1)  # Off white color\nsky_blue = bpy.data.materials.new(name=\"Sky Blue\")\nsky_blue.diffuse_color = (0.53, 0.81, 0.92, 1)  # Sky blue color\n\n# Step 2: Create the Bed Frame\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbed_frame = bpy.context.object\nbed_frame.scale = (2.1, 1.2, 0.1)\nbed_frame.name = \"Bed Frame\"\nbed_frame.data.materials.append(mahogany)\n\n# Step 3: Create the Mattress\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.15))\nmattress = bpy.context.object\nmattress.scale = (2.0, 1.1, 0.2)\nmattress.name = \"Mattress\"\nmattress.data.materials.append(off_white)\n\n# Step 4: Create the Bed Covers\n# The bed covers are represented as a draped mesh over the mattress\n# This requires more complex modeling techniques and is not included in this basic script\n\n# Step 5: Create the Pillows\nfor i in range(2):\n    x = 0.8 * (i - 0.5)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 0.35))\n    pillow = bpy.context.object\n    pillow.scale = (0.5, 0.3, 0.1)\n    pillow.name = f\"Pillow {i + 1}\"\n    pillow.data.materials.append(off_white)\n\n# Step 6: Create the Headboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.6, 0.5))\nheadboard = bpy.context.object\nheadboard.scale = (2.1, 0.05, 1.0)\nheadboard.name = \"Headboard\"\nheadboard.data.materials.append(mahogany)\n\n# Step 7: Create the Legs\nfor i in range(4):\n    x = 2.1 * (i % 2) - 1.05\n    y = 1.2 * (i // 2) - 0.55\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, y, -0.15))\n    leg = bpy.context.object\n    leg.scale = (0.1, 0.1, 0.3)\n    leg.name = f\"Leg {i + 1}\"\n    leg.data.materials.append(mahogany)"}
{"id": "seed_tasks_111", "name": "CD/DVD Drive", "instruction": "Alright mate, let's get this show on the road, shall we? I need you to whip up a CD/DVD Drive. It should be rectangular with a button on the front and a small hole for manual opening. The color is classic black.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nmetallic = bpy.data.materials.new(name=\"Metallic\")\nmetallic.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.scale = (5.75, 8, 1.63)\nmain_body.name = \"Main Body\"\nmain_body.data.materials.append(black)\n\n# Step 3: Create the Front Panel\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, -4, 0))\nfront_panel = bpy.context.object\nfront_panel.scale = (5.75, 1, 1.63)\nfront_panel.name = \"Front Panel\"\nfront_panel.data.materials.append(black)\n\n# Step 4: Create the Eject Button\nbpy.ops.mesh.primitive_cylinder_add(radius=0.2, depth=0.1, location=(2.5, -4, 0.5))\neject_button = bpy.context.object\neject_button.name = \"Eject Button\"\neject_button.data.materials.append(black)\n\n# Step 5: Create the Manual Eject Hole\nbpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=0.1, location=(2.5, -4, 0.2))\nmanual_eject_hole = bpy.context.object\nmanual_eject_hole.name = \"Manual Eject Hole\"\nmanual_eject_hole.data.materials.append(black)\n\n# Step 6: Create the Disc Tray\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -3.5, 0))\ndisc_tray = bpy.context.object\ndisc_tray.scale = (5.5, 7.5, 0.1)\ndisc_tray.name = \"Disc Tray\"\ndisc_tray.data.materials.append(metallic)"}
{"id": "seed_tasks_112", "name": "Compass", "instruction": "Alright, let's get started on creating this compass. The compass features a circular black base, four inches in diameter. The needle is a thin, bright red triangle, attached at the center. The cardinal directions (N, S, E, W) are engraved in white. The base has thin silver rings around the edge and center.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Outlook Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=1, depth=0.1, location=(0, 0, 0))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(black)\n\n# Step 3: Create the Compass Needle\nbpy.ops.mesh.primitive_cone_add(vertices=3, radius1=0.01, radius2=0, depth=0.5, location=(0, 0, 0.1))\nneedle = bpy.context.object\nneedle.name = \"Needle\"\nneedle.data.materials.append(red)\n\n# Step 4: Create the Cardinal Directions\nfor i, direction in enumerate(['N', 'S', 'E', 'W']):\n    angle = i * math.pi / 2\n    x = 1.1 * math.sin(angle)\n    y = 1.1 * math.cos(angle)\n    bpy.ops.object.text_add(location=(x, y, 0.1), rotation=(math.pi/2, 0, angle + math.pi/2))\n    text = bpy.context.object\n    text.name = direction\n    text.data.body = direction\n    text.data.materials.append(white)\n\n# Step 5: Create the Accents\nbpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.05, location=(0, 0, 0.05))\nring1 = bpy.context.object\nring1.name = \"Ring 1\"\nring1.data.materials.append(silver)\n\nbpy.ops.mesh.primitive_torus_add(major_radius=0.1, minor_radius=0.02, location=(0, 0, 0.1))\nring2 = bpy.context.object\nring2.name = \"Ring 2\"\nring2.data.materials.append(silver)"}
{"id": "seed_tasks_113", "name": "Hats", "instruction": "Let's create a hat with a broad, slightly curved brim. The crown should be tall, slightly pointed, tapering gently towards the top. Add a broad satin ribbon around the base of the crown with a bow off-center. The hat should be made of textured straw with delicate floral patterns on the brim.", "category": "Articles of clothing and haberdashery", "instruction_type": "Decoration Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbeige = bpy.data.materials.new(name=\"Beige\")\nbeige.diffuse_color = (0.96, 0.87, 0.70, 1)  # Light beige color\ncontrasting_color = bpy.data.materials.new(name=\"Contrasting Color\")\ncontrasting_color.diffuse_color = (0.0, 0.0, 0.0, 1)  # Black color for contrast\n\n# Step 2: Create the Brim\nbpy.ops.mesh.primitive_torus_add(major_radius=10, minor_radius=1, location=(0, 0, 0))\nbrim = bpy.context.object\nbrim.name = \"Brim\"\nbrim.data.materials.append(beige)\n\n# Step 3: Create the Crown\nbpy.ops.mesh.primitive_cone_add(vertices=64, radius1=5, radius2=1, depth=3, location=(0, 0, 1.5))\ncrown = bpy.context.object\ncrown.name = \"Crown\"\ncrown.data.materials.append(beige)\n\n# Step 4: Create the Ribbon\nbpy.ops.mesh.primitive_torus_add(major_radius=5, minor_radius=0.1, location=(0, 0, 1))\nribbon = bpy.context.object\nribbon.name = \"Ribbon\"\nribbon.data.materials.append(contrasting_color)\n\n# Step 5: Create the Bow\nfor i in range(2):\n    x = 0.5 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_torus_add(major_radius=0.5, minor_radius=0.1, location=(x, 0, 1))\n    bow = bpy.context.object\n    bow.name = f\"Bow {i + 1}\"\n    bow.data.materials.append(contrasting_color)"}
{"id": "seed_tasks_114", "name": "Centrifuge", "instruction": "Please create a 3D model of a centrifuge. The centrifuge should have a solid, heavy base and light tubes.", "category": "Medical and laboratory equipment", "instruction_type": "Feeling Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetal = bpy.data.materials.new(name=\"Metal\")\nmetal.diffuse_color = (0.8, 0.8, 0.8, 1)  # Metallic color\nglass = bpy.data.materials.new(name=\"Glass\")\nglass.diffuse_color = (1, 1, 1, 1)  # Glass color\n\n# Step 2: Create the Base\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.15, location=(0, 0, -0.075))\nbase = bpy.context.object\nbase.name = \"Base\"\nbase.data.materials.append(metal)\n\n# Step 3: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.6, location=(0, 0, 0.3))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metal)\n\n# Step 4: Create the Rotor\nbpy.ops.mesh.primitive_cylinder_add(radius=0.4, depth=0.05, location=(0, 0, 0.35))\nrotor = bpy.context.object\nrotor.name = \"Rotor\"\nrotor.data.materials.append(metal)\n\n# Step 5: Create the Tubes\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 0.35 * math.cos(angle)\n    y = 0.35 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.15, location=(x, y, 0.35))\n    tube = bpy.context.object\n    tube.name = f\"Tube {i + 1}\"\n    tube.data.materials.append(glass)\n\n# Step 6: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.6, depth=0.05, location=(0, 0, 0.6))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(metal)"}
{"id": "seed_tasks_115", "name": "Desktop Computer", "instruction": "Alright, let's create a classic desktop computer. Start with the monitor: it's a rectangular shape with a flat screen, approximately 27 inches diagonally and with a thin bezel. The screen is glossy black when off.\n\nNow, for the computer case: it's a rectangular box, wider than tall, in matte black with a textured finish. The front features USB ports, a power button, and an optical drive slot. One side is transparent to reveal internal components.\n\nThe keyboard is full-sized with a right-side number pad, square keys, and soft white illumination. The mouse is ergonomic and matte black to match the computer case.\n\nLastly, include two small, cylindrical speakers in glossy black with silver trim, one on each side of the monitor.\n\nEnsure everything is proportionate and aesthetically pleasing, with a sleek, modern design.", "category": "Recording, telecommunication or data processing equipment", "instruction_type": "Outlook Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nglossy_black = bpy.data.materials.new(name=\"Glossy Black\")\nglossy_black.diffuse_color = (0, 0, 0, 1)  # Glossy black color\nmatte_black = bpy.data.materials.new(name=\"Matte Black\")\nmatte_black.diffuse_color = (0.1, 0.1, 0.1, 1)  # Matte black color\n\n# Step 2: Create the Monitor\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0.175))\nmonitor = bpy.context.object\nmonitor.name = \"Monitor\"\nmonitor.scale.x = 0.6\nmonitor.scale.y = 0.05\nmonitor.scale.z = 0.35\nmonitor.data.materials.append(glossy_black)\n\n# Step 3: Create the Computer Case\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0.75, 0.4, 0.225))\ncase = bpy.context.object\ncase.name = \"Computer Case\"\ncase.scale.x = 0.5\ncase.scale.y = 0.25\ncase.scale.z = 0.45\ncase.data.materials.append(matte_black)\n\n# Step 4: Create the Keyboard\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.2, 0.01))\nkeyboard = bpy.context.object\nkeyboard.name = \"Keyboard\"\nkeyboard.scale.x = 0.45\nkeyboard.scale.y = 0.15\nkeyboard.scale.z = 0.02\nkeyboard.data.materials.append(matte_black)\n\n# Step 5: Create the Mouse\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.05, location=(0.2, -0.2, 0.025))\nmouse = bpy.context.object\nmouse.name = \"Mouse\"\nmouse.scale.x = 0.125\nmouse.scale.y = 0.075\nmouse.scale.z = 0.05\nmouse.data.materials.append(matte_black)\n\n# Step 6: Create the Speakers\nfor i in range(2):\n    x = 0.7 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.075, depth=0.15, location=(x, 0, 0.075))\n    speaker = bpy.context.object\n    speaker.name = f\"Speaker {i + 1}\"\n    speaker.data.materials.append(glossy_black)"}
{"id": "seed_tasks_116", "name": "Water Filter", "instruction": "Alright, let's make this interesting. Let's create a 3D model of a water filter. The filter is a jug-style, tall and sleek with a sturdy handle. \n\nThe filter part is cylindrical and located at the top inside the jug. Show a cutaway view to see the filter inside the jug.\n\nGive it a transparent body to see the water filtering process. In the end, show a full jug of clear water.", "category": "Travel goods, cases, parasols and personal belongings, not elsewhere specified", "instruction_type": "Verbal Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the materials\ntransparent = bpy.data.materials.new(name=\"Transparent\")\ntransparent.use_nodes = True\nfor node in transparent.node_tree.nodes:\n    transparent.node_tree.nodes.remove(node)\ntransparent_output = transparent.node_tree.nodes.new(type='ShaderNodeOutputMaterial')\nglass_bsdf = transparent.node_tree.nodes.new(type='ShaderNodeBsdfGlass')\nglass_bsdf.inputs[0].default_value = (1, 1, 1, 1)  # White color\nglass_bsdf.inputs[1].default_value = 0  # Roughness\nglass_bsdf.inputs[2].default_value = 1.45  # IOR (Glass)\ntransparent.node_tree.links.new(transparent_output.inputs[0], glass_bsdf.outputs[0])\n\n# Step 2: Create the Jug\nbpy.ops.mesh.primitive_cylinder_add(radius=0.25, depth=0.5, location=(0, 0, 0))\njug = bpy.context.object\njug.name = \"Jug\"\njug.data.materials.append(transparent)\n\n# Create the Handle\nbpy.ops.mesh.primitive_torus_add(location=(0.25, 0, 0.2), rotation=(0, math.pi/2, 0), major_radius=0.1, minor_radius=0.02)\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(transparent)\n\n# Step 3: Create the Filter\nbpy.ops.mesh.primitive_cylinder_add(radius=0.24, depth=0.2, location=(0, 0, 0.25))\nfilter = bpy.context.object\nfilter.name = \"Filter\"\nfilter.data.materials.append(transparent)"}
{"id": "seed_tasks_117", "name": "Orange", "instruction": "Hey there, could you make a 3D model of an orange? Show it in the middle of a bounce.", "category": "Foodstuffs", "instruction_type": "Verbal Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\norange = bpy.data.materials.new(name=\"Orange\")\norange.diffuse_color = (1, 0.5, 0, 1)  # Orange color\ndark_gray = bpy.data.materials.new(name=\"Dark Gray\")\ndark_gray.diffuse_color = (0.2, 0.2, 0.2, 1)  # Dark gray color\n\n# Step 2: Create the Orange\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 0.15))\norange_obj = bpy.context.object\norange_obj.name = \"Orange\"\norange_obj.data.materials.append(orange)\norange_obj.scale.z = 0.9  # Apply distortion to represent the bounce\n\n# Step 3: Create the Shadow\nbpy.ops.mesh.primitive_circle_add(radius=0.15, location=(0, 0, 0))\nshadow = bpy.context.object\nshadow.name = \"Shadow\"\nshadow.data.materials.append(dark_gray)\nshadow.scale.x = 1.2  # Stretch the shadow slightly in the x-direction\nshadow.scale.y = 0.8  # Compress the shadow slightly in the y-direction"}
{"id": "seed_tasks_118", "name": "Scented Sachets", "instruction": "Let's create a set of scented sachets. The sachets should be small, lightweight, and made of breathable fabric like cotton or linen. Fill each sachet with different aromatic materials such as dried lavender, rose petals, or eucalyptus leaves. The sachets should be sealable with a drawstring or zipper and have a simple, functional design. They should be rectangular or square-shaped with a small loop or hook for hanging.", "category": "Household goods, not elsewhere specified", "instruction_type": "Specific Usage Question", "instruction_length": "medium", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nneutral_color = bpy.data.materials.new(name=\"Neutral Color\")\nneutral_color.diffuse_color = (0.8, 0.8, 0.8, 1)  # Neutral color\n\n# Step 2: Create the Sachet Body\nbpy.ops.mesh.primitive_cube_add(size=0.2, location=(0, 0, 0))\nsachet_body = bpy.context.object\nsachet_body.name = \"Sachet Body\"\nsachet_body.data.materials.append(neutral_color)\n\n# Step 3: Create the Drawstring or Zipper\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.2, location=(0, 0, 0.1))\ndrawstring_zipper = bpy.context.object\ndrawstring_zipper.name = \"Drawstring or Zipper\"\ndrawstring_zipper.data.materials.append(neutral_color)\n\n# Step 4: Create the Loop or Hook\nbpy.ops.mesh.primitive_torus_add(location=(0.1, 0, 0), major_radius=0.03, minor_radius=0.01)\nloop_hook = bpy.context.object\nloop_hook.name = \"Loop or Hook\"\nloop_hook.data.materials.append(neutral_color)"}
{"id": "seed_tasks_119", "name": "Waistband", "instruction": "Hey, let's get started on creating this 3D object, a waistband. The waistband should be 34 inches long, appearing stretched with some wrinkling. It should be thick and sturdy, in a deep blue color with white stitching.", "category": "Articles of clothing and haberdashery", "instruction_type": "Verbal Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_blue = bpy.data.materials.new(name=\"Deep Blue\")\ndeep_blue.diffuse_color = (0, 0, 0.5, 1)  # Deep blue color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Waistband\nbpy.ops.mesh.primitive_torus_add(major_radius=5.4, minor_radius=0.1, major_segments=48, minor_segments=12)\nwaistband = bpy.context.object\nwaistband.name = \"Waistband\"\nwaistband.data.materials.append(deep_blue)\n\n# Step 3: Sculpting the Waistband is a manual process and can't be done via script\n\n# Step 4: Create the Tag\nbpy.ops.mesh.primitive_plane_add(size=1, location=(5.4, 0, 0))\ntag = bpy.context.object\ntag.name = \"Tag\"\ntag.scale.x = 0.1\ntag.scale.y = 0.05\ntag.data.materials.append(white)\n\n# Step 5: Add the Text\nbpy.ops.object.text_add(location=(5.4, 0, 0.1))\nsize_text = bpy.context.object\nsize_text.name = \"Size Text\"\nsize_text.data.body = \"34\"\nsize_text.data.materials.append(black)\n\nbpy.ops.object.text_add(location=(5.4, 0, -0.1))\nwashing_instructions_text = bpy.context.object\nwashing_instructions_text.name = \"Washing Instructions Text\"\nwashing_instructions_text.data.body = \"Wash Cold\"\nwashing_instructions_text.data.materials.append(black)"}
{"id": "seed_tasks_120", "name": "Pressure Cooker", "instruction": "Create a 3D model of a pressure cooker. It is round, holds up to 6 quarts, and has a handle on top. It features a locking lid with a pressure release valve and safety lock. There is a digital control panel on the front. The inner pot is removable.", "category": "Machines and appliances for preparing food or drink, not elsewhere specified", "instruction_type": "Specific Usage Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.6, location=(0, 0, -0.3))\nbody = bpy.context.object\nbody.name = \"Body\"\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.dimensions = (0.3, 0.05, 0.02)\n\n# Step 4: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=0.5, depth=0.02, location=(0, 0, -0.01))\nlid = bpy.context.object\nlid.name = \"Lid\"\n\n# Step 5: Create the Control Panel\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, -0.55, -0.25))\npanel = bpy.context.object\npanel.name = \"Control Panel\"\npanel.dimensions = (0.2, 0.1, 0.01)\n\n# Step 6: Create the Inner Pot\nbpy.ops.mesh.primitive_cylinder_add(radius=0.475, depth=0.58, location=(0, 0, -0.29))\npot = bpy.context.object\npot.name = \"Inner Pot\""}
{"id": "seed_tasks_121", "name": "Ladder", "instruction": "I need you to generate a 3D model of a ladder. The ladder should be tall enough to reach a standard two-story house, with non-slip rungs and a foldable design. The structure should be robust, in a visible bright color.", "category": "Tools and hardware", "instruction_type": "Specific Usage Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbright_hue = bpy.data.materials.new(name=\"Bright Hue\")\nbright_hue.diffuse_color = (1, 0.5, 0, 1)  # Bright hue color\nsteel = bpy.data.materials.new(name=\"Steel\")\nsteel.diffuse_color = (0.7, 0.7, 0.7, 1)  # Steel color\n\n# Step 2: Create the Frames\nfor i in range(2):\n    x = 0.16 * (i * 2 - 1)\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, 0, 1))\n    frame = bpy.context.object\n    frame.name = f\"Frame {i + 1}\"\n    frame.scale = (0.03, 0.01, 2)\n    frame.data.materials.append(bright_hue)\n\n# Step 3: Create the Rungs\nfor i in range(16):\n    z = 0.12 * (i + 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.3, location=(0, 0, z))\n    rung = bpy.context.object\n    rung.name = f\"Rung {i + 1}\"\n    rung.data.materials.append(bright_hue)\n    rung.rotation_euler[1] = math.pi / 2"}
{"id": "seed_tasks_122", "name": "Whiteboard Marker", "instruction": "Let's get started on creating a 3D model of a whiteboard marker. \n\nThe marker should have a long, cylindrical body, 1.5 cm in diameter and 14 cm in length. The base is flat, and the top tapers into a slanted, chiseled tip. The body is covered in glossy plastic, in a vibrant color like blue or red. \n\nAround the top, below the tip, there's a thin band in white or silver with small, raised dots. The marker has a cap, a smaller cylinder of 3 cm length, matching the body color, with a clip on one side.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Design Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmarker_color = bpy.data.materials.new(name=\"Marker Color\")\nmarker_color.diffuse_color = (0, 0, 1, 1)  # Blue color\nband_color = bpy.data.materials.new(name=\"Band Color\")\nband_color.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Marker Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.0075, depth=0.14, location=(0, 0, 0))\nmarker_body = bpy.context.object\nmarker_body.name = \"Marker Body\"\nmarker_body.data.materials.append(marker_color)\n\n# Step 4: Create the Marker Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.005, depth=0.02, location=(0, 0, 0.08))\nmarker_tip = bpy.context.object\nmarker_tip.name = \"Marker Tip\"\nmarker_tip.data.materials.append(marker_color)\n\n# Step 5: Create the Band\nbpy.ops.mesh.primitive_cylinder_add(radius=0.0075, depth=0.005, location=(0, 0, 0.07))\nband = bpy.context.object\nband.name = \"Band\"\nband.data.materials.append(band_color)\n\n# Step 6: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.0075, depth=0.03, location=(0, 0, 0.11))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(marker_color)\n\n# Step 7: Create the Clip\nbpy.ops.mesh.primitive_cylinder_add(radius=0.001, depth=0.02, location=(0.008, 0, 0.11), rotation=(0, math.pi/2, 0))\nclip = bpy.context.object\nclip.name = \"Clip\"\nclip.data.materials.append(marker_color)"}
{"id": "seed_tasks_123", "name": "Mallet (for xylophones and glockenspiels)", "instruction": "Let's embark on the creative journey of constructing a mallet. The handle should be cylindrical, about 35 cm long and 1.5 cm in diameter, with a gentle wave shape. The head should be spherical but slightly flattened on the sides, with a diameter of about 3 cm. Add a small cylindrical collar at the junction, 1 cm in height and slightly larger in diameter than the handle. The handle should be in a natural wood color, and the head in a vibrant blue.", "category": "Musical instruments", "instruction_type": "Design Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nnatural_wood = bpy.data.materials.new(name=\"Natural Wood\")\nnatural_wood.diffuse_color = (0.65, 0.50, 0.39, 1)  # Natural wood color\nvibrant_blue = bpy.data.materials.new(name=\"Vibrant Blue\")\nvibrant_blue.diffuse_color = (0.0, 0.0, 1.0, 1)  # Vibrant blue color\n\n# Step 2: Create the Handle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.0075, depth=0.35, location=(0, 0, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(natural_wood)\n\n# Add a gentle wave-like curvature to the handle\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.transform.vertex_random(offset=0.01, uniform=0, normal=0, seed=0)\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 3: Create the Head\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.015, location=(0, 0, 0.175))\nhead = bpy.context.object\nhead.name = \"Head\"\nhead.data.materials.append(vibrant_blue)\n\n# Slightly flatten the sides of the sphere\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.mesh.select_all(action='SELECT')\nbpy.ops.transform.resize(value=(1, 0.8, 1))\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Step 4: Create the Collar\nbpy.ops.mesh.primitive_cylinder_add(radius=0.008, depth=0.01, location=(0, 0, 0.165))\ncollar = bpy.context.object\ncollar.name = \"Collar\"\ncollar.data.materials.append(natural_wood)"}
{"id": "seed_tasks_124", "name": "Fountain Pen", "instruction": "Let's start with the main body of the fountain pen. The pen's body is made of sterling silver.\n\nNow, let's move onto the nib of the pen. The nib is shaped like a traditional fountain pen nib and made of 18k gold.\n\nCould the cap of the pen be designed with a clip? The clip is silver to match the body of the pen.\n\nAnd for the final touch, the pen is filled with dark blue ink.\n\nCould you also show the pen both with the cap on and with the cap off?", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feature Question", "instruction_length": "extended", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\ngold = bpy.data.materials.new(name=\"Gold\")\ngold.diffuse_color = (1, 0.84, 0, 1)  # Gold color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=1.0, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Main Body\"\nbody.data.materials.append(silver)\n\n# Step 3: Create the Nib\nbpy.ops.mesh.primitive_cone_add(vertices=16, radius1=0.08, radius2=0.02, depth=0.2, location=(0, 0, -0.6))\nnib = bpy.context.object\nnib.name = \"Nib\"\nnib.data.materials.append(gold)\n\n# Step 4: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.12, depth=0.5, location=(0, 0, 0.75))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(silver)\n\n# Step 5: Create the Clip\nbpy.ops.mesh.primitive_cube_add(size=0.02, location=(0, 0.12, 0.75))\nclip = bpy.context.object\nclip.dimensions = (0.02, 0.02, 0.4)\nclip.name = \"Clip\"\nclip.data.materials.append(silver)"}
{"id": "seed_tasks_125", "name": "Whiteboard", "instruction": "Hey there, let's have some fun with a 3D model, shall we? Create a whiteboard tilted at a slight angle. Add markers of different colors scattered around it, and include drawings and writings on the board.", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Verbal Question", "instruction_length": "extended", "script": "import bpy\nimport math\nimport random\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nred = bpy.data.materials.new(name=\"Red\")\nred.diffuse_color = (1, 0, 0, 1)  # Red color\nblue = bpy.data.materials.new(name=\"Blue\")\nblue.diffuse_color = (0, 0, 1, 1)  # Blue color\ngreen = bpy.data.materials.new(name=\"Green\")\ngreen.diffuse_color = (0, 1, 0, 1)  # Green color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Whiteboard\nbpy.ops.mesh.primitive_plane_add(size=1, location=(0, 0, 0))\nwhiteboard = bpy.context.object\nwhiteboard.name = \"Whiteboard\"\nwhiteboard.scale.x = 1.8\nwhiteboard.scale.y = 1.2\nwhiteboard.data.materials.append(white)\n\n# Step 3: Create the Markers\ncolors = [red, blue, green, black]\nfor i in range(4):\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.25, location=(x, y, 0.125))\n    marker = bpy.context.object\n    marker.name = f\"Marker {i + 1}\"\n    marker.data.materials.append(colors[i])\n\n# Step 4: Create the Drawings and Writings\n# Note: This step is not achievable with bpy and requires manual input or a more complex script\n\n# Step 5: Position the Whiteboard\nwhiteboard.rotation_euler.x = math.radians(15)"}
{"id": "seed_tasks_126", "name": "Hot Air Balloon", "instruction": "Could you please generate a 3D model of a hot air balloon? The balloon features a large, spherical envelope in royal blue, fiery red, sunny yellow, and grassy green. The envelope is connected to a woven wicker basket via sturdy ropes. The basket is spacious enough for two people. Inside the basket, add a propane burner.", "category": "Means of transport or hoisting", "instruction_type": "Feature Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ncolors = ['Royal Blue', 'Fiery Red', 'Sunny Yellow', 'Grassy Green']\nfor color in colors:\n    bpy.data.materials.new(name=color)\n\n# Step 2: Create the Envelope\nbpy.ops.mesh.primitive_uv_sphere_add(radius=30, location=(0, 0, 30))\nenvelope = bpy.context.object\nenvelope.name = \"Envelope\"\nfor i, polygon in enumerate(envelope.data.polygons):\n    polygon.material_index = i % 4\n\n# Step 3: Create the Basket\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -4.5))\nbasket = bpy.context.object\nbasket.name = \"Basket\"\nbasket.scale.x = 6\nbasket.scale.y = 6\nbasket.scale.z = 3\n\n# Step 4: Create the Ropes\nfor i in range(8):\n    angle = i * math.pi / 4\n    x = 3 * math.cos(angle)\n    y = 3 * math.sin(angle)\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=10, location=(x, y, 15))\n    rope = bpy.context.object\n    rope.name = f\"Rope {i + 1}\"\n\n# Step 5: Create the Propane Burner\nbpy.ops.mesh.primitive_cylinder_add(radius=2, depth=2, location=(0, 0, -6))\nburner = bpy.context.object\nburner.name = \"Propane Burner\"\n\n# Step 6: Apply Shadows and Light Effects\nbpy.ops.object.light_add(type='SUN', location=(10, -10, 10))\nlight = bpy.context.object\nlight.data.energy = 3\nlight.data.color = (1, 0.9, 0.8)"}
{"id": "seed_tasks_127", "name": "Apple", "instruction": "Create an apple with a slightly wider bottom than top, about 8 centimeters in diameter. The apple should be a deep red, fading to a paler shade near the top. The stem is 2 centimeters long, deep brown, and slightly curved. Add a single teardrop-shaped green leaf next to the stem. The apple should have a subtle shine.", "category": "Foodstuffs", "instruction_type": "Decoration Question", "instruction_length": "long", "script": "import bpy\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_red = bpy.data.materials.new(name=\"Deep Red\")\ndeep_red.diffuse_color = (0.8, 0, 0, 1)  # Deep red color\npale_red = bpy.data.materials.new(name=\"Pale Red\")\npale_red.diffuse_color = (1, 0.5, 0.5, 1)  # Pale red color\ndeep_brown = bpy.data.materials.new(name=\"Deep Brown\")\ndeep_brown.diffuse_color = (0.4, 0.2, 0.1, 1)  # Deep brown color\nvibrant_green = bpy.data.materials.new(name=\"Vibrant Green\")\nvibrant_green.diffuse_color = (0, 0.8, 0, 1)  # Vibrant green color\n\n# Step 2: Create the Main Body of the Apple\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.4, location=(0, 0, 0))\napple = bpy.context.object\napple.name = \"Apple\"\napple.scale[2] = 0.9  # Scale the apple along the z-axis\napple.data.materials.append(deep_red)\napple.data.materials.append(pale_red)\nfor polygon in apple.data.polygons:\n    if polygon.center[2] > 0:\n        polygon.material_index = 1  # Assign the pale red color to the top of the apple\n\n# Step 3: Create the Stem of the Apple\nbpy.ops.mesh.primitive_cylinder_add(radius=0.01, depth=0.04, location=(0, 0, 0.42))\nstem = bpy.context.object\nstem.name = \"Stem\"\nstem.data.materials.append(deep_brown)\n\n# Step 4: Create the Leaf of the Apple\nbpy.ops.mesh.primitive_plane_add(size=0.1, location=(-0.02, 0, 0.42))\nleaf = bpy.context.object\nleaf.name = \"Leaf\"\nleaf.rotation_euler = (0, 1.57, 0)  # Rotate the leaf\nleaf.data.materials.append(vibrant_green)\n\n# Step 5: Add a Subtle Shine to the Apple\napple.data.materials[\"Deep Red\"].specular_intensity = 0.5\napple.data.materials[\"Deep Red\"].roughness = 0.1\napple.data.materials[\"Pale Red\"].specular_intensity = 0.5\napple.data.materials[\"Pale Red\"].roughness = 0.1"}
{"id": "seed_tasks_128", "name": "Cufflinks", "instruction": "Create a pair of 3D cufflinks with a classic round shape and a three-dimensional hexagonal pattern. The color is deep gunmetal grey. The toggle is a simple bar with a small sphere at the end, featuring the same hexagonal pattern.", "category": "Articles of clothing and haberdashery", "instruction_type": "Design Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngunmetal_grey = bpy.data.materials.new(name=\"Gunmetal Grey\")\ngunmetal_grey.diffuse_color = (0.16, 0.16, 0.18, 1)  # Gunmetal grey color\n\n# Step 2: Create the Main Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.375, depth=0.05, location=(0, 0, 0))\nmain_body = bpy.context.object\nmain_body.name = \"Main Body 1\"\nmain_body.data.materials.append(gunmetal_grey)\n\n# Apply hexagonal pattern to the main body\n# This step is not straightforward in Blender and may require additional steps or a custom script\n\n# Step 3: Create the Toggle\nbpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.5, location=(0, 0, -0.275))\ntoggle = bpy.context.object\ntoggle.name = \"Toggle 1\"\ntoggle.data.materials.append(gunmetal_grey)\n\n# Step 4: Create the Spherical Element\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.125, location=(0, 0, -0.65))\nsphere = bpy.context.object\nsphere.name = \"Sphere 1\"\nsphere.data.materials.append(gunmetal_grey)\n\n# Apply hexagonal pattern to the sphere\n# This step is not straightforward in Blender and may require additional steps or a custom script\n\n# Step 5: Add the Signature Design Element\n# This step is not straightforward in Blender and may require additional steps or a custom script\n\n# Step 6: Duplicate the Cufflink\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.duplicate_move(OBJECT_OT_duplicate={\"linked\":False, \"mode\":'TRANSLATION'}, TRANSFORM_OT_translate={\"value\":(2, 0, 0)})\n\n# Step 7: Rename Objects for Clarity\nfor i, obj in enumerate(bpy.data.objects):\n    if i > 2:\n        obj.name = obj.name.replace(\"1\", \"2\")"}
{"id": "seed_tasks_129", "name": "Highlighter", "instruction": "Imagine with me, if you will, the sensation of holding a highlighter in your hand. This tool, so often overlooked yet so vital in our daily tasks. Begin the model with the shape, a long cylinder, like a finger. \n\nNext, consider the cap. It's slightly textured, with ridges that you can feel under your fingertips. The cap is also a bit sturdier, a bit heavier than the rest of the highlighter. It provides a counterbalance, a grounding point. \n\nFinally, the tip of the highlighter, the part that kisses the paper with a splash of color. It's soft, and squishy, it bends under pressure. It's a different texture entirely, almost sponge-like. \n\nAnd the color, oh the color! A vibrant, neon hue that screams of attention. ", "category": "Stationery and office equipment, artists' and teaching materials", "instruction_type": "Feeling Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nneon = bpy.data.materials.new(name=\"Neon\")\nneon.diffuse_color = (0.8, 1, 0, 1)  # Neon color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.25, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(neon)\n\n# Step 3: Create the Cap\nbpy.ops.mesh.primitive_cylinder_add(radius=0.03, depth=0.075, location=(0, 0, 0.1625))\ncap = bpy.context.object\ncap.name = \"Cap\"\ncap.data.materials.append(neon)\n\n# Step 4: Create the Tip\nbpy.ops.mesh.primitive_cone_add(vertices=32, radius1=0.025, radius2=0, depth=0.015, location=(0, 0, -0.1325))\ntip = bpy.context.object\ntip.name = \"Tip\"\ntip.data.materials.append(white)"}
{"id": "seed_tasks_130", "name": "Sphygmomanometer ", "instruction": "Hello there, I need a 3D model of a sphygmomanometer. It should have an adjustable cuff, a dial to display pressure, a pump, and a pressure release valve.", "category": "Medical and laboratory equipment", "instruction_type": "Specific Usage Question", "instruction_length": "medium", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ngrey = bpy.data.materials.new(name=\"Grey\")\ngrey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Grey color\nwhite = bpy.data.materials.new(name=\"White\")\nwhite.diffuse_color = (1, 1, 1, 1)  # White color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Cuff\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\ncuff = bpy.context.object\ncuff.scale = (2.2, 0.6, 0.1)\ncuff.name = \"Cuff\"\ncuff.data.materials.append(grey)\n\n# Step 3: Create the Dial\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.02, location=(-1.1, 0, 0))\ndial = bpy.context.object\ndial.name = \"Dial\"\ndial.data.materials.append(white)\n\n# Step 4: Create the Pump\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(1.1, 0, 0))\npump = bpy.context.object\npump.name = \"Pump\"\npump.data.materials.append(black)\n\n# Step 5: Create the Pressure Release Valve\nbpy.ops.mesh.primitive_cylinder_add(radius=0.025, depth=0.1, location=(1.1, 0.2, 0))\nvalve = bpy.context.object\nvalve.name = \"Valve\"\nvalve.data.materials.append(silver)"}
{"id": "seed_tasks_131", "name": "Tape Measure", "instruction": "Can you create a tape measure made out of heavy-duty metal? The tape itself should be thin, like cloth but rigid.", "category": "Tools and hardware", "instruction_type": "Feeling Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_silver = bpy.data.materials.new(name=\"Metallic Silver\")\nmetallic_silver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Metallic silver color\nbright_yellow = bpy.data.materials.new(name=\"Bright Yellow\")\nbright_yellow.diffuse_color = (1, 1, 0, 1)  # Bright yellow color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cylinder_add(radius=0.125, depth=0.05, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.data.materials.append(metallic_silver)\n\n# Step 3: Create the Tape\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0.625, 0))\ntape = bpy.context.object\ntape.name = \"Tape\"\ntape.scale.x = 0.0375\ntape.scale.y = 1.25\ntape.scale.z = 0.001\ntape.data.materials.append(bright_yellow)"}
{"id": "seed_tasks_132", "name": "Can", "instruction": "Good day, dear software! We have a fun task ahead of us today. I'm thinking of creating a can. Let's get started!\n\nFirst off, let's make it cylindrical with the diameter of the base smaller than the diameter of the top. \n\nAnd let's add a handle to it. A curved handle that extends from the top to the middle of the can. \n\nNow, for the texture. Let's make it crinkled and metallic with a soft, warm glow.\n\nAs for the color, let's make it a rich, deep blue.\n\nFinally, let's put a lid on it. A lid that fits snugly, but can be easily removed, with a small, silver knob in the middle.\n\nAnd there we have it, a can that's not just a can, but a work of art.", "category": "Tools and hardware", "instruction_type": "Feature Question", "instruction_length": "long", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\ndeep_blue = bpy.data.materials.new(name=\"Deep Blue\")\ndeep_blue.diffuse_color = (0.0, 0.0, 0.5, 1)  # Deep blue color\nsilver = bpy.data.materials.new(name=\"Silver\")\nsilver.diffuse_color = (0.75, 0.75, 0.75, 1)  # Silver color\n\n# Step 2: Create the Body of the Can\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=6, location=(0, 0, 3))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale.x = 0.833  # Scale the base to be smaller than the top\nbody.data.materials.append(deep_blue)\n\n# Step 3: Create the Handle\nbpy.ops.mesh.primitive_torus_add(location=(0, 0, 4.5), rotation=(0, math.pi/2, 0))\nhandle = bpy.context.object\nhandle.name = \"Handle\"\nhandle.data.materials.append(deep_blue)\n\n# Step 4: Add the Design\n# This step is highly dependent on the specific design and is therefore left as a placeholder\n# bpy.ops.sculpt.sculptmode_toggle()\n# bpy.ops.sculpt.brush_select(sculpt_tool='DRAW')\n# bpy.ops.sculpt.stroke()\n\n# Step 5: Create the Lid\nbpy.ops.mesh.primitive_cylinder_add(radius=1.5, depth=0.2, location=(0, 0, 6.1))\nlid = bpy.context.object\nlid.name = \"Lid\"\nlid.data.materials.append(deep_blue)\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(0, 0, 6.3))\nknob = bpy.context.object\nknob.name = \"Knob\"\nknob.data.materials.append(silver)"}
{"id": "seed_tasks_133", "name": "Scarifier", "instruction": "Begin by creating a rectangle for the body of the scarifier, then place a cylinder on top to represent the engine. Use diamond-shaped 3D objects for the tines, arranged in two parallel lines underneath the body.", "category": "Tools and hardware", "instruction_type": "Design Question", "instruction_length": "short", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nmetallic_grey = bpy.data.materials.new(name=\"Metallic Grey\")\nmetallic_grey.diffuse_color = (0.5, 0.5, 0.5, 1)  # Metallic grey color\nblack = bpy.data.materials.new(name=\"Black\")\nblack.diffuse_color = (0, 0, 0, 1)  # Black color\n\n# Step 2: Create the Body\nbpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\nbody = bpy.context.object\nbody.name = \"Body\"\nbody.scale = (0.6, 0.3, 0.15)\nbody.data.materials.append(metallic_grey)\n\n# Step 3: Create the Engine\nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, depth=0.2, location=(0, 0, 0.175))\nengine = bpy.context.object\nengine.name = \"Engine\"\nengine.data.materials.append(metallic_grey)\n\n# Step 4: Create the Tines\nfor i in range(8):\n    x = 0.2 * (i % 2) - 0.1\n    y = 0.1 * (i // 2) - 0.15\n    bpy.ops.mesh.primitive_cone_add(vertices=4, radius1=0.025, depth=0.05, location=(x, y, -0.075))\n    tine = bpy.context.object\n    tine.name = f\"Tine {i + 1}\"\n    tine.data.materials.append(black)"}
{"id": "seed_tasks_134", "name": "Baozi", "instruction": "Hey, I've got a bit of a challenge for you. Can you whip up a 3D model of a Baozi for me? \n\nCan you show me a 3D animation where the dough is kneaded, rolled into a circle, filled, and then pinched at the top to form the Baozi? \n\nAnd here's the fun part, can you make the Baozi appear steaming hot with steam rising from the top? That would be perfect. \n\nSo, how about it? Can you give this a try?", "category": "Foodstuffs", "instruction_type": "Verbal Question", "instruction_length": "extended", "script": "import bpy\nimport math\n\n# Step 1: Clear the Scene\nbpy.ops.object.select_all(action='DESELECT')\nbpy.ops.object.select_by_type(type='MESH')\nbpy.ops.object.delete()\n\n# Define the colors\nbeige = bpy.data.materials.new(name=\"Beige\")\nbeige.diffuse_color = (0.96, 0.87, 0.70, 1)  # Beige color\nfilling_color = bpy.data.materials.new(name=\"Filling Color\")\nfilling_color.diffuse_color = (0.65, 0.16, 0.16, 1)  # Brown color\n\n# Step 2: Create the Dough\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.3, location=(0, 0, 0))\ndough = bpy.context.object\ndough.name = \"Dough\"\ndough.data.materials.append(beige)\n\n# Step 3: Animate the Kneading and Rolling\n# This step requires advanced knowledge of animation in Blender and cannot be easily represented in a script.\n\n# Step 4: Create the Filling\nbpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))\nfilling = bpy.context.object\nfilling.name = \"Filling\"\nfilling.data.materials.append(filling_color)\n\n# Step 5: Animate the Formation of Baozi\n# This step requires advanced knowledge of animation in Blender and cannot be easily represented in a script.\n\n# Step 6: Animate the Steaming\n# This step requires advanced knowledge of particle systems in Blender and cannot be easily represented in a script."}
